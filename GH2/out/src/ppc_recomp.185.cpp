#include "ppc_recomp_shared.h"

__attribute__((alias("__imp__sub_8270B068"))) PPC_WEAK_FUNC(sub_8270B068);
PPC_FUNC_IMPL(__imp__sub_8270B068) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	// mflr r12
	// bl 0x8239bcf4
	// addi r31,r3,16
	r31.s64 = ctx.r3.s64 + 16;
	// lvx128 v11,r0,r3
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r9,r3,r4
	ctx.r9.u64 = ctx.r3.u64 + ctx.r4.u64;
	// lvsl v7,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// rlwinm r11,r4,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// vspltisb v0,0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_set1_epi8(char(0x0)));
	// rlwinm r10,r4,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// vspltish v12,1
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// vspltish v13,2
	// lvx128 v10,r0,r31
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r31,r9,16
	r31.s64 = ctx.r9.s64 + 16;
	// add r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 + ctx.r3.u64;
	// vperm v6,v11,v10,v7
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// addi r28,r11,16
	r28.s64 = r11.s64 + 16;
	// lvx128 v11,r0,r9
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r30,r11,r4
	r30.u64 = r11.u64 + ctx.r4.u64;
	// addi r9,r10,16
	ctx.r9.s64 = ctx.r10.s64 + 16;
	// lvx128 v9,r0,r11
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v10,r0,r31
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// cmpwi cr6,r7,8
	cr6.compare<int32_t>(ctx.r7.s32, 8, xer);
	// vperm v10,v11,v10,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvsl v5,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// lvx128 v11,r0,r28
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r30,16
	r11.s64 = r30.s64 + 16;
	// vperm v9,v9,v11,v5
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// lvx128 v11,r0,r10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v8,r0,r9
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r1,-80
	ctx.r7.s64 = ctx.r1.s64 + -80;
	// lvsl v7,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v10,v0,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vperm v8,v11,v8,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v7,r0,r30
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v4,r0,r11
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsrah v11,v1,v13
	// lvsl v5,r0,r30
	temp.u32 = r30.u32;
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v1,v0,v6
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vperm v5,v7,v4,v5
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// add r11,r5,r6
	r11.u64 = ctx.r5.u64 + ctx.r6.u64;
	// vmrghb v7,v0,v8
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// rlwinm r29,r6,1,0,30
	r29.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// vmrghb v9,v0,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// add r31,r29,r5
	r31.u64 = r29.u64 + ctx.r5.u64;
	// vmrghb v8,v0,v5
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v5,v10,v12
	// vslh v2,v7,v12
	// add r9,r31,r6
	ctx.r9.u64 = r31.u64 + ctx.r6.u64;
	// vslh v4,v9,v12
	// vaddshs v5,v5,v10
	_mm_store_si128((__m128i*)ctx.v5.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v5.s16), _mm_load_si128((__m128i*)ctx.v10.s16)));
	// vslh v3,v8,v12
	// vaddshs v6,v2,v7
	_mm_store_si128((__m128i*)ctx.v6.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v2.s16), _mm_load_si128((__m128i*)ctx.v7.s16)));
	// vaddshs v4,v4,v9
	_mm_store_si128((__m128i*)ctx.v4.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v4.s16), _mm_load_si128((__m128i*)ctx.v9.s16)));
	// vaddshs v5,v5,v1
	_mm_store_si128((__m128i*)ctx.v5.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v5.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// vaddshs v3,v3,v8
	_mm_store_si128((__m128i*)ctx.v3.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v3.s16), _mm_load_si128((__m128i*)ctx.v8.s16)));
	// vaddshs v8,v6,v8
	_mm_store_si128((__m128i*)ctx.v8.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v6.s16), _mm_load_si128((__m128i*)ctx.v8.s16)));
	// vaddshs v10,v4,v10
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v4.s16), _mm_load_si128((__m128i*)ctx.v10.s16)));
	// vaddshs v6,v5,v11
	_mm_store_si128((__m128i*)ctx.v6.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v5.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vaddshs v9,v3,v9
	_mm_store_si128((__m128i*)ctx.v9.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v3.s16), _mm_load_si128((__m128i*)ctx.v9.s16)));
	// vaddshs v8,v8,v11
	_mm_store_si128((__m128i*)ctx.v8.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v8.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vaddshs v10,v10,v11
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// stvx v6,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r1,-64
	ctx.r7.s64 = ctx.r1.s64 + -64;
	// vaddshs v9,v9,v11
	_mm_store_si128((__m128i*)ctx.v9.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v9.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vsrah v6,v6,v13
	// vsrah v10,v10,v13
	// stvx v9,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsrah v9,v9,v13
	// vpkshus v10,v6,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v6.s16)));
	// addi r7,r1,-80
	ctx.r7.s64 = ctx.r1.s64 + -80;
	// stvx v10,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsrah v10,v8,v13
	// addi r30,r1,-64
	r30.s64 = ctx.r1.s64 + -64;
	// vpkshus v10,v9,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v9.s16)));
	// stvx v10,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r7,-80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + -80);
	// lwz r30,-72(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + -72);
	// stw r7,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, ctx.r7.u32);
	// stw r30,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r30.u32);
	// lwz r7,-64(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + -64);
	// lwz r30,-56(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + -56);
	// stw r7,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r7.u32);
	// stw r30,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r30.u32);
	// bne cr6,0x8270b1e0
	if (!cr6.eq) goto loc_8270B1E0;
	// lwz r7,-76(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + -76);
	// lwz r30,-68(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + -68);
	// lwz r28,-60(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + -60);
	// lwz r27,-52(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + -52);
	// stw r7,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r7.u32);
	// stw r30,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r30.u32);
	// stw r28,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r28.u32);
	// stw r27,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, r27.u32);
loc_8270B1E0:
	// cmpwi cr6,r8,8
	cr6.compare<int32_t>(ctx.r8.s32, 8, xer);
	// bne cr6,0x8270b328
	if (!cr6.eq) goto loc_8270B328;
	// add r11,r10,r4
	r11.u64 = ctx.r10.u64 + ctx.r4.u64;
	// rlwinm r10,r4,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r8,r11,16
	ctx.r8.s64 = r11.s64 + 16;
	// add r9,r10,r3
	ctx.r9.u64 = ctx.r10.u64 + ctx.r3.u64;
	// add r10,r11,r4
	ctx.r10.u64 = r11.u64 + ctx.r4.u64;
	// addi r7,r9,16
	ctx.r7.s64 = ctx.r9.s64 + 16;
	// lvx128 v10,r0,r11
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v6,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r11,r10,r4
	r11.u64 = ctx.r10.u64 + ctx.r4.u64;
	// lvx128 v8,r0,r8
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v10,v10,v8,v6
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvx128 v9,r0,r9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v6,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r9,r10,16
	ctx.r9.s64 = ctx.r10.s64 + 16;
	// lvx128 v8,r0,r7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v9,v9,v8,v6
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvx128 v8,r0,r10
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v6,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r10,r11,16
	ctx.r10.s64 = r11.s64 + 16;
	// vmrghb v10,v0,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v5,r0,r9
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-64
	ctx.r9.s64 = ctx.r1.s64 + -64;
	// vperm v6,v8,v5,v6
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvsl v5,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v8,v0,v9
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v9,r0,r11
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v4,r0,r10
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r10,r29,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// vperm v5,v9,v4,v5
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// vmrghb v9,v0,v6
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v6,v10,v12
	// vslh v4,v8,v12
	// add r11,r10,r5
	r11.u64 = ctx.r10.u64 + ctx.r5.u64;
	// add r10,r10,r31
	ctx.r10.u64 = ctx.r10.u64 + r31.u64;
	// vmrghb v0,v0,v5
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v5,v9,v12
	// add r8,r10,r6
	ctx.r8.u64 = ctx.r10.u64 + ctx.r6.u64;
	// vaddshs v6,v6,v10
	_mm_store_si128((__m128i*)ctx.v6.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v6.s16), _mm_load_si128((__m128i*)ctx.v10.s16)));
	// vaddshs v4,v4,v8
	_mm_store_si128((__m128i*)ctx.v4.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v4.s16), _mm_load_si128((__m128i*)ctx.v8.s16)));
	// vslh v12,v0,v12
	// vaddshs v8,v5,v9
	_mm_store_si128((__m128i*)ctx.v8.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v5.s16), _mm_load_si128((__m128i*)ctx.v9.s16)));
	// vaddshs v7,v6,v7
	_mm_store_si128((__m128i*)ctx.v7.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v6.s16), _mm_load_si128((__m128i*)ctx.v7.s16)));
	// vaddshs v12,v12,v0
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// vaddshs v10,v8,v10
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v8.s16), _mm_load_si128((__m128i*)ctx.v10.s16)));
	// vaddshs v0,v4,v0
	_mm_store_si128((__m128i*)ctx.v0.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v4.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// vaddshs v12,v12,v9
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v9.s16)));
	// vaddshs v9,v7,v11
	_mm_store_si128((__m128i*)ctx.v9.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v7.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vaddshs v10,v10,v11
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vaddshs v0,v0,v11
	_mm_store_si128((__m128i*)ctx.v0.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v0.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vaddshs v12,v12,v11
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// stvx v9,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-80
	ctx.r9.s64 = ctx.r1.s64 + -80;
	// vsrah v11,v9,v13
	// vsrah v10,v10,v13
	// vsrah v0,v0,v13
	// stvx v12,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsrah v12,v12,v13
	// vpkshus v11,v11,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// add r9,r11,r6
	ctx.r9.u64 = r11.u64 + ctx.r6.u64;
	// vpkshus v0,v12,v0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v0.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// addi r7,r1,-64
	ctx.r7.s64 = ctx.r1.s64 + -64;
	// stvx v11,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r1,-80
	ctx.r7.s64 = ctx.r1.s64 + -80;
	// stvx v0,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r7,-64(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + -64);
	// lwz r6,-60(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + -60);
	// lwz r5,-56(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + -56);
	// lwz r4,-52(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + -52);
	// stw r7,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r7.u32);
	// stw r6,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r6.u32);
	// stw r5,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r5.u32);
	// stw r4,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r4.u32);
	// lwz r11,-80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + -80);
	// lwz r9,-76(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + -76);
	// lwz r7,-72(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + -72);
	// lwz r6,-68(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + -68);
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// stw r7,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r7.u32);
	// stw r6,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r6.u32);
loc_8270B328:
	// b 0x8239bd44
	return;
}

__attribute__((alias("__imp__sub_8270B32C"))) PPC_WEAK_FUNC(sub_8270B32C);
PPC_FUNC_IMPL(__imp__sub_8270B32C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8270B330"))) PPC_WEAK_FUNC(sub_8270B330);
PPC_FUNC_IMPL(__imp__sub_8270B330) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	// mflr r12
	// bl 0x8239bcf8
	// add r10,r3,r4
	ctx.r10.u64 = ctx.r3.u64 + ctx.r4.u64;
	// lvx128 v12,r0,r3
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r3,16
	ctx.r9.s64 = ctx.r3.s64 + 16;
	// lvsl v7,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// rlwinm r11,r4,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// vspltisb v0,0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_set1_epi8(char(0x0)));
	// addi r29,r10,16
	r29.s64 = ctx.r10.s64 + 16;
	// vspltish v13,2
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// cmpwi cr6,r7,8
	cr6.compare<int32_t>(ctx.r7.s32, 8, xer);
	// lvx128 v11,r0,r9
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r11,16
	r28.s64 = r11.s64 + 16;
	// vperm v12,v12,v11,v7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v11,r0,r10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v10,r0,r29
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r31,r11,r4
	r31.u64 = r11.u64 + ctx.r4.u64;
	// lvsl v7,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r7,r1,-80
	ctx.r7.s64 = ctx.r1.s64 + -80;
	// vperm v10,v11,v10,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v9,r0,r11
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r11,r31,16
	r11.s64 = r31.s64 + 16;
	// lvx128 v11,r0,r28
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r30,r6,1,0,30
	r30.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// vperm v9,v9,v11,v7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v8,r0,r31
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v11,v0,v12
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvsl v6,r0,r31
	temp.u32 = r31.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrglb v7,v0,v12
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vsrah v12,v1,v13
	// lvx128 v5,r0,r11
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v4,v0,v10
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vperm v8,v8,v5,v6
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// add r9,r30,r5
	ctx.r9.u64 = r30.u64 + ctx.r5.u64;
	// vmrglb v5,v0,v9
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// add r11,r5,r6
	r11.u64 = ctx.r5.u64 + ctx.r6.u64;
	// vsldoi v7,v11,v7,2
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8), 14));
	// add r10,r9,r6
	ctx.r10.u64 = ctx.r9.u64 + ctx.r6.u64;
	// vmrghb v9,v0,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrglb v6,v0,v10
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vor v10,v4,v4
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_load_si128((__m128i*)ctx.v4.u8));
	// vmrglb v4,v0,v8
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vsubshs v7,v7,v11
	// vmrghb v8,v0,v8
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vsldoi v5,v9,v5,2
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v5.u8), 14));
	// vsldoi v6,v10,v6,2
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v6.u8), 14));
	// vaddshs v7,v7,v12
	_mm_store_si128((__m128i*)ctx.v7.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v7.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// vsldoi v4,v8,v4,2
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v4.u8), 14));
	// vsubshs v5,v5,v9
	// vsubshs v6,v6,v10
	// vsrah v7,v7,v13
	// vaddshs v5,v5,v12
	_mm_store_si128((__m128i*)ctx.v5.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v5.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// vaddshs v6,v6,v12
	_mm_store_si128((__m128i*)ctx.v6.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v6.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// vsubshs v4,v4,v8
	// stvx v7,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r1,-64
	ctx.r7.s64 = ctx.r1.s64 + -64;
	// vsrah v5,v5,v13
	// vsrah v6,v6,v13
	// vaddshs v4,v4,v12
	_mm_store_si128((__m128i*)ctx.v4.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v4.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// vaddshs v11,v7,v11
	_mm_store_si128((__m128i*)ctx.v11.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v7.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// stvx v5,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vaddshs v9,v5,v9
	_mm_store_si128((__m128i*)ctx.v9.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v5.s16), _mm_load_si128((__m128i*)ctx.v9.s16)));
	// vaddshs v10,v6,v10
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v6.s16), _mm_load_si128((__m128i*)ctx.v10.s16)));
	// vsrah v4,v4,v13
	// vpkshus v11,v11,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vaddshs v8,v4,v8
	_mm_store_si128((__m128i*)ctx.v8.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v4.s16), _mm_load_si128((__m128i*)ctx.v8.s16)));
	// vpkshus v10,v9,v8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v8.s16), _mm_load_si128((__m128i*)ctx.v9.s16)));
	// addi r7,r1,-80
	ctx.r7.s64 = ctx.r1.s64 + -80;
	// stvx v11,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r1,-64
	ctx.r7.s64 = ctx.r1.s64 + -64;
	// stvx v10,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r7,-80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + -80);
	// lwz r31,-72(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + -72);
	// lwz r29,-64(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + -64);
	// lwz r28,-56(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + -56);
	// stw r7,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, ctx.r7.u32);
	// stw r31,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r31.u32);
	// stw r29,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r29.u32);
	// stw r28,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r28.u32);
	// bne cr6,0x8270b498
	if (!cr6.eq) goto loc_8270B498;
	// lwz r7,-76(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + -76);
	// lwz r31,-68(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + -68);
	// lwz r29,-60(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + -60);
	// lwz r28,-52(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + -52);
	// stw r7,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r7.u32);
	// stw r31,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r31.u32);
	// stw r29,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, r29.u32);
	// stw r28,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r28.u32);
loc_8270B498:
	// cmpwi cr6,r8,8
	cr6.compare<int32_t>(ctx.r8.s32, 8, xer);
	// bne cr6,0x8270b5f0
	if (!cr6.eq) goto loc_8270B5F0;
	// rlwinm r11,r4,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r7,r1,-80
	ctx.r7.s64 = ctx.r1.s64 + -80;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// addi r8,r11,16
	ctx.r8.s64 = r11.s64 + 16;
	// add r10,r11,r4
	ctx.r10.u64 = r11.u64 + ctx.r4.u64;
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r11,r10,r4
	r11.u64 = ctx.r10.u64 + ctx.r4.u64;
	// lvx128 v10,r0,r8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r10,16
	ctx.r8.s64 = ctx.r10.s64 + 16;
	// vperm v11,v11,v10,v7
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v10,r0,r10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r10,r11,r4
	ctx.r10.u64 = r11.u64 + ctx.r4.u64;
	// vmrglb v8,v0,v11
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v9,r0,r8
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v11,v0,v11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// addi r8,r11,16
	ctx.r8.s64 = r11.s64 + 16;
	// vperm v10,v10,v9,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v9,r0,r11
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r11,r10,16
	r11.s64 = ctx.r10.s64 + 16;
	// lvsl v5,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vsldoi v8,v11,v8,2
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v8.u8), 14));
	// lvx128 v6,r0,r8
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v9,v9,v6,v7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v4,r0,r11
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrglb v7,v0,v10
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vsubshs v6,v8,v11
	// lvx128 v8,r0,r10
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v8,v8,v4,v5
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// rlwinm r10,r30,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// vmrglb v5,v0,v9
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v9,v0,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// add r11,r10,r5
	r11.u64 = ctx.r10.u64 + ctx.r5.u64;
	// vaddshs v6,v6,v12
	_mm_store_si128((__m128i*)ctx.v6.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v6.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// vmrghb v10,v0,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrglb v4,v0,v8
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// vmrghb v0,v0,v8
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// addi r9,r1,-64
	ctx.r9.s64 = ctx.r1.s64 + -64;
	// vsldoi v8,v9,v5,2
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v5.u8), 14));
	// add r8,r10,r6
	ctx.r8.u64 = ctx.r10.u64 + ctx.r6.u64;
	// vsrah v6,v6,v13
	// vsldoi v7,v10,v7,2
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v7.u8), 14));
	// vsldoi v5,v0,v4,2
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v4.u8), 14));
	// vsubshs v8,v8,v9
	// stvx v6,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsubshs v7,v7,v10
	// add r9,r11,r6
	ctx.r9.u64 = r11.u64 + ctx.r6.u64;
	// vsubshs v5,v5,v0
	// vaddshs v8,v8,v12
	_mm_store_si128((__m128i*)ctx.v8.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v8.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// vaddshs v7,v7,v12
	_mm_store_si128((__m128i*)ctx.v7.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v7.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// vaddshs v12,v5,v12
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v5.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// vsrah v8,v8,v13
	// vsrah v7,v7,v13
	// vsrah v13,v12,v13
	// stvx v8,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vaddshs v12,v6,v11
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v6.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vaddshs v11,v7,v10
	_mm_store_si128((__m128i*)ctx.v11.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v7.s16), _mm_load_si128((__m128i*)ctx.v10.s16)));
	// vaddshs v0,v13,v0
	_mm_store_si128((__m128i*)ctx.v0.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v13.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// vpkshus v12,v12,v11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// addi r7,r1,-64
	ctx.r7.s64 = ctx.r1.s64 + -64;
	// stvx v12,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vaddshs v12,v8,v9
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v8.s16), _mm_load_si128((__m128i*)ctx.v9.s16)));
	// vpkshus v0,v12,v0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v0.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// addi r5,r1,-80
	ctx.r5.s64 = ctx.r1.s64 + -80;
	// stvx v0,r0,r5
	_mm_store_si128((__m128i*)(base + ((ctx.r5.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r7,-64(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + -64);
	// lwz r6,-60(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + -60);
	// lwz r5,-56(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + -56);
	// lwz r4,-52(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + -52);
	// stw r7,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r7.u32);
	// stw r6,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r6.u32);
	// stw r5,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r5.u32);
	// stw r4,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r4.u32);
	// lwz r11,-80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + -80);
	// lwz r9,-76(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + -76);
	// lwz r7,-72(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + -72);
	// lwz r6,-68(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + -68);
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// stw r7,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r7.u32);
	// stw r6,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r6.u32);
loc_8270B5F0:
	// b 0x8239bd48
	return;
}

__attribute__((alias("__imp__sub_8270B5F4"))) PPC_WEAK_FUNC(sub_8270B5F4);
PPC_FUNC_IMPL(__imp__sub_8270B5F4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8270B5F8"))) PPC_WEAK_FUNC(sub_8270B5F8);
PPC_FUNC_IMPL(__imp__sub_8270B5F8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCVRegister v25{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	PPCRegister temp{};
	// mflr r12
	// bl 0x8239bcf4
	// vspltish v13,2
	// rlwinm r31,r6,1,0,30
	r31.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// vspltisb v0,0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_set1_epi8(char(0x0)));
	// cmpwi cr6,r8,8
	cr6.compare<int32_t>(ctx.r8.s32, 8, xer);
	// vspltish v12,1
	// add r9,r31,r5
	ctx.r9.u64 = r31.u64 + ctx.r5.u64;
	// vsrah v11,v1,v13
	// bgt cr6,0x8270b798
	if (cr6.gt) goto loc_8270B798;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x8270b928
	if (!cr6.gt) goto loc_8270B928;
	// addi r11,r8,-1
	r11.s64 = ctx.r8.s64 + -1;
	// rlwinm r30,r31,1,0,30
	r30.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r11,r11,30,2,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 30) & 0x3FFFFFFF;
	// rlwinm r29,r4,1,0,30
	r29.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r31,r11,1
	r31.s64 = r11.s64 + 1;
loc_8270B63C:
	// add r8,r3,r4
	ctx.r8.u64 = ctx.r3.u64 + ctx.r4.u64;
	// lvx128 v10,r0,r3
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r3,16
	ctx.r10.s64 = ctx.r3.s64 + 16;
	// lvsl v7,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r11,r29,r3
	r11.u64 = r29.u64 + ctx.r3.u64;
	// addi r3,r8,16
	ctx.r3.s64 = ctx.r8.s64 + 16;
	// addi r28,r11,16
	r28.s64 = r11.s64 + 16;
	// lvx128 v8,r0,r8
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// cmpwi cr6,r7,8
	cr6.compare<int32_t>(ctx.r7.s32, 8, xer);
	// lvx128 v9,r0,r10
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r10,r11,r4
	ctx.r10.u64 = r11.u64 + ctx.r4.u64;
	// vperm v10,v10,v9,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvsl v4,r0,r8
	temp.u32 = ctx.r8.u32;
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// lvx128 v5,r0,r3
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v6,r0,r11
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v9,v8,v5,v4
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v4.u8)));
	// lvx128 v3,r0,r28
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v2,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r11,r10,16
	r11.s64 = ctx.r10.s64 + 16;
	// vperm v8,v6,v3,v2
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)ctx.v2.u8)));
	// lvx128 v7,r0,r10
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrglb v6,v0,v10
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvsl v1,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v10,v0,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrglb v5,v0,v9
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrglb v4,v0,v8
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v31,r0,r11
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v8,v0,v8
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// addi r11,r1,-112
	r11.s64 = ctx.r1.s64 + -112;
	// vsldoi v6,v10,v6,2
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v6.u8), 14));
	// vmrghb v9,v0,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vperm v7,v7,v31,v1
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// vsldoi v4,v8,v4,2
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v4.u8), 14));
	// vaddshs v10,v10,v6
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v6.s16)));
	// vsldoi v5,v9,v5,2
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v5.u8), 14));
	// vmrglb v3,v0,v7
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vaddshs v8,v8,v4
	_mm_store_si128((__m128i*)ctx.v8.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v8.s16), _mm_load_si128((__m128i*)ctx.v4.s16)));
	// vmrghb v7,v0,v7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v10,v10,v12
	// vaddshs v9,v9,v5
	_mm_store_si128((__m128i*)ctx.v9.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v9.s16), _mm_load_si128((__m128i*)ctx.v5.s16)));
	// vslh v8,v8,v12
	// vsldoi v3,v7,v3,2
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v3.u8), 14));
	// vaddshs v10,v10,v11
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vslh v9,v9,v12
	// vaddshs v8,v8,v11
	_mm_store_si128((__m128i*)ctx.v8.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v8.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// stvx v10,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-96
	r11.s64 = ctx.r1.s64 + -96;
	// vaddshs v7,v7,v3
	_mm_store_si128((__m128i*)ctx.v7.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v7.s16), _mm_load_si128((__m128i*)ctx.v3.s16)));
	// vaddshs v9,v9,v11
	_mm_store_si128((__m128i*)ctx.v9.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v9.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vsrah v10,v10,v13
	// stvx v8,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v7,v7,v12
	// vsrah v9,v9,v13
	// vsrah v8,v8,v13
	// vaddshs v7,v7,v11
	_mm_store_si128((__m128i*)ctx.v7.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v7.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vpkshus v10,v10,v9
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v9.s16), _mm_load_si128((__m128i*)ctx.v10.s16)));
	// vsrah v7,v7,v13
	// vpkshus v9,v8,v7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v7.s16), _mm_load_si128((__m128i*)ctx.v8.s16)));
	// addi r11,r1,-112
	r11.s64 = ctx.r1.s64 + -112;
	// stvx v10,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-96
	r11.s64 = ctx.r1.s64 + -96;
	// stvx v9,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r11,-112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + -112);
	// lwz r8,-104(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + -104);
	// lwz r3,-96(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + -96);
	// lwz r28,-88(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + -88);
	// stw r11,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, r11.u32);
	// stwx r8,r5,r6
	PPC_STORE_U32(ctx.r5.u32 + ctx.r6.u32, ctx.r8.u32);
	// stw r3,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r3.u32);
	// stwx r28,r9,r6
	PPC_STORE_U32(ctx.r9.u32 + ctx.r6.u32, r28.u32);
	// bne cr6,0x8270b77c
	if (!cr6.eq) goto loc_8270B77C;
	// lwz r8,-108(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + -108);
	// addi r11,r6,4
	r11.s64 = ctx.r6.s64 + 4;
	// lwz r3,-100(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + -100);
	// lwz r28,-92(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + -92);
	// lwz r27,-84(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + -84);
	// stw r8,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r8.u32);
	// stwx r3,r11,r5
	PPC_STORE_U32(r11.u32 + ctx.r5.u32, ctx.r3.u32);
	// stw r28,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, r28.u32);
	// stwx r27,r11,r9
	PPC_STORE_U32(r11.u32 + ctx.r9.u32, r27.u32);
loc_8270B77C:
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// add r5,r30,r5
	ctx.r5.u64 = r30.u64 + ctx.r5.u64;
	// add r9,r30,r9
	ctx.r9.u64 = r30.u64 + ctx.r9.u64;
	// add r3,r10,r4
	ctx.r3.u64 = ctx.r10.u64 + ctx.r4.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x8270b63c
	if (!cr6.eq) goto loc_8270B63C;
	// b 0x8239bd44
	return;
loc_8270B798:
	// rlwinm r30,r4,1,0,30
	r30.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// lvsl v7,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// li r9,4
	ctx.r9.s64 = 4;
loc_8270B7A4:
	// add r10,r3,r4
	ctx.r10.u64 = ctx.r3.u64 + ctx.r4.u64;
	// lvx128 v4,r0,r3
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r30,r3
	r11.u64 = r30.u64 + ctx.r3.u64;
	// addi r8,r3,16
	ctx.r8.s64 = ctx.r3.s64 + 16;
	// addi r7,r10,16
	ctx.r7.s64 = ctx.r10.s64 + 16;
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// lvx128 v2,r0,r10
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r10,r11,r4
	ctx.r10.u64 = r11.u64 + ctx.r4.u64;
	// lvx128 v10,r0,r11
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lbz r11,0(r8)
	r11.u64 = PPC_LOAD_U8(ctx.r8.u32 + 0);
	// lvx128 v8,r0,r8
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v9,v4,v8,v7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v6,r0,r7
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lbz r8,0(r3)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r3.u32 + 0);
	// lvx128 v3,r0,r3
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v8,v10,v3,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v5,r0,r10
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v6,v2,v6,v7
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// sth r11,-96(r1)
	PPC_STORE_U16(ctx.r1.u32 + -96, r11.u16);
	// vmrglb v10,v0,v9
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lbz r11,0(r7)
	r11.u64 = PPC_LOAD_U8(ctx.r7.u32 + 0);
	// sth r8,-80(r1)
	PPC_STORE_U16(ctx.r1.u32 + -80, ctx.r8.u16);
	// vmrghb v3,v0,v8
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v2,v0,v6
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// sth r11,-112(r1)
	PPC_STORE_U16(ctx.r1.u32 + -112, r11.u16);
	// addi r11,r10,16
	r11.s64 = ctx.r10.s64 + 16;
	// lvx128 v4,r0,r11
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// vperm v5,v5,v4,v7
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// vmrghb v4,v0,v9
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrglb v9,v0,v8
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrglb v8,v0,v6
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// sth r11,-64(r1)
	PPC_STORE_U16(ctx.r1.u32 + -64, r11.u16);
	// vmrglb v6,v0,v5
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vsldoi v1,v4,v10,2
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v10.u8), 14));
	// vmrghb v5,v0,v5
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vsldoi v31,v2,v8,2
	_mm_store_si128((__m128i*)v31.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v8.u8), 14));
	// vsldoi v28,v3,v9,2
	_mm_store_si128((__m128i*)v28.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)ctx.v9.u8), 14));
	// vaddshs v4,v4,v1
	_mm_store_si128((__m128i*)ctx.v4.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v4.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// vsldoi v27,v5,v6,2
	_mm_store_si128((__m128i*)v27.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v6.u8), 14));
	// vaddshs v2,v2,v31
	_mm_store_si128((__m128i*)ctx.v2.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v2.s16), _mm_load_si128((__m128i*)v31.s16)));
	// vaddshs v3,v3,v28
	_mm_store_si128((__m128i*)ctx.v3.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v3.s16), _mm_load_si128((__m128i*)v28.s16)));
	// vslh v4,v4,v12
	// vaddshs v5,v5,v27
	_mm_store_si128((__m128i*)ctx.v5.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v5.s16), _mm_load_si128((__m128i*)v27.s16)));
	// vslh v2,v2,v12
	// vaddshs v4,v4,v11
	_mm_store_si128((__m128i*)ctx.v4.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v4.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vaddshs v2,v2,v11
	_mm_store_si128((__m128i*)ctx.v2.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v2.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vsrah v4,v4,v13
	// vsrah v2,v2,v13
	// addi r11,r1,-96
	r11.s64 = ctx.r1.s64 + -96;
	// lvx128 v30,r0,r11
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-112
	r11.s64 = ctx.r1.s64 + -112;
	// vsldoi v30,v10,v30,2
	_mm_store_si128((__m128i*)v30.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)v30.u8), 14));
	// vaddshs v10,v10,v30
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)v30.s16)));
	// lvx128 v29,r0,r11
	_mm_store_si128((__m128i*)v29.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-80
	r11.s64 = ctx.r1.s64 + -80;
	// vsldoi v29,v8,v29,2
	_mm_store_si128((__m128i*)v29.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)v29.u8), 14));
	// vslh v10,v10,v12
	// vaddshs v8,v8,v29
	_mm_store_si128((__m128i*)ctx.v8.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v8.s16), _mm_load_si128((__m128i*)v29.s16)));
	// lvx128 v26,r0,r11
	_mm_store_si128((__m128i*)v26.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-64
	r11.s64 = ctx.r1.s64 + -64;
	// vsldoi v26,v9,v26,2
	_mm_store_si128((__m128i*)v26.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)v26.u8), 14));
	// vaddshs v10,v10,v11
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vslh v8,v8,v12
	// vaddshs v9,v9,v26
	_mm_store_si128((__m128i*)ctx.v9.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v9.s16), _mm_load_si128((__m128i*)v26.s16)));
	// lvx128 v25,r0,r11
	_mm_store_si128((__m128i*)v25.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsrah v10,v10,v13
	// vsldoi v25,v6,v25,2
	_mm_store_si128((__m128i*)v25.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)v25.u8), 14));
	// add r11,r31,r5
	r11.u64 = r31.u64 + ctx.r5.u64;
	// vaddshs v8,v8,v11
	_mm_store_si128((__m128i*)ctx.v8.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v8.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vslh v9,v9,v12
	// vpkshus v10,v4,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v4.s16)));
	// vaddshs v6,v6,v25
	_mm_store_si128((__m128i*)ctx.v6.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v6.s16), _mm_load_si128((__m128i*)v25.s16)));
	// vsrah v8,v8,v13
	// vslh v6,v6,v12
	// vpkshus v8,v2,v8
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v8.s16), _mm_load_si128((__m128i*)ctx.v2.s16)));
	// stvx v10,r0,r5
	_mm_store_si128((__m128i*)(base + ((ctx.r5.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vaddshs v10,v9,v11
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v9.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vaddshs v9,v6,v11
	_mm_store_si128((__m128i*)ctx.v9.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v6.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// stvx128 v8,r5,r6
	_mm_store_si128((__m128i*)(base + ((ctx.r5.u32 + ctx.r6.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v8,v3,v12
	// vslh v6,v5,v12
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// vaddshs v8,v8,v11
	_mm_store_si128((__m128i*)ctx.v8.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v8.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// add r3,r10,r4
	ctx.r3.u64 = ctx.r10.u64 + ctx.r4.u64;
	// vsrah v10,v10,v13
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// vsrah v9,v9,v13
	// add r5,r31,r11
	ctx.r5.u64 = r31.u64 + r11.u64;
	// vaddshs v6,v6,v11
	_mm_store_si128((__m128i*)ctx.v6.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v6.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vsrah v8,v8,v13
	// vsrah v6,v6,v13
	// vpkshus v10,v8,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v8.s16)));
	// vpkshus v9,v6,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v9.s16), _mm_load_si128((__m128i*)ctx.v6.s16)));
	// stvx v10,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v9,r11,r6
	_mm_store_si128((__m128i*)(base + ((r11.u32 + ctx.r6.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bne cr6,0x8270b7a4
	if (!cr6.eq) goto loc_8270B7A4;
loc_8270B928:
	// b 0x8239bd44
	return;
}

__attribute__((alias("__imp__sub_8270B92C"))) PPC_WEAK_FUNC(sub_8270B92C);
PPC_FUNC_IMPL(__imp__sub_8270B92C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8270B930"))) PPC_WEAK_FUNC(sub_8270B930);
PPC_FUNC_IMPL(__imp__sub_8270B930) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	PPCRegister temp{};
	// mflr r12
	// bl 0x8239bcf8
	// add r10,r3,r4
	ctx.r10.u64 = ctx.r3.u64 + ctx.r4.u64;
	// lvx128 v11,r0,r3
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r3,16
	ctx.r9.s64 = ctx.r3.s64 + 16;
	// lvsl v7,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// rlwinm r11,r4,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// vspltisb v0,0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_set1_epi8(char(0x0)));
	// addi r29,r10,16
	r29.s64 = ctx.r10.s64 + 16;
	// vspltish v12,1
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// vspltish v13,2
	// cmpwi cr6,r7,8
	cr6.compare<int32_t>(ctx.r7.s32, 8, xer);
	// lvx128 v10,r0,r9
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r11,16
	r28.s64 = r11.s64 + 16;
	// vperm v11,v11,v10,v7
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v10,r0,r10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v8,r0,r29
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r31,r11,r4
	r31.u64 = r11.u64 + ctx.r4.u64;
	// lvsl v7,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// rlwinm r30,r6,1,0,30
	r30.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// vperm v10,v10,v8,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v9,r0,r11
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v8,r0,r28
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrglb v6,v0,v11
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvsl v7,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r11,r31,16
	r11.s64 = r31.s64 + 16;
	// vperm v9,v9,v8,v7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v7,r0,r31
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v8,v0,v11
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvsl v5,r0,r31
	temp.u32 = r31.u32;
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vsrah v11,v1,v13
	// add r9,r30,r5
	ctx.r9.u64 = r30.u64 + ctx.r5.u64;
	// lvx128 v4,r0,r11
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-80
	r11.s64 = ctx.r1.s64 + -80;
	// vsldoi v6,v8,v6,2
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v6.u8), 14));
	// add r10,r9,r6
	ctx.r10.u64 = ctx.r9.u64 + ctx.r6.u64;
	// vperm v7,v7,v4,v5
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// vmrglb v4,v0,v9
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v9,v0,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v2,v6,v12
	// vmrglb v5,v0,v10
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v10,v0,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrglb v3,v0,v7
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vsldoi v4,v9,v4,2
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v4.u8), 14));
	// vaddshs v6,v2,v6
	_mm_store_si128((__m128i*)ctx.v6.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v2.s16), _mm_load_si128((__m128i*)ctx.v6.s16)));
	// vmrghb v7,v0,v7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vsldoi v5,v10,v5,2
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v5.u8), 14));
	// vslh v31,v4,v12
	// vaddshs v8,v6,v8
	_mm_store_si128((__m128i*)ctx.v8.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v6.s16), _mm_load_si128((__m128i*)ctx.v8.s16)));
	// vsldoi v3,v7,v3,2
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v3.u8), 14));
	// vslh v1,v5,v12
	// vaddshs v4,v31,v4
	_mm_store_si128((__m128i*)ctx.v4.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)v31.s16), _mm_load_si128((__m128i*)ctx.v4.s16)));
	// vaddshs v8,v8,v11
	_mm_store_si128((__m128i*)ctx.v8.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v8.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vaddshs v5,v1,v5
	_mm_store_si128((__m128i*)ctx.v5.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v1.s16), _mm_load_si128((__m128i*)ctx.v5.s16)));
	// vslh v30,v3,v12
	// vaddshs v9,v4,v9
	_mm_store_si128((__m128i*)ctx.v9.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v4.s16), _mm_load_si128((__m128i*)ctx.v9.s16)));
	// stvx v8,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-64
	r11.s64 = ctx.r1.s64 + -64;
	// vaddshs v10,v5,v10
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v5.s16), _mm_load_si128((__m128i*)ctx.v10.s16)));
	// vaddshs v3,v30,v3
	_mm_store_si128((__m128i*)ctx.v3.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)v30.s16), _mm_load_si128((__m128i*)ctx.v3.s16)));
	// vaddshs v9,v9,v11
	_mm_store_si128((__m128i*)ctx.v9.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v9.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vsrah v8,v8,v13
	// vaddshs v10,v10,v11
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vaddshs v7,v3,v7
	_mm_store_si128((__m128i*)ctx.v7.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v3.s16), _mm_load_si128((__m128i*)ctx.v7.s16)));
	// stvx v9,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsrah v9,v9,v13
	// add r11,r5,r6
	r11.u64 = ctx.r5.u64 + ctx.r6.u64;
	// vsrah v10,v10,v13
	// vaddshs v7,v7,v11
	_mm_store_si128((__m128i*)ctx.v7.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v7.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vpkshus v10,v8,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v8.s16)));
	// addi r7,r1,-80
	ctx.r7.s64 = ctx.r1.s64 + -80;
	// stvx v10,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsrah v10,v7,v13
	// addi r7,r1,-64
	ctx.r7.s64 = ctx.r1.s64 + -64;
	// vpkshus v10,v9,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v9.s16)));
	// stvx v10,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r7,-80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + -80);
	// lwz r31,-72(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + -72);
	// stw r7,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, ctx.r7.u32);
	// stw r31,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r31.u32);
	// lwz r7,-64(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + -64);
	// lwz r31,-56(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + -56);
	// stw r7,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r7.u32);
	// stw r31,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r31.u32);
	// bne cr6,0x8270baa8
	if (!cr6.eq) goto loc_8270BAA8;
	// lwz r7,-76(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + -76);
	// lwz r31,-68(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + -68);
	// lwz r29,-60(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + -60);
	// lwz r28,-52(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + -52);
	// stw r7,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r7.u32);
	// stw r31,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r31.u32);
	// stw r29,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, r29.u32);
	// stw r28,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r28.u32);
loc_8270BAA8:
	// cmpwi cr6,r8,8
	cr6.compare<int32_t>(ctx.r8.s32, 8, xer);
	// bne cr6,0x8270bc10
	if (!cr6.eq) goto loc_8270BC10;
	// rlwinm r11,r4,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// addi r8,r11,16
	ctx.r8.s64 = r11.s64 + 16;
	// add r10,r11,r4
	ctx.r10.u64 = r11.u64 + ctx.r4.u64;
	// lvx128 v10,r0,r11
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r11,r10,r4
	r11.u64 = ctx.r10.u64 + ctx.r4.u64;
	// lvx128 v9,r0,r8
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r10,16
	ctx.r8.s64 = ctx.r10.s64 + 16;
	// vperm v10,v10,v9,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v9,r0,r10
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r10,r11,r4
	ctx.r10.u64 = r11.u64 + ctx.r4.u64;
	// lvsl v6,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// lvx128 v8,r0,r8
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r11,16
	ctx.r8.s64 = r11.s64 + 16;
	// vperm v9,v9,v8,v7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v8,r0,r11
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r10,16
	r11.s64 = ctx.r10.s64 + 16;
	// lvsl v4,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrglb v7,v0,v10
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v10,v0,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v5,r0,r8
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v8,v8,v5,v6
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvx128 v6,r0,r10
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v3,r0,r11
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrglb v5,v0,v9
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vperm v6,v6,v3,v4
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)ctx.v4.u8)));
	// addi r11,r1,-64
	r11.s64 = ctx.r1.s64 + -64;
	// vmrghb v9,v0,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// rlwinm r10,r30,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// vmrglb v4,v0,v8
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v8,v0,v8
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrglb v3,v0,v6
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v0,v0,v6
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vsldoi v7,v10,v7,2
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v7.u8), 14));
	// vsldoi v5,v9,v5,2
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v5.u8), 14));
	// vsldoi v6,v8,v4,2
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v4.u8), 14));
	// vsldoi v4,v0,v3,2
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v3.u8), 14));
	// vslh v3,v7,v12
	// vslh v2,v5,v12
	// vslh v1,v6,v12
	// vslh v12,v4,v12
	// vaddshs v7,v3,v7
	_mm_store_si128((__m128i*)ctx.v7.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v3.s16), _mm_load_si128((__m128i*)ctx.v7.s16)));
	// vaddshs v5,v2,v5
	_mm_store_si128((__m128i*)ctx.v5.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v2.s16), _mm_load_si128((__m128i*)ctx.v5.s16)));
	// vaddshs v6,v1,v6
	_mm_store_si128((__m128i*)ctx.v6.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v1.s16), _mm_load_si128((__m128i*)ctx.v6.s16)));
	// vaddshs v12,v12,v4
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v4.s16)));
	// vaddshs v10,v7,v10
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v7.s16), _mm_load_si128((__m128i*)ctx.v10.s16)));
	// vaddshs v9,v5,v9
	_mm_store_si128((__m128i*)ctx.v9.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v5.s16), _mm_load_si128((__m128i*)ctx.v9.s16)));
	// vaddshs v8,v6,v8
	_mm_store_si128((__m128i*)ctx.v8.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v6.s16), _mm_load_si128((__m128i*)ctx.v8.s16)));
	// vaddshs v0,v12,v0
	_mm_store_si128((__m128i*)ctx.v0.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// vaddshs v12,v10,v11
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vaddshs v10,v9,v11
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v9.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vaddshs v9,v8,v11
	_mm_store_si128((__m128i*)ctx.v9.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v8.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vaddshs v0,v0,v11
	_mm_store_si128((__m128i*)ctx.v0.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v0.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-80
	r11.s64 = ctx.r1.s64 + -80;
	// vsrah v11,v10,v13
	// vsrah v12,v12,v13
	// vsrah v10,v9,v13
	// vsrah v0,v0,v13
	// stvx v9,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vpkshus v12,v12,v11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// vpkshus v0,v10,v0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v0.s16), _mm_load_si128((__m128i*)ctx.v10.s16)));
	// addi r11,r1,-64
	r11.s64 = ctx.r1.s64 + -64;
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-80
	r11.s64 = ctx.r1.s64 + -80;
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r10,r5
	r11.u64 = ctx.r10.u64 + ctx.r5.u64;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// add r9,r11,r6
	ctx.r9.u64 = r11.u64 + ctx.r6.u64;
	// lwz r8,-64(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + -64);
	// lwz r7,-60(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + -60);
	// lwz r4,-56(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + -56);
	// lwz r3,-52(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + -52);
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// add r8,r10,r6
	ctx.r8.u64 = ctx.r10.u64 + ctx.r6.u64;
	// lwz r31,-80(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + -80);
	// lwz r30,-76(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + -76);
	// lwz r29,-72(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + -72);
	// lwz r28,-68(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + -68);
	// stw r7,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r7.u32);
	// stw r4,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r4.u32);
	// stw r3,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r3.u32);
	// stw r31,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r31.u32);
	// stw r30,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r30.u32);
	// stw r29,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r29.u32);
	// stw r28,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, r28.u32);
loc_8270BC10:
	// b 0x8239bd48
	return;
}

__attribute__((alias("__imp__sub_8270BC14"))) PPC_WEAK_FUNC(sub_8270BC14);
PPC_FUNC_IMPL(__imp__sub_8270BC14) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8270BC18"))) PPC_WEAK_FUNC(sub_8270BC18);
PPC_FUNC_IMPL(__imp__sub_8270BC18) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCVRegister v31{};
	// mflr r12
	// bl 0x8239bcfc
	// addi r31,r3,16
	r31.s64 = ctx.r3.s64 + 16;
	// vspltish v0,1
	// addi r9,r3,96
	ctx.r9.s64 = ctx.r3.s64 + 96;
	// lvx128 v12,r0,r3
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// cmpwi cr6,r6,8
	cr6.compare<int32_t>(ctx.r6.s32, 8, xer);
	// vspltish v13,4
	// addi r6,r1,-48
	ctx.r6.s64 = ctx.r1.s64 + -48;
	// addi r10,r3,48
	ctx.r10.s64 = ctx.r3.s64 + 48;
	// lvx128 v8,r0,r31
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r3,144
	ctx.r8.s64 = ctx.r3.s64 + 144;
	// vsldoi v31,v12,v8,2
	_mm_store_si128((__m128i*)v31.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v8.u8), 14));
	// vslh v8,v12,v0
	// lvx128 v10,r0,r9
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r3,112
	ctx.r9.s64 = ctx.r3.s64 + 112;
	// vslh v6,v10,v0
	// rlwinm r11,r4,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// lvx128 v11,r0,r10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r3,64
	ctx.r10.s64 = ctx.r3.s64 + 64;
	// vaddshs v12,v8,v12
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v8.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// lvx128 v9,r0,r8
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v7,v11,v0
	// addi r8,r3,160
	ctx.r8.s64 = ctx.r3.s64 + 160;
	// lvx128 v3,r0,r9
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-64
	ctx.r9.s64 = ctx.r1.s64 + -64;
	// vsldoi v3,v10,v3,2
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v3.u8), 14));
	// vaddshs v10,v6,v10
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v6.s16), _mm_load_si128((__m128i*)ctx.v10.s16)));
	// vaddshs v12,v12,v31
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)v31.s16)));
	// lvx128 v4,r0,r10
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsldoi v4,v11,v4,2
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v4.u8), 14));
	// vaddshs v11,v7,v11
	_mm_store_si128((__m128i*)ctx.v11.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v7.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vslh v5,v9,v0
	// lvx128 v2,r0,r8
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vaddshs v10,v10,v3
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v3.s16)));
	// vsldoi v2,v9,v2,2
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v2.u8), 14));
	// vaddshs v12,v12,v1
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// add r10,r11,r5
	ctx.r10.u64 = r11.u64 + ctx.r5.u64;
	// vaddshs v11,v11,v4
	_mm_store_si128((__m128i*)ctx.v11.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v4.s16)));
	// vaddshs v9,v5,v9
	_mm_store_si128((__m128i*)ctx.v9.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v5.s16), _mm_load_si128((__m128i*)ctx.v9.s16)));
	// add r8,r10,r4
	ctx.r8.u64 = ctx.r10.u64 + ctx.r4.u64;
	// vaddshs v10,v10,v1
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// stvx v12,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsrah v12,v12,v13
	// vaddshs v11,v11,v1
	_mm_store_si128((__m128i*)ctx.v11.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// add r9,r4,r5
	ctx.r9.u64 = ctx.r4.u64 + ctx.r5.u64;
	// vaddshs v9,v9,v2
	_mm_store_si128((__m128i*)ctx.v9.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v9.s16), _mm_load_si128((__m128i*)ctx.v2.s16)));
	// stvx v10,r0,r6
	_mm_store_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsrah v10,v10,v13
	// vsrah v11,v11,v13
	// vaddshs v9,v9,v1
	_mm_store_si128((__m128i*)ctx.v9.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v9.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// vpkshus v12,v12,v11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// vsrah v9,v9,v13
	// vpkshus v11,v10,v9
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v9.s16), _mm_load_si128((__m128i*)ctx.v10.s16)));
	// addi r6,r1,-64
	ctx.r6.s64 = ctx.r1.s64 + -64;
	// stvx v12,r0,r6
	_mm_store_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r6,r1,-48
	ctx.r6.s64 = ctx.r1.s64 + -48;
	// stvx v11,r0,r6
	_mm_store_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r6,-64(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + -64);
	// lwz r31,-56(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + -56);
	// lwz r30,-48(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + -48);
	// lwz r29,-40(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + -40);
	// stw r6,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, ctx.r6.u32);
	// stw r31,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r31.u32);
	// stw r30,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r30.u32);
	// stw r29,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r29.u32);
	// bne cr6,0x8270bd44
	if (!cr6.eq) goto loc_8270BD44;
	// lwz r6,-60(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + -60);
	// lwz r31,-52(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + -52);
	// lwz r30,-44(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + -44);
	// lwz r29,-36(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + -36);
	// stw r6,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r6.u32);
	// stw r31,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, r31.u32);
	// stw r30,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r30.u32);
	// stw r29,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, r29.u32);
loc_8270BD44:
	// cmpwi cr6,r7,8
	cr6.compare<int32_t>(ctx.r7.s32, 8, xer);
	// bne cr6,0x8270be68
	if (!cr6.eq) goto loc_8270BE68;
	// addi r9,r3,192
	ctx.r9.s64 = ctx.r3.s64 + 192;
	// addi r31,r3,208
	r31.s64 = ctx.r3.s64 + 208;
	// addi r7,r3,288
	ctx.r7.s64 = ctx.r3.s64 + 288;
	// addi r8,r3,240
	ctx.r8.s64 = ctx.r3.s64 + 240;
	// addi r6,r3,336
	ctx.r6.s64 = ctx.r3.s64 + 336;
	// lvx128 v12,r0,r9
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r3,256
	ctx.r9.s64 = ctx.r3.s64 + 256;
	// vslh v8,v12,v0
	// lvx128 v5,r0,r31
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsldoi v5,v12,v5,2
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v5.u8), 14));
	// lvx128 v10,r0,r7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v6,v10,v0
	// lvx128 v11,r0,r8
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v7,v11,v0
	// addi r8,r3,352
	ctx.r8.s64 = ctx.r3.s64 + 352;
	// vaddshs v12,v8,v12
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v8.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// lvx128 v4,r0,r9
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r3,304
	ctx.r9.s64 = ctx.r3.s64 + 304;
	// vsldoi v4,v11,v4,2
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v4.u8), 14));
	// lvx128 v9,r0,r6
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vaddshs v11,v7,v11
	_mm_store_si128((__m128i*)ctx.v11.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v7.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vaddshs v12,v12,v5
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v5.s16)));
	// lvx128 v2,r0,r8
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v0,v9,v0
	// vsldoi v2,v9,v2,2
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v2.u8), 14));
	// lvx128 v3,r0,r9
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-48
	ctx.r9.s64 = ctx.r1.s64 + -48;
	// vsldoi v3,v10,v3,2
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v3.u8), 14));
	// vaddshs v10,v6,v10
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v6.s16), _mm_load_si128((__m128i*)ctx.v10.s16)));
	// vaddshs v12,v12,v1
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// vaddshs v11,v11,v4
	_mm_store_si128((__m128i*)ctx.v11.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v4.s16)));
	// vaddshs v0,v0,v9
	_mm_store_si128((__m128i*)ctx.v0.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v0.s16), _mm_load_si128((__m128i*)ctx.v9.s16)));
	// vaddshs v10,v10,v3
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v3.s16)));
	// stvx v12,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r1,-64
	r11.s64 = ctx.r1.s64 + -64;
	// vaddshs v11,v11,v1
	_mm_store_si128((__m128i*)ctx.v11.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// vsrah v12,v12,v13
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// vaddshs v10,v10,v1
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// vaddshs v0,v0,v2
	_mm_store_si128((__m128i*)ctx.v0.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v0.s16), _mm_load_si128((__m128i*)ctx.v2.s16)));
	// vsrah v11,v11,v13
	// stvx v10,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vaddshs v0,v0,v1
	_mm_store_si128((__m128i*)ctx.v0.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v0.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// vpkshus v12,v12,v11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// vsrah v0,v0,v13
	// addi r11,r1,-48
	r11.s64 = ctx.r1.s64 + -48;
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsrah v12,v10,v13
	// add r11,r9,r5
	r11.u64 = ctx.r9.u64 + ctx.r5.u64;
	// addi r9,r1,-64
	ctx.r9.s64 = ctx.r1.s64 + -64;
	// vpkshus v0,v12,v0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v0.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// stvx v0,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r9,r4,r11
	ctx.r9.u64 = ctx.r4.u64 + r11.u64;
	// lwz r8,-48(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + -48);
	// lwz r7,-44(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + -44);
	// lwz r6,-40(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + -40);
	// lwz r5,-36(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + -36);
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// add r8,r10,r4
	ctx.r8.u64 = ctx.r10.u64 + ctx.r4.u64;
	// stw r7,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r7.u32);
	// stw r6,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r6.u32);
	// stw r5,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r5.u32);
	// lwz r11,-64(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + -64);
	// lwz r7,-60(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + -60);
	// lwz r4,-56(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + -56);
	// lwz r3,-52(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + -52);
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// stw r7,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r7.u32);
	// stw r4,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r4.u32);
	// stw r3,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r3.u32);
loc_8270BE68:
	// b 0x8239bd4c
	return;
}

__attribute__((alias("__imp__sub_8270BE6C"))) PPC_WEAK_FUNC(sub_8270BE6C);
PPC_FUNC_IMPL(__imp__sub_8270BE6C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8270BE70"))) PPC_WEAK_FUNC(sub_8270BE70);
PPC_FUNC_IMPL(__imp__sub_8270BE70) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	// mflr r12
	// bl 0x8239bcf8
	// vspltish v0,1
	// rlwinm r10,r4,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// vspltish v13,4
	// cmpwi cr6,r7,8
	cr6.compare<int32_t>(ctx.r7.s32, 8, xer);
	// bgt cr6,0x8270bfcc
	if (cr6.gt) goto loc_8270BFCC;
	// add r11,r10,r5
	r11.u64 = ctx.r10.u64 + ctx.r5.u64;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// ble cr6,0x8270c104
	if (!cr6.gt) goto loc_8270C104;
	// addi r9,r7,-1
	ctx.r9.s64 = ctx.r7.s64 + -1;
	// rlwinm r8,r10,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r10,r9,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 30) & 0x3FFFFFFF;
	// addi r7,r4,-4
	ctx.r7.s64 = ctx.r4.s64 + -4;
	// addi r9,r10,1
	ctx.r9.s64 = ctx.r10.s64 + 1;
loc_8270BEAC:
	// addi r31,r3,16
	r31.s64 = ctx.r3.s64 + 16;
	// lvx128 v12,r0,r3
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r3,48
	ctx.r10.s64 = ctx.r3.s64 + 48;
	// addi r30,r3,64
	r30.s64 = ctx.r3.s64 + 64;
	// addi r29,r3,96
	r29.s64 = ctx.r3.s64 + 96;
	// addi r28,r3,112
	r28.s64 = ctx.r3.s64 + 112;
	// lvx128 v8,r0,r31
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r31,r3,160
	r31.s64 = ctx.r3.s64 + 160;
	// vsldoi v8,v12,v8,2
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v8.u8), 14));
	// lvx128 v11,r0,r10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r3,144
	ctx.r10.s64 = ctx.r3.s64 + 144;
	// lvx128 v7,r0,r30
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsldoi v7,v11,v7,2
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8), 14));
	// lvx128 v10,r0,r29
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v6,r0,r28
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// cmpwi cr6,r6,8
	cr6.compare<int32_t>(ctx.r6.s32, 8, xer);
	// vaddshs v12,v8,v12
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v8.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// vsldoi v6,v10,v6,2
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v6.u8), 14));
	// lvx128 v5,r0,r31
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r31,r1,-64
	r31.s64 = ctx.r1.s64 + -64;
	// lvx128 v9,r0,r10
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,-80
	ctx.r10.s64 = ctx.r1.s64 + -80;
	// vaddshs v11,v7,v11
	_mm_store_si128((__m128i*)ctx.v11.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v7.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vsldoi v5,v9,v5,2
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v5.u8), 14));
	// vslh v12,v12,v0
	// vaddshs v10,v6,v10
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v6.s16), _mm_load_si128((__m128i*)ctx.v10.s16)));
	// vslh v11,v11,v0
	// vaddshs v12,v12,v1
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// vslh v10,v10,v0
	// vaddshs v9,v5,v9
	_mm_store_si128((__m128i*)ctx.v9.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v5.s16), _mm_load_si128((__m128i*)ctx.v9.s16)));
	// vaddshs v11,v11,v1
	_mm_store_si128((__m128i*)ctx.v11.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// stvx v12,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsrah v8,v12,v13
	// vaddshs v10,v10,v1
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// addi r10,r7,4
	ctx.r10.s64 = ctx.r7.s64 + 4;
	// vslh v9,v9,v0
	// vsrah v11,v11,v13
	// stvx v10,r0,r31
	_mm_store_si128((__m128i*)(base + ((r31.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsrah v10,v10,v13
	// vaddshs v9,v9,v1
	_mm_store_si128((__m128i*)ctx.v9.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v9.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// vpkshus v11,v8,v11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v8.s16)));
	// vsrah v12,v9,v13
	// vpkshus v12,v10,v12
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v10.s16)));
	// addi r31,r1,-80
	r31.s64 = ctx.r1.s64 + -80;
	// stvx v11,r0,r31
	_mm_store_si128((__m128i*)(base + ((r31.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r31,-80(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + -80);
	// lwz r30,-72(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + -72);
	// stw r31,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, r31.u32);
	// addi r31,r1,-64
	r31.s64 = ctx.r1.s64 + -64;
	// stwx r30,r10,r5
	PPC_STORE_U32(ctx.r10.u32 + ctx.r5.u32, r30.u32);
	// stvx v12,r0,r31
	_mm_store_si128((__m128i*)(base + ((r31.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r31,-64(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + -64);
	// lwz r30,-56(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + -56);
	// stw r31,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r31.u32);
	// stwx r30,r10,r11
	PPC_STORE_U32(ctx.r10.u32 + r11.u32, r30.u32);
	// bne cr6,0x8270bfb0
	if (!cr6.eq) goto loc_8270BFB0;
	// lwz r31,-76(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + -76);
	// addi r10,r4,4
	ctx.r10.s64 = ctx.r4.s64 + 4;
	// lwz r30,-68(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + -68);
	// lwz r29,-60(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + -60);
	// lwz r28,-52(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + -52);
	// stw r31,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, r31.u32);
	// stwx r30,r10,r5
	PPC_STORE_U32(ctx.r10.u32 + ctx.r5.u32, r30.u32);
	// stw r29,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r29.u32);
	// stwx r28,r10,r11
	PPC_STORE_U32(ctx.r10.u32 + r11.u32, r28.u32);
loc_8270BFB0:
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// add r5,r8,r5
	ctx.r5.u64 = ctx.r8.u64 + ctx.r5.u64;
	// add r11,r8,r11
	r11.u64 = ctx.r8.u64 + r11.u64;
	// addi r3,r3,192
	ctx.r3.s64 = ctx.r3.s64 + 192;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x8270beac
	if (!cr6.eq) goto loc_8270BEAC;
	// b 0x8239bd48
	return;
loc_8270BFCC:
	// li r9,4
	ctx.r9.s64 = 4;
loc_8270BFD0:
	// addi r11,r3,48
	r11.s64 = ctx.r3.s64 + 48;
	// lvx128 v8,r0,r3
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r3,16
	ctx.r8.s64 = ctx.r3.s64 + 16;
	// addi r6,r3,32
	ctx.r6.s64 = ctx.r3.s64 + 32;
	// addi r7,r3,64
	ctx.r7.s64 = ctx.r3.s64 + 64;
	// addi r31,r3,80
	r31.s64 = ctx.r3.s64 + 80;
	// lvx128 v7,r0,r11
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r3,96
	r11.s64 = ctx.r3.s64 + 96;
	// lvx128 v12,r0,r8
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r3,144
	ctx.r8.s64 = ctx.r3.s64 + 144;
	// lvx128 v4,r0,r6
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsldoi v30,v8,v12,2
	_mm_store_si128((__m128i*)v30.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v12.u8), 14));
	// lvx128 v11,r0,r7
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsldoi v4,v12,v4,2
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v4.u8), 14));
	// lvx128 v3,r0,r31
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r3,112
	ctx.r7.s64 = ctx.r3.s64 + 112;
	// lvx128 v6,r0,r11
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsldoi v29,v7,v11,2
	_mm_store_si128((__m128i*)v29.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v11.u8), 14));
	// vsldoi v3,v11,v3,2
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v3.u8), 14));
	// addi r6,r3,128
	ctx.r6.s64 = ctx.r3.s64 + 128;
	// addi r11,r3,160
	r11.s64 = ctx.r3.s64 + 160;
	// vaddshs v12,v4,v12
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v4.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// addi r31,r3,176
	r31.s64 = ctx.r3.s64 + 176;
	// vaddshs v8,v30,v8
	_mm_store_si128((__m128i*)ctx.v8.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)v30.s16), _mm_load_si128((__m128i*)ctx.v8.s16)));
	// lvx128 v10,r0,r7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vaddshs v7,v29,v7
	_mm_store_si128((__m128i*)ctx.v7.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)v29.s16), _mm_load_si128((__m128i*)ctx.v7.s16)));
	// vaddshs v11,v3,v11
	_mm_store_si128((__m128i*)ctx.v11.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v3.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vsldoi v28,v6,v10,2
	_mm_store_si128((__m128i*)v28.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v10.u8), 14));
	// lvx128 v2,r0,r6
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v12,v12,v0
	// lvx128 v9,r0,r11
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsldoi v2,v10,v2,2
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v2.u8), 14));
	// lvx128 v31,r0,r31
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v8,v8,v0
	// vsldoi v31,v9,v31,2
	_mm_store_si128((__m128i*)v31.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)v31.u8), 14));
	// vslh v11,v11,v0
	// vslh v7,v7,v0
	// lvx128 v5,r0,r8
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vaddshs v4,v28,v6
	_mm_store_si128((__m128i*)ctx.v4.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)v28.s16), _mm_load_si128((__m128i*)ctx.v6.s16)));
	// vsldoi v27,v5,v9,2
	_mm_store_si128((__m128i*)v27.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v9.u8), 14));
	// vaddshs v6,v2,v10
	_mm_store_si128((__m128i*)ctx.v6.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v2.s16), _mm_load_si128((__m128i*)ctx.v10.s16)));
	// add r11,r10,r5
	r11.u64 = ctx.r10.u64 + ctx.r5.u64;
	// vaddshs v3,v31,v9
	_mm_store_si128((__m128i*)ctx.v3.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)v31.s16), _mm_load_si128((__m128i*)ctx.v9.s16)));
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// vaddshs v12,v12,v1
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// addi r3,r3,192
	ctx.r3.s64 = ctx.r3.s64 + 192;
	// vaddshs v10,v8,v1
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v8.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// vaddshs v11,v11,v1
	_mm_store_si128((__m128i*)ctx.v11.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// vaddshs v9,v7,v1
	_mm_store_si128((__m128i*)ctx.v9.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v7.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// vsrah v12,v12,v13
	// vsrah v10,v10,v13
	// vsrah v11,v11,v13
	// vsrah v9,v9,v13
	// vaddshs v5,v27,v5
	_mm_store_si128((__m128i*)ctx.v5.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)v27.s16), _mm_load_si128((__m128i*)ctx.v5.s16)));
	// vpkshus v12,v10,v12
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v10.s16)));
	// vslh v10,v3,v0
	// vpkshus v11,v9,v11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v9.s16)));
	// vslh v9,v5,v0
	// vaddshs v10,v10,v1
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// stvx v12,r0,r5
	_mm_store_si128((__m128i*)(base + ((ctx.r5.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v12,v4,v0
	// vaddshs v9,v9,v1
	_mm_store_si128((__m128i*)ctx.v9.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v9.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// stvx128 v11,r4,r5
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32 + ctx.r5.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v11,v6,v0
	// vsrah v10,v10,v13
	// add r5,r10,r11
	ctx.r5.u64 = ctx.r10.u64 + r11.u64;
	// vaddshs v12,v12,v1
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// vsrah v9,v9,v13
	// vaddshs v11,v11,v1
	_mm_store_si128((__m128i*)ctx.v11.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// vsrah v12,v12,v13
	// vsrah v11,v11,v13
	// vpkshus v12,v12,v11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// vpkshus v11,v9,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v9.s16)));
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v11,r4,r11
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32 + r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bne cr6,0x8270bfd0
	if (!cr6.eq) goto loc_8270BFD0;
loc_8270C104:
	// b 0x8239bd48
	return;
}

__attribute__((alias("__imp__sub_8270C108"))) PPC_WEAK_FUNC(sub_8270C108);
PPC_FUNC_IMPL(__imp__sub_8270C108) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCVRegister v31{};
	// mflr r12
	// bl 0x8239bcfc
	// addi r9,r3,16
	ctx.r9.s64 = ctx.r3.s64 + 16;
	// lvx128 v12,r0,r3
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vspltish v0,1
	// addi r10,r3,96
	ctx.r10.s64 = ctx.r3.s64 + 96;
	// addi r31,r3,112
	r31.s64 = ctx.r3.s64 + 112;
	// vspltish v13,4
	// cmpwi cr6,r6,8
	cr6.compare<int32_t>(ctx.r6.s32, 8, xer);
	// addi r6,r1,-64
	ctx.r6.s64 = ctx.r1.s64 + -64;
	// lvx128 v8,r0,r9
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r3,48
	r11.s64 = ctx.r3.s64 + 48;
	// vsldoi v8,v12,v8,2
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v8.u8), 14));
	// lvx128 v10,r0,r10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v6,r0,r31
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r3,64
	ctx.r8.s64 = ctx.r3.s64 + 64;
	// vsldoi v6,v10,v6,2
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v6.u8), 14));
	// addi r10,r3,160
	ctx.r10.s64 = ctx.r3.s64 + 160;
	// add r9,r4,r5
	ctx.r9.u64 = ctx.r4.u64 + ctx.r5.u64;
	// vslh v4,v8,v0
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r3,144
	r11.s64 = ctx.r3.s64 + 144;
	// vslh v2,v6,v0
	// lvx128 v7,r0,r8
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsldoi v7,v11,v7,2
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8), 14));
	// lvx128 v5,r0,r10
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vaddshs v12,v4,v12
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v4.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// vaddshs v10,v2,v10
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v2.s16), _mm_load_si128((__m128i*)ctx.v10.s16)));
	// lvx128 v9,r0,r11
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v3,v7,v0
	// vsldoi v5,v9,v5,2
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v5.u8), 14));
	// vaddshs v12,v12,v8
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v8.s16)));
	// rlwinm r11,r4,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// vaddshs v10,v10,v6
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v6.s16)));
	// add r10,r11,r5
	ctx.r10.u64 = r11.u64 + ctx.r5.u64;
	// vaddshs v11,v3,v11
	_mm_store_si128((__m128i*)ctx.v11.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v3.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vaddshs v12,v12,v1
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// add r8,r10,r4
	ctx.r8.u64 = ctx.r10.u64 + ctx.r4.u64;
	// vslh v31,v5,v0
	// vaddshs v10,v10,v1
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// vaddshs v11,v11,v7
	_mm_store_si128((__m128i*)ctx.v11.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v7.s16)));
	// stvx v12,r0,r6
	_mm_store_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r6,r1,-48
	ctx.r6.s64 = ctx.r1.s64 + -48;
	// vaddshs v9,v31,v9
	_mm_store_si128((__m128i*)ctx.v9.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)v31.s16), _mm_load_si128((__m128i*)ctx.v9.s16)));
	// vsrah v12,v12,v13
	// vaddshs v11,v11,v1
	_mm_store_si128((__m128i*)ctx.v11.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// stvx v10,r0,r6
	_mm_store_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vaddshs v9,v9,v5
	_mm_store_si128((__m128i*)ctx.v9.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v9.s16), _mm_load_si128((__m128i*)ctx.v5.s16)));
	// vsrah v10,v10,v13
	// vsrah v11,v11,v13
	// vaddshs v9,v9,v1
	_mm_store_si128((__m128i*)ctx.v9.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v9.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// vpkshus v12,v12,v11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// addi r6,r1,-64
	ctx.r6.s64 = ctx.r1.s64 + -64;
	// stvx v12,r0,r6
	_mm_store_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsrah v12,v9,v13
	// addi r31,r1,-48
	r31.s64 = ctx.r1.s64 + -48;
	// vpkshus v12,v10,v12
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v10.s16)));
	// stvx v12,r0,r31
	_mm_store_si128((__m128i*)(base + ((r31.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r6,-64(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + -64);
	// lwz r31,-56(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + -56);
	// stw r6,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, ctx.r6.u32);
	// stw r31,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r31.u32);
	// lwz r6,-48(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + -48);
	// lwz r31,-40(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + -40);
	// stw r6,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r6.u32);
	// stw r31,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r31.u32);
	// bne cr6,0x8270c234
	if (!cr6.eq) goto loc_8270C234;
	// lwz r6,-60(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + -60);
	// lwz r31,-52(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + -52);
	// lwz r30,-44(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + -44);
	// lwz r29,-36(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + -36);
	// stw r6,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r6.u32);
	// stw r31,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, r31.u32);
	// stw r30,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r30.u32);
	// stw r29,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, r29.u32);
loc_8270C234:
	// cmpwi cr6,r7,8
	cr6.compare<int32_t>(ctx.r7.s32, 8, xer);
	// bne cr6,0x8270c358
	if (!cr6.eq) goto loc_8270C358;
	// addi r9,r3,192
	ctx.r9.s64 = ctx.r3.s64 + 192;
	// addi r8,r3,240
	ctx.r8.s64 = ctx.r3.s64 + 240;
	// addi r31,r3,208
	r31.s64 = ctx.r3.s64 + 208;
	// addi r7,r3,288
	ctx.r7.s64 = ctx.r3.s64 + 288;
	// addi r6,r3,336
	ctx.r6.s64 = ctx.r3.s64 + 336;
	// lvx128 v12,r0,r9
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r3,256
	ctx.r9.s64 = ctx.r3.s64 + 256;
	// lvx128 v11,r0,r8
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r3,304
	ctx.r8.s64 = ctx.r3.s64 + 304;
	// lvx128 v8,r0,r31
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsldoi v8,v12,v8,2
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v8.u8), 14));
	// lvx128 v10,r0,r7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r3,352
	ctx.r7.s64 = ctx.r3.s64 + 352;
	// lvx128 v9,r0,r6
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v7,r0,r9
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lvx128 v6,r0,r8
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-48
	r11.s64 = ctx.r1.s64 + -48;
	// vslh v4,v8,v0
	// vsldoi v6,v10,v6,2
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v6.u8), 14));
	// vsldoi v7,v11,v7,2
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8), 14));
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// lvx128 v5,r0,r7
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsldoi v5,v9,v5,2
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v5.u8), 14));
	// add r8,r10,r4
	ctx.r8.u64 = ctx.r10.u64 + ctx.r4.u64;
	// vaddshs v12,v4,v12
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v4.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// vslh v2,v6,v0
	// vslh v3,v7,v0
	// vslh v0,v5,v0
	// vaddshs v12,v12,v8
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v8.s16)));
	// vaddshs v10,v2,v10
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v2.s16), _mm_load_si128((__m128i*)ctx.v10.s16)));
	// vaddshs v11,v3,v11
	_mm_store_si128((__m128i*)ctx.v11.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v3.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vaddshs v0,v0,v9
	_mm_store_si128((__m128i*)ctx.v0.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v0.s16), _mm_load_si128((__m128i*)ctx.v9.s16)));
	// vaddshs v12,v12,v1
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// vaddshs v10,v10,v6
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v6.s16)));
	// vaddshs v11,v11,v7
	_mm_store_si128((__m128i*)ctx.v11.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v7.s16)));
	// vaddshs v0,v0,v5
	_mm_store_si128((__m128i*)ctx.v0.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v0.s16), _mm_load_si128((__m128i*)ctx.v5.s16)));
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-64
	r11.s64 = ctx.r1.s64 + -64;
	// vaddshs v10,v10,v1
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// vaddshs v11,v11,v1
	_mm_store_si128((__m128i*)ctx.v11.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// vaddshs v0,v0,v1
	_mm_store_si128((__m128i*)ctx.v0.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v0.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// vsrah v12,v12,v13
	// stvx v10,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsrah v10,v10,v13
	// vsrah v11,v11,v13
	// add r11,r9,r5
	r11.u64 = ctx.r9.u64 + ctx.r5.u64;
	// vsrah v0,v0,v13
	// vpkshus v13,v12,v11
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// vpkshus v0,v10,v0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v0.s16), _mm_load_si128((__m128i*)ctx.v10.s16)));
	// addi r9,r1,-48
	ctx.r9.s64 = ctx.r1.s64 + -48;
	// stvx v13,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-64
	ctx.r9.s64 = ctx.r1.s64 + -64;
	// stvx v0,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r9,r4,r11
	ctx.r9.u64 = ctx.r4.u64 + r11.u64;
	// lwz r7,-48(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + -48);
	// lwz r6,-44(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + -44);
	// lwz r5,-40(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + -40);
	// lwz r4,-36(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + -36);
	// stw r7,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r7.u32);
	// stw r6,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r6.u32);
	// lwz r3,-64(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + -64);
	// lwz r31,-60(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + -60);
	// lwz r7,-56(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + -56);
	// lwz r11,-52(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + -52);
	// stw r5,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r5.u32);
	// stw r4,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r4.u32);
	// stw r3,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r3.u32);
	// stw r31,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r31.u32);
	// stw r7,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r7.u32);
	// stw r11,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, r11.u32);
loc_8270C358:
	// b 0x8239bd4c
	return;
}

__attribute__((alias("__imp__sub_8270C35C"))) PPC_WEAK_FUNC(sub_8270C35C);
PPC_FUNC_IMPL(__imp__sub_8270C35C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8270C360"))) PPC_WEAK_FUNC(sub_8270C360);
PPC_FUNC_IMPL(__imp__sub_8270C360) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// addi r11,r7,1
	r11.s64 = ctx.r7.s64 + 1;
	// addi r10,r6,1040
	ctx.r10.s64 = ctx.r6.s64 + 1040;
	// rlwinm r8,r11,3,0,28
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// mr r6,r4
	ctx.r6.u64 = ctx.r4.u64;
	// mr r7,r8
	ctx.r7.u64 = ctx.r8.u64;
	// lvx128 v1,r0,r10
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// b 0x8270a8e8
	sub_8270A8E8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8270C37C"))) PPC_WEAK_FUNC(sub_8270C37C);
PPC_FUNC_IMPL(__imp__sub_8270C37C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8270C380"))) PPC_WEAK_FUNC(sub_8270C380);
PPC_FUNC_IMPL(__imp__sub_8270C380) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// addi r11,r7,1
	r11.s64 = ctx.r7.s64 + 1;
	// addi r10,r6,1040
	ctx.r10.s64 = ctx.r6.s64 + 1040;
	// rlwinm r8,r11,3,0,28
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// mr r6,r4
	ctx.r6.u64 = ctx.r4.u64;
	// mr r7,r8
	ctx.r7.u64 = ctx.r8.u64;
	// lvx128 v1,r0,r10
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// b 0x8270aba8
	sub_8270ABA8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8270C39C"))) PPC_WEAK_FUNC(sub_8270C39C);
PPC_FUNC_IMPL(__imp__sub_8270C39C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8270C3A0"))) PPC_WEAK_FUNC(sub_8270C3A0);
PPC_FUNC_IMPL(__imp__sub_8270C3A0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// addi r11,r7,1
	r11.s64 = ctx.r7.s64 + 1;
	// addi r10,r6,1040
	ctx.r10.s64 = ctx.r6.s64 + 1040;
	// rlwinm r8,r11,3,0,28
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// mr r6,r4
	ctx.r6.u64 = ctx.r4.u64;
	// mr r7,r8
	ctx.r7.u64 = ctx.r8.u64;
	// lvx128 v1,r0,r10
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// b 0x8270b068
	sub_8270B068(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8270C3BC"))) PPC_WEAK_FUNC(sub_8270C3BC);
PPC_FUNC_IMPL(__imp__sub_8270C3BC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8270C3C0"))) PPC_WEAK_FUNC(sub_8270C3C0);
PPC_FUNC_IMPL(__imp__sub_8270C3C0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// addi r11,r7,1
	r11.s64 = ctx.r7.s64 + 1;
	// addi r10,r6,1040
	ctx.r10.s64 = ctx.r6.s64 + 1040;
	// rlwinm r8,r11,3,0,28
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// mr r6,r4
	ctx.r6.u64 = ctx.r4.u64;
	// mr r7,r8
	ctx.r7.u64 = ctx.r8.u64;
	// lvx128 v1,r0,r10
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// b 0x8270b330
	sub_8270B330(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8270C3DC"))) PPC_WEAK_FUNC(sub_8270C3DC);
PPC_FUNC_IMPL(__imp__sub_8270C3DC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8270C3E0"))) PPC_WEAK_FUNC(sub_8270C3E0);
PPC_FUNC_IMPL(__imp__sub_8270C3E0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcec
	// stwu r1,-912(r1)
	ea = -912 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r8,r3,16
	ctx.r8.s64 = ctx.r3.s64 + 16;
	// lvx128 v12,r0,r3
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r9,r3,r4
	ctx.r9.u64 = ctx.r3.u64 + ctx.r4.u64;
	// lvsl v7,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// rlwinm r11,r4,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// vspltisb v0,0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_set1_epi8(char(0x0)));
	// addi r31,r9,16
	r31.s64 = ctx.r9.s64 + 16;
	// vspltish v13,1
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// rlwinm r10,r4,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lvx128 v11,r0,r8
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r30,r11,16
	r30.s64 = r11.s64 + 16;
	// vperm v12,v12,v11,v7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// add r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 + ctx.r3.u64;
	// lvx128 v11,r0,r9
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r8,r11,r4
	ctx.r8.u64 = r11.u64 + ctx.r4.u64;
	// lvx128 v9,r0,r31
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r10,16
	ctx.r9.s64 = ctx.r10.s64 + 16;
	// vperm v11,v11,v9,v7
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v10,r0,r11
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v6,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r11,r8,16
	r11.s64 = ctx.r8.s64 + 16;
	// lvx128 v9,r0,r30
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// vperm v10,v10,v9,v6
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvx128 v9,r0,r10
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v8,r0,r9
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r7,r7,3,0,28
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 3) & 0xFFFFFFF8;
	// lvsl v7,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vperm v9,v9,v8,v7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v6,r0,r11
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v8,v0,v12
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v12,r0,r8
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r8
	temp.u32 = ctx.r8.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// vperm v7,v12,v6,v7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// cmpwi cr6,r7,8
	cr6.compare<int32_t>(ctx.r7.s32, 8, xer);
	// vmrghb v12,v0,v11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v6,v8,v13
	// vmrghb v11,v0,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v9,v0,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v10,v0,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v7,v12,v13
	// vadduhm v8,v6,v8
	_mm_store_si128((__m128i*)ctx.v8.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)ctx.v8.u16)));
	// vslh v5,v11,v13
	// vslh v4,v10,v13
	// vadduhm v7,v7,v12
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vadduhm v12,v8,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v8.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vadduhm v6,v5,v11
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v5.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// vadduhm v11,v7,v11
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,128
	r11.s64 = ctx.r1.s64 + 128;
	// vadduhm v8,v6,v10
	_mm_store_si128((__m128i*)ctx.v8.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vadduhm v12,v4,v10
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v4.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// stvx v11,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,176
	r11.s64 = ctx.r1.s64 + 176;
	// vadduhm v12,v12,v9
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// stvx v8,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,224
	r11.s64 = ctx.r1.s64 + 224;
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bne cr6,0x8270c5ac
	if (!cr6.eq) goto loc_8270C5AC;
	// add r11,r10,r4
	r11.u64 = ctx.r10.u64 + ctx.r4.u64;
	// vslh v12,v9,v13
	// rlwinm r10,r4,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r8,r11,16
	ctx.r8.s64 = r11.s64 + 16;
	// add r9,r10,r3
	ctx.r9.u64 = ctx.r10.u64 + ctx.r3.u64;
	// add r10,r11,r4
	ctx.r10.u64 = r11.u64 + ctx.r4.u64;
	// addi r31,r9,16
	r31.s64 = ctx.r9.s64 + 16;
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r11,r10,r4
	r11.u64 = ctx.r10.u64 + ctx.r4.u64;
	// lvx128 v8,r0,r8
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v11,v11,v8,v7
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v10,r0,r9
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r9,r10,16
	ctx.r9.s64 = ctx.r10.s64 + 16;
	// lvx128 v8,r0,r31
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v10,v10,v8,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// vadduhm v7,v12,v9
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v6,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r10,r11,16
	ctx.r10.s64 = r11.s64 + 16;
	// vmrghb v8,v0,v10
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v10,r0,r9
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v10,v12,v10,v6
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvsl v6,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v12,v0,v11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v9,r0,r10
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,272
	r11.s64 = ctx.r1.s64 + 272;
	// vperm v9,v11,v9,v6
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// vmrghb v11,v0,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v10,v12,v13
	// vadduhm v7,v7,v12
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vmrghb v0,v0,v9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v9,v11,v13
	// vadduhm v12,v10,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// stvx v7,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,320
	r11.s64 = ctx.r1.s64 + 320;
	// vslh v13,v0,v13
	// vadduhm v12,v12,v11
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v12,v9,v11
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// addi r11,r1,368
	r11.s64 = ctx.r1.s64 + 368;
	// vadduhm v12,v12,v0
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v0.u16)));
	// vadduhm v0,v13,v0
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v0.u16)));
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,416
	r11.s64 = ctx.r1.s64 + 416;
	// vadduhm v0,v0,v8
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v8.u16)));
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// b 0x8270c5b0
	goto loc_8270C5B0;
loc_8270C5AC:
	// blt cr6,0x8270c624
	if (cr6.lt) goto loc_8270C624;
loc_8270C5B0:
	// rlwinm r29,r4,1,0,30
	r29.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r9,r3,8
	ctx.r9.s64 = ctx.r3.s64 + 8;
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// ble cr6,0x8270c624
	if (!cr6.gt) goto loc_8270C624;
	// addi r8,r7,-1
	ctx.r8.s64 = ctx.r7.s64 + -1;
	// add r11,r29,r9
	r11.u64 = r29.u64 + ctx.r9.u64;
	// rlwinm r8,r8,31,1,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 31) & 0x7FFFFFFF;
	// subf r25,r29,r4
	r25.s64 = ctx.r4.s64 - r29.s64;
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
loc_8270C5D8:
	// lbz r31,0(r9)
	r31.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// lbzx r3,r25,r11
	ctx.r3.u64 = PPC_LOAD_U8(r25.u32 + r11.u32);
	// add r9,r29,r9
	ctx.r9.u64 = r29.u64 + ctx.r9.u64;
	// rotlwi r26,r31,1
	r26.u64 = __builtin_rotateleft32(r31.u32, 1);
	// lbz r28,0(r11)
	r28.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// add r3,r31,r26
	ctx.r3.u64 = r31.u64 + r26.u64;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// add r3,r3,r27
	ctx.r3.u64 = ctx.r3.u64 + r27.u64;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// sth r3,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r3.u16);
	// rlwinm r3,r30,1,0,30
	ctx.r3.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r3,r30,r3
	ctx.r3.u64 = r30.u64 + ctx.r3.u64;
	// add r3,r3,r28
	ctx.r3.u64 = ctx.r3.u64 + r28.u64;
	// sth r3,48(r10)
	PPC_STORE_U16(ctx.r10.u32 + 48, ctx.r3.u16);
	// addi r10,r10,96
	ctx.r10.s64 = ctx.r10.s64 + 96;
	// bne cr6,0x8270c5d8
	if (!cr6.eq) goto loc_8270C5D8;
loc_8270C624:
	// addi r11,r6,1040
	r11.s64 = ctx.r6.s64 + 1040;
	// mr r6,r7
	ctx.r6.u64 = ctx.r7.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lvx128 v1,r0,r11
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x8270bc18
	sub_8270BC18(ctx, base);
	// addi r1,r1,912
	ctx.r1.s64 = ctx.r1.s64 + 912;
	// b 0x8239bd3c
	return;
}

__attribute__((alias("__imp__sub_8270C640"))) PPC_WEAK_FUNC(sub_8270C640);
PPC_FUNC_IMPL(__imp__sub_8270C640) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCVRegister v24{};
	PPCVRegister v25{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcdc
	// stwu r1,-992(r1)
	ea = -992 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r7,1
	r11.s64 = ctx.r7.s64 + 1;
	// vspltisb v0,0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_set1_epi8(char(0x0)));
	// vspltish v13,1
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// rlwinm r7,r11,3,0,28
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// cmpwi cr6,r7,4
	cr6.compare<int32_t>(ctx.r7.s32, 4, xer);
	// beq cr6,0x8270cb3c
	if (cr6.eq) goto loc_8270CB3C;
	// cmpwi cr6,r7,8
	cr6.compare<int32_t>(ctx.r7.s32, 8, xer);
	// beq cr6,0x8270c95c
	if (cr6.eq) goto loc_8270C95C;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// ble cr6,0x8270c8f0
	if (!cr6.gt) goto loc_8270C8F0;
	// addi r11,r7,-1
	r11.s64 = ctx.r7.s64 + -1;
	// rlwinm r27,r4,1,0,30
	r27.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r9,r11,29,3,31
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 29) & 0x1FFFFFFF;
	// rlwinm r26,r4,2,0,29
	r26.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r25,r4,3,0,28
	r25.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r11,r1,224
	r11.s64 = ctx.r1.s64 + 224;
	// addi r28,r9,1
	r28.s64 = ctx.r9.s64 + 1;
loc_8270C694:
	// add r8,r26,r10
	ctx.r8.u64 = r26.u64 + ctx.r10.u64;
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r10,16
	r29.s64 = ctx.r10.s64 + 16;
	// lvsl v7,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r9,r27,r10
	ctx.r9.u64 = r27.u64 + ctx.r10.u64;
	// add r30,r10,r4
	r30.u64 = ctx.r10.u64 + ctx.r4.u64;
	// add r31,r25,r10
	r31.u64 = r25.u64 + ctx.r10.u64;
	// add r10,r8,r4
	ctx.r10.u64 = ctx.r8.u64 + ctx.r4.u64;
	// lvx128 v8,r0,r8
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v11,r0,r29
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r29,r9,r4
	r29.u64 = ctx.r9.u64 + ctx.r4.u64;
	// vperm v12,v12,v11,v7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v9,r0,r9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v10,r0,r30
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r24,r30,16
	r24.s64 = r30.s64 + 16;
	// lvsl v5,r0,r30
	temp.u32 = r30.u32;
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r23,r9,16
	r23.s64 = ctx.r9.s64 + 16;
	// lvsl v3,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r9,r10,r4
	ctx.r9.u64 = ctx.r10.u64 + ctx.r4.u64;
	// lvx128 v29,r0,r10
	_mm_store_si128((__m128i*)v29.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r30,r10,16
	r30.s64 = ctx.r10.s64 + 16;
	// lvsl v11,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// lvsl v1,r0,r8
	temp.u32 = ctx.r8.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r22,r8,16
	r22.s64 = ctx.r8.s64 + 16;
	// addi r8,r29,16
	ctx.r8.s64 = r29.s64 + 16;
	// lvx128 v6,r0,r24
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r24.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v4,r0,r23
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r23.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v24,v0,v12
	_mm_store_si128((__m128i*)v24.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v31,r0,r29
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v11,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r10,r9,r4
	ctx.r10.u64 = ctx.r9.u64 + ctx.r4.u64;
	// lvx128 v2,r0,r22
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r22.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v11,v10,v6,v5
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// lvx128 v30,r0,r8
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v10,v9,v4,v3
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// lvsl v7,r0,r29
	temp.u32 = r29.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vperm v9,v8,v2,v1
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// vperm v8,v31,v30,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v28,r0,r30
	_mm_store_si128((__m128i*)v28.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v31,r0,r10
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r30,r10,16
	r30.s64 = ctx.r10.s64 + 16;
	// lvsl v7,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// addi r8,r9,16
	ctx.r8.s64 = ctx.r9.s64 + 16;
	// lvx128 v2,r0,r9
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v1,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r29,r31,16
	r29.s64 = r31.s64 + 16;
	// vmrghb v6,v0,v11
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v26,r0,r31
	_mm_store_si128((__m128i*)v26.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v27,r0,r30
	_mm_store_si128((__m128i*)v27.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v5,v0,v10
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// stvx v7,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// lvsl v7,r0,r31
	temp.u32 = r31.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v4,v0,v8
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v30,r0,r8
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v3,v0,v9
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vperm v2,v2,v30,v1
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// lvx128 v25,r0,r29
	_mm_store_si128((__m128i*)v25.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v7,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// lvx128 v7,r0,r10
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v7,v29,v28,v7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v29.u8), _mm_load_si128((__m128i*)v28.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// vmrghb v29,v0,v2
	_mm_store_si128((__m128i*)v29.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v30,v0,v7
	_mm_store_si128((__m128i*)v30.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lvx128 v1,r0,r10
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// vperm v31,v31,v27,v1
	_mm_store_si128((__m128i*)v31.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)v27.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// lvx128 v1,r0,r10
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v28,v0,v31
	_mm_store_si128((__m128i*)v28.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vperm v1,v26,v25,v1
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v26.u8), _mm_load_si128((__m128i*)v25.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// vadduhm v26,v6,v24
	_mm_store_si128((__m128i*)v26.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)v24.u16)));
	// vadduhm v25,v5,v6
	_mm_store_si128((__m128i*)v25.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v5.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vmrglb v24,v0,v12
	_mm_store_si128((__m128i*)v24.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v5,v4,v5
	_mm_store_si128((__m128i*)ctx.v5.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v4.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vmrglb v12,v0,v11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v4,v3,v4
	_mm_store_si128((__m128i*)ctx.v4.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v4.u16)));
	// vmrglb v11,v0,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v27,v0,v1
	_mm_store_si128((__m128i*)v27.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrglb v10,v0,v8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// addi r10,r11,-96
	ctx.r10.s64 = r11.s64 + -96;
	// vmrglb v8,v0,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v3,v30,v3
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v30.u16), _mm_load_si128((__m128i*)ctx.v3.u16)));
	// vmrglb v7,v0,v2
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// addi r9,r11,-48
	ctx.r9.s64 = r11.s64 + -48;
	// vmrglb v6,v0,v31
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v31,v28,v29
	_mm_store_si128((__m128i*)v31.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)v29.u16)));
	// vmrglb v2,v0,v1
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v1,v29,v30
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v29.u16), _mm_load_si128((__m128i*)v30.u16)));
	// vslh v29,v26,v13
	// vmrglb v9,v0,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v30,v27,v28
	_mm_store_si128((__m128i*)v30.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v27.u16), _mm_load_si128((__m128i*)v28.u16)));
	// addi r8,r11,48
	ctx.r8.s64 = r11.s64 + 48;
	// addi r30,r11,96
	r30.s64 = r11.s64 + 96;
	// vadduhm v27,v12,v24
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)v24.u16)));
	// addi r29,r11,144
	r29.s64 = r11.s64 + 144;
	// vslh v28,v25,v13
	// stvx v29,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v29.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v29,v9,v10
	_mm_store_si128((__m128i*)v29.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// addi r24,r11,192
	r24.s64 = r11.s64 + 192;
	// vadduhm v9,v8,v9
	_mm_store_si128((__m128i*)ctx.v9.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v8.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// addi r23,r11,240
	r23.s64 = r11.s64 + 240;
	// vadduhm v8,v7,v8
	_mm_store_si128((__m128i*)ctx.v8.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v8.u16)));
	// vslh v4,v4,v13
	// stvx v28,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v28.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v3,v3,v13
	// addi r9,r11,-80
	ctx.r9.s64 = r11.s64 + -80;
	// vslh v1,v1,v13
	// addi r22,r11,208
	r22.s64 = r11.s64 + 208;
	// vslh v31,v31,v13
	// addi r21,r11,256
	r21.s64 = r11.s64 + 256;
	// vslh v30,v30,v13
	// stvx v4,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v12,v11,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// stvx v3,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v7,v6,v7
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// stvx v1,r0,r29
	_mm_store_si128((__m128i*)(base + ((r29.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v5,v5,v13
	// stvx v31,r0,r24
	_mm_store_si128((__m128i*)(base + ((r24.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v11,v10,v11
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// stvx v30,r0,r23
	_mm_store_si128((__m128i*)(base + ((r23.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v6,v2,v6
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// addi r8,r11,-32
	ctx.r8.s64 = r11.s64 + -32;
	// addi r30,r11,16
	r30.s64 = r11.s64 + 16;
	// vslh v10,v27,v13
	// stvx v5,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r11,64
	r29.s64 = r11.s64 + 64;
	// addi r24,r11,112
	r24.s64 = r11.s64 + 112;
	// vslh v12,v12,v13
	// addi r23,r11,160
	r23.s64 = r11.s64 + 160;
	// vslh v11,v11,v13
	// vslh v5,v29,v13
	// addi r28,r28,-1
	r28.s64 = r28.s64 + -1;
	// vslh v9,v9,v13
	// mr r10,r31
	ctx.r10.u64 = r31.u64;
	// vslh v8,v8,v13
	// addi r11,r11,384
	r11.s64 = r11.s64 + 384;
	// vslh v7,v7,v13
	// stvx v10,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v6,v6,v13
	// stvx v12,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// stvx v11,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v5,r0,r29
	_mm_store_si128((__m128i*)(base + ((r29.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v9,r0,r24
	_mm_store_si128((__m128i*)(base + ((r24.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v8,r0,r23
	_mm_store_si128((__m128i*)(base + ((r23.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v7,r0,r22
	_mm_store_si128((__m128i*)(base + ((r22.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v6,r0,r21
	_mm_store_si128((__m128i*)(base + ((r21.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bne cr6,0x8270c694
	if (!cr6.eq) goto loc_8270C694;
loc_8270C8F0:
	// rlwinm r31,r4,1,0,30
	r31.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r9,r3,16
	ctx.r9.s64 = ctx.r3.s64 + 16;
	// addi r10,r1,160
	ctx.r10.s64 = ctx.r1.s64 + 160;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// ble cr6,0x8270cc0c
	if (!cr6.gt) goto loc_8270CC0C;
	// addi r8,r7,-1
	ctx.r8.s64 = ctx.r7.s64 + -1;
	// add r11,r31,r9
	r11.u64 = r31.u64 + ctx.r9.u64;
	// rlwinm r8,r8,31,1,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 31) & 0x7FFFFFFF;
	// subf r27,r31,r4
	r27.s64 = ctx.r4.s64 - r31.s64;
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
loc_8270C918:
	// lbzx r3,r27,r11
	ctx.r3.u64 = PPC_LOAD_U8(r27.u32 + r11.u32);
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// lbz r30,0(r11)
	r30.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// lbz r29,0(r9)
	r29.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// add r3,r30,r3
	ctx.r3.u64 = r30.u64 + ctx.r3.u64;
	// add r29,r29,r28
	r29.u64 = r29.u64 + r28.u64;
	// rlwinm r3,r3,1,0,30
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r30,r29,1,0,30
	r30.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r31,r9
	ctx.r9.u64 = r31.u64 + ctx.r9.u64;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// sth r3,48(r10)
	PPC_STORE_U16(ctx.r10.u32 + 48, ctx.r3.u16);
	// sth r30,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, r30.u16);
	// addi r10,r10,96
	ctx.r10.s64 = ctx.r10.s64 + 96;
	// bne cr6,0x8270c918
	if (!cr6.eq) goto loc_8270C918;
	// b 0x8270cc0c
	goto loc_8270CC0C;
loc_8270C95C:
	// add r8,r3,r4
	ctx.r8.u64 = ctx.r3.u64 + ctx.r4.u64;
	// lvx128 v12,r0,r3
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r30,r3,16
	r30.s64 = ctx.r3.s64 + 16;
	// lvsl v7,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// rlwinm r10,r4,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r29,r8,16
	r29.s64 = ctx.r8.s64 + 16;
	// add r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 + ctx.r3.u64;
	// rlwinm r11,r4,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lvx128 v10,r0,r8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v11,r0,r30
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r10,16
	r28.s64 = ctx.r10.s64 + 16;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// vperm v5,v12,v11,v7
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v9,r0,r29
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r9,r4,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r27,r11,16
	r27.s64 = r11.s64 + 16;
	// lvsl v7,r0,r8
	temp.u32 = ctx.r8.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vperm v10,v10,v9,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// add r30,r10,r4
	r30.u64 = ctx.r10.u64 + ctx.r4.u64;
	// lvx128 v11,r0,r10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r31,r9,r3
	r31.u64 = ctx.r9.u64 + ctx.r3.u64;
	// lvx128 v9,r0,r28
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r9,r11,r4
	ctx.r9.u64 = r11.u64 + ctx.r4.u64;
	// lvsl v6,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r10,r30,16
	ctx.r10.s64 = r30.s64 + 16;
	// vperm v11,v11,v9,v6
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvx128 v12,r0,r11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r8,r9,16
	ctx.r8.s64 = ctx.r9.s64 + 16;
	// lvx128 v9,r0,r27
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r9,r4
	r11.u64 = ctx.r9.u64 + ctx.r4.u64;
	// vperm v9,v12,v9,v7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v8,r0,r30
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v6,r0,r10
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v12,v0,v10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvsl v7,r0,r30
	temp.u32 = r30.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r10,r11,r4
	ctx.r10.u64 = r11.u64 + ctx.r4.u64;
	// vperm v8,v8,v6,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v7,r0,r8
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v10,v0,v9
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v9,r0,r9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v4,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r9,r11,16
	ctx.r9.s64 = r11.s64 + 16;
	// vperm v7,v9,v7,v4
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v4.u8)));
	// lvsl v6,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v9,v0,v8
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// rlwinm r8,r4,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// vmrghb v5,v0,v5
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v11,v0,v11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v8,v0,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v7,r0,r11
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r10,16
	r11.s64 = ctx.r10.s64 + 16;
	// lvx128 v4,r0,r9
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v7,v7,v4,v6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvx128 v6,r0,r10
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v4,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vadduhm v5,v12,v5
	_mm_store_si128((__m128i*)ctx.v5.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vadduhm v12,v11,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// addi r9,r3,8
	ctx.r9.s64 = ctx.r3.s64 + 8;
	// vadduhm v11,v9,v11
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// addi r10,r1,144
	ctx.r10.s64 = ctx.r1.s64 + 144;
	// lvx128 v3,r0,r11
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r31,16
	r11.s64 = r31.s64 + 16;
	// vperm v6,v6,v3,v4
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)ctx.v4.u8)));
	// lvx128 v4,r0,r31
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v3,r0,r31
	temp.u32 = r31.u32;
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v7,v0,v7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v9,v10,v9
	_mm_store_si128((__m128i*)ctx.v9.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// li r3,4
	ctx.r3.s64 = 4;
	// vadduhm v10,v8,v10
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v8.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// lvx128 v2,r0,r11
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v6,v0,v6
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vperm v4,v4,v2,v3
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// vadduhm v8,v7,v8
	_mm_store_si128((__m128i*)ctx.v8.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v8.u16)));
	// vslh v12,v12,v13
	// vslh v11,v11,v13
	// vadduhm v7,v6,v7
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vmrghb v0,v0,v4
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v9,v9,v13
	// vadduhm v0,v0,v6
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vslh v6,v5,v13
	// addi r11,r1,128
	r11.s64 = ctx.r1.s64 + 128;
	// vslh v10,v10,v13
	// vslh v8,v8,v13
	// subf r27,r8,r4
	r27.s64 = ctx.r4.s64 - ctx.r8.s64;
	// vslh v7,v7,v13
	// vslh v0,v0,v13
	// stvx v6,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,176
	r11.s64 = ctx.r1.s64 + 176;
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,224
	r11.s64 = ctx.r1.s64 + 224;
	// stvx v11,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,272
	r11.s64 = ctx.r1.s64 + 272;
	// stvx v9,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,320
	r11.s64 = ctx.r1.s64 + 320;
	// stvx v10,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,368
	r11.s64 = ctx.r1.s64 + 368;
	// stvx v8,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,416
	r11.s64 = ctx.r1.s64 + 416;
	// stvx v7,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,464
	r11.s64 = ctx.r1.s64 + 464;
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r8,r9
	r11.u64 = ctx.r8.u64 + ctx.r9.u64;
loc_8270CAF8:
	// lbzx r31,r11,r27
	r31.u64 = PPC_LOAD_U8(r11.u32 + r27.u32);
	// addi r3,r3,-1
	ctx.r3.s64 = ctx.r3.s64 + -1;
	// lbz r30,0(r11)
	r30.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// lbz r29,0(r9)
	r29.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// mr r28,r31
	r28.u64 = r31.u64;
	// add r31,r30,r31
	r31.u64 = r30.u64 + r31.u64;
	// add r29,r29,r28
	r29.u64 = r29.u64 + r28.u64;
	// rlwinm r31,r31,1,0,30
	r31.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r30,r29,1,0,30
	r30.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r8,r9
	ctx.r9.u64 = ctx.r8.u64 + ctx.r9.u64;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// sth r31,48(r10)
	PPC_STORE_U16(ctx.r10.u32 + 48, r31.u16);
	// sth r30,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, r30.u16);
	// addi r10,r10,96
	ctx.r10.s64 = ctx.r10.s64 + 96;
	// bne cr6,0x8270caf8
	if (!cr6.eq) goto loc_8270CAF8;
	// b 0x8270cc0c
	goto loc_8270CC0C;
loc_8270CB3C:
	// addi r8,r3,16
	ctx.r8.s64 = ctx.r3.s64 + 16;
	// lvx128 v12,r0,r3
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r11,r4,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// lvsl v7,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// rlwinm r9,r4,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r3,r4
	ctx.r10.u64 = ctx.r3.u64 + ctx.r4.u64;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// lvx128 v11,r0,r8
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r9,r9,r3
	ctx.r9.u64 = ctx.r9.u64 + ctx.r3.u64;
	// vperm v12,v12,v11,v7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// addi r3,r10,16
	ctx.r3.s64 = ctx.r10.s64 + 16;
	// addi r31,r11,16
	r31.s64 = r11.s64 + 16;
	// lvsl v7,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r8,r11,r4
	ctx.r8.u64 = r11.u64 + ctx.r4.u64;
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v10,v0,v12
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v8,r0,r3
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r9,16
	ctx.r10.s64 = ctx.r9.s64 + 16;
	// vperm v12,v12,v8,v7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvsl v6,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// lvx128 v8,r0,r31
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r8,16
	r11.s64 = ctx.r8.s64 + 16;
	// vperm v11,v11,v8,v6
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvx128 v9,r0,r9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v12,v0,v12
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v8,r0,r10
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v9,v9,v8,v7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v8,r0,r8
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v11,v0,v11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v6,r0,r11
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,128
	r11.s64 = ctx.r1.s64 + 128;
	// lvsl v7,r0,r8
	temp.u32 = ctx.r8.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vadduhm v10,v12,v10
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vperm v8,v8,v6,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// vmrghb v9,v0,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v12,v11,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vslh v10,v10,v13
	// vmrghb v0,v0,v8
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v12,v12,v13
	// stvx v10,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,176
	r11.s64 = ctx.r1.s64 + 176;
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v12,v0,v11
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// addi r11,r1,224
	r11.s64 = ctx.r1.s64 + 224;
	// vadduhm v0,v9,v0
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v0.u16)));
	// vslh v12,v12,v13
	// vslh v0,v0,v13
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,272
	r11.s64 = ctx.r1.s64 + 272;
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
loc_8270CC0C:
	// addi r11,r6,1040
	r11.s64 = ctx.r6.s64 + 1040;
	// mr r6,r7
	ctx.r6.u64 = ctx.r7.u64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// lvx128 v1,r0,r11
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x8270bc18
	sub_8270BC18(ctx, base);
	// addi r1,r1,992
	ctx.r1.s64 = ctx.r1.s64 + 992;
	// b 0x8239bd2c
	return;
}

__attribute__((alias("__imp__sub_8270CC28"))) PPC_WEAK_FUNC(sub_8270CC28);
PPC_FUNC_IMPL(__imp__sub_8270CC28) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcf8
	// stwu r1,-896(r1)
	ea = -896 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r7,1
	r11.s64 = ctx.r7.s64 + 1;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// rlwinm r31,r11,3,0,28
	r31.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x82703690
	sub_82703690(ctx, base);
	// addi r11,r28,1040
	r11.s64 = r28.s64 + 1040;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lvx128 v1,r0,r11
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x8270bc18
	sub_8270BC18(ctx, base);
	// addi r1,r1,896
	ctx.r1.s64 = ctx.r1.s64 + 896;
	// b 0x8239bd48
	return;
}

__attribute__((alias("__imp__sub_8270CC80"))) PPC_WEAK_FUNC(sub_8270CC80);
PPC_FUNC_IMPL(__imp__sub_8270CC80) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// addi r11,r7,1
	r11.s64 = ctx.r7.s64 + 1;
	// addi r10,r6,1040
	ctx.r10.s64 = ctx.r6.s64 + 1040;
	// rlwinm r8,r11,3,0,28
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// mr r6,r4
	ctx.r6.u64 = ctx.r4.u64;
	// mr r7,r8
	ctx.r7.u64 = ctx.r8.u64;
	// lvx128 v1,r0,r10
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// b 0x8270b5f8
	sub_8270B5F8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8270CC9C"))) PPC_WEAK_FUNC(sub_8270CC9C);
PPC_FUNC_IMPL(__imp__sub_8270CC9C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8270CCA0"))) PPC_WEAK_FUNC(sub_8270CCA0);
PPC_FUNC_IMPL(__imp__sub_8270CCA0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcec
	// stwu r1,-912(r1)
	ea = -912 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r8,r3,16
	ctx.r8.s64 = ctx.r3.s64 + 16;
	// lvx128 v12,r0,r3
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r9,r3,r4
	ctx.r9.u64 = ctx.r3.u64 + ctx.r4.u64;
	// lvsl v7,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// rlwinm r11,r4,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// vspltisb v0,0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_set1_epi8(char(0x0)));
	// addi r31,r9,16
	r31.s64 = ctx.r9.s64 + 16;
	// vspltish v13,1
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// rlwinm r10,r4,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lvx128 v11,r0,r8
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r30,r11,16
	r30.s64 = r11.s64 + 16;
	// vperm v12,v12,v11,v7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// add r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 + ctx.r3.u64;
	// lvx128 v11,r0,r9
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r8,r11,r4
	ctx.r8.u64 = r11.u64 + ctx.r4.u64;
	// lvx128 v9,r0,r31
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r10,16
	ctx.r9.s64 = ctx.r10.s64 + 16;
	// vperm v11,v11,v9,v7
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v10,r0,r11
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v6,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r11,r8,16
	r11.s64 = ctx.r8.s64 + 16;
	// lvx128 v9,r0,r30
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// vperm v10,v10,v9,v6
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvx128 v9,r0,r10
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v8,r0,r9
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r7,r7,3,0,28
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 3) & 0xFFFFFFF8;
	// lvsl v7,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vperm v9,v9,v8,v7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v6,r0,r11
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v8,v0,v12
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v12,r0,r8
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r8
	temp.u32 = ctx.r8.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// vperm v7,v12,v6,v7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// cmpwi cr6,r7,8
	cr6.compare<int32_t>(ctx.r7.s32, 8, xer);
	// vmrghb v12,v0,v11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v6,v8,v13
	// vmrghb v11,v0,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v9,v0,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v10,v0,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v7,v12,v13
	// vadduhm v8,v6,v8
	_mm_store_si128((__m128i*)ctx.v8.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)ctx.v8.u16)));
	// vslh v5,v11,v13
	// vslh v4,v10,v13
	// vadduhm v7,v7,v12
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vadduhm v12,v8,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v8.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vadduhm v6,v5,v11
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v5.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// vadduhm v11,v7,v11
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,128
	r11.s64 = ctx.r1.s64 + 128;
	// vadduhm v8,v6,v10
	_mm_store_si128((__m128i*)ctx.v8.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vadduhm v12,v4,v10
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v4.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// stvx v11,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,176
	r11.s64 = ctx.r1.s64 + 176;
	// vadduhm v12,v12,v9
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// stvx v8,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,224
	r11.s64 = ctx.r1.s64 + 224;
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bne cr6,0x8270ce6c
	if (!cr6.eq) goto loc_8270CE6C;
	// add r11,r10,r4
	r11.u64 = ctx.r10.u64 + ctx.r4.u64;
	// vslh v12,v9,v13
	// rlwinm r10,r4,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r8,r11,16
	ctx.r8.s64 = r11.s64 + 16;
	// add r9,r10,r3
	ctx.r9.u64 = ctx.r10.u64 + ctx.r3.u64;
	// add r10,r11,r4
	ctx.r10.u64 = r11.u64 + ctx.r4.u64;
	// addi r31,r9,16
	r31.s64 = ctx.r9.s64 + 16;
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r11,r10,r4
	r11.u64 = ctx.r10.u64 + ctx.r4.u64;
	// lvx128 v8,r0,r8
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v11,v11,v8,v7
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v10,r0,r9
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r9,r10,16
	ctx.r9.s64 = ctx.r10.s64 + 16;
	// lvx128 v8,r0,r31
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v10,v10,v8,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// vadduhm v7,v12,v9
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v6,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r10,r11,16
	ctx.r10.s64 = r11.s64 + 16;
	// vmrghb v8,v0,v10
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v10,r0,r9
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v10,v12,v10,v6
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvsl v6,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v12,v0,v11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v9,r0,r10
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,272
	r11.s64 = ctx.r1.s64 + 272;
	// vperm v9,v11,v9,v6
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// vmrghb v11,v0,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v10,v12,v13
	// vadduhm v7,v7,v12
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vmrghb v0,v0,v9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v9,v11,v13
	// vadduhm v12,v10,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// stvx v7,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,320
	r11.s64 = ctx.r1.s64 + 320;
	// vslh v13,v0,v13
	// vadduhm v12,v12,v11
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v12,v9,v11
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// addi r11,r1,368
	r11.s64 = ctx.r1.s64 + 368;
	// vadduhm v12,v12,v0
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v0.u16)));
	// vadduhm v0,v13,v0
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v0.u16)));
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,416
	r11.s64 = ctx.r1.s64 + 416;
	// vadduhm v0,v0,v8
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v8.u16)));
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// b 0x8270ce70
	goto loc_8270CE70;
loc_8270CE6C:
	// blt cr6,0x8270cee4
	if (cr6.lt) goto loc_8270CEE4;
loc_8270CE70:
	// rlwinm r29,r4,1,0,30
	r29.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r9,r3,8
	ctx.r9.s64 = ctx.r3.s64 + 8;
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// ble cr6,0x8270cee4
	if (!cr6.gt) goto loc_8270CEE4;
	// addi r8,r7,-1
	ctx.r8.s64 = ctx.r7.s64 + -1;
	// add r11,r29,r9
	r11.u64 = r29.u64 + ctx.r9.u64;
	// rlwinm r8,r8,31,1,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 31) & 0x7FFFFFFF;
	// subf r25,r29,r4
	r25.s64 = ctx.r4.s64 - r29.s64;
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
loc_8270CE98:
	// lbz r31,0(r9)
	r31.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// lbzx r3,r25,r11
	ctx.r3.u64 = PPC_LOAD_U8(r25.u32 + r11.u32);
	// add r9,r29,r9
	ctx.r9.u64 = r29.u64 + ctx.r9.u64;
	// rotlwi r26,r31,1
	r26.u64 = __builtin_rotateleft32(r31.u32, 1);
	// lbz r28,0(r11)
	r28.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// add r3,r31,r26
	ctx.r3.u64 = r31.u64 + r26.u64;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// add r3,r3,r27
	ctx.r3.u64 = ctx.r3.u64 + r27.u64;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// sth r3,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r3.u16);
	// rlwinm r3,r30,1,0,30
	ctx.r3.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r3,r30,r3
	ctx.r3.u64 = r30.u64 + ctx.r3.u64;
	// add r3,r3,r28
	ctx.r3.u64 = ctx.r3.u64 + r28.u64;
	// sth r3,48(r10)
	PPC_STORE_U16(ctx.r10.u32 + 48, ctx.r3.u16);
	// addi r10,r10,96
	ctx.r10.s64 = ctx.r10.s64 + 96;
	// bne cr6,0x8270ce98
	if (!cr6.eq) goto loc_8270CE98;
loc_8270CEE4:
	// addi r11,r6,1040
	r11.s64 = ctx.r6.s64 + 1040;
	// mr r6,r7
	ctx.r6.u64 = ctx.r7.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lvx128 v1,r0,r11
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x8270be70
	sub_8270BE70(ctx, base);
	// addi r1,r1,912
	ctx.r1.s64 = ctx.r1.s64 + 912;
	// b 0x8239bd3c
	return;
}

__attribute__((alias("__imp__sub_8270CF00"))) PPC_WEAK_FUNC(sub_8270CF00);
PPC_FUNC_IMPL(__imp__sub_8270CF00) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCVRegister v24{};
	PPCVRegister v25{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcdc
	// stwu r1,-992(r1)
	ea = -992 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r7,1
	r11.s64 = ctx.r7.s64 + 1;
	// vspltisb v0,0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_set1_epi8(char(0x0)));
	// vspltish v13,1
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// rlwinm r7,r11,3,0,28
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// cmpwi cr6,r7,4
	cr6.compare<int32_t>(ctx.r7.s32, 4, xer);
	// beq cr6,0x8270d3fc
	if (cr6.eq) goto loc_8270D3FC;
	// cmpwi cr6,r7,8
	cr6.compare<int32_t>(ctx.r7.s32, 8, xer);
	// beq cr6,0x8270d21c
	if (cr6.eq) goto loc_8270D21C;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// ble cr6,0x8270d1b0
	if (!cr6.gt) goto loc_8270D1B0;
	// addi r11,r7,-1
	r11.s64 = ctx.r7.s64 + -1;
	// rlwinm r27,r4,1,0,30
	r27.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r9,r11,29,3,31
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 29) & 0x1FFFFFFF;
	// rlwinm r26,r4,2,0,29
	r26.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r25,r4,3,0,28
	r25.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r11,r1,224
	r11.s64 = ctx.r1.s64 + 224;
	// addi r28,r9,1
	r28.s64 = ctx.r9.s64 + 1;
loc_8270CF54:
	// add r8,r26,r10
	ctx.r8.u64 = r26.u64 + ctx.r10.u64;
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r10,16
	r29.s64 = ctx.r10.s64 + 16;
	// lvsl v7,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r9,r27,r10
	ctx.r9.u64 = r27.u64 + ctx.r10.u64;
	// add r30,r10,r4
	r30.u64 = ctx.r10.u64 + ctx.r4.u64;
	// add r31,r25,r10
	r31.u64 = r25.u64 + ctx.r10.u64;
	// add r10,r8,r4
	ctx.r10.u64 = ctx.r8.u64 + ctx.r4.u64;
	// lvx128 v8,r0,r8
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v11,r0,r29
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r29,r9,r4
	r29.u64 = ctx.r9.u64 + ctx.r4.u64;
	// vperm v12,v12,v11,v7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v9,r0,r9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v10,r0,r30
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r24,r30,16
	r24.s64 = r30.s64 + 16;
	// lvsl v5,r0,r30
	temp.u32 = r30.u32;
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r23,r9,16
	r23.s64 = ctx.r9.s64 + 16;
	// lvsl v3,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r9,r10,r4
	ctx.r9.u64 = ctx.r10.u64 + ctx.r4.u64;
	// lvx128 v29,r0,r10
	_mm_store_si128((__m128i*)v29.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r30,r10,16
	r30.s64 = ctx.r10.s64 + 16;
	// lvsl v11,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// lvsl v1,r0,r8
	temp.u32 = ctx.r8.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r22,r8,16
	r22.s64 = ctx.r8.s64 + 16;
	// addi r8,r29,16
	ctx.r8.s64 = r29.s64 + 16;
	// lvx128 v6,r0,r24
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r24.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v4,r0,r23
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r23.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v24,v0,v12
	_mm_store_si128((__m128i*)v24.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v31,r0,r29
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v11,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r10,r9,r4
	ctx.r10.u64 = ctx.r9.u64 + ctx.r4.u64;
	// lvx128 v2,r0,r22
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r22.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v11,v10,v6,v5
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// lvx128 v30,r0,r8
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v10,v9,v4,v3
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// lvsl v7,r0,r29
	temp.u32 = r29.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vperm v9,v8,v2,v1
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// vperm v8,v31,v30,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v28,r0,r30
	_mm_store_si128((__m128i*)v28.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v31,r0,r10
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r30,r10,16
	r30.s64 = ctx.r10.s64 + 16;
	// lvsl v7,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// addi r8,r9,16
	ctx.r8.s64 = ctx.r9.s64 + 16;
	// lvx128 v2,r0,r9
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v1,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r29,r31,16
	r29.s64 = r31.s64 + 16;
	// vmrghb v6,v0,v11
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v26,r0,r31
	_mm_store_si128((__m128i*)v26.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v27,r0,r30
	_mm_store_si128((__m128i*)v27.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v5,v0,v10
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// stvx v7,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// lvsl v7,r0,r31
	temp.u32 = r31.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v4,v0,v8
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v30,r0,r8
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v3,v0,v9
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vperm v2,v2,v30,v1
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// lvx128 v25,r0,r29
	_mm_store_si128((__m128i*)v25.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v7,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// lvx128 v7,r0,r10
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v7,v29,v28,v7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v29.u8), _mm_load_si128((__m128i*)v28.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// vmrghb v29,v0,v2
	_mm_store_si128((__m128i*)v29.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v30,v0,v7
	_mm_store_si128((__m128i*)v30.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lvx128 v1,r0,r10
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// vperm v31,v31,v27,v1
	_mm_store_si128((__m128i*)v31.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)v27.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// lvx128 v1,r0,r10
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v28,v0,v31
	_mm_store_si128((__m128i*)v28.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vperm v1,v26,v25,v1
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v26.u8), _mm_load_si128((__m128i*)v25.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// vadduhm v26,v6,v24
	_mm_store_si128((__m128i*)v26.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)v24.u16)));
	// vadduhm v25,v5,v6
	_mm_store_si128((__m128i*)v25.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v5.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vmrglb v24,v0,v12
	_mm_store_si128((__m128i*)v24.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v5,v4,v5
	_mm_store_si128((__m128i*)ctx.v5.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v4.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vmrglb v12,v0,v11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v4,v3,v4
	_mm_store_si128((__m128i*)ctx.v4.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v4.u16)));
	// vmrglb v11,v0,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v27,v0,v1
	_mm_store_si128((__m128i*)v27.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrglb v10,v0,v8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// addi r10,r11,-96
	ctx.r10.s64 = r11.s64 + -96;
	// vmrglb v8,v0,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v3,v30,v3
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v30.u16), _mm_load_si128((__m128i*)ctx.v3.u16)));
	// vmrglb v7,v0,v2
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// addi r9,r11,-48
	ctx.r9.s64 = r11.s64 + -48;
	// vmrglb v6,v0,v31
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v31,v28,v29
	_mm_store_si128((__m128i*)v31.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)v29.u16)));
	// vmrglb v2,v0,v1
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v1,v29,v30
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v29.u16), _mm_load_si128((__m128i*)v30.u16)));
	// vslh v29,v26,v13
	// vmrglb v9,v0,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v30,v27,v28
	_mm_store_si128((__m128i*)v30.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v27.u16), _mm_load_si128((__m128i*)v28.u16)));
	// addi r8,r11,48
	ctx.r8.s64 = r11.s64 + 48;
	// addi r30,r11,96
	r30.s64 = r11.s64 + 96;
	// vadduhm v27,v12,v24
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)v24.u16)));
	// addi r29,r11,144
	r29.s64 = r11.s64 + 144;
	// vslh v28,v25,v13
	// stvx v29,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v29.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v29,v9,v10
	_mm_store_si128((__m128i*)v29.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// addi r24,r11,192
	r24.s64 = r11.s64 + 192;
	// vadduhm v9,v8,v9
	_mm_store_si128((__m128i*)ctx.v9.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v8.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// addi r23,r11,240
	r23.s64 = r11.s64 + 240;
	// vadduhm v8,v7,v8
	_mm_store_si128((__m128i*)ctx.v8.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v8.u16)));
	// vslh v4,v4,v13
	// stvx v28,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v28.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v3,v3,v13
	// addi r9,r11,-80
	ctx.r9.s64 = r11.s64 + -80;
	// vslh v1,v1,v13
	// addi r22,r11,208
	r22.s64 = r11.s64 + 208;
	// vslh v31,v31,v13
	// addi r21,r11,256
	r21.s64 = r11.s64 + 256;
	// vslh v30,v30,v13
	// stvx v4,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v12,v11,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// stvx v3,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v7,v6,v7
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// stvx v1,r0,r29
	_mm_store_si128((__m128i*)(base + ((r29.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v5,v5,v13
	// stvx v31,r0,r24
	_mm_store_si128((__m128i*)(base + ((r24.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v11,v10,v11
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// stvx v30,r0,r23
	_mm_store_si128((__m128i*)(base + ((r23.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v6,v2,v6
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// addi r8,r11,-32
	ctx.r8.s64 = r11.s64 + -32;
	// addi r30,r11,16
	r30.s64 = r11.s64 + 16;
	// vslh v10,v27,v13
	// stvx v5,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r11,64
	r29.s64 = r11.s64 + 64;
	// addi r24,r11,112
	r24.s64 = r11.s64 + 112;
	// vslh v12,v12,v13
	// addi r23,r11,160
	r23.s64 = r11.s64 + 160;
	// vslh v11,v11,v13
	// vslh v5,v29,v13
	// addi r28,r28,-1
	r28.s64 = r28.s64 + -1;
	// vslh v9,v9,v13
	// mr r10,r31
	ctx.r10.u64 = r31.u64;
	// vslh v8,v8,v13
	// addi r11,r11,384
	r11.s64 = r11.s64 + 384;
	// vslh v7,v7,v13
	// stvx v10,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v6,v6,v13
	// stvx v12,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// stvx v11,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v5,r0,r29
	_mm_store_si128((__m128i*)(base + ((r29.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v9,r0,r24
	_mm_store_si128((__m128i*)(base + ((r24.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v8,r0,r23
	_mm_store_si128((__m128i*)(base + ((r23.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v7,r0,r22
	_mm_store_si128((__m128i*)(base + ((r22.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v6,r0,r21
	_mm_store_si128((__m128i*)(base + ((r21.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bne cr6,0x8270cf54
	if (!cr6.eq) goto loc_8270CF54;
loc_8270D1B0:
	// rlwinm r31,r4,1,0,30
	r31.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r9,r3,16
	ctx.r9.s64 = ctx.r3.s64 + 16;
	// addi r10,r1,160
	ctx.r10.s64 = ctx.r1.s64 + 160;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// ble cr6,0x8270d4cc
	if (!cr6.gt) goto loc_8270D4CC;
	// addi r8,r7,-1
	ctx.r8.s64 = ctx.r7.s64 + -1;
	// add r11,r31,r9
	r11.u64 = r31.u64 + ctx.r9.u64;
	// rlwinm r8,r8,31,1,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 31) & 0x7FFFFFFF;
	// subf r27,r31,r4
	r27.s64 = ctx.r4.s64 - r31.s64;
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
loc_8270D1D8:
	// lbzx r3,r27,r11
	ctx.r3.u64 = PPC_LOAD_U8(r27.u32 + r11.u32);
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// lbz r30,0(r11)
	r30.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// lbz r29,0(r9)
	r29.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// add r3,r30,r3
	ctx.r3.u64 = r30.u64 + ctx.r3.u64;
	// add r29,r29,r28
	r29.u64 = r29.u64 + r28.u64;
	// rlwinm r3,r3,1,0,30
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r30,r29,1,0,30
	r30.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r31,r9
	ctx.r9.u64 = r31.u64 + ctx.r9.u64;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// sth r3,48(r10)
	PPC_STORE_U16(ctx.r10.u32 + 48, ctx.r3.u16);
	// sth r30,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, r30.u16);
	// addi r10,r10,96
	ctx.r10.s64 = ctx.r10.s64 + 96;
	// bne cr6,0x8270d1d8
	if (!cr6.eq) goto loc_8270D1D8;
	// b 0x8270d4cc
	goto loc_8270D4CC;
loc_8270D21C:
	// add r8,r3,r4
	ctx.r8.u64 = ctx.r3.u64 + ctx.r4.u64;
	// lvx128 v12,r0,r3
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r30,r3,16
	r30.s64 = ctx.r3.s64 + 16;
	// lvsl v7,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// rlwinm r10,r4,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r29,r8,16
	r29.s64 = ctx.r8.s64 + 16;
	// add r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 + ctx.r3.u64;
	// rlwinm r11,r4,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lvx128 v10,r0,r8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v11,r0,r30
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r10,16
	r28.s64 = ctx.r10.s64 + 16;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// vperm v5,v12,v11,v7
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v9,r0,r29
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r9,r4,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r27,r11,16
	r27.s64 = r11.s64 + 16;
	// lvsl v7,r0,r8
	temp.u32 = ctx.r8.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vperm v10,v10,v9,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// add r30,r10,r4
	r30.u64 = ctx.r10.u64 + ctx.r4.u64;
	// lvx128 v11,r0,r10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r31,r9,r3
	r31.u64 = ctx.r9.u64 + ctx.r3.u64;
	// lvx128 v9,r0,r28
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r9,r11,r4
	ctx.r9.u64 = r11.u64 + ctx.r4.u64;
	// lvsl v6,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r10,r30,16
	ctx.r10.s64 = r30.s64 + 16;
	// vperm v11,v11,v9,v6
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvx128 v12,r0,r11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r8,r9,16
	ctx.r8.s64 = ctx.r9.s64 + 16;
	// lvx128 v9,r0,r27
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r9,r4
	r11.u64 = ctx.r9.u64 + ctx.r4.u64;
	// vperm v9,v12,v9,v7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v8,r0,r30
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v6,r0,r10
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v12,v0,v10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvsl v7,r0,r30
	temp.u32 = r30.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r10,r11,r4
	ctx.r10.u64 = r11.u64 + ctx.r4.u64;
	// vperm v8,v8,v6,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v7,r0,r8
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v10,v0,v9
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v9,r0,r9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v4,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r9,r11,16
	ctx.r9.s64 = r11.s64 + 16;
	// vperm v7,v9,v7,v4
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v4.u8)));
	// lvsl v6,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v9,v0,v8
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// rlwinm r8,r4,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// vmrghb v5,v0,v5
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v11,v0,v11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v8,v0,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v7,r0,r11
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r10,16
	r11.s64 = ctx.r10.s64 + 16;
	// lvx128 v4,r0,r9
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v7,v7,v4,v6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvx128 v6,r0,r10
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v4,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vadduhm v5,v12,v5
	_mm_store_si128((__m128i*)ctx.v5.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vadduhm v12,v11,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// addi r9,r3,8
	ctx.r9.s64 = ctx.r3.s64 + 8;
	// vadduhm v11,v9,v11
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// addi r10,r1,144
	ctx.r10.s64 = ctx.r1.s64 + 144;
	// lvx128 v3,r0,r11
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r31,16
	r11.s64 = r31.s64 + 16;
	// vperm v6,v6,v3,v4
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)ctx.v4.u8)));
	// lvx128 v4,r0,r31
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v3,r0,r31
	temp.u32 = r31.u32;
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v7,v0,v7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v9,v10,v9
	_mm_store_si128((__m128i*)ctx.v9.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// li r3,4
	ctx.r3.s64 = 4;
	// vadduhm v10,v8,v10
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v8.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// lvx128 v2,r0,r11
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v6,v0,v6
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vperm v4,v4,v2,v3
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// vadduhm v8,v7,v8
	_mm_store_si128((__m128i*)ctx.v8.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v8.u16)));
	// vslh v12,v12,v13
	// vslh v11,v11,v13
	// vadduhm v7,v6,v7
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vmrghb v0,v0,v4
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v9,v9,v13
	// vadduhm v0,v0,v6
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vslh v6,v5,v13
	// addi r11,r1,128
	r11.s64 = ctx.r1.s64 + 128;
	// vslh v10,v10,v13
	// vslh v8,v8,v13
	// subf r27,r8,r4
	r27.s64 = ctx.r4.s64 - ctx.r8.s64;
	// vslh v7,v7,v13
	// vslh v0,v0,v13
	// stvx v6,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,176
	r11.s64 = ctx.r1.s64 + 176;
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,224
	r11.s64 = ctx.r1.s64 + 224;
	// stvx v11,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,272
	r11.s64 = ctx.r1.s64 + 272;
	// stvx v9,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,320
	r11.s64 = ctx.r1.s64 + 320;
	// stvx v10,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,368
	r11.s64 = ctx.r1.s64 + 368;
	// stvx v8,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,416
	r11.s64 = ctx.r1.s64 + 416;
	// stvx v7,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,464
	r11.s64 = ctx.r1.s64 + 464;
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r8,r9
	r11.u64 = ctx.r8.u64 + ctx.r9.u64;
loc_8270D3B8:
	// lbzx r31,r11,r27
	r31.u64 = PPC_LOAD_U8(r11.u32 + r27.u32);
	// addi r3,r3,-1
	ctx.r3.s64 = ctx.r3.s64 + -1;
	// lbz r30,0(r11)
	r30.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// lbz r29,0(r9)
	r29.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// mr r28,r31
	r28.u64 = r31.u64;
	// add r31,r30,r31
	r31.u64 = r30.u64 + r31.u64;
	// add r29,r29,r28
	r29.u64 = r29.u64 + r28.u64;
	// rlwinm r31,r31,1,0,30
	r31.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r30,r29,1,0,30
	r30.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r8,r9
	ctx.r9.u64 = ctx.r8.u64 + ctx.r9.u64;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// sth r31,48(r10)
	PPC_STORE_U16(ctx.r10.u32 + 48, r31.u16);
	// sth r30,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, r30.u16);
	// addi r10,r10,96
	ctx.r10.s64 = ctx.r10.s64 + 96;
	// bne cr6,0x8270d3b8
	if (!cr6.eq) goto loc_8270D3B8;
	// b 0x8270d4cc
	goto loc_8270D4CC;
loc_8270D3FC:
	// addi r8,r3,16
	ctx.r8.s64 = ctx.r3.s64 + 16;
	// lvx128 v12,r0,r3
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r11,r4,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// lvsl v7,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// rlwinm r9,r4,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r3,r4
	ctx.r10.u64 = ctx.r3.u64 + ctx.r4.u64;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// lvx128 v11,r0,r8
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r9,r9,r3
	ctx.r9.u64 = ctx.r9.u64 + ctx.r3.u64;
	// vperm v12,v12,v11,v7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// addi r3,r10,16
	ctx.r3.s64 = ctx.r10.s64 + 16;
	// addi r31,r11,16
	r31.s64 = r11.s64 + 16;
	// lvsl v7,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r8,r11,r4
	ctx.r8.u64 = r11.u64 + ctx.r4.u64;
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v10,v0,v12
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v8,r0,r3
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r9,16
	ctx.r10.s64 = ctx.r9.s64 + 16;
	// vperm v12,v12,v8,v7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvsl v6,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// lvx128 v8,r0,r31
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r8,16
	r11.s64 = ctx.r8.s64 + 16;
	// vperm v11,v11,v8,v6
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvx128 v9,r0,r9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v12,v0,v12
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v8,r0,r10
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v9,v9,v8,v7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v8,r0,r8
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v11,v0,v11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v6,r0,r11
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,128
	r11.s64 = ctx.r1.s64 + 128;
	// lvsl v7,r0,r8
	temp.u32 = ctx.r8.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vadduhm v10,v12,v10
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vperm v8,v8,v6,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// vmrghb v9,v0,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v12,v11,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vslh v10,v10,v13
	// vmrghb v0,v0,v8
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v12,v12,v13
	// stvx v10,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,176
	r11.s64 = ctx.r1.s64 + 176;
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v12,v0,v11
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// addi r11,r1,224
	r11.s64 = ctx.r1.s64 + 224;
	// vadduhm v0,v9,v0
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v0.u16)));
	// vslh v12,v12,v13
	// vslh v0,v0,v13
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,272
	r11.s64 = ctx.r1.s64 + 272;
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
loc_8270D4CC:
	// addi r11,r6,1040
	r11.s64 = ctx.r6.s64 + 1040;
	// mr r6,r7
	ctx.r6.u64 = ctx.r7.u64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// lvx128 v1,r0,r11
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x8270be70
	sub_8270BE70(ctx, base);
	// addi r1,r1,992
	ctx.r1.s64 = ctx.r1.s64 + 992;
	// b 0x8239bd2c
	return;
}

__attribute__((alias("__imp__sub_8270D4E8"))) PPC_WEAK_FUNC(sub_8270D4E8);
PPC_FUNC_IMPL(__imp__sub_8270D4E8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcf8
	// stwu r1,-896(r1)
	ea = -896 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r7,1
	r11.s64 = ctx.r7.s64 + 1;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// rlwinm r31,r11,3,0,28
	r31.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x82703690
	sub_82703690(ctx, base);
	// addi r11,r28,1040
	r11.s64 = r28.s64 + 1040;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lvx128 v1,r0,r11
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x8270be70
	sub_8270BE70(ctx, base);
	// addi r1,r1,896
	ctx.r1.s64 = ctx.r1.s64 + 896;
	// b 0x8239bd48
	return;
}

__attribute__((alias("__imp__sub_8270D540"))) PPC_WEAK_FUNC(sub_8270D540);
PPC_FUNC_IMPL(__imp__sub_8270D540) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// addi r11,r7,1
	r11.s64 = ctx.r7.s64 + 1;
	// addi r10,r6,1040
	ctx.r10.s64 = ctx.r6.s64 + 1040;
	// rlwinm r8,r11,3,0,28
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// mr r6,r4
	ctx.r6.u64 = ctx.r4.u64;
	// mr r7,r8
	ctx.r7.u64 = ctx.r8.u64;
	// lvx128 v1,r0,r10
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// b 0x8270b930
	sub_8270B930(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8270D55C"))) PPC_WEAK_FUNC(sub_8270D55C);
PPC_FUNC_IMPL(__imp__sub_8270D55C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8270D560"))) PPC_WEAK_FUNC(sub_8270D560);
PPC_FUNC_IMPL(__imp__sub_8270D560) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcec
	// stwu r1,-912(r1)
	ea = -912 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r8,r3,16
	ctx.r8.s64 = ctx.r3.s64 + 16;
	// lvx128 v12,r0,r3
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r9,r3,r4
	ctx.r9.u64 = ctx.r3.u64 + ctx.r4.u64;
	// lvsl v7,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// rlwinm r11,r4,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// vspltisb v0,0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_set1_epi8(char(0x0)));
	// addi r31,r9,16
	r31.s64 = ctx.r9.s64 + 16;
	// vspltish v13,1
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// rlwinm r10,r4,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lvx128 v11,r0,r8
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r30,r11,16
	r30.s64 = r11.s64 + 16;
	// vperm v12,v12,v11,v7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// add r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 + ctx.r3.u64;
	// lvx128 v11,r0,r9
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r8,r11,r4
	ctx.r8.u64 = r11.u64 + ctx.r4.u64;
	// lvx128 v9,r0,r31
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r10,16
	ctx.r9.s64 = ctx.r10.s64 + 16;
	// vperm v11,v11,v9,v7
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v10,r0,r11
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v6,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r11,r8,16
	r11.s64 = ctx.r8.s64 + 16;
	// lvx128 v9,r0,r30
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// vperm v10,v10,v9,v6
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvx128 v9,r0,r10
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v8,r0,r9
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r7,r7,3,0,28
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 3) & 0xFFFFFFF8;
	// lvsl v7,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vperm v9,v9,v8,v7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v6,r0,r11
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v8,v0,v12
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v12,r0,r8
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r8
	temp.u32 = ctx.r8.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// vperm v7,v12,v6,v7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// cmpwi cr6,r7,8
	cr6.compare<int32_t>(ctx.r7.s32, 8, xer);
	// vmrghb v12,v0,v11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v6,v8,v13
	// vmrghb v11,v0,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v9,v0,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v10,v0,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v7,v12,v13
	// vadduhm v8,v6,v8
	_mm_store_si128((__m128i*)ctx.v8.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)ctx.v8.u16)));
	// vslh v5,v11,v13
	// vslh v4,v10,v13
	// vadduhm v7,v7,v12
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vadduhm v12,v8,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v8.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vadduhm v6,v5,v11
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v5.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// vadduhm v11,v7,v11
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,128
	r11.s64 = ctx.r1.s64 + 128;
	// vadduhm v8,v6,v10
	_mm_store_si128((__m128i*)ctx.v8.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vadduhm v12,v4,v10
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v4.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// stvx v11,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,176
	r11.s64 = ctx.r1.s64 + 176;
	// vadduhm v12,v12,v9
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// stvx v8,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,224
	r11.s64 = ctx.r1.s64 + 224;
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bne cr6,0x8270d72c
	if (!cr6.eq) goto loc_8270D72C;
	// add r11,r10,r4
	r11.u64 = ctx.r10.u64 + ctx.r4.u64;
	// vslh v12,v9,v13
	// rlwinm r10,r4,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r8,r11,16
	ctx.r8.s64 = r11.s64 + 16;
	// add r9,r10,r3
	ctx.r9.u64 = ctx.r10.u64 + ctx.r3.u64;
	// add r10,r11,r4
	ctx.r10.u64 = r11.u64 + ctx.r4.u64;
	// addi r31,r9,16
	r31.s64 = ctx.r9.s64 + 16;
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r11,r10,r4
	r11.u64 = ctx.r10.u64 + ctx.r4.u64;
	// lvx128 v8,r0,r8
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v11,v11,v8,v7
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v10,r0,r9
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r9,r10,16
	ctx.r9.s64 = ctx.r10.s64 + 16;
	// lvx128 v8,r0,r31
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v10,v10,v8,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// vadduhm v7,v12,v9
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v6,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r10,r11,16
	ctx.r10.s64 = r11.s64 + 16;
	// vmrghb v8,v0,v10
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v10,r0,r9
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v10,v12,v10,v6
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvsl v6,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v12,v0,v11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v9,r0,r10
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,272
	r11.s64 = ctx.r1.s64 + 272;
	// vperm v9,v11,v9,v6
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// vmrghb v11,v0,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v10,v12,v13
	// vadduhm v7,v7,v12
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vmrghb v0,v0,v9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v9,v11,v13
	// vadduhm v12,v10,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// stvx v7,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,320
	r11.s64 = ctx.r1.s64 + 320;
	// vslh v13,v0,v13
	// vadduhm v12,v12,v11
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v12,v9,v11
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// addi r11,r1,368
	r11.s64 = ctx.r1.s64 + 368;
	// vadduhm v12,v12,v0
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v0.u16)));
	// vadduhm v0,v13,v0
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v0.u16)));
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,416
	r11.s64 = ctx.r1.s64 + 416;
	// vadduhm v0,v0,v8
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v8.u16)));
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// b 0x8270d730
	goto loc_8270D730;
loc_8270D72C:
	// blt cr6,0x8270d7a4
	if (cr6.lt) goto loc_8270D7A4;
loc_8270D730:
	// rlwinm r29,r4,1,0,30
	r29.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r9,r3,8
	ctx.r9.s64 = ctx.r3.s64 + 8;
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// ble cr6,0x8270d7a4
	if (!cr6.gt) goto loc_8270D7A4;
	// addi r8,r7,-1
	ctx.r8.s64 = ctx.r7.s64 + -1;
	// add r11,r29,r9
	r11.u64 = r29.u64 + ctx.r9.u64;
	// rlwinm r8,r8,31,1,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 31) & 0x7FFFFFFF;
	// subf r25,r29,r4
	r25.s64 = ctx.r4.s64 - r29.s64;
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
loc_8270D758:
	// lbz r31,0(r9)
	r31.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// lbzx r3,r25,r11
	ctx.r3.u64 = PPC_LOAD_U8(r25.u32 + r11.u32);
	// add r9,r29,r9
	ctx.r9.u64 = r29.u64 + ctx.r9.u64;
	// rotlwi r26,r31,1
	r26.u64 = __builtin_rotateleft32(r31.u32, 1);
	// lbz r28,0(r11)
	r28.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// add r3,r31,r26
	ctx.r3.u64 = r31.u64 + r26.u64;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// add r3,r3,r27
	ctx.r3.u64 = ctx.r3.u64 + r27.u64;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// sth r3,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r3.u16);
	// rlwinm r3,r30,1,0,30
	ctx.r3.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r3,r30,r3
	ctx.r3.u64 = r30.u64 + ctx.r3.u64;
	// add r3,r3,r28
	ctx.r3.u64 = ctx.r3.u64 + r28.u64;
	// sth r3,48(r10)
	PPC_STORE_U16(ctx.r10.u32 + 48, ctx.r3.u16);
	// addi r10,r10,96
	ctx.r10.s64 = ctx.r10.s64 + 96;
	// bne cr6,0x8270d758
	if (!cr6.eq) goto loc_8270D758;
loc_8270D7A4:
	// addi r11,r6,1040
	r11.s64 = ctx.r6.s64 + 1040;
	// mr r6,r7
	ctx.r6.u64 = ctx.r7.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lvx128 v1,r0,r11
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x8270c108
	sub_8270C108(ctx, base);
	// addi r1,r1,912
	ctx.r1.s64 = ctx.r1.s64 + 912;
	// b 0x8239bd3c
	return;
}

__attribute__((alias("__imp__sub_8270D7C0"))) PPC_WEAK_FUNC(sub_8270D7C0);
PPC_FUNC_IMPL(__imp__sub_8270D7C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCVRegister v24{};
	PPCVRegister v25{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcdc
	// stwu r1,-992(r1)
	ea = -992 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r7,1
	r11.s64 = ctx.r7.s64 + 1;
	// vspltisb v0,0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_set1_epi8(char(0x0)));
	// vspltish v13,1
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// rlwinm r7,r11,3,0,28
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// cmpwi cr6,r7,4
	cr6.compare<int32_t>(ctx.r7.s32, 4, xer);
	// beq cr6,0x8270dcbc
	if (cr6.eq) goto loc_8270DCBC;
	// cmpwi cr6,r7,8
	cr6.compare<int32_t>(ctx.r7.s32, 8, xer);
	// beq cr6,0x8270dadc
	if (cr6.eq) goto loc_8270DADC;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// ble cr6,0x8270da70
	if (!cr6.gt) goto loc_8270DA70;
	// addi r11,r7,-1
	r11.s64 = ctx.r7.s64 + -1;
	// rlwinm r27,r4,1,0,30
	r27.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r9,r11,29,3,31
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 29) & 0x1FFFFFFF;
	// rlwinm r26,r4,2,0,29
	r26.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r25,r4,3,0,28
	r25.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r11,r1,224
	r11.s64 = ctx.r1.s64 + 224;
	// addi r28,r9,1
	r28.s64 = ctx.r9.s64 + 1;
loc_8270D814:
	// add r8,r26,r10
	ctx.r8.u64 = r26.u64 + ctx.r10.u64;
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r10,16
	r29.s64 = ctx.r10.s64 + 16;
	// lvsl v7,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r9,r27,r10
	ctx.r9.u64 = r27.u64 + ctx.r10.u64;
	// add r30,r10,r4
	r30.u64 = ctx.r10.u64 + ctx.r4.u64;
	// add r31,r25,r10
	r31.u64 = r25.u64 + ctx.r10.u64;
	// add r10,r8,r4
	ctx.r10.u64 = ctx.r8.u64 + ctx.r4.u64;
	// lvx128 v8,r0,r8
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v11,r0,r29
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r29,r9,r4
	r29.u64 = ctx.r9.u64 + ctx.r4.u64;
	// vperm v12,v12,v11,v7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v9,r0,r9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v10,r0,r30
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r24,r30,16
	r24.s64 = r30.s64 + 16;
	// lvsl v5,r0,r30
	temp.u32 = r30.u32;
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r23,r9,16
	r23.s64 = ctx.r9.s64 + 16;
	// lvsl v3,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r9,r10,r4
	ctx.r9.u64 = ctx.r10.u64 + ctx.r4.u64;
	// lvx128 v29,r0,r10
	_mm_store_si128((__m128i*)v29.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r30,r10,16
	r30.s64 = ctx.r10.s64 + 16;
	// lvsl v11,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// lvsl v1,r0,r8
	temp.u32 = ctx.r8.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r22,r8,16
	r22.s64 = ctx.r8.s64 + 16;
	// addi r8,r29,16
	ctx.r8.s64 = r29.s64 + 16;
	// lvx128 v6,r0,r24
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r24.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v4,r0,r23
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r23.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v24,v0,v12
	_mm_store_si128((__m128i*)v24.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v31,r0,r29
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v11,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r10,r9,r4
	ctx.r10.u64 = ctx.r9.u64 + ctx.r4.u64;
	// lvx128 v2,r0,r22
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r22.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v11,v10,v6,v5
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// lvx128 v30,r0,r8
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v10,v9,v4,v3
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// lvsl v7,r0,r29
	temp.u32 = r29.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vperm v9,v8,v2,v1
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// vperm v8,v31,v30,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v28,r0,r30
	_mm_store_si128((__m128i*)v28.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v31,r0,r10
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r30,r10,16
	r30.s64 = ctx.r10.s64 + 16;
	// lvsl v7,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// addi r8,r9,16
	ctx.r8.s64 = ctx.r9.s64 + 16;
	// lvx128 v2,r0,r9
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v1,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r29,r31,16
	r29.s64 = r31.s64 + 16;
	// vmrghb v6,v0,v11
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v26,r0,r31
	_mm_store_si128((__m128i*)v26.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v27,r0,r30
	_mm_store_si128((__m128i*)v27.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v5,v0,v10
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// stvx v7,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// lvsl v7,r0,r31
	temp.u32 = r31.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v4,v0,v8
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v30,r0,r8
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v3,v0,v9
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vperm v2,v2,v30,v1
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// lvx128 v25,r0,r29
	_mm_store_si128((__m128i*)v25.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v7,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// lvx128 v7,r0,r10
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v7,v29,v28,v7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v29.u8), _mm_load_si128((__m128i*)v28.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// vmrghb v29,v0,v2
	_mm_store_si128((__m128i*)v29.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v30,v0,v7
	_mm_store_si128((__m128i*)v30.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lvx128 v1,r0,r10
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// vperm v31,v31,v27,v1
	_mm_store_si128((__m128i*)v31.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)v27.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// lvx128 v1,r0,r10
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v28,v0,v31
	_mm_store_si128((__m128i*)v28.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vperm v1,v26,v25,v1
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v26.u8), _mm_load_si128((__m128i*)v25.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// vadduhm v26,v6,v24
	_mm_store_si128((__m128i*)v26.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)v24.u16)));
	// vadduhm v25,v5,v6
	_mm_store_si128((__m128i*)v25.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v5.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vmrglb v24,v0,v12
	_mm_store_si128((__m128i*)v24.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v5,v4,v5
	_mm_store_si128((__m128i*)ctx.v5.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v4.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vmrglb v12,v0,v11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v4,v3,v4
	_mm_store_si128((__m128i*)ctx.v4.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v4.u16)));
	// vmrglb v11,v0,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v27,v0,v1
	_mm_store_si128((__m128i*)v27.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrglb v10,v0,v8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// addi r10,r11,-96
	ctx.r10.s64 = r11.s64 + -96;
	// vmrglb v8,v0,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v3,v30,v3
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v30.u16), _mm_load_si128((__m128i*)ctx.v3.u16)));
	// vmrglb v7,v0,v2
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// addi r9,r11,-48
	ctx.r9.s64 = r11.s64 + -48;
	// vmrglb v6,v0,v31
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v31,v28,v29
	_mm_store_si128((__m128i*)v31.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)v29.u16)));
	// vmrglb v2,v0,v1
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v1,v29,v30
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v29.u16), _mm_load_si128((__m128i*)v30.u16)));
	// vslh v29,v26,v13
	// vmrglb v9,v0,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v30,v27,v28
	_mm_store_si128((__m128i*)v30.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v27.u16), _mm_load_si128((__m128i*)v28.u16)));
	// addi r8,r11,48
	ctx.r8.s64 = r11.s64 + 48;
	// addi r30,r11,96
	r30.s64 = r11.s64 + 96;
	// vadduhm v27,v12,v24
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)v24.u16)));
	// addi r29,r11,144
	r29.s64 = r11.s64 + 144;
	// vslh v28,v25,v13
	// stvx v29,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v29.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v29,v9,v10
	_mm_store_si128((__m128i*)v29.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// addi r24,r11,192
	r24.s64 = r11.s64 + 192;
	// vadduhm v9,v8,v9
	_mm_store_si128((__m128i*)ctx.v9.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v8.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// addi r23,r11,240
	r23.s64 = r11.s64 + 240;
	// vadduhm v8,v7,v8
	_mm_store_si128((__m128i*)ctx.v8.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v8.u16)));
	// vslh v4,v4,v13
	// stvx v28,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v28.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v3,v3,v13
	// addi r9,r11,-80
	ctx.r9.s64 = r11.s64 + -80;
	// vslh v1,v1,v13
	// addi r22,r11,208
	r22.s64 = r11.s64 + 208;
	// vslh v31,v31,v13
	// addi r21,r11,256
	r21.s64 = r11.s64 + 256;
	// vslh v30,v30,v13
	// stvx v4,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v12,v11,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// stvx v3,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v7,v6,v7
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// stvx v1,r0,r29
	_mm_store_si128((__m128i*)(base + ((r29.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v5,v5,v13
	// stvx v31,r0,r24
	_mm_store_si128((__m128i*)(base + ((r24.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v11,v10,v11
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// stvx v30,r0,r23
	_mm_store_si128((__m128i*)(base + ((r23.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v6,v2,v6
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// addi r8,r11,-32
	ctx.r8.s64 = r11.s64 + -32;
	// addi r30,r11,16
	r30.s64 = r11.s64 + 16;
	// vslh v10,v27,v13
	// stvx v5,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r11,64
	r29.s64 = r11.s64 + 64;
	// addi r24,r11,112
	r24.s64 = r11.s64 + 112;
	// vslh v12,v12,v13
	// addi r23,r11,160
	r23.s64 = r11.s64 + 160;
	// vslh v11,v11,v13
	// vslh v5,v29,v13
	// addi r28,r28,-1
	r28.s64 = r28.s64 + -1;
	// vslh v9,v9,v13
	// mr r10,r31
	ctx.r10.u64 = r31.u64;
	// vslh v8,v8,v13
	// addi r11,r11,384
	r11.s64 = r11.s64 + 384;
	// vslh v7,v7,v13
	// stvx v10,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v6,v6,v13
	// stvx v12,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// stvx v11,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v5,r0,r29
	_mm_store_si128((__m128i*)(base + ((r29.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v9,r0,r24
	_mm_store_si128((__m128i*)(base + ((r24.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v8,r0,r23
	_mm_store_si128((__m128i*)(base + ((r23.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v7,r0,r22
	_mm_store_si128((__m128i*)(base + ((r22.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v6,r0,r21
	_mm_store_si128((__m128i*)(base + ((r21.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bne cr6,0x8270d814
	if (!cr6.eq) goto loc_8270D814;
loc_8270DA70:
	// rlwinm r31,r4,1,0,30
	r31.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r9,r3,16
	ctx.r9.s64 = ctx.r3.s64 + 16;
	// addi r10,r1,160
	ctx.r10.s64 = ctx.r1.s64 + 160;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// ble cr6,0x8270dd8c
	if (!cr6.gt) goto loc_8270DD8C;
	// addi r8,r7,-1
	ctx.r8.s64 = ctx.r7.s64 + -1;
	// add r11,r31,r9
	r11.u64 = r31.u64 + ctx.r9.u64;
	// rlwinm r8,r8,31,1,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 31) & 0x7FFFFFFF;
	// subf r27,r31,r4
	r27.s64 = ctx.r4.s64 - r31.s64;
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
loc_8270DA98:
	// lbzx r3,r27,r11
	ctx.r3.u64 = PPC_LOAD_U8(r27.u32 + r11.u32);
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// lbz r30,0(r11)
	r30.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// lbz r29,0(r9)
	r29.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// add r3,r30,r3
	ctx.r3.u64 = r30.u64 + ctx.r3.u64;
	// add r29,r29,r28
	r29.u64 = r29.u64 + r28.u64;
	// rlwinm r3,r3,1,0,30
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r30,r29,1,0,30
	r30.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r31,r9
	ctx.r9.u64 = r31.u64 + ctx.r9.u64;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// sth r3,48(r10)
	PPC_STORE_U16(ctx.r10.u32 + 48, ctx.r3.u16);
	// sth r30,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, r30.u16);
	// addi r10,r10,96
	ctx.r10.s64 = ctx.r10.s64 + 96;
	// bne cr6,0x8270da98
	if (!cr6.eq) goto loc_8270DA98;
	// b 0x8270dd8c
	goto loc_8270DD8C;
loc_8270DADC:
	// add r8,r3,r4
	ctx.r8.u64 = ctx.r3.u64 + ctx.r4.u64;
	// lvx128 v12,r0,r3
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r30,r3,16
	r30.s64 = ctx.r3.s64 + 16;
	// lvsl v7,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// rlwinm r10,r4,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r29,r8,16
	r29.s64 = ctx.r8.s64 + 16;
	// add r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 + ctx.r3.u64;
	// rlwinm r11,r4,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lvx128 v10,r0,r8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v11,r0,r30
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r10,16
	r28.s64 = ctx.r10.s64 + 16;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// vperm v5,v12,v11,v7
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v9,r0,r29
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r9,r4,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r27,r11,16
	r27.s64 = r11.s64 + 16;
	// lvsl v7,r0,r8
	temp.u32 = ctx.r8.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vperm v10,v10,v9,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// add r30,r10,r4
	r30.u64 = ctx.r10.u64 + ctx.r4.u64;
	// lvx128 v11,r0,r10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r31,r9,r3
	r31.u64 = ctx.r9.u64 + ctx.r3.u64;
	// lvx128 v9,r0,r28
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r9,r11,r4
	ctx.r9.u64 = r11.u64 + ctx.r4.u64;
	// lvsl v6,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r10,r30,16
	ctx.r10.s64 = r30.s64 + 16;
	// vperm v11,v11,v9,v6
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvx128 v12,r0,r11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r8,r9,16
	ctx.r8.s64 = ctx.r9.s64 + 16;
	// lvx128 v9,r0,r27
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r9,r4
	r11.u64 = ctx.r9.u64 + ctx.r4.u64;
	// vperm v9,v12,v9,v7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v8,r0,r30
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v6,r0,r10
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v12,v0,v10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvsl v7,r0,r30
	temp.u32 = r30.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r10,r11,r4
	ctx.r10.u64 = r11.u64 + ctx.r4.u64;
	// vperm v8,v8,v6,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v7,r0,r8
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v10,v0,v9
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v9,r0,r9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v4,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r9,r11,16
	ctx.r9.s64 = r11.s64 + 16;
	// vperm v7,v9,v7,v4
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v4.u8)));
	// lvsl v6,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v9,v0,v8
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// rlwinm r8,r4,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// vmrghb v5,v0,v5
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v11,v0,v11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v8,v0,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v7,r0,r11
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r10,16
	r11.s64 = ctx.r10.s64 + 16;
	// lvx128 v4,r0,r9
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v7,v7,v4,v6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvx128 v6,r0,r10
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v4,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vadduhm v5,v12,v5
	_mm_store_si128((__m128i*)ctx.v5.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vadduhm v12,v11,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// addi r9,r3,8
	ctx.r9.s64 = ctx.r3.s64 + 8;
	// vadduhm v11,v9,v11
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// addi r10,r1,144
	ctx.r10.s64 = ctx.r1.s64 + 144;
	// lvx128 v3,r0,r11
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r31,16
	r11.s64 = r31.s64 + 16;
	// vperm v6,v6,v3,v4
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)ctx.v4.u8)));
	// lvx128 v4,r0,r31
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v3,r0,r31
	temp.u32 = r31.u32;
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v7,v0,v7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v9,v10,v9
	_mm_store_si128((__m128i*)ctx.v9.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// li r3,4
	ctx.r3.s64 = 4;
	// vadduhm v10,v8,v10
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v8.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// lvx128 v2,r0,r11
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v6,v0,v6
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vperm v4,v4,v2,v3
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// vadduhm v8,v7,v8
	_mm_store_si128((__m128i*)ctx.v8.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v8.u16)));
	// vslh v12,v12,v13
	// vslh v11,v11,v13
	// vadduhm v7,v6,v7
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vmrghb v0,v0,v4
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v9,v9,v13
	// vadduhm v0,v0,v6
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vslh v6,v5,v13
	// addi r11,r1,128
	r11.s64 = ctx.r1.s64 + 128;
	// vslh v10,v10,v13
	// vslh v8,v8,v13
	// subf r27,r8,r4
	r27.s64 = ctx.r4.s64 - ctx.r8.s64;
	// vslh v7,v7,v13
	// vslh v0,v0,v13
	// stvx v6,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,176
	r11.s64 = ctx.r1.s64 + 176;
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,224
	r11.s64 = ctx.r1.s64 + 224;
	// stvx v11,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,272
	r11.s64 = ctx.r1.s64 + 272;
	// stvx v9,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,320
	r11.s64 = ctx.r1.s64 + 320;
	// stvx v10,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,368
	r11.s64 = ctx.r1.s64 + 368;
	// stvx v8,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,416
	r11.s64 = ctx.r1.s64 + 416;
	// stvx v7,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,464
	r11.s64 = ctx.r1.s64 + 464;
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r8,r9
	r11.u64 = ctx.r8.u64 + ctx.r9.u64;
loc_8270DC78:
	// lbzx r31,r11,r27
	r31.u64 = PPC_LOAD_U8(r11.u32 + r27.u32);
	// addi r3,r3,-1
	ctx.r3.s64 = ctx.r3.s64 + -1;
	// lbz r30,0(r11)
	r30.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// lbz r29,0(r9)
	r29.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// mr r28,r31
	r28.u64 = r31.u64;
	// add r31,r30,r31
	r31.u64 = r30.u64 + r31.u64;
	// add r29,r29,r28
	r29.u64 = r29.u64 + r28.u64;
	// rlwinm r31,r31,1,0,30
	r31.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r30,r29,1,0,30
	r30.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r8,r9
	ctx.r9.u64 = ctx.r8.u64 + ctx.r9.u64;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// sth r31,48(r10)
	PPC_STORE_U16(ctx.r10.u32 + 48, r31.u16);
	// sth r30,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, r30.u16);
	// addi r10,r10,96
	ctx.r10.s64 = ctx.r10.s64 + 96;
	// bne cr6,0x8270dc78
	if (!cr6.eq) goto loc_8270DC78;
	// b 0x8270dd8c
	goto loc_8270DD8C;
loc_8270DCBC:
	// addi r8,r3,16
	ctx.r8.s64 = ctx.r3.s64 + 16;
	// lvx128 v12,r0,r3
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r11,r4,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// lvsl v7,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// rlwinm r9,r4,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r3,r4
	ctx.r10.u64 = ctx.r3.u64 + ctx.r4.u64;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// lvx128 v11,r0,r8
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r9,r9,r3
	ctx.r9.u64 = ctx.r9.u64 + ctx.r3.u64;
	// vperm v12,v12,v11,v7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// addi r3,r10,16
	ctx.r3.s64 = ctx.r10.s64 + 16;
	// addi r31,r11,16
	r31.s64 = r11.s64 + 16;
	// lvsl v7,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r8,r11,r4
	ctx.r8.u64 = r11.u64 + ctx.r4.u64;
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v10,v0,v12
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v8,r0,r3
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r9,16
	ctx.r10.s64 = ctx.r9.s64 + 16;
	// vperm v12,v12,v8,v7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvsl v6,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// lvx128 v8,r0,r31
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r8,16
	r11.s64 = ctx.r8.s64 + 16;
	// vperm v11,v11,v8,v6
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvx128 v9,r0,r9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v12,v0,v12
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v8,r0,r10
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v9,v9,v8,v7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v8,r0,r8
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v11,v0,v11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v6,r0,r11
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,128
	r11.s64 = ctx.r1.s64 + 128;
	// lvsl v7,r0,r8
	temp.u32 = ctx.r8.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vadduhm v10,v12,v10
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vperm v8,v8,v6,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// vmrghb v9,v0,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v12,v11,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vslh v10,v10,v13
	// vmrghb v0,v0,v8
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v12,v12,v13
	// stvx v10,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,176
	r11.s64 = ctx.r1.s64 + 176;
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v12,v0,v11
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// addi r11,r1,224
	r11.s64 = ctx.r1.s64 + 224;
	// vadduhm v0,v9,v0
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v0.u16)));
	// vslh v12,v12,v13
	// vslh v0,v0,v13
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,272
	r11.s64 = ctx.r1.s64 + 272;
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
loc_8270DD8C:
	// addi r11,r6,1040
	r11.s64 = ctx.r6.s64 + 1040;
	// mr r6,r7
	ctx.r6.u64 = ctx.r7.u64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// lvx128 v1,r0,r11
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x8270c108
	sub_8270C108(ctx, base);
	// addi r1,r1,992
	ctx.r1.s64 = ctx.r1.s64 + 992;
	// b 0x8239bd2c
	return;
}

__attribute__((alias("__imp__sub_8270DDA8"))) PPC_WEAK_FUNC(sub_8270DDA8);
PPC_FUNC_IMPL(__imp__sub_8270DDA8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcf8
	// stwu r1,-896(r1)
	ea = -896 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r7,1
	r11.s64 = ctx.r7.s64 + 1;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// rlwinm r31,r11,3,0,28
	r31.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x82703690
	sub_82703690(ctx, base);
	// addi r11,r28,1040
	r11.s64 = r28.s64 + 1040;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lvx128 v1,r0,r11
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x8270c108
	sub_8270C108(ctx, base);
	// addi r1,r1,896
	ctx.r1.s64 = ctx.r1.s64 + 896;
	// b 0x8239bd48
	return;
}

__attribute__((alias("__imp__sub_8270DE00"))) PPC_WEAK_FUNC(sub_8270DE00);
PPC_FUNC_IMPL(__imp__sub_8270DE00) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcec
	// vspltisb v0,0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_set1_epi8(char(0x0)));
	// stw r5,36(r1)
	PPC_STORE_U32(ctx.r1.u32 + 36, ctx.r5.u32);
	// addi r11,r1,-288
	r11.s64 = ctx.r1.s64 + -288;
	// stw r3,20(r1)
	PPC_STORE_U32(ctx.r1.u32 + 20, ctx.r3.u32);
	// rlwinm r10,r5,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 1) & 0xFFFFFFFE;
	// stw r4,28(r1)
	PPC_STORE_U32(ctx.r1.u32 + 28, ctx.r4.u32);
	// add r9,r3,r5
	ctx.r9.u64 = ctx.r3.u64 + ctx.r5.u64;
	// add r7,r10,r5
	ctx.r7.u64 = ctx.r10.u64 + ctx.r5.u64;
	// add r8,r10,r3
	ctx.r8.u64 = ctx.r10.u64 + ctx.r3.u64;
	// add r6,r7,r3
	ctx.r6.u64 = ctx.r7.u64 + ctx.r3.u64;
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r11,r5,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// stw r10,-176(r1)
	PPC_STORE_U32(ctx.r1.u32 + -176, ctx.r10.u32);
	// li r30,16
	r30.s64 = 16;
	// add r5,r11,r5
	ctx.r5.u64 = r11.u64 + ctx.r5.u64;
	// stw r7,-96(r1)
	PPC_STORE_U32(ctx.r1.u32 + -96, ctx.r7.u32);
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// add r31,r11,r3
	r31.u64 = r11.u64 + ctx.r3.u64;
	// stw r11,-240(r1)
	PPC_STORE_U32(ctx.r1.u32 + -240, r11.u32);
	// add r11,r7,r11
	r11.u64 = ctx.r7.u64 + r11.u64;
	// addi r7,r3,4
	ctx.r7.s64 = ctx.r3.s64 + 4;
	// stw r5,-144(r1)
	PPC_STORE_U32(ctx.r1.u32 + -144, ctx.r5.u32);
	// li r29,16
	r29.s64 = 16;
	// stw r10,-208(r1)
	PPC_STORE_U32(ctx.r1.u32 + -208, ctx.r10.u32);
	// li r28,16
	r28.s64 = 16;
	// add r5,r5,r3
	ctx.r5.u64 = ctx.r5.u64 + ctx.r3.u64;
	// stw r11,-92(r1)
	PPC_STORE_U32(ctx.r1.u32 + -92, r11.u32);
	// li r27,16
	r27.s64 = 16;
	// stw r7,-304(r1)
	PPC_STORE_U32(ctx.r1.u32 + -304, ctx.r7.u32);
	// lvlx v12,0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v13,r3,r30
	temp.u32 = ctx.r3.u32 + r30.u32;
	_mm_store_si128((__m128i*)ctx.v13.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// li r7,16
	ctx.r7.s64 = 16;
	// vor v13,v12,v13
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// lvlx v12,0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvlx v11,0,r8
	temp.u32 = ctx.r8.u32;
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// add r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 + ctx.r3.u64;
	// lvlx v10,0,r6
	temp.u32 = ctx.r6.u32;
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// li r26,16
	r26.s64 = 16;
	// lvlx v9,0,r5
	temp.u32 = ctx.r5.u32;
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// vmrghb v8,v0,v13
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvrx v13,r9,r7
	temp.u32 = ctx.r9.u32 + ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v13.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// vor v13,v12,v13
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// lvrx v12,r8,r30
	temp.u32 = ctx.r8.u32 + r30.u32;
	_mm_store_si128((__m128i*)ctx.v12.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// vor v12,v11,v12
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v12.u8)));
	// lvrx v11,r6,r29
	temp.u32 = ctx.r6.u32 + r29.u32;
	_mm_store_si128((__m128i*)ctx.v11.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// vor v11,v10,v11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v11.u8)));
	// lvlx v10,0,r31
	temp.u32 = r31.u32;
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// li r25,16
	r25.s64 = 16;
	// lvlx v6,0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// vmrghb v7,v0,v13
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvrx v13,r31,r28
	temp.u32 = r31.u32 + r28.u32;
	_mm_store_si128((__m128i*)ctx.v13.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// vor v13,v10,v13
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// lvrx v10,r5,r27
	temp.u32 = ctx.r5.u32 + r27.u32;
	_mm_store_si128((__m128i*)ctx.v10.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// vor v10,v9,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v10.u8)));
	// lvrx v9,r10,r26
	temp.u32 = ctx.r10.u32 + r26.u32;
	_mm_store_si128((__m128i*)ctx.v9.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// vor v9,v6,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v9.u8)));
	// lvlx v5,0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v6,r11,r25
	temp.u32 = r11.u32 + r25.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// addi r10,r4,32
	ctx.r10.s64 = ctx.r4.s64 + 32;
	// addi r11,r4,16
	r11.s64 = ctx.r4.s64 + 16;
	// vor v6,v5,v6
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// addi r9,r4,48
	ctx.r9.s64 = ctx.r4.s64 + 48;
	// vmrghb v3,v0,v10
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// addi r8,r4,64
	ctx.r8.s64 = ctx.r4.s64 + 64;
	// vmrghb v2,v0,v9
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// addi r7,r4,80
	ctx.r7.s64 = ctx.r4.s64 + 80;
	// lvx128 v5,r0,r4
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r6,r4,96
	ctx.r6.s64 = ctx.r4.s64 + 96;
	// lvx128 v10,r0,r10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r5,r4,112
	ctx.r5.s64 = ctx.r4.s64 + 112;
	// lvx128 v1,r0,r11
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v9,r0,r9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v12,v0,v12
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v31,r0,r8
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v11,v0,v11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v30,r0,r7
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v4,v0,v13
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v29,r0,r6
	_mm_store_si128((__m128i*)v29.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v6,v0,v6
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v28,r0,r5
	_mm_store_si128((__m128i*)v28.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r5.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-272
	r11.s64 = ctx.r1.s64 + -272;
	// vaddshs v13,v7,v1
	_mm_store_si128((__m128i*)ctx.v13.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v7.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// vaddshs v12,v12,v10
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v10.s16)));
	// vaddshs v11,v11,v9
	_mm_store_si128((__m128i*)ctx.v11.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v9.s16)));
	// vaddshs v10,v4,v31
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v4.s16), _mm_load_si128((__m128i*)v31.s16)));
	// vaddshs v9,v3,v30
	_mm_store_si128((__m128i*)ctx.v9.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v3.s16), _mm_load_si128((__m128i*)v30.s16)));
	// stvx v13,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-112
	r11.s64 = ctx.r1.s64 + -112;
	// vaddshs v0,v8,v5
	_mm_store_si128((__m128i*)ctx.v0.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v8.s16), _mm_load_si128((__m128i*)ctx.v5.s16)));
	// vpkshus v13,v13,v13
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v13.s16), _mm_load_si128((__m128i*)ctx.v13.s16)));
	// vaddshs v8,v2,v29
	_mm_store_si128((__m128i*)ctx.v8.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v2.s16), _mm_load_si128((__m128i*)v29.s16)));
	// vaddshs v7,v6,v28
	_mm_store_si128((__m128i*)ctx.v7.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v6.s16), _mm_load_si128((__m128i*)v28.s16)));
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-256
	r11.s64 = ctx.r1.s64 + -256;
	// vpkshus v0,v0,v0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v0.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// vpkshus v12,v12,v12
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// stvx v11,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-224
	r11.s64 = ctx.r1.s64 + -224;
	// vpkshus v11,v11,v11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// stvx v10,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-192
	r11.s64 = ctx.r1.s64 + -192;
	// vpkshus v10,v10,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v10.s16)));
	// stvx v9,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-160
	r11.s64 = ctx.r1.s64 + -160;
	// vpkshus v9,v9,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v9.s16), _mm_load_si128((__m128i*)ctx.v9.s16)));
	// stvx v8,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-128
	r11.s64 = ctx.r1.s64 + -128;
	// vpkshus v8,v8,v8
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v8.s16), _mm_load_si128((__m128i*)ctx.v8.s16)));
	// stvx v7,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-80
	r11.s64 = ctx.r1.s64 + -80;
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-272
	r11.s64 = ctx.r1.s64 + -272;
	// stvx v13,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-112
	r11.s64 = ctx.r1.s64 + -112;
	// vpkshus v13,v7,v7
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v7.s16), _mm_load_si128((__m128i*)ctx.v7.s16)));
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-256
	r11.s64 = ctx.r1.s64 + -256;
	// stvx v11,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-224
	r11.s64 = ctx.r1.s64 + -224;
	// stvx v10,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-192
	r11.s64 = ctx.r1.s64 + -192;
	// stvx v9,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-160
	r11.s64 = ctx.r1.s64 + -160;
	// stvx v8,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-128
	r11.s64 = ctx.r1.s64 + -128;
	// stvx v13,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvewx v0,r0,r3
	ea = (ctx.r3.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// addi r10,r1,-80
	ctx.r10.s64 = ctx.r1.s64 + -80;
	// lwz r11,-304(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + -304);
	// lvx128 v0,r0,r10
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvewx v0,r0,r11
	ea = (r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// addi r9,r1,-272
	ctx.r9.s64 = ctx.r1.s64 + -272;
	// lwz r11,36(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 36);
	// lwz r10,20(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 20);
	// lvx128 v0,r0,r9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvewx v0,r10,r11
	ea = (ctx.r10.u32 + r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// addi r9,r1,-272
	ctx.r9.s64 = ctx.r1.s64 + -272;
	// lwz r11,36(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 36);
	// lwz r10,-304(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -304);
	// lvx128 v0,r0,r9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvewx v0,r10,r11
	ea = (ctx.r10.u32 + r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// addi r9,r1,-112
	ctx.r9.s64 = ctx.r1.s64 + -112;
	// lwz r11,-176(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + -176);
	// lwz r10,20(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 20);
	// lvx128 v0,r0,r9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvewx v0,r10,r11
	ea = (ctx.r10.u32 + r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// addi r9,r1,-112
	ctx.r9.s64 = ctx.r1.s64 + -112;
	// lwz r11,-176(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + -176);
	// lwz r10,-304(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -304);
	// lvx128 v0,r0,r9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvewx v0,r10,r11
	ea = (ctx.r10.u32 + r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// addi r9,r1,-256
	ctx.r9.s64 = ctx.r1.s64 + -256;
	// lwz r11,-96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + -96);
	// lwz r10,20(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 20);
	// lvx128 v0,r0,r9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvewx v0,r10,r11
	ea = (ctx.r10.u32 + r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// addi r9,r1,-256
	ctx.r9.s64 = ctx.r1.s64 + -256;
	// lwz r11,-96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + -96);
	// lwz r10,-304(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -304);
	// lvx128 v0,r0,r9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvewx v0,r10,r11
	ea = (ctx.r10.u32 + r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// addi r9,r1,-224
	ctx.r9.s64 = ctx.r1.s64 + -224;
	// lwz r11,-240(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + -240);
	// lwz r10,20(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 20);
	// lvx128 v0,r0,r9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvewx v0,r10,r11
	ea = (ctx.r10.u32 + r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// addi r9,r1,-224
	ctx.r9.s64 = ctx.r1.s64 + -224;
	// lwz r11,-240(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + -240);
	// lwz r10,-304(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -304);
	// lvx128 v0,r0,r9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvewx v0,r10,r11
	ea = (ctx.r10.u32 + r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// addi r9,r1,-192
	ctx.r9.s64 = ctx.r1.s64 + -192;
	// lwz r11,-144(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + -144);
	// lwz r10,20(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 20);
	// lvx128 v0,r0,r9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvewx v0,r10,r11
	ea = (ctx.r10.u32 + r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// addi r9,r1,-192
	ctx.r9.s64 = ctx.r1.s64 + -192;
	// lwz r11,-144(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + -144);
	// lwz r10,-304(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -304);
	// lvx128 v0,r0,r9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvewx v0,r10,r11
	ea = (ctx.r10.u32 + r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// addi r9,r1,-160
	ctx.r9.s64 = ctx.r1.s64 + -160;
	// lwz r11,-208(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + -208);
	// lwz r10,20(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 20);
	// lvx128 v0,r0,r9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvewx v0,r10,r11
	ea = (ctx.r10.u32 + r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// addi r9,r1,-160
	ctx.r9.s64 = ctx.r1.s64 + -160;
	// lwz r11,-208(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + -208);
	// lwz r10,-304(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -304);
	// lvx128 v0,r0,r9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvewx v0,r10,r11
	ea = (ctx.r10.u32 + r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// addi r9,r1,-128
	ctx.r9.s64 = ctx.r1.s64 + -128;
	// lwz r11,-92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + -92);
	// lwz r10,20(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 20);
	// lvx128 v0,r0,r9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvewx v0,r10,r11
	ea = (ctx.r10.u32 + r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// addi r9,r1,-128
	ctx.r9.s64 = ctx.r1.s64 + -128;
	// lwz r11,-92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + -92);
	// lwz r10,-304(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -304);
	// lvx128 v0,r0,r9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvewx v0,r10,r11
	ea = (ctx.r10.u32 + r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// b 0x8239bd3c
	return;
}

__attribute__((alias("__imp__sub_8270E134"))) PPC_WEAK_FUNC(sub_8270E134);
PPC_FUNC_IMPL(__imp__sub_8270E134) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8270E138"))) PPC_WEAK_FUNC(sub_8270E138);
PPC_FUNC_IMPL(__imp__sub_8270E138) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// clrlwi r11,r5,28
	r11.u64 = ctx.r5.u32 & 0xF;
	// stw r3,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r3.u32);
	// stw r5,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r5.u32);
	// vspltisb v0,0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_set1_epi8(char(0x0)));
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8270e170
	if (cr6.eq) goto loc_8270E170;
	// bl 0x8270de00
	sub_8270DE00(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
loc_8270E170:
	// rlwinm r11,r5,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 1) & 0xFFFFFFFE;
	// lvx128 v13,r0,r3
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r10,r5,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// lvx128 v12,r3,r5
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r5.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// clrlwi r9,r3,28
	ctx.r9.u64 = ctx.r3.u32 & 0xF;
	// rlwinm r8,r5,3,0,28
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 3) & 0xFFFFFFF8;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// rlwinm r9,r5,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 1) & 0xFFFFFFFE;
	// lvx128 v11,r11,r3
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32 + ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v9,r10,r3
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32 + ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r11,r5,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r10,r5,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r5,r9
	ctx.r9.u64 = ctx.r5.u64 + ctx.r9.u64;
	// add r10,r5,r10
	ctx.r10.u64 = ctx.r5.u64 + ctx.r10.u64;
	// add r11,r5,r11
	r11.u64 = ctx.r5.u64 + r11.u64;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r8,r5,r8
	ctx.r8.s64 = ctx.r8.s64 - ctx.r5.s64;
	// lvx128 v10,r10,r3
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32 + ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v8,r11,r3
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32 + ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v7,r9,r3
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32 + ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v6,r8,r3
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32 + ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// bne cr6,0x8270e1ec
	if (!cr6.eq) goto loc_8270E1EC;
	// vmrghb v13,v0,v13
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v12,v0,v12
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v11,v0,v11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v10,v0,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v9,v0,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v8,v0,v8
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v7,v0,v7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v6,v0,v6
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// b 0x8270e20c
	goto loc_8270E20C;
loc_8270E1EC:
	// vmrglb v13,v0,v13
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrglb v12,v0,v12
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrglb v11,v0,v11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrglb v10,v0,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrglb v9,v0,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrglb v8,v0,v8
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrglb v7,v0,v7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrglb v6,v0,v6
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
loc_8270E20C:
	// lvx128 v0,r0,r4
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r4,16
	r11.s64 = ctx.r4.s64 + 16;
	// vaddshs v0,v13,v0
	_mm_store_si128((__m128i*)ctx.v0.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v13.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// addi r10,r4,32
	ctx.r10.s64 = ctx.r4.s64 + 32;
	// addi r9,r4,48
	ctx.r9.s64 = ctx.r4.s64 + 48;
	// addi r8,r4,64
	ctx.r8.s64 = ctx.r4.s64 + 64;
	// addi r7,r4,80
	ctx.r7.s64 = ctx.r4.s64 + 80;
	// lvx128 v13,r0,r11
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vpkshus v0,v0,v0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v0.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// addi r11,r4,96
	r11.s64 = ctx.r4.s64 + 96;
	// vaddshs v13,v12,v13
	_mm_store_si128((__m128i*)ctx.v13.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v13.s16)));
	// addi r6,r4,112
	ctx.r6.s64 = ctx.r4.s64 + 112;
	// lvx128 v5,r0,r9
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r5,4
	ctx.r5.s64 = 4;
	// lvx128 v4,r0,r8
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r8,4
	ctx.r8.s64 = 4;
	// lvx128 v3,r0,r7
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vpkshus v13,v13,v13
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v13.s16), _mm_load_si128((__m128i*)ctx.v13.s16)));
	// lvx128 v2,r0,r11
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r11,4
	r11.s64 = 4;
	// lvx128 v1,r0,r6
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vaddshs v12,v11,v12
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// stvewx v0,r0,r3
	ea = (ctx.r3.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// lwz r10,116(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// li r7,4
	ctx.r7.s64 = 4;
	// vaddshs v11,v10,v5
	_mm_store_si128((__m128i*)ctx.v11.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v5.s16)));
	// li r6,4
	ctx.r6.s64 = 4;
	// vaddshs v10,v9,v4
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v9.s16), _mm_load_si128((__m128i*)ctx.v4.s16)));
	// vpkshus v12,v12,v12
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// vaddshs v9,v8,v3
	_mm_store_si128((__m128i*)ctx.v9.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v8.s16), _mm_load_si128((__m128i*)ctx.v3.s16)));
	// li r4,4
	ctx.r4.s64 = 4;
	// vaddshs v8,v7,v2
	_mm_store_si128((__m128i*)ctx.v8.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v7.s16), _mm_load_si128((__m128i*)ctx.v2.s16)));
	// stvewx v0,r10,r11
	ea = (ctx.r10.u32 + r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lwz r10,116(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// vpkshus v11,v11,v11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vpkshus v10,v10,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v10.s16)));
	// vaddshs v7,v6,v1
	_mm_store_si128((__m128i*)ctx.v7.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v6.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// add r9,r10,r11
	ctx.r9.u64 = ctx.r10.u64 + r11.u64;
	// vpkshus v9,v9,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v9.s16), _mm_load_si128((__m128i*)ctx.v9.s16)));
	// vpkshus v8,v8,v8
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v8.s16), _mm_load_si128((__m128i*)ctx.v8.s16)));
	// li r3,4
	ctx.r3.s64 = 4;
	// vpkshus v7,v7,v7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v7.s16), _mm_load_si128((__m128i*)ctx.v7.s16)));
	// stvewx v13,r0,r9
	ea = (ctx.r9.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v13.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v13,r9,r8
	ea = (ctx.r9.u32 + ctx.r8.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v13.u32[3 - ((ea & 0xF) >> 2)]);
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r9,r10
	ctx.r9.u64 = ctx.r9.u64 + ctx.r10.u64;
	// stvewx v12,r0,r9
	ea = (ctx.r9.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v12.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v12,r9,r7
	ea = (ctx.r9.u32 + ctx.r7.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v12.u32[3 - ((ea & 0xF) >> 2)]);
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r11,r9
	ctx.r9.u64 = r11.u64 + ctx.r9.u64;
	// add r9,r9,r10
	ctx.r9.u64 = ctx.r9.u64 + ctx.r10.u64;
	// stvewx v11,r0,r9
	ea = (ctx.r9.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v11.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v11,r9,r6
	ea = (ctx.r9.u32 + ctx.r6.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v11.u32[3 - ((ea & 0xF) >> 2)]);
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r9,r10
	ctx.r9.u64 = ctx.r9.u64 + ctx.r10.u64;
	// stvewx v10,r0,r9
	ea = (ctx.r9.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v10.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v10,r9,r5
	ea = (ctx.r9.u32 + ctx.r5.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v10.u32[3 - ((ea & 0xF) >> 2)]);
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r11,r9
	ctx.r9.u64 = r11.u64 + ctx.r9.u64;
	// add r9,r9,r10
	ctx.r9.u64 = ctx.r9.u64 + ctx.r10.u64;
	// stvewx v9,r0,r9
	ea = (ctx.r9.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v9.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v9,r9,r4
	ea = (ctx.r9.u32 + ctx.r4.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v9.u32[3 - ((ea & 0xF) >> 2)]);
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r11,r9
	ctx.r9.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r9,r10
	ctx.r9.u64 = ctx.r9.u64 + ctx.r10.u64;
	// stvewx v8,r0,r9
	ea = (ctx.r9.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v8.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v8,r9,r8
	ea = (ctx.r9.u32 + ctx.r8.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v8.u32[3 - ((ea & 0xF) >> 2)]);
	// rlwinm r9,r11,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r11,r9
	r11.s64 = ctx.r9.s64 - r11.s64;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stvewx v7,r0,r11
	ea = (r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v7.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v7,r11,r3
	ea = (r11.u32 + ctx.r3.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v7.u32[3 - ((ea & 0xF) >> 2)]);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8270E348"))) PPC_WEAK_FUNC(sub_8270E348);
PPC_FUNC_IMPL(__imp__sub_8270E348) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	// mflr r12
	// bl 0x8239bcf4
	// lis r11,-32126
	r11.s64 = -2105409536;
	// lvx128 v13,r0,r3
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r30,r3,16
	r30.s64 = ctx.r3.s64 + 16;
	// lvsl v7,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r29,r10,2
	r29.s64 = ctx.r10.s64 + 2;
	// rlwinm r8,r4,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r3,r4
	ctx.r9.u64 = ctx.r3.u64 + ctx.r4.u64;
	// lwz r11,3356(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 3356);
	// rlwinm r7,r6,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// lvx128 v12,r0,r30
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r30,1
	r30.s64 = 1;
	// vperm v12,v13,v12,v7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// add r31,r5,r6
	r31.u64 = ctx.r5.u64 + ctx.r6.u64;
	// lvx128 v11,r0,r9
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v0,r0,r11
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lvsl v6,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// addi r10,r9,16
	ctx.r10.s64 = ctx.r9.s64 + 16;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// lvx128 v10,r0,r10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// slw r29,r30,r29
	r29.u64 = r29.u8 & 0x20 ? 0 : (r30.u32 << (r29.u8 & 0x3F));
	// vperm v11,v11,v10,v6
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// cmpwi cr6,r29,8
	cr6.compare<int32_t>(r29.s32, 8, xer);
	// slw r30,r30,r11
	r30.u64 = r11.u8 & 0x20 ? 0 : (r30.u32 << (r11.u8 & 0x3F));
	// add r11,r8,r3
	r11.u64 = ctx.r8.u64 + ctx.r3.u64;
	// add r3,r7,r5
	ctx.r3.u64 = ctx.r7.u64 + ctx.r5.u64;
	// addi r28,r11,16
	r28.s64 = r11.s64 + 16;
	// add r10,r11,r4
	ctx.r10.u64 = r11.u64 + ctx.r4.u64;
	// add r9,r3,r6
	ctx.r9.u64 = ctx.r3.u64 + ctx.r6.u64;
	// lvx128 v13,r0,r11
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// lvx128 v9,r0,r28
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r1,-80
	r28.s64 = ctx.r1.s64 + -80;
	// vperm v13,v13,v9,v7
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v10,r0,r10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// stvx v13,r0,r28
	_mm_store_si128((__m128i*)(base + ((r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r1,-96
	r28.s64 = ctx.r1.s64 + -96;
	// vperm v13,v13,v13,v0
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// stvx v11,r0,r28
	_mm_store_si128((__m128i*)(base + ((r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r1,-112
	r28.s64 = ctx.r1.s64 + -112;
	// vperm v11,v11,v11,v0
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// stvx v12,r0,r28
	_mm_store_si128((__m128i*)(base + ((r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r10,16
	r28.s64 = ctx.r10.s64 + 16;
	// addi r10,r1,-64
	ctx.r10.s64 = ctx.r1.s64 + -64;
	// vperm v12,v12,v12,v0
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v9,r0,r28
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v10,v10,v9,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// stvx v10,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,-112
	ctx.r10.s64 = ctx.r1.s64 + -112;
	// stvx v12,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,-96
	ctx.r10.s64 = ctx.r1.s64 + -96;
	// stvx v11,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,-80
	ctx.r10.s64 = ctx.r1.s64 + -80;
	// stvx v13,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v13,v10,v10,v0
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// addi r10,r1,-64
	ctx.r10.s64 = ctx.r1.s64 + -64;
	// stvx v13,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r10,-112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -112);
	// lwz r28,-96(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + -96);
	// stw r10,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, ctx.r10.u32);
	// lwz r27,-80(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + -80);
	// stw r28,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r28.u32);
	// stw r27,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r27.u32);
	// lwz r10,-64(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -64);
	// stw r10,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r10.u32);
	// bne cr6,0x8270e488
	if (!cr6.eq) goto loc_8270E488;
	// lwz r10,-108(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -108);
	// lwz r29,-92(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + -92);
	// lwz r28,-76(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + -76);
	// lwz r27,-60(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + -60);
	// stw r10,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r10.u32);
	// stw r29,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r29.u32);
	// stw r28,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r28.u32);
	// stw r27,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, r27.u32);
loc_8270E488:
	// cmpwi cr6,r30,8
	cr6.compare<int32_t>(r30.s32, 8, xer);
	// bne cr6,0x8270e59c
	if (!cr6.eq) goto loc_8270E59C;
	// rlwinm r10,r7,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r8,r11
	r11.u64 = ctx.r8.u64 + r11.u64;
	// add r10,r10,r5
	ctx.r10.u64 = ctx.r10.u64 + ctx.r5.u64;
	// addi r5,r11,16
	ctx.r5.s64 = r11.s64 + 16;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// add r9,r11,r4
	ctx.r9.u64 = r11.u64 + ctx.r4.u64;
	// lvx128 v13,r0,r11
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r8,r11
	r11.u64 = ctx.r8.u64 + r11.u64;
	// add r8,r10,r6
	ctx.r8.u64 = ctx.r10.u64 + ctx.r6.u64;
	// lvx128 v12,r0,r5
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r5.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// mr r5,r9
	ctx.r5.u64 = ctx.r9.u64;
	// lvsl v7,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r3,r9,16
	ctx.r3.s64 = ctx.r9.s64 + 16;
	// lvx128 v11,r0,r9
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v13,v13,v12,v7
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// add r9,r11,r4
	ctx.r9.u64 = r11.u64 + ctx.r4.u64;
	// lvsl v5,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// lvsl v6,r0,r5
	temp.u32 = ctx.r5.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r5,r11,16
	ctx.r5.s64 = r11.s64 + 16;
	// lvx128 v10,r0,r3
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r1,-96
	ctx.r3.s64 = ctx.r1.s64 + -96;
	// vperm v12,v11,v10,v6
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// addi r4,r9,16
	ctx.r4.s64 = ctx.r9.s64 + 16;
	// lvsl v7,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// stvx v12,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r1,-112
	ctx.r3.s64 = ctx.r1.s64 + -112;
	// vperm v12,v12,v12,v0
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// stvx v13,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v13,v13,v13,v0
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// addi r3,r1,-112
	ctx.r3.s64 = ctx.r1.s64 + -112;
	// stvx v13,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r1,-96
	ctx.r3.s64 = ctx.r1.s64 + -96;
	// stvx v12,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r3,-112(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + -112);
	// lwz r31,-108(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + -108);
	// lwz r30,-96(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + -96);
	// lwz r29,-92(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + -92);
	// stw r3,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r3.u32);
	// stw r31,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r31.u32);
	// add r10,r7,r10
	ctx.r10.u64 = ctx.r7.u64 + ctx.r10.u64;
	// stw r30,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r30.u32);
	// stw r29,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, r29.u32);
	// lvx128 v12,r0,r11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v13,r0,r5
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r5.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-112
	r11.s64 = ctx.r1.s64 + -112;
	// vperm v13,v12,v13,v5
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// lvx128 v12,r0,r9
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v11,r0,r4
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v12,v12,v11,v7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// stvx v13,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-96
	r11.s64 = ctx.r1.s64 + -96;
	// vperm v13,v13,v13,v0
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vperm v0,v12,v12,v0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r10,r6
	r11.u64 = ctx.r10.u64 + ctx.r6.u64;
	// addi r9,r1,-112
	ctx.r9.s64 = ctx.r1.s64 + -112;
	// stvx v13,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-96
	ctx.r9.s64 = ctx.r1.s64 + -96;
	// stvx v0,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r9,-112(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + -112);
	// lwz r8,-108(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + -108);
	// lwz r7,-96(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + -96);
	// lwz r6,-92(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + -92);
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// stw r8,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r8.u32);
	// stw r7,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r7.u32);
	// stw r6,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r6.u32);
loc_8270E59C:
	// b 0x8239bd44
	return;
}

__attribute__((alias("__imp__sub_8270E5A0"))) PPC_WEAK_FUNC(sub_8270E5A0);
PPC_FUNC_IMPL(__imp__sub_8270E5A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// clrlwi r11,r9,24
	r11.u64 = ctx.r9.u32 & 0xFF;
	// lwz r9,196(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 196);
	// li r8,4
	ctx.r8.s64 = 4;
	// subfic r11,r11,8
	xer.ca = r11.u32 <= 8;
	r11.s64 = 8 - r11.s64;
	// cntlzw r9,r9
	ctx.r9.u64 = ctx.r9.u32 == 0 ? 32 : __builtin_clz(ctx.r9.u32);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// rlwinm r11,r9,27,31,31
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x1;
	// li r9,1
	ctx.r9.s64 = 1;
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// slw r7,r8,r10
	ctx.r7.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r8.u32 << (ctx.r10.u8 & 0x3F));
	// slw r8,r9,r11
	ctx.r8.u64 = r11.u8 & 0x20 ? 0 : (ctx.r9.u32 << (r11.u8 & 0x3F));
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lvx128 v0,r0,r11
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsplth v1,v0,1
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_set1_epi16(short(0xD0C))));
	// bl 0x8270a8e8
	sub_8270A8E8(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8270E5FC"))) PPC_WEAK_FUNC(sub_8270E5FC);
PPC_FUNC_IMPL(__imp__sub_8270E5FC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8270E600"))) PPC_WEAK_FUNC(sub_8270E600);
PPC_FUNC_IMPL(__imp__sub_8270E600) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// clrlwi r11,r9,24
	r11.u64 = ctx.r9.u32 & 0xFF;
	// lwz r9,196(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 196);
	// li r8,4
	ctx.r8.s64 = 4;
	// subfic r11,r11,8
	xer.ca = r11.u32 <= 8;
	r11.s64 = 8 - r11.s64;
	// cntlzw r9,r9
	ctx.r9.u64 = ctx.r9.u32 == 0 ? 32 : __builtin_clz(ctx.r9.u32);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// rlwinm r11,r9,27,31,31
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x1;
	// li r9,1
	ctx.r9.s64 = 1;
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// slw r7,r8,r10
	ctx.r7.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r8.u32 << (ctx.r10.u8 & 0x3F));
	// slw r8,r9,r11
	ctx.r8.u64 = r11.u8 & 0x20 ? 0 : (ctx.r9.u32 << (r11.u8 & 0x3F));
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lvx128 v0,r0,r11
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsplth v1,v0,1
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_set1_epi16(short(0xD0C))));
	// bl 0x8270aba8
	sub_8270ABA8(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8270E65C"))) PPC_WEAK_FUNC(sub_8270E65C);
PPC_FUNC_IMPL(__imp__sub_8270E65C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8270E660"))) PPC_WEAK_FUNC(sub_8270E660);
PPC_FUNC_IMPL(__imp__sub_8270E660) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// clrlwi r11,r9,24
	r11.u64 = ctx.r9.u32 & 0xFF;
	// lwz r9,196(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 196);
	// li r8,4
	ctx.r8.s64 = 4;
	// subfic r11,r11,8
	xer.ca = r11.u32 <= 8;
	r11.s64 = 8 - r11.s64;
	// cntlzw r9,r9
	ctx.r9.u64 = ctx.r9.u32 == 0 ? 32 : __builtin_clz(ctx.r9.u32);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// rlwinm r11,r9,27,31,31
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x1;
	// li r9,1
	ctx.r9.s64 = 1;
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// slw r7,r8,r10
	ctx.r7.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r8.u32 << (ctx.r10.u8 & 0x3F));
	// slw r8,r9,r11
	ctx.r8.u64 = r11.u8 & 0x20 ? 0 : (ctx.r9.u32 << (r11.u8 & 0x3F));
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lvx128 v0,r0,r11
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsplth v1,v0,1
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_set1_epi16(short(0xD0C))));
	// bl 0x8270b068
	sub_8270B068(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8270E6BC"))) PPC_WEAK_FUNC(sub_8270E6BC);
PPC_FUNC_IMPL(__imp__sub_8270E6BC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8270E6C0"))) PPC_WEAK_FUNC(sub_8270E6C0);
PPC_FUNC_IMPL(__imp__sub_8270E6C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// clrlwi r11,r9,24
	r11.u64 = ctx.r9.u32 & 0xFF;
	// lwz r9,196(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 196);
	// li r8,4
	ctx.r8.s64 = 4;
	// subfic r11,r11,8
	xer.ca = r11.u32 <= 8;
	r11.s64 = 8 - r11.s64;
	// cntlzw r9,r9
	ctx.r9.u64 = ctx.r9.u32 == 0 ? 32 : __builtin_clz(ctx.r9.u32);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// rlwinm r11,r9,27,31,31
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x1;
	// li r9,1
	ctx.r9.s64 = 1;
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// slw r7,r8,r10
	ctx.r7.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r8.u32 << (ctx.r10.u8 & 0x3F));
	// slw r8,r9,r11
	ctx.r8.u64 = r11.u8 & 0x20 ? 0 : (ctx.r9.u32 << (r11.u8 & 0x3F));
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lvx128 v0,r0,r11
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsplth v1,v0,1
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_set1_epi16(short(0xD0C))));
	// bl 0x8270b330
	sub_8270B330(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8270E71C"))) PPC_WEAK_FUNC(sub_8270E71C);
PPC_FUNC_IMPL(__imp__sub_8270E71C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8270E720"))) PPC_WEAK_FUNC(sub_8270E720);
PPC_FUNC_IMPL(__imp__sub_8270E720) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcec
	// stwu r1,-928(r1)
	ea = -928 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// clrlwi r9,r9,24
	ctx.r9.u64 = ctx.r9.u32 & 0xFF;
	// lvx128 v12,r0,r3
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// mr r8,r4
	ctx.r8.u64 = ctx.r4.u64;
	// lvsl v7,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// subfic r9,r9,8
	xer.ca = ctx.r9.u32 <= 8;
	ctx.r9.s64 = 8 - ctx.r9.s64;
	// vspltisb v0,0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_set1_epi8(char(0x0)));
	// rlwinm r7,r8,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// vspltish v13,1
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// add r31,r7,r3
	r31.u64 = ctx.r7.u64 + ctx.r3.u64;
	// lwz r7,1012(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1012);
	// li r29,1
	r29.s64 = 1;
	// stw r9,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r9.u32);
	// cntlzw r7,r7
	ctx.r7.u64 = ctx.r7.u32 == 0 ? 32 : __builtin_clz(ctx.r7.u32);
	// addi r6,r3,16
	ctx.r6.s64 = ctx.r3.s64 + 16;
	// rlwinm r9,r7,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 27) & 0x1;
	// li r7,4
	ctx.r7.s64 = 4;
	// lvx128 v9,r0,r31
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// and r9,r9,r10
	ctx.r9.u64 = ctx.r9.u64 & ctx.r10.u64;
	// rlwinm r11,r8,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r9,r9,2
	ctx.r9.s64 = ctx.r9.s64 + 2;
	// lvx128 v11,r0,r6
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// vperm v12,v12,v11,v7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// add r30,r3,r8
	r30.u64 = ctx.r3.u64 + ctx.r8.u64;
	// addi r28,r31,16
	r28.s64 = r31.s64 + 16;
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// lvx128 v10,r0,r30
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v5,r0,r30
	temp.u32 = r30.u32;
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// slw r6,r7,r10
	ctx.r6.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r7.u32 << (ctx.r10.u8 & 0x3F));
	// add r10,r11,r8
	ctx.r10.u64 = r11.u64 + ctx.r8.u64;
	// slw r7,r29,r9
	ctx.r7.u64 = ctx.r9.u8 & 0x20 ? 0 : (r29.u32 << (ctx.r9.u8 & 0x3F));
	// addi r9,r11,16
	ctx.r9.s64 = r11.s64 + 16;
	// addi r29,r30,16
	r29.s64 = r30.s64 + 16;
	// cmpwi cr6,r7,8
	cr6.compare<int32_t>(ctx.r7.s32, 8, xer);
	// lvx128 v8,r0,r9
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v11,v11,v8,v7
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v8,r0,r29
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v10,v10,v8,v5
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// lvx128 v8,r0,r28
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r31
	temp.u32 = r31.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vperm v9,v9,v8,v7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvsl v7,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v8,v0,v12
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v9,v0,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lvx128 v6,r0,r11
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r10,16
	r11.s64 = ctx.r10.s64 + 16;
	// vsplth v1,v6,1
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_set1_epi16(short(0xD0C))));
	// lvx128 v6,r0,r11
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,96
	r11.s64 = ctx.r1.s64 + 96;
	// vperm v7,v12,v6,v7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// vslh v6,v8,v13
	// vmrghb v12,v0,v11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v11,v0,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v10,v0,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v8,v6,v8
	_mm_store_si128((__m128i*)ctx.v8.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)ctx.v8.u16)));
	// vslh v5,v12,v13
	// vslh v7,v11,v13
	// vslh v4,v10,v13
	// vadduhm v6,v5,v12
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v5.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vadduhm v7,v7,v11
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// vadduhm v11,v8,v11
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v8.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// vadduhm v8,v4,v10
	_mm_store_si128((__m128i*)ctx.v8.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v4.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vadduhm v10,v6,v10
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vadduhm v12,v7,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// stvx v11,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,144
	r11.s64 = ctx.r1.s64 + 144;
	// vadduhm v11,v8,v9
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v8.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,192
	r11.s64 = ctx.r1.s64 + 192;
	// stvx v10,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,240
	r11.s64 = ctx.r1.s64 + 240;
	// stvx v11,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bne cr6,0x8270e924
	if (!cr6.eq) goto loc_8270E924;
	// add r11,r31,r8
	r11.u64 = r31.u64 + ctx.r8.u64;
	// vslh v12,v9,v13
	// rlwinm r10,r8,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r31,r11,16
	r31.s64 = r11.s64 + 16;
	// add r9,r10,r3
	ctx.r9.u64 = ctx.r10.u64 + ctx.r3.u64;
	// add r10,r11,r8
	ctx.r10.u64 = r11.u64 + ctx.r8.u64;
	// addi r30,r9,16
	r30.s64 = ctx.r9.s64 + 16;
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r11,r10,r8
	r11.u64 = ctx.r10.u64 + ctx.r8.u64;
	// lvx128 v8,r0,r31
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v11,v11,v8,v7
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v10,r0,r9
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r9,r10,16
	ctx.r9.s64 = ctx.r10.s64 + 16;
	// lvx128 v8,r0,r30
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v10,v10,v8,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// vadduhm v7,v12,v9
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v6,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r10,r11,16
	ctx.r10.s64 = r11.s64 + 16;
	// vmrghb v8,v0,v10
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v10,r0,r9
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v10,v12,v10,v6
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvsl v6,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v12,v0,v11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v9,r0,r10
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,288
	r11.s64 = ctx.r1.s64 + 288;
	// vperm v9,v11,v9,v6
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// vmrghb v11,v0,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v10,v12,v13
	// vadduhm v7,v7,v12
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vmrghb v0,v0,v9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v9,v11,v13
	// vadduhm v12,v10,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// stvx v7,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,336
	r11.s64 = ctx.r1.s64 + 336;
	// vslh v13,v0,v13
	// vadduhm v12,v12,v11
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v12,v9,v11
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// addi r11,r1,384
	r11.s64 = ctx.r1.s64 + 384;
	// vadduhm v12,v12,v0
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v0.u16)));
	// vadduhm v0,v13,v0
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v0.u16)));
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,432
	r11.s64 = ctx.r1.s64 + 432;
	// vadduhm v0,v0,v8
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v8.u16)));
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
loc_8270E924:
	// cmpwi cr6,r6,8
	cr6.compare<int32_t>(ctx.r6.s32, 8, xer);
	// blt cr6,0x8270e9a0
	if (cr6.lt) goto loc_8270E9A0;
	// rlwinm r29,r8,1,0,30
	r29.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r9,r3,8
	ctx.r9.s64 = ctx.r3.s64 + 8;
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// ble cr6,0x8270e9a0
	if (!cr6.gt) goto loc_8270E9A0;
	// addi r3,r7,-1
	ctx.r3.s64 = ctx.r7.s64 + -1;
	// subf r25,r29,r8
	r25.s64 = ctx.r8.s64 - r29.s64;
	// rlwinm r3,r3,31,1,31
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 31) & 0x7FFFFFFF;
	// add r11,r29,r9
	r11.u64 = r29.u64 + ctx.r9.u64;
	// addi r8,r3,1
	ctx.r8.s64 = ctx.r3.s64 + 1;
loc_8270E954:
	// lbz r31,0(r9)
	r31.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// lbzx r3,r25,r11
	ctx.r3.u64 = PPC_LOAD_U8(r25.u32 + r11.u32);
	// add r9,r29,r9
	ctx.r9.u64 = r29.u64 + ctx.r9.u64;
	// rotlwi r26,r31,1
	r26.u64 = __builtin_rotateleft32(r31.u32, 1);
	// lbz r28,0(r11)
	r28.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// add r3,r31,r26
	ctx.r3.u64 = r31.u64 + r26.u64;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// add r3,r3,r27
	ctx.r3.u64 = ctx.r3.u64 + r27.u64;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// sth r3,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r3.u16);
	// rlwinm r3,r30,1,0,30
	ctx.r3.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r3,r30,r3
	ctx.r3.u64 = r30.u64 + ctx.r3.u64;
	// add r3,r3,r28
	ctx.r3.u64 = ctx.r3.u64 + r28.u64;
	// sth r3,48(r10)
	PPC_STORE_U16(ctx.r10.u32 + 48, ctx.r3.u16);
	// addi r10,r10,96
	ctx.r10.s64 = ctx.r10.s64 + 96;
	// bne cr6,0x8270e954
	if (!cr6.eq) goto loc_8270E954;
loc_8270E9A0:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8270bc18
	sub_8270BC18(ctx, base);
	// addi r1,r1,928
	ctx.r1.s64 = ctx.r1.s64 + 928;
	// b 0x8239bd3c
	return;
}

__attribute__((alias("__imp__sub_8270E9B0"))) PPC_WEAK_FUNC(sub_8270E9B0);
PPC_FUNC_IMPL(__imp__sub_8270E9B0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCVRegister v23{};
	PPCVRegister v24{};
	PPCVRegister v25{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcd8
	// stwu r1,-1008(r1)
	ea = -1008 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// clrlwi r9,r9,24
	ctx.r9.u64 = ctx.r9.u32 & 0xFF;
	// lwz r11,1092(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1092);
	// li r7,1
	ctx.r7.s64 = 1;
	// vspltisb v0,0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_set1_epi8(char(0x0)));
	// subfic r9,r9,8
	xer.ca = ctx.r9.u32 <= 8;
	ctx.r9.s64 = 8 - ctx.r9.s64;
	// vspltish v13,1
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// mr r8,r4
	ctx.r8.u64 = ctx.r4.u64;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// stw r9,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r9.u32);
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// slw r7,r7,r11
	ctx.r7.u64 = r11.u8 & 0x20 ? 0 : (ctx.r7.u32 << (r11.u8 & 0x3F));
	// li r11,4
	r11.s64 = 4;
	// cmpwi cr6,r7,4
	cr6.compare<int32_t>(ctx.r7.s32, 4, xer);
	// slw r6,r11,r10
	ctx.r6.u64 = ctx.r10.u8 & 0x20 ? 0 : (r11.u32 << (ctx.r10.u8 & 0x3F));
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lvx128 v12,r0,r11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsplth v23,v12,1
	_mm_store_si128((__m128i*)v23.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_set1_epi16(short(0xD0C))));
	// beq cr6,0x8270ef08
	if (cr6.eq) goto loc_8270EF08;
	// cmpwi cr6,r7,8
	cr6.compare<int32_t>(ctx.r7.s32, 8, xer);
	// beq cr6,0x8270ed18
	if (cr6.eq) goto loc_8270ED18;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// ble cr6,0x8270ec9c
	if (!cr6.gt) goto loc_8270EC9C;
	// addi r11,r7,-1
	r11.s64 = ctx.r7.s64 + -1;
	// rlwinm r26,r8,1,0,30
	r26.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r10,r11,29,3,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 29) & 0x1FFFFFFF;
	// rlwinm r25,r8,2,0,29
	r25.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r24,r8,3,0,28
	r24.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r11,r1,224
	r11.s64 = ctx.r1.s64 + 224;
	// addi r27,r10,1
	r27.s64 = ctx.r10.s64 + 1;
loc_8270EA40:
	// add r31,r25,r9
	r31.u64 = r25.u64 + ctx.r9.u64;
	// lvx128 v12,r0,r9
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r9,16
	r28.s64 = ctx.r9.s64 + 16;
	// lvsl v7,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r10,r26,r9
	ctx.r10.u64 = r26.u64 + ctx.r9.u64;
	// add r29,r9,r8
	r29.u64 = ctx.r9.u64 + ctx.r8.u64;
	// add r30,r24,r9
	r30.u64 = r24.u64 + ctx.r9.u64;
	// add r9,r31,r8
	ctx.r9.u64 = r31.u64 + ctx.r8.u64;
	// lvx128 v8,r0,r31
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v11,r0,r28
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r28,r10,r8
	r28.u64 = ctx.r10.u64 + ctx.r8.u64;
	// lvx128 v9,r0,r10
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v12,v12,v11,v7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v10,r0,r29
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r22,r10,16
	r22.s64 = ctx.r10.s64 + 16;
	// lvsl v3,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r23,r29,16
	r23.s64 = r29.s64 + 16;
	// lvsl v5,r0,r29
	temp.u32 = r29.u32;
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r10,r9,r8
	ctx.r10.u64 = ctx.r9.u64 + ctx.r8.u64;
	// lvx128 v29,r0,r9
	_mm_store_si128((__m128i*)v29.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r9,16
	r29.s64 = ctx.r9.s64 + 16;
	// lvsl v11,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r9,r1,112
	ctx.r9.s64 = ctx.r1.s64 + 112;
	// addi r21,r31,16
	r21.s64 = r31.s64 + 16;
	// lvsl v1,r0,r31
	temp.u32 = r31.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r31,r28,16
	r31.s64 = r28.s64 + 16;
	// lvx128 v6,r0,r23
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r23.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v4,r0,r22
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r22.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v24,v0,v12
	_mm_store_si128((__m128i*)v24.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v31,r0,r28
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v11,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v11,v10,v6,v5
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// lvx128 v2,r0,r21
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r21.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v10,v9,v4,v3
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// vperm v9,v8,v2,v1
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// lvx128 v30,r0,r31
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v2,r0,r10
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r9,r10,r8
	ctx.r9.u64 = ctx.r10.u64 + ctx.r8.u64;
	// lvsl v1,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r31,r10,16
	r31.s64 = ctx.r10.s64 + 16;
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// lvsl v7,r0,r28
	temp.u32 = r28.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vperm v8,v31,v30,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v28,r0,r29
	_mm_store_si128((__m128i*)v28.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r9,16
	r29.s64 = ctx.r9.s64 + 16;
	// vmrghb v6,v0,v11
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvsl v7,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r28,r30,16
	r28.s64 = r30.s64 + 16;
	// lvx128 v30,r0,r31
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v5,v0,v10
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// stvx v7,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lvsl v7,r0,r30
	temp.u32 = r30.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vperm v2,v2,v30,v1
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// lvx128 v27,r0,r29
	_mm_store_si128((__m128i*)v27.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v4,v0,v8
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v31,r0,r9
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v3,v0,v9
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v26,r0,r30
	_mm_store_si128((__m128i*)v26.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v7,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v25,r0,r28
	_mm_store_si128((__m128i*)v25.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// lvx128 v7,r0,r10
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v7,v29,v28,v7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v29.u8), _mm_load_si128((__m128i*)v28.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// vmrghb v28,v0,v2
	_mm_store_si128((__m128i*)v28.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// vmrghb v29,v0,v7
	_mm_store_si128((__m128i*)v29.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v1,r0,r10
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// vperm v31,v31,v27,v1
	_mm_store_si128((__m128i*)v31.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)v27.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// lvx128 v1,r0,r10
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v27,v0,v31
	_mm_store_si128((__m128i*)v27.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vperm v30,v26,v25,v1
	_mm_store_si128((__m128i*)v30.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v26.u8), _mm_load_si128((__m128i*)v25.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// vadduhm v26,v6,v24
	_mm_store_si128((__m128i*)v26.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)v24.u16)));
	// vadduhm v25,v5,v6
	_mm_store_si128((__m128i*)v25.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v5.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vmrglb v24,v0,v12
	_mm_store_si128((__m128i*)v24.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v5,v4,v5
	_mm_store_si128((__m128i*)ctx.v5.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v4.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vmrglb v12,v0,v11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v4,v3,v4
	_mm_store_si128((__m128i*)ctx.v4.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v4.u16)));
	// vmrglb v11,v0,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v1,v0,v30
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrglb v6,v0,v31
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v31,v28,v29
	_mm_store_si128((__m128i*)v31.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)v29.u16)));
	// vmrglb v10,v0,v8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v3,v29,v3
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v29.u16), _mm_load_si128((__m128i*)ctx.v3.u16)));
	// addi r10,r11,-96
	ctx.r10.s64 = r11.s64 + -96;
	// vmrglb v8,v0,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v29,v26,v13
	// vmrglb v9,v0,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrglb v7,v0,v2
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v1,v1,v27
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vmrglb v2,v0,v30
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v30,v27,v28
	_mm_store_si128((__m128i*)v30.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v27.u16), _mm_load_si128((__m128i*)v28.u16)));
	// addi r31,r11,48
	r31.s64 = r11.s64 + 48;
	// vadduhm v27,v12,v24
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)v24.u16)));
	// stvx v29,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v29.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v29,v9,v10
	_mm_store_si128((__m128i*)v29.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// addi r29,r11,96
	r29.s64 = r11.s64 + 96;
	// vadduhm v9,v8,v9
	_mm_store_si128((__m128i*)ctx.v9.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v8.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// addi r28,r11,144
	r28.s64 = r11.s64 + 144;
	// vadduhm v8,v7,v8
	_mm_store_si128((__m128i*)ctx.v8.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v8.u16)));
	// addi r23,r11,192
	r23.s64 = r11.s64 + 192;
	// vslh v4,v4,v13
	// addi r22,r11,240
	r22.s64 = r11.s64 + 240;
	// vslh v3,v3,v13
	// vslh v31,v31,v13
	// addi r9,r11,-48
	ctx.r9.s64 = r11.s64 + -48;
	// vslh v30,v30,v13
	// addi r10,r11,-80
	ctx.r10.s64 = r11.s64 + -80;
	// vslh v1,v1,v13
	// stvx v4,r0,r31
	_mm_store_si128((__m128i*)(base + ((r31.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v12,v11,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// stvx v3,r0,r29
	_mm_store_si128((__m128i*)(base + ((r29.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v7,v6,v7
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// stvx v31,r0,r28
	_mm_store_si128((__m128i*)(base + ((r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v5,v5,v13
	// stvx v30,r0,r23
	_mm_store_si128((__m128i*)(base + ((r23.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v11,v10,v11
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// stvx v1,r0,r22
	_mm_store_si128((__m128i*)(base + ((r22.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v6,v2,v6
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// addi r31,r11,-32
	r31.s64 = r11.s64 + -32;
	// addi r29,r11,16
	r29.s64 = r11.s64 + 16;
	// vslh v28,v25,v13
	// stvx v5,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r11,64
	r28.s64 = r11.s64 + 64;
	// addi r23,r11,112
	r23.s64 = r11.s64 + 112;
	// vslh v10,v27,v13
	// addi r22,r11,160
	r22.s64 = r11.s64 + 160;
	// vslh v12,v12,v13
	// addi r21,r11,208
	r21.s64 = r11.s64 + 208;
	// vslh v11,v11,v13
	// addi r20,r11,256
	r20.s64 = r11.s64 + 256;
	// vslh v5,v29,v13
	// vslh v9,v9,v13
	// addi r27,r27,-1
	r27.s64 = r27.s64 + -1;
	// vslh v8,v8,v13
	// stvx v28,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v28.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v7,v7,v13
	// mr r9,r30
	ctx.r9.u64 = r30.u64;
	// vslh v6,v6,v13
	// addi r11,r11,384
	r11.s64 = r11.s64 + 384;
	// stvx v10,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// stvx v12,r0,r31
	_mm_store_si128((__m128i*)(base + ((r31.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v11,r0,r29
	_mm_store_si128((__m128i*)(base + ((r29.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v5,r0,r28
	_mm_store_si128((__m128i*)(base + ((r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v9,r0,r23
	_mm_store_si128((__m128i*)(base + ((r23.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v8,r0,r22
	_mm_store_si128((__m128i*)(base + ((r22.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v7,r0,r21
	_mm_store_si128((__m128i*)(base + ((r21.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v6,r0,r20
	_mm_store_si128((__m128i*)(base + ((r20.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bne cr6,0x8270ea40
	if (!cr6.eq) goto loc_8270EA40;
loc_8270EC9C:
	// rlwinm r31,r8,1,0,30
	r31.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r9,r3,16
	ctx.r9.s64 = ctx.r3.s64 + 16;
	// addi r10,r1,160
	ctx.r10.s64 = ctx.r1.s64 + 160;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// ble cr6,0x8270f038
	if (!cr6.gt) goto loc_8270F038;
	// addi r3,r7,-1
	ctx.r3.s64 = ctx.r7.s64 + -1;
	// subf r27,r31,r8
	r27.s64 = ctx.r8.s64 - r31.s64;
	// rlwinm r3,r3,31,1,31
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 31) & 0x7FFFFFFF;
	// add r11,r31,r9
	r11.u64 = r31.u64 + ctx.r9.u64;
	// addi r8,r3,1
	ctx.r8.s64 = ctx.r3.s64 + 1;
loc_8270ECC4:
	// lbzx r3,r27,r11
	ctx.r3.u64 = PPC_LOAD_U8(r27.u32 + r11.u32);
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// lbz r30,0(r11)
	r30.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// lbz r29,0(r9)
	r29.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// add r3,r30,r3
	ctx.r3.u64 = r30.u64 + ctx.r3.u64;
	// add r29,r29,r28
	r29.u64 = r29.u64 + r28.u64;
	// rlwinm r3,r3,1,0,30
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r30,r29,1,0,30
	r30.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r31,r9
	ctx.r9.u64 = r31.u64 + ctx.r9.u64;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// sth r3,48(r10)
	PPC_STORE_U16(ctx.r10.u32 + 48, ctx.r3.u16);
	// sth r30,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, r30.u16);
	// addi r10,r10,96
	ctx.r10.s64 = ctx.r10.s64 + 96;
	// bne cr6,0x8270ecc4
	if (!cr6.eq) goto loc_8270ECC4;
	// vor v1,v23,v23
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)v23.u8));
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x8270bc18
	sub_8270BC18(ctx, base);
	// addi r1,r1,1008
	ctx.r1.s64 = ctx.r1.s64 + 1008;
	// b 0x8239bd28
	return;
loc_8270ED18:
	// add r31,r3,r8
	r31.u64 = ctx.r3.u64 + ctx.r8.u64;
	// lvx128 v12,r0,r3
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r3,16
	r29.s64 = ctx.r3.s64 + 16;
	// lvsl v7,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// rlwinm r10,r8,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r28,r31,16
	r28.s64 = r31.s64 + 16;
	// add r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 + ctx.r3.u64;
	// rlwinm r11,r8,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// lvx128 v10,r0,r31
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v11,r0,r29
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r10,16
	r27.s64 = ctx.r10.s64 + 16;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// vperm v5,v12,v11,v7
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v9,r0,r28
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r9,r8,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r26,r11,16
	r26.s64 = r11.s64 + 16;
	// lvsl v7,r0,r31
	temp.u32 = r31.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vperm v10,v10,v9,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// add r29,r10,r8
	r29.u64 = ctx.r10.u64 + ctx.r8.u64;
	// lvx128 v11,r0,r10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r30,r9,r3
	r30.u64 = ctx.r9.u64 + ctx.r3.u64;
	// lvx128 v9,r0,r27
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r9,r11,r8
	ctx.r9.u64 = r11.u64 + ctx.r8.u64;
	// lvsl v6,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r10,r29,16
	ctx.r10.s64 = r29.s64 + 16;
	// vperm v11,v11,v9,v6
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvx128 v12,r0,r11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r31,r9,16
	r31.s64 = ctx.r9.s64 + 16;
	// lvx128 v9,r0,r26
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r26.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r9,r8
	r11.u64 = ctx.r9.u64 + ctx.r8.u64;
	// vperm v9,v12,v9,v7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v8,r0,r29
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v6,r0,r10
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v12,v0,v10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvsl v7,r0,r29
	temp.u32 = r29.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r10,r11,r8
	ctx.r10.u64 = r11.u64 + ctx.r8.u64;
	// vperm v8,v8,v6,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v7,r0,r31
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v10,v0,v9
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v9,r0,r9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v4,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r9,r11,16
	ctx.r9.s64 = r11.s64 + 16;
	// vperm v7,v9,v7,v4
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v4.u8)));
	// lvsl v6,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v9,v0,v8
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// rlwinm r31,r8,1,0,30
	r31.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// vmrghb v5,v0,v5
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v11,v0,v11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v8,v0,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v7,r0,r11
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r10,16
	r11.s64 = ctx.r10.s64 + 16;
	// lvx128 v4,r0,r9
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v7,v7,v4,v6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvx128 v6,r0,r10
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v4,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vadduhm v5,v12,v5
	_mm_store_si128((__m128i*)ctx.v5.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vadduhm v12,v11,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// addi r9,r3,8
	ctx.r9.s64 = ctx.r3.s64 + 8;
	// vadduhm v11,v9,v11
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// addi r10,r1,144
	ctx.r10.s64 = ctx.r1.s64 + 144;
	// lvx128 v3,r0,r11
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r30,16
	r11.s64 = r30.s64 + 16;
	// vperm v6,v6,v3,v4
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)ctx.v4.u8)));
	// lvx128 v4,r0,r30
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v3,r0,r30
	temp.u32 = r30.u32;
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v7,v0,v7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v9,v10,v9
	_mm_store_si128((__m128i*)ctx.v9.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// li r3,4
	ctx.r3.s64 = 4;
	// vadduhm v10,v8,v10
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v8.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// lvx128 v2,r0,r11
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v6,v0,v6
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vperm v4,v4,v2,v3
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// vadduhm v8,v7,v8
	_mm_store_si128((__m128i*)ctx.v8.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v8.u16)));
	// vslh v12,v12,v13
	// vslh v11,v11,v13
	// vadduhm v7,v6,v7
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vmrghb v0,v0,v4
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v9,v9,v13
	// vadduhm v0,v0,v6
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vslh v6,v5,v13
	// addi r11,r1,128
	r11.s64 = ctx.r1.s64 + 128;
	// vslh v10,v10,v13
	// vslh v8,v8,v13
	// subf r27,r31,r8
	r27.s64 = ctx.r8.s64 - r31.s64;
	// vslh v7,v7,v13
	// vslh v0,v0,v13
	// stvx v6,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,176
	r11.s64 = ctx.r1.s64 + 176;
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,224
	r11.s64 = ctx.r1.s64 + 224;
	// stvx v11,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,272
	r11.s64 = ctx.r1.s64 + 272;
	// stvx v9,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,320
	r11.s64 = ctx.r1.s64 + 320;
	// stvx v10,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,368
	r11.s64 = ctx.r1.s64 + 368;
	// stvx v8,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,416
	r11.s64 = ctx.r1.s64 + 416;
	// stvx v7,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,464
	r11.s64 = ctx.r1.s64 + 464;
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r31,r9
	r11.u64 = r31.u64 + ctx.r9.u64;
loc_8270EEB4:
	// lbzx r8,r11,r27
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + r27.u32);
	// addi r3,r3,-1
	ctx.r3.s64 = ctx.r3.s64 + -1;
	// lbz r30,0(r11)
	r30.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// lbz r29,0(r9)
	r29.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// mr r28,r8
	r28.u64 = ctx.r8.u64;
	// add r8,r30,r8
	ctx.r8.u64 = r30.u64 + ctx.r8.u64;
	// add r29,r29,r28
	r29.u64 = r29.u64 + r28.u64;
	// rlwinm r8,r8,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r30,r29,1,0,30
	r30.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r31,r9
	ctx.r9.u64 = r31.u64 + ctx.r9.u64;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// sth r8,48(r10)
	PPC_STORE_U16(ctx.r10.u32 + 48, ctx.r8.u16);
	// sth r30,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, r30.u16);
	// addi r10,r10,96
	ctx.r10.s64 = ctx.r10.s64 + 96;
	// bne cr6,0x8270eeb4
	if (!cr6.eq) goto loc_8270EEB4;
	// vor v1,v23,v23
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)v23.u8));
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x8270bc18
	sub_8270BC18(ctx, base);
	// addi r1,r1,1008
	ctx.r1.s64 = ctx.r1.s64 + 1008;
	// b 0x8239bd28
	return;
loc_8270EF08:
	// addi r31,r3,16
	r31.s64 = ctx.r3.s64 + 16;
	// lvx128 v12,r0,r3
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r10,r3,r8
	ctx.r10.u64 = ctx.r3.u64 + ctx.r8.u64;
	// lvsl v7,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// rlwinm r11,r8,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r30,r10,16
	r30.s64 = ctx.r10.s64 + 16;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// lvx128 v11,r0,r31
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r9,r8,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// vperm v12,v12,v11,v7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvsl v7,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r29,r11,16
	r29.s64 = r11.s64 + 16;
	// lvx128 v8,r0,r30
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r31,r11,r8
	r31.u64 = r11.u64 + ctx.r8.u64;
	// add r9,r9,r3
	ctx.r9.u64 = ctx.r9.u64 + ctx.r3.u64;
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v10,v0,v12
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v12,v12,v8,v7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvsl v6,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// lvx128 v8,r0,r29
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r31,16
	r11.s64 = r31.s64 + 16;
	// vperm v11,v11,v8,v6
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// addi r10,r9,16
	ctx.r10.s64 = ctx.r9.s64 + 16;
	// lvx128 v9,r0,r9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// cmpwi cr6,r6,8
	cr6.compare<int32_t>(ctx.r6.s32, 8, xer);
	// vmrghb v12,v0,v12
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvsl v7,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v11,v0,v11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v6,r0,r11
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v8,r0,r10
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,128
	r11.s64 = ctx.r1.s64 + 128;
	// vadduhm v10,v12,v10
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vperm v9,v9,v8,v7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v8,r0,r31
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r31
	temp.u32 = r31.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vadduhm v12,v11,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vperm v8,v8,v6,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// vslh v10,v10,v13
	// vmrghb v9,v0,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v12,v12,v13
	// vmrghb v0,v0,v8
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// stvx v10,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,176
	r11.s64 = ctx.r1.s64 + 176;
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v12,v0,v11
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// addi r11,r1,224
	r11.s64 = ctx.r1.s64 + 224;
	// vadduhm v0,v9,v0
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v0.u16)));
	// vslh v12,v12,v13
	// vslh v0,v0,v13
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,272
	r11.s64 = ctx.r1.s64 + 272;
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bne cr6,0x8270f038
	if (!cr6.eq) goto loc_8270F038;
	// rlwinm r31,r8,1,0,30
	r31.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r9,r3,8
	ctx.r9.s64 = ctx.r3.s64 + 8;
	// addi r10,r1,144
	ctx.r10.s64 = ctx.r1.s64 + 144;
	// li r3,2
	ctx.r3.s64 = 2;
	// subf r27,r31,r8
	r27.s64 = ctx.r8.s64 - r31.s64;
	// add r11,r31,r9
	r11.u64 = r31.u64 + ctx.r9.u64;
loc_8270EFF8:
	// lbzx r8,r11,r27
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + r27.u32);
	// addi r3,r3,-1
	ctx.r3.s64 = ctx.r3.s64 + -1;
	// lbz r30,0(r11)
	r30.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// lbz r29,0(r9)
	r29.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// mr r28,r8
	r28.u64 = ctx.r8.u64;
	// add r8,r30,r8
	ctx.r8.u64 = r30.u64 + ctx.r8.u64;
	// add r29,r29,r28
	r29.u64 = r29.u64 + r28.u64;
	// rlwinm r8,r8,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r30,r29,1,0,30
	r30.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r31,r9
	ctx.r9.u64 = r31.u64 + ctx.r9.u64;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// sth r8,48(r10)
	PPC_STORE_U16(ctx.r10.u32 + 48, ctx.r8.u16);
	// sth r30,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, r30.u16);
	// addi r10,r10,96
	ctx.r10.s64 = ctx.r10.s64 + 96;
	// bne cr6,0x8270eff8
	if (!cr6.eq) goto loc_8270EFF8;
loc_8270F038:
	// vor v1,v23,v23
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)v23.u8));
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x8270bc18
	sub_8270BC18(ctx, base);
	// addi r1,r1,1008
	ctx.r1.s64 = ctx.r1.s64 + 1008;
	// b 0x8239bd28
	return;
}

__attribute__((alias("__imp__sub_8270F04C"))) PPC_WEAK_FUNC(sub_8270F04C);
PPC_FUNC_IMPL(__imp__sub_8270F04C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8270F050"))) PPC_WEAK_FUNC(sub_8270F050);
PPC_FUNC_IMPL(__imp__sub_8270F050) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcf8
	// stwu r1,-912(r1)
	ea = -912 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,996(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 996);
	// li r8,4
	ctx.r8.s64 = 4;
	// li r7,1
	ctx.r7.s64 = 1;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// clrlwi r9,r9,24
	ctx.r9.u64 = ctx.r9.u32 & 0xFF;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// subfic r9,r9,8
	xer.ca = ctx.r9.u32 <= 8;
	ctx.r9.s64 = 8 - ctx.r9.s64;
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// stw r9,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r9.u32);
	// slw r31,r8,r10
	r31.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r8.u32 << (ctx.r10.u8 & 0x3F));
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// slw r30,r7,r11
	r30.u64 = r11.u8 & 0x20 ? 0 : (ctx.r7.u32 << (r11.u8 & 0x3F));
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// bl 0x82703690
	sub_82703690(ctx, base);
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lvx128 v0,r0,r11
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// vsplth v1,v0,1
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_set1_epi16(short(0xD0C))));
	// bl 0x8270bc18
	sub_8270BC18(ctx, base);
	// addi r1,r1,912
	ctx.r1.s64 = ctx.r1.s64 + 912;
	// b 0x8239bd48
	return;
}

__attribute__((alias("__imp__sub_8270F0D0"))) PPC_WEAK_FUNC(sub_8270F0D0);
PPC_FUNC_IMPL(__imp__sub_8270F0D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// clrlwi r11,r9,24
	r11.u64 = ctx.r9.u32 & 0xFF;
	// lwz r9,196(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 196);
	// li r8,4
	ctx.r8.s64 = 4;
	// subfic r11,r11,8
	xer.ca = r11.u32 <= 8;
	r11.s64 = 8 - r11.s64;
	// cntlzw r9,r9
	ctx.r9.u64 = ctx.r9.u32 == 0 ? 32 : __builtin_clz(ctx.r9.u32);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// rlwinm r11,r9,27,31,31
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x1;
	// li r9,1
	ctx.r9.s64 = 1;
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// slw r7,r8,r10
	ctx.r7.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r8.u32 << (ctx.r10.u8 & 0x3F));
	// slw r8,r9,r11
	ctx.r8.u64 = r11.u8 & 0x20 ? 0 : (ctx.r9.u32 << (r11.u8 & 0x3F));
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lvx128 v0,r0,r11
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsplth v1,v0,1
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_set1_epi16(short(0xD0C))));
	// bl 0x8270b5f8
	sub_8270B5F8(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8270F12C"))) PPC_WEAK_FUNC(sub_8270F12C);
PPC_FUNC_IMPL(__imp__sub_8270F12C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8270F130"))) PPC_WEAK_FUNC(sub_8270F130);
PPC_FUNC_IMPL(__imp__sub_8270F130) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcec
	// stwu r1,-928(r1)
	ea = -928 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// clrlwi r9,r9,24
	ctx.r9.u64 = ctx.r9.u32 & 0xFF;
	// lvx128 v12,r0,r3
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// mr r8,r4
	ctx.r8.u64 = ctx.r4.u64;
	// lvsl v7,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// subfic r9,r9,8
	xer.ca = ctx.r9.u32 <= 8;
	ctx.r9.s64 = 8 - ctx.r9.s64;
	// vspltisb v0,0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_set1_epi8(char(0x0)));
	// rlwinm r7,r8,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// vspltish v13,1
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// add r31,r7,r3
	r31.u64 = ctx.r7.u64 + ctx.r3.u64;
	// lwz r7,1012(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1012);
	// li r29,1
	r29.s64 = 1;
	// stw r9,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r9.u32);
	// cntlzw r7,r7
	ctx.r7.u64 = ctx.r7.u32 == 0 ? 32 : __builtin_clz(ctx.r7.u32);
	// addi r6,r3,16
	ctx.r6.s64 = ctx.r3.s64 + 16;
	// rlwinm r9,r7,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 27) & 0x1;
	// li r7,4
	ctx.r7.s64 = 4;
	// lvx128 v9,r0,r31
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// and r9,r9,r10
	ctx.r9.u64 = ctx.r9.u64 & ctx.r10.u64;
	// rlwinm r11,r8,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r9,r9,2
	ctx.r9.s64 = ctx.r9.s64 + 2;
	// lvx128 v11,r0,r6
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// vperm v12,v12,v11,v7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// add r30,r3,r8
	r30.u64 = ctx.r3.u64 + ctx.r8.u64;
	// addi r28,r31,16
	r28.s64 = r31.s64 + 16;
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// lvx128 v10,r0,r30
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v5,r0,r30
	temp.u32 = r30.u32;
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// slw r6,r7,r10
	ctx.r6.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r7.u32 << (ctx.r10.u8 & 0x3F));
	// add r10,r11,r8
	ctx.r10.u64 = r11.u64 + ctx.r8.u64;
	// slw r7,r29,r9
	ctx.r7.u64 = ctx.r9.u8 & 0x20 ? 0 : (r29.u32 << (ctx.r9.u8 & 0x3F));
	// addi r9,r11,16
	ctx.r9.s64 = r11.s64 + 16;
	// addi r29,r30,16
	r29.s64 = r30.s64 + 16;
	// cmpwi cr6,r7,8
	cr6.compare<int32_t>(ctx.r7.s32, 8, xer);
	// lvx128 v8,r0,r9
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v11,v11,v8,v7
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v8,r0,r29
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v10,v10,v8,v5
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// lvx128 v8,r0,r28
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r31
	temp.u32 = r31.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vperm v9,v9,v8,v7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvsl v7,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v8,v0,v12
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v9,v0,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lvx128 v6,r0,r11
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r10,16
	r11.s64 = ctx.r10.s64 + 16;
	// vsplth v1,v6,1
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_set1_epi16(short(0xD0C))));
	// lvx128 v6,r0,r11
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,96
	r11.s64 = ctx.r1.s64 + 96;
	// vperm v7,v12,v6,v7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// vslh v6,v8,v13
	// vmrghb v12,v0,v11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v11,v0,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v10,v0,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v8,v6,v8
	_mm_store_si128((__m128i*)ctx.v8.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)ctx.v8.u16)));
	// vslh v5,v12,v13
	// vslh v7,v11,v13
	// vslh v4,v10,v13
	// vadduhm v6,v5,v12
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v5.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vadduhm v7,v7,v11
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// vadduhm v11,v8,v11
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v8.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// vadduhm v8,v4,v10
	_mm_store_si128((__m128i*)ctx.v8.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v4.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vadduhm v10,v6,v10
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vadduhm v12,v7,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// stvx v11,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,144
	r11.s64 = ctx.r1.s64 + 144;
	// vadduhm v11,v8,v9
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v8.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,192
	r11.s64 = ctx.r1.s64 + 192;
	// stvx v10,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,240
	r11.s64 = ctx.r1.s64 + 240;
	// stvx v11,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bne cr6,0x8270f334
	if (!cr6.eq) goto loc_8270F334;
	// add r11,r31,r8
	r11.u64 = r31.u64 + ctx.r8.u64;
	// vslh v12,v9,v13
	// rlwinm r10,r8,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r31,r11,16
	r31.s64 = r11.s64 + 16;
	// add r9,r10,r3
	ctx.r9.u64 = ctx.r10.u64 + ctx.r3.u64;
	// add r10,r11,r8
	ctx.r10.u64 = r11.u64 + ctx.r8.u64;
	// addi r30,r9,16
	r30.s64 = ctx.r9.s64 + 16;
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r11,r10,r8
	r11.u64 = ctx.r10.u64 + ctx.r8.u64;
	// lvx128 v8,r0,r31
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v11,v11,v8,v7
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v10,r0,r9
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r9,r10,16
	ctx.r9.s64 = ctx.r10.s64 + 16;
	// lvx128 v8,r0,r30
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v10,v10,v8,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// vadduhm v7,v12,v9
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v6,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r10,r11,16
	ctx.r10.s64 = r11.s64 + 16;
	// vmrghb v8,v0,v10
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v10,r0,r9
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v10,v12,v10,v6
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvsl v6,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v12,v0,v11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v9,r0,r10
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,288
	r11.s64 = ctx.r1.s64 + 288;
	// vperm v9,v11,v9,v6
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// vmrghb v11,v0,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v10,v12,v13
	// vadduhm v7,v7,v12
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vmrghb v0,v0,v9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v9,v11,v13
	// vadduhm v12,v10,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// stvx v7,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,336
	r11.s64 = ctx.r1.s64 + 336;
	// vslh v13,v0,v13
	// vadduhm v12,v12,v11
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v12,v9,v11
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// addi r11,r1,384
	r11.s64 = ctx.r1.s64 + 384;
	// vadduhm v12,v12,v0
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v0.u16)));
	// vadduhm v0,v13,v0
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v0.u16)));
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,432
	r11.s64 = ctx.r1.s64 + 432;
	// vadduhm v0,v0,v8
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v8.u16)));
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
loc_8270F334:
	// cmpwi cr6,r6,8
	cr6.compare<int32_t>(ctx.r6.s32, 8, xer);
	// blt cr6,0x8270f3b0
	if (cr6.lt) goto loc_8270F3B0;
	// rlwinm r29,r8,1,0,30
	r29.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r9,r3,8
	ctx.r9.s64 = ctx.r3.s64 + 8;
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// ble cr6,0x8270f3b0
	if (!cr6.gt) goto loc_8270F3B0;
	// addi r3,r7,-1
	ctx.r3.s64 = ctx.r7.s64 + -1;
	// subf r25,r29,r8
	r25.s64 = ctx.r8.s64 - r29.s64;
	// rlwinm r3,r3,31,1,31
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 31) & 0x7FFFFFFF;
	// add r11,r29,r9
	r11.u64 = r29.u64 + ctx.r9.u64;
	// addi r8,r3,1
	ctx.r8.s64 = ctx.r3.s64 + 1;
loc_8270F364:
	// lbz r31,0(r9)
	r31.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// lbzx r3,r25,r11
	ctx.r3.u64 = PPC_LOAD_U8(r25.u32 + r11.u32);
	// add r9,r29,r9
	ctx.r9.u64 = r29.u64 + ctx.r9.u64;
	// rotlwi r26,r31,1
	r26.u64 = __builtin_rotateleft32(r31.u32, 1);
	// lbz r28,0(r11)
	r28.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// add r3,r31,r26
	ctx.r3.u64 = r31.u64 + r26.u64;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// add r3,r3,r27
	ctx.r3.u64 = ctx.r3.u64 + r27.u64;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// sth r3,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r3.u16);
	// rlwinm r3,r30,1,0,30
	ctx.r3.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r3,r30,r3
	ctx.r3.u64 = r30.u64 + ctx.r3.u64;
	// add r3,r3,r28
	ctx.r3.u64 = ctx.r3.u64 + r28.u64;
	// sth r3,48(r10)
	PPC_STORE_U16(ctx.r10.u32 + 48, ctx.r3.u16);
	// addi r10,r10,96
	ctx.r10.s64 = ctx.r10.s64 + 96;
	// bne cr6,0x8270f364
	if (!cr6.eq) goto loc_8270F364;
loc_8270F3B0:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8270be70
	sub_8270BE70(ctx, base);
	// addi r1,r1,928
	ctx.r1.s64 = ctx.r1.s64 + 928;
	// b 0x8239bd3c
	return;
}

__attribute__((alias("__imp__sub_8270F3C0"))) PPC_WEAK_FUNC(sub_8270F3C0);
PPC_FUNC_IMPL(__imp__sub_8270F3C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCVRegister v23{};
	PPCVRegister v24{};
	PPCVRegister v25{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcd8
	// stwu r1,-1008(r1)
	ea = -1008 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// clrlwi r9,r9,24
	ctx.r9.u64 = ctx.r9.u32 & 0xFF;
	// lwz r11,1092(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1092);
	// li r7,1
	ctx.r7.s64 = 1;
	// vspltisb v0,0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_set1_epi8(char(0x0)));
	// subfic r9,r9,8
	xer.ca = ctx.r9.u32 <= 8;
	ctx.r9.s64 = 8 - ctx.r9.s64;
	// vspltish v13,1
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// mr r8,r4
	ctx.r8.u64 = ctx.r4.u64;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// stw r9,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r9.u32);
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// slw r7,r7,r11
	ctx.r7.u64 = r11.u8 & 0x20 ? 0 : (ctx.r7.u32 << (r11.u8 & 0x3F));
	// li r11,4
	r11.s64 = 4;
	// cmpwi cr6,r7,4
	cr6.compare<int32_t>(ctx.r7.s32, 4, xer);
	// slw r6,r11,r10
	ctx.r6.u64 = ctx.r10.u8 & 0x20 ? 0 : (r11.u32 << (ctx.r10.u8 & 0x3F));
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lvx128 v12,r0,r11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsplth v23,v12,1
	_mm_store_si128((__m128i*)v23.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_set1_epi16(short(0xD0C))));
	// beq cr6,0x8270f918
	if (cr6.eq) goto loc_8270F918;
	// cmpwi cr6,r7,8
	cr6.compare<int32_t>(ctx.r7.s32, 8, xer);
	// beq cr6,0x8270f728
	if (cr6.eq) goto loc_8270F728;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// ble cr6,0x8270f6ac
	if (!cr6.gt) goto loc_8270F6AC;
	// addi r11,r7,-1
	r11.s64 = ctx.r7.s64 + -1;
	// rlwinm r26,r8,1,0,30
	r26.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r10,r11,29,3,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 29) & 0x1FFFFFFF;
	// rlwinm r25,r8,2,0,29
	r25.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r24,r8,3,0,28
	r24.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r11,r1,224
	r11.s64 = ctx.r1.s64 + 224;
	// addi r27,r10,1
	r27.s64 = ctx.r10.s64 + 1;
loc_8270F450:
	// add r31,r25,r9
	r31.u64 = r25.u64 + ctx.r9.u64;
	// lvx128 v12,r0,r9
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r9,16
	r28.s64 = ctx.r9.s64 + 16;
	// lvsl v7,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r10,r26,r9
	ctx.r10.u64 = r26.u64 + ctx.r9.u64;
	// add r29,r9,r8
	r29.u64 = ctx.r9.u64 + ctx.r8.u64;
	// add r30,r24,r9
	r30.u64 = r24.u64 + ctx.r9.u64;
	// add r9,r31,r8
	ctx.r9.u64 = r31.u64 + ctx.r8.u64;
	// lvx128 v8,r0,r31
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v11,r0,r28
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r28,r10,r8
	r28.u64 = ctx.r10.u64 + ctx.r8.u64;
	// lvx128 v9,r0,r10
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v12,v12,v11,v7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v10,r0,r29
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r22,r10,16
	r22.s64 = ctx.r10.s64 + 16;
	// lvsl v3,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r23,r29,16
	r23.s64 = r29.s64 + 16;
	// lvsl v5,r0,r29
	temp.u32 = r29.u32;
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r10,r9,r8
	ctx.r10.u64 = ctx.r9.u64 + ctx.r8.u64;
	// lvx128 v29,r0,r9
	_mm_store_si128((__m128i*)v29.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r9,16
	r29.s64 = ctx.r9.s64 + 16;
	// lvsl v11,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r9,r1,112
	ctx.r9.s64 = ctx.r1.s64 + 112;
	// addi r21,r31,16
	r21.s64 = r31.s64 + 16;
	// lvsl v1,r0,r31
	temp.u32 = r31.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r31,r28,16
	r31.s64 = r28.s64 + 16;
	// lvx128 v6,r0,r23
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r23.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v4,r0,r22
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r22.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v24,v0,v12
	_mm_store_si128((__m128i*)v24.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v31,r0,r28
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v11,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v11,v10,v6,v5
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// lvx128 v2,r0,r21
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r21.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v10,v9,v4,v3
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// vperm v9,v8,v2,v1
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// lvx128 v30,r0,r31
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v2,r0,r10
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r9,r10,r8
	ctx.r9.u64 = ctx.r10.u64 + ctx.r8.u64;
	// lvsl v1,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r31,r10,16
	r31.s64 = ctx.r10.s64 + 16;
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// lvsl v7,r0,r28
	temp.u32 = r28.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vperm v8,v31,v30,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v28,r0,r29
	_mm_store_si128((__m128i*)v28.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r9,16
	r29.s64 = ctx.r9.s64 + 16;
	// vmrghb v6,v0,v11
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvsl v7,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r28,r30,16
	r28.s64 = r30.s64 + 16;
	// lvx128 v30,r0,r31
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v5,v0,v10
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// stvx v7,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lvsl v7,r0,r30
	temp.u32 = r30.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vperm v2,v2,v30,v1
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// lvx128 v27,r0,r29
	_mm_store_si128((__m128i*)v27.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v4,v0,v8
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v31,r0,r9
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v3,v0,v9
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v26,r0,r30
	_mm_store_si128((__m128i*)v26.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v7,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v25,r0,r28
	_mm_store_si128((__m128i*)v25.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// lvx128 v7,r0,r10
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v7,v29,v28,v7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v29.u8), _mm_load_si128((__m128i*)v28.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// vmrghb v28,v0,v2
	_mm_store_si128((__m128i*)v28.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// vmrghb v29,v0,v7
	_mm_store_si128((__m128i*)v29.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v1,r0,r10
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// vperm v31,v31,v27,v1
	_mm_store_si128((__m128i*)v31.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)v27.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// lvx128 v1,r0,r10
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v27,v0,v31
	_mm_store_si128((__m128i*)v27.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vperm v30,v26,v25,v1
	_mm_store_si128((__m128i*)v30.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v26.u8), _mm_load_si128((__m128i*)v25.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// vadduhm v26,v6,v24
	_mm_store_si128((__m128i*)v26.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)v24.u16)));
	// vadduhm v25,v5,v6
	_mm_store_si128((__m128i*)v25.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v5.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vmrglb v24,v0,v12
	_mm_store_si128((__m128i*)v24.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v5,v4,v5
	_mm_store_si128((__m128i*)ctx.v5.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v4.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vmrglb v12,v0,v11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v4,v3,v4
	_mm_store_si128((__m128i*)ctx.v4.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v4.u16)));
	// vmrglb v11,v0,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v1,v0,v30
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrglb v6,v0,v31
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v31,v28,v29
	_mm_store_si128((__m128i*)v31.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)v29.u16)));
	// vmrglb v10,v0,v8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v3,v29,v3
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v29.u16), _mm_load_si128((__m128i*)ctx.v3.u16)));
	// addi r10,r11,-96
	ctx.r10.s64 = r11.s64 + -96;
	// vmrglb v8,v0,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v29,v26,v13
	// vmrglb v9,v0,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrglb v7,v0,v2
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v1,v1,v27
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vmrglb v2,v0,v30
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v30,v27,v28
	_mm_store_si128((__m128i*)v30.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v27.u16), _mm_load_si128((__m128i*)v28.u16)));
	// addi r31,r11,48
	r31.s64 = r11.s64 + 48;
	// vadduhm v27,v12,v24
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)v24.u16)));
	// stvx v29,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v29.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v29,v9,v10
	_mm_store_si128((__m128i*)v29.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// addi r29,r11,96
	r29.s64 = r11.s64 + 96;
	// vadduhm v9,v8,v9
	_mm_store_si128((__m128i*)ctx.v9.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v8.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// addi r28,r11,144
	r28.s64 = r11.s64 + 144;
	// vadduhm v8,v7,v8
	_mm_store_si128((__m128i*)ctx.v8.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v8.u16)));
	// addi r23,r11,192
	r23.s64 = r11.s64 + 192;
	// vslh v4,v4,v13
	// addi r22,r11,240
	r22.s64 = r11.s64 + 240;
	// vslh v3,v3,v13
	// vslh v31,v31,v13
	// addi r9,r11,-48
	ctx.r9.s64 = r11.s64 + -48;
	// vslh v30,v30,v13
	// addi r10,r11,-80
	ctx.r10.s64 = r11.s64 + -80;
	// vslh v1,v1,v13
	// stvx v4,r0,r31
	_mm_store_si128((__m128i*)(base + ((r31.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v12,v11,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// stvx v3,r0,r29
	_mm_store_si128((__m128i*)(base + ((r29.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v7,v6,v7
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// stvx v31,r0,r28
	_mm_store_si128((__m128i*)(base + ((r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v5,v5,v13
	// stvx v30,r0,r23
	_mm_store_si128((__m128i*)(base + ((r23.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v11,v10,v11
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// stvx v1,r0,r22
	_mm_store_si128((__m128i*)(base + ((r22.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v6,v2,v6
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// addi r31,r11,-32
	r31.s64 = r11.s64 + -32;
	// addi r29,r11,16
	r29.s64 = r11.s64 + 16;
	// vslh v28,v25,v13
	// stvx v5,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r11,64
	r28.s64 = r11.s64 + 64;
	// addi r23,r11,112
	r23.s64 = r11.s64 + 112;
	// vslh v10,v27,v13
	// addi r22,r11,160
	r22.s64 = r11.s64 + 160;
	// vslh v12,v12,v13
	// addi r21,r11,208
	r21.s64 = r11.s64 + 208;
	// vslh v11,v11,v13
	// addi r20,r11,256
	r20.s64 = r11.s64 + 256;
	// vslh v5,v29,v13
	// vslh v9,v9,v13
	// addi r27,r27,-1
	r27.s64 = r27.s64 + -1;
	// vslh v8,v8,v13
	// stvx v28,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v28.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v7,v7,v13
	// mr r9,r30
	ctx.r9.u64 = r30.u64;
	// vslh v6,v6,v13
	// addi r11,r11,384
	r11.s64 = r11.s64 + 384;
	// stvx v10,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// stvx v12,r0,r31
	_mm_store_si128((__m128i*)(base + ((r31.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v11,r0,r29
	_mm_store_si128((__m128i*)(base + ((r29.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v5,r0,r28
	_mm_store_si128((__m128i*)(base + ((r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v9,r0,r23
	_mm_store_si128((__m128i*)(base + ((r23.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v8,r0,r22
	_mm_store_si128((__m128i*)(base + ((r22.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v7,r0,r21
	_mm_store_si128((__m128i*)(base + ((r21.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v6,r0,r20
	_mm_store_si128((__m128i*)(base + ((r20.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bne cr6,0x8270f450
	if (!cr6.eq) goto loc_8270F450;
loc_8270F6AC:
	// rlwinm r31,r8,1,0,30
	r31.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r9,r3,16
	ctx.r9.s64 = ctx.r3.s64 + 16;
	// addi r10,r1,160
	ctx.r10.s64 = ctx.r1.s64 + 160;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// ble cr6,0x8270fa48
	if (!cr6.gt) goto loc_8270FA48;
	// addi r3,r7,-1
	ctx.r3.s64 = ctx.r7.s64 + -1;
	// subf r27,r31,r8
	r27.s64 = ctx.r8.s64 - r31.s64;
	// rlwinm r3,r3,31,1,31
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 31) & 0x7FFFFFFF;
	// add r11,r31,r9
	r11.u64 = r31.u64 + ctx.r9.u64;
	// addi r8,r3,1
	ctx.r8.s64 = ctx.r3.s64 + 1;
loc_8270F6D4:
	// lbzx r3,r27,r11
	ctx.r3.u64 = PPC_LOAD_U8(r27.u32 + r11.u32);
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// lbz r30,0(r11)
	r30.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// lbz r29,0(r9)
	r29.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// add r3,r30,r3
	ctx.r3.u64 = r30.u64 + ctx.r3.u64;
	// add r29,r29,r28
	r29.u64 = r29.u64 + r28.u64;
	// rlwinm r3,r3,1,0,30
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r30,r29,1,0,30
	r30.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r31,r9
	ctx.r9.u64 = r31.u64 + ctx.r9.u64;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// sth r3,48(r10)
	PPC_STORE_U16(ctx.r10.u32 + 48, ctx.r3.u16);
	// sth r30,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, r30.u16);
	// addi r10,r10,96
	ctx.r10.s64 = ctx.r10.s64 + 96;
	// bne cr6,0x8270f6d4
	if (!cr6.eq) goto loc_8270F6D4;
	// vor v1,v23,v23
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)v23.u8));
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x8270be70
	sub_8270BE70(ctx, base);
	// addi r1,r1,1008
	ctx.r1.s64 = ctx.r1.s64 + 1008;
	// b 0x8239bd28
	return;
loc_8270F728:
	// add r31,r3,r8
	r31.u64 = ctx.r3.u64 + ctx.r8.u64;
	// lvx128 v12,r0,r3
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r3,16
	r29.s64 = ctx.r3.s64 + 16;
	// lvsl v7,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// rlwinm r10,r8,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r28,r31,16
	r28.s64 = r31.s64 + 16;
	// add r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 + ctx.r3.u64;
	// rlwinm r11,r8,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// lvx128 v10,r0,r31
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v11,r0,r29
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r10,16
	r27.s64 = ctx.r10.s64 + 16;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// vperm v5,v12,v11,v7
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v9,r0,r28
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r9,r8,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r26,r11,16
	r26.s64 = r11.s64 + 16;
	// lvsl v7,r0,r31
	temp.u32 = r31.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vperm v10,v10,v9,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// add r29,r10,r8
	r29.u64 = ctx.r10.u64 + ctx.r8.u64;
	// lvx128 v11,r0,r10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r30,r9,r3
	r30.u64 = ctx.r9.u64 + ctx.r3.u64;
	// lvx128 v9,r0,r27
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r9,r11,r8
	ctx.r9.u64 = r11.u64 + ctx.r8.u64;
	// lvsl v6,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r10,r29,16
	ctx.r10.s64 = r29.s64 + 16;
	// vperm v11,v11,v9,v6
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvx128 v12,r0,r11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r31,r9,16
	r31.s64 = ctx.r9.s64 + 16;
	// lvx128 v9,r0,r26
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r26.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r9,r8
	r11.u64 = ctx.r9.u64 + ctx.r8.u64;
	// vperm v9,v12,v9,v7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v8,r0,r29
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v6,r0,r10
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v12,v0,v10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvsl v7,r0,r29
	temp.u32 = r29.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r10,r11,r8
	ctx.r10.u64 = r11.u64 + ctx.r8.u64;
	// vperm v8,v8,v6,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v7,r0,r31
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v10,v0,v9
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v9,r0,r9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v4,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r9,r11,16
	ctx.r9.s64 = r11.s64 + 16;
	// vperm v7,v9,v7,v4
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v4.u8)));
	// lvsl v6,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v9,v0,v8
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// rlwinm r31,r8,1,0,30
	r31.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// vmrghb v5,v0,v5
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v11,v0,v11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v8,v0,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v7,r0,r11
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r10,16
	r11.s64 = ctx.r10.s64 + 16;
	// lvx128 v4,r0,r9
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v7,v7,v4,v6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvx128 v6,r0,r10
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v4,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vadduhm v5,v12,v5
	_mm_store_si128((__m128i*)ctx.v5.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vadduhm v12,v11,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// addi r9,r3,8
	ctx.r9.s64 = ctx.r3.s64 + 8;
	// vadduhm v11,v9,v11
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// addi r10,r1,144
	ctx.r10.s64 = ctx.r1.s64 + 144;
	// lvx128 v3,r0,r11
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r30,16
	r11.s64 = r30.s64 + 16;
	// vperm v6,v6,v3,v4
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)ctx.v4.u8)));
	// lvx128 v4,r0,r30
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v3,r0,r30
	temp.u32 = r30.u32;
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v7,v0,v7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v9,v10,v9
	_mm_store_si128((__m128i*)ctx.v9.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// li r3,4
	ctx.r3.s64 = 4;
	// vadduhm v10,v8,v10
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v8.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// lvx128 v2,r0,r11
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v6,v0,v6
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vperm v4,v4,v2,v3
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// vadduhm v8,v7,v8
	_mm_store_si128((__m128i*)ctx.v8.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v8.u16)));
	// vslh v12,v12,v13
	// vslh v11,v11,v13
	// vadduhm v7,v6,v7
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vmrghb v0,v0,v4
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v9,v9,v13
	// vadduhm v0,v0,v6
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vslh v6,v5,v13
	// addi r11,r1,128
	r11.s64 = ctx.r1.s64 + 128;
	// vslh v10,v10,v13
	// vslh v8,v8,v13
	// subf r27,r31,r8
	r27.s64 = ctx.r8.s64 - r31.s64;
	// vslh v7,v7,v13
	// vslh v0,v0,v13
	// stvx v6,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,176
	r11.s64 = ctx.r1.s64 + 176;
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,224
	r11.s64 = ctx.r1.s64 + 224;
	// stvx v11,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,272
	r11.s64 = ctx.r1.s64 + 272;
	// stvx v9,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,320
	r11.s64 = ctx.r1.s64 + 320;
	// stvx v10,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,368
	r11.s64 = ctx.r1.s64 + 368;
	// stvx v8,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,416
	r11.s64 = ctx.r1.s64 + 416;
	// stvx v7,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,464
	r11.s64 = ctx.r1.s64 + 464;
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r31,r9
	r11.u64 = r31.u64 + ctx.r9.u64;
loc_8270F8C4:
	// lbzx r8,r11,r27
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + r27.u32);
	// addi r3,r3,-1
	ctx.r3.s64 = ctx.r3.s64 + -1;
	// lbz r30,0(r11)
	r30.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// lbz r29,0(r9)
	r29.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// mr r28,r8
	r28.u64 = ctx.r8.u64;
	// add r8,r30,r8
	ctx.r8.u64 = r30.u64 + ctx.r8.u64;
	// add r29,r29,r28
	r29.u64 = r29.u64 + r28.u64;
	// rlwinm r8,r8,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r30,r29,1,0,30
	r30.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r31,r9
	ctx.r9.u64 = r31.u64 + ctx.r9.u64;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// sth r8,48(r10)
	PPC_STORE_U16(ctx.r10.u32 + 48, ctx.r8.u16);
	// sth r30,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, r30.u16);
	// addi r10,r10,96
	ctx.r10.s64 = ctx.r10.s64 + 96;
	// bne cr6,0x8270f8c4
	if (!cr6.eq) goto loc_8270F8C4;
	// vor v1,v23,v23
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)v23.u8));
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x8270be70
	sub_8270BE70(ctx, base);
	// addi r1,r1,1008
	ctx.r1.s64 = ctx.r1.s64 + 1008;
	// b 0x8239bd28
	return;
loc_8270F918:
	// addi r31,r3,16
	r31.s64 = ctx.r3.s64 + 16;
	// lvx128 v12,r0,r3
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r10,r3,r8
	ctx.r10.u64 = ctx.r3.u64 + ctx.r8.u64;
	// lvsl v7,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// rlwinm r11,r8,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r30,r10,16
	r30.s64 = ctx.r10.s64 + 16;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// lvx128 v11,r0,r31
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r9,r8,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// vperm v12,v12,v11,v7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvsl v7,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r29,r11,16
	r29.s64 = r11.s64 + 16;
	// lvx128 v8,r0,r30
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r31,r11,r8
	r31.u64 = r11.u64 + ctx.r8.u64;
	// add r9,r9,r3
	ctx.r9.u64 = ctx.r9.u64 + ctx.r3.u64;
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v10,v0,v12
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v12,v12,v8,v7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvsl v6,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// lvx128 v8,r0,r29
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r31,16
	r11.s64 = r31.s64 + 16;
	// vperm v11,v11,v8,v6
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// addi r10,r9,16
	ctx.r10.s64 = ctx.r9.s64 + 16;
	// lvx128 v9,r0,r9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// cmpwi cr6,r6,8
	cr6.compare<int32_t>(ctx.r6.s32, 8, xer);
	// vmrghb v12,v0,v12
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvsl v7,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v11,v0,v11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v6,r0,r11
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v8,r0,r10
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,128
	r11.s64 = ctx.r1.s64 + 128;
	// vadduhm v10,v12,v10
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vperm v9,v9,v8,v7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v8,r0,r31
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r31
	temp.u32 = r31.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vadduhm v12,v11,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vperm v8,v8,v6,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// vslh v10,v10,v13
	// vmrghb v9,v0,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v12,v12,v13
	// vmrghb v0,v0,v8
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// stvx v10,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,176
	r11.s64 = ctx.r1.s64 + 176;
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v12,v0,v11
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// addi r11,r1,224
	r11.s64 = ctx.r1.s64 + 224;
	// vadduhm v0,v9,v0
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v0.u16)));
	// vslh v12,v12,v13
	// vslh v0,v0,v13
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,272
	r11.s64 = ctx.r1.s64 + 272;
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bne cr6,0x8270fa48
	if (!cr6.eq) goto loc_8270FA48;
	// rlwinm r31,r8,1,0,30
	r31.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r9,r3,8
	ctx.r9.s64 = ctx.r3.s64 + 8;
	// addi r10,r1,144
	ctx.r10.s64 = ctx.r1.s64 + 144;
	// li r3,2
	ctx.r3.s64 = 2;
	// subf r27,r31,r8
	r27.s64 = ctx.r8.s64 - r31.s64;
	// add r11,r31,r9
	r11.u64 = r31.u64 + ctx.r9.u64;
loc_8270FA08:
	// lbzx r8,r11,r27
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + r27.u32);
	// addi r3,r3,-1
	ctx.r3.s64 = ctx.r3.s64 + -1;
	// lbz r30,0(r11)
	r30.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// lbz r29,0(r9)
	r29.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// mr r28,r8
	r28.u64 = ctx.r8.u64;
	// add r8,r30,r8
	ctx.r8.u64 = r30.u64 + ctx.r8.u64;
	// add r29,r29,r28
	r29.u64 = r29.u64 + r28.u64;
	// rlwinm r8,r8,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r30,r29,1,0,30
	r30.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r31,r9
	ctx.r9.u64 = r31.u64 + ctx.r9.u64;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// sth r8,48(r10)
	PPC_STORE_U16(ctx.r10.u32 + 48, ctx.r8.u16);
	// sth r30,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, r30.u16);
	// addi r10,r10,96
	ctx.r10.s64 = ctx.r10.s64 + 96;
	// bne cr6,0x8270fa08
	if (!cr6.eq) goto loc_8270FA08;
loc_8270FA48:
	// vor v1,v23,v23
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)v23.u8));
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x8270be70
	sub_8270BE70(ctx, base);
	// addi r1,r1,1008
	ctx.r1.s64 = ctx.r1.s64 + 1008;
	// b 0x8239bd28
	return;
}

__attribute__((alias("__imp__sub_8270FA5C"))) PPC_WEAK_FUNC(sub_8270FA5C);
PPC_FUNC_IMPL(__imp__sub_8270FA5C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8270FA60"))) PPC_WEAK_FUNC(sub_8270FA60);
PPC_FUNC_IMPL(__imp__sub_8270FA60) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcf8
	// stwu r1,-912(r1)
	ea = -912 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,996(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 996);
	// li r8,4
	ctx.r8.s64 = 4;
	// li r7,1
	ctx.r7.s64 = 1;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// clrlwi r9,r9,24
	ctx.r9.u64 = ctx.r9.u32 & 0xFF;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// subfic r9,r9,8
	xer.ca = ctx.r9.u32 <= 8;
	ctx.r9.s64 = 8 - ctx.r9.s64;
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// stw r9,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r9.u32);
	// slw r31,r8,r10
	r31.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r8.u32 << (ctx.r10.u8 & 0x3F));
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// slw r30,r7,r11
	r30.u64 = r11.u8 & 0x20 ? 0 : (ctx.r7.u32 << (r11.u8 & 0x3F));
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// bl 0x82703690
	sub_82703690(ctx, base);
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lvx128 v0,r0,r11
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// vsplth v1,v0,1
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_set1_epi16(short(0xD0C))));
	// bl 0x8270be70
	sub_8270BE70(ctx, base);
	// addi r1,r1,912
	ctx.r1.s64 = ctx.r1.s64 + 912;
	// b 0x8239bd48
	return;
}

__attribute__((alias("__imp__sub_8270FAE0"))) PPC_WEAK_FUNC(sub_8270FAE0);
PPC_FUNC_IMPL(__imp__sub_8270FAE0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// clrlwi r11,r9,24
	r11.u64 = ctx.r9.u32 & 0xFF;
	// lwz r9,196(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 196);
	// li r8,4
	ctx.r8.s64 = 4;
	// subfic r11,r11,8
	xer.ca = r11.u32 <= 8;
	r11.s64 = 8 - r11.s64;
	// cntlzw r9,r9
	ctx.r9.u64 = ctx.r9.u32 == 0 ? 32 : __builtin_clz(ctx.r9.u32);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// rlwinm r11,r9,27,31,31
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x1;
	// li r9,1
	ctx.r9.s64 = 1;
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// slw r7,r8,r10
	ctx.r7.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r8.u32 << (ctx.r10.u8 & 0x3F));
	// slw r8,r9,r11
	ctx.r8.u64 = r11.u8 & 0x20 ? 0 : (ctx.r9.u32 << (r11.u8 & 0x3F));
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lvx128 v0,r0,r11
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsplth v1,v0,1
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_set1_epi16(short(0xD0C))));
	// bl 0x8270b930
	sub_8270B930(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8270FB3C"))) PPC_WEAK_FUNC(sub_8270FB3C);
PPC_FUNC_IMPL(__imp__sub_8270FB3C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8270FB40"))) PPC_WEAK_FUNC(sub_8270FB40);
PPC_FUNC_IMPL(__imp__sub_8270FB40) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcec
	// stwu r1,-928(r1)
	ea = -928 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// clrlwi r9,r9,24
	ctx.r9.u64 = ctx.r9.u32 & 0xFF;
	// lvx128 v12,r0,r3
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// mr r8,r4
	ctx.r8.u64 = ctx.r4.u64;
	// lvsl v7,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// subfic r9,r9,8
	xer.ca = ctx.r9.u32 <= 8;
	ctx.r9.s64 = 8 - ctx.r9.s64;
	// vspltisb v0,0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_set1_epi8(char(0x0)));
	// rlwinm r7,r8,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// vspltish v13,1
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// add r31,r7,r3
	r31.u64 = ctx.r7.u64 + ctx.r3.u64;
	// lwz r7,1012(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1012);
	// li r29,1
	r29.s64 = 1;
	// stw r9,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r9.u32);
	// cntlzw r7,r7
	ctx.r7.u64 = ctx.r7.u32 == 0 ? 32 : __builtin_clz(ctx.r7.u32);
	// addi r6,r3,16
	ctx.r6.s64 = ctx.r3.s64 + 16;
	// rlwinm r9,r7,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 27) & 0x1;
	// li r7,4
	ctx.r7.s64 = 4;
	// lvx128 v9,r0,r31
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// and r9,r9,r10
	ctx.r9.u64 = ctx.r9.u64 & ctx.r10.u64;
	// rlwinm r11,r8,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r9,r9,2
	ctx.r9.s64 = ctx.r9.s64 + 2;
	// lvx128 v11,r0,r6
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// vperm v12,v12,v11,v7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// add r30,r3,r8
	r30.u64 = ctx.r3.u64 + ctx.r8.u64;
	// addi r28,r31,16
	r28.s64 = r31.s64 + 16;
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// lvx128 v10,r0,r30
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v5,r0,r30
	temp.u32 = r30.u32;
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// slw r6,r7,r10
	ctx.r6.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r7.u32 << (ctx.r10.u8 & 0x3F));
	// add r10,r11,r8
	ctx.r10.u64 = r11.u64 + ctx.r8.u64;
	// slw r7,r29,r9
	ctx.r7.u64 = ctx.r9.u8 & 0x20 ? 0 : (r29.u32 << (ctx.r9.u8 & 0x3F));
	// addi r9,r11,16
	ctx.r9.s64 = r11.s64 + 16;
	// addi r29,r30,16
	r29.s64 = r30.s64 + 16;
	// cmpwi cr6,r7,8
	cr6.compare<int32_t>(ctx.r7.s32, 8, xer);
	// lvx128 v8,r0,r9
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v11,v11,v8,v7
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v8,r0,r29
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v10,v10,v8,v5
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// lvx128 v8,r0,r28
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r31
	temp.u32 = r31.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vperm v9,v9,v8,v7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvsl v7,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v8,v0,v12
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v9,v0,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lvx128 v6,r0,r11
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r10,16
	r11.s64 = ctx.r10.s64 + 16;
	// vsplth v1,v6,1
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_set1_epi16(short(0xD0C))));
	// lvx128 v6,r0,r11
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,96
	r11.s64 = ctx.r1.s64 + 96;
	// vperm v7,v12,v6,v7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// vslh v6,v8,v13
	// vmrghb v12,v0,v11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v11,v0,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v10,v0,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v8,v6,v8
	_mm_store_si128((__m128i*)ctx.v8.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)ctx.v8.u16)));
	// vslh v5,v12,v13
	// vslh v7,v11,v13
	// vslh v4,v10,v13
	// vadduhm v6,v5,v12
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v5.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vadduhm v7,v7,v11
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// vadduhm v11,v8,v11
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v8.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// vadduhm v8,v4,v10
	_mm_store_si128((__m128i*)ctx.v8.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v4.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vadduhm v10,v6,v10
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vadduhm v12,v7,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// stvx v11,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,144
	r11.s64 = ctx.r1.s64 + 144;
	// vadduhm v11,v8,v9
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v8.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,192
	r11.s64 = ctx.r1.s64 + 192;
	// stvx v10,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,240
	r11.s64 = ctx.r1.s64 + 240;
	// stvx v11,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bne cr6,0x8270fd44
	if (!cr6.eq) goto loc_8270FD44;
	// add r11,r31,r8
	r11.u64 = r31.u64 + ctx.r8.u64;
	// vslh v12,v9,v13
	// rlwinm r10,r8,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r31,r11,16
	r31.s64 = r11.s64 + 16;
	// add r9,r10,r3
	ctx.r9.u64 = ctx.r10.u64 + ctx.r3.u64;
	// add r10,r11,r8
	ctx.r10.u64 = r11.u64 + ctx.r8.u64;
	// addi r30,r9,16
	r30.s64 = ctx.r9.s64 + 16;
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r11,r10,r8
	r11.u64 = ctx.r10.u64 + ctx.r8.u64;
	// lvx128 v8,r0,r31
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v11,v11,v8,v7
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v10,r0,r9
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r9,r10,16
	ctx.r9.s64 = ctx.r10.s64 + 16;
	// lvx128 v8,r0,r30
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v10,v10,v8,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// vadduhm v7,v12,v9
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v6,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r10,r11,16
	ctx.r10.s64 = r11.s64 + 16;
	// vmrghb v8,v0,v10
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v10,r0,r9
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v10,v12,v10,v6
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvsl v6,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v12,v0,v11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v9,r0,r10
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,288
	r11.s64 = ctx.r1.s64 + 288;
	// vperm v9,v11,v9,v6
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// vmrghb v11,v0,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v10,v12,v13
	// vadduhm v7,v7,v12
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vmrghb v0,v0,v9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v9,v11,v13
	// vadduhm v12,v10,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// stvx v7,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,336
	r11.s64 = ctx.r1.s64 + 336;
	// vslh v13,v0,v13
	// vadduhm v12,v12,v11
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v12,v9,v11
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// addi r11,r1,384
	r11.s64 = ctx.r1.s64 + 384;
	// vadduhm v12,v12,v0
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v0.u16)));
	// vadduhm v0,v13,v0
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v0.u16)));
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,432
	r11.s64 = ctx.r1.s64 + 432;
	// vadduhm v0,v0,v8
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v8.u16)));
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
loc_8270FD44:
	// cmpwi cr6,r6,8
	cr6.compare<int32_t>(ctx.r6.s32, 8, xer);
	// blt cr6,0x8270fdc0
	if (cr6.lt) goto loc_8270FDC0;
	// rlwinm r29,r8,1,0,30
	r29.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r9,r3,8
	ctx.r9.s64 = ctx.r3.s64 + 8;
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// ble cr6,0x8270fdc0
	if (!cr6.gt) goto loc_8270FDC0;
	// addi r3,r7,-1
	ctx.r3.s64 = ctx.r7.s64 + -1;
	// subf r25,r29,r8
	r25.s64 = ctx.r8.s64 - r29.s64;
	// rlwinm r3,r3,31,1,31
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 31) & 0x7FFFFFFF;
	// add r11,r29,r9
	r11.u64 = r29.u64 + ctx.r9.u64;
	// addi r8,r3,1
	ctx.r8.s64 = ctx.r3.s64 + 1;
loc_8270FD74:
	// lbz r31,0(r9)
	r31.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// lbzx r3,r25,r11
	ctx.r3.u64 = PPC_LOAD_U8(r25.u32 + r11.u32);
	// add r9,r29,r9
	ctx.r9.u64 = r29.u64 + ctx.r9.u64;
	// rotlwi r26,r31,1
	r26.u64 = __builtin_rotateleft32(r31.u32, 1);
	// lbz r28,0(r11)
	r28.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// add r3,r31,r26
	ctx.r3.u64 = r31.u64 + r26.u64;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// add r3,r3,r27
	ctx.r3.u64 = ctx.r3.u64 + r27.u64;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// sth r3,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r3.u16);
	// rlwinm r3,r30,1,0,30
	ctx.r3.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r3,r30,r3
	ctx.r3.u64 = r30.u64 + ctx.r3.u64;
	// add r3,r3,r28
	ctx.r3.u64 = ctx.r3.u64 + r28.u64;
	// sth r3,48(r10)
	PPC_STORE_U16(ctx.r10.u32 + 48, ctx.r3.u16);
	// addi r10,r10,96
	ctx.r10.s64 = ctx.r10.s64 + 96;
	// bne cr6,0x8270fd74
	if (!cr6.eq) goto loc_8270FD74;
loc_8270FDC0:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8270c108
	sub_8270C108(ctx, base);
	// addi r1,r1,928
	ctx.r1.s64 = ctx.r1.s64 + 928;
	// b 0x8239bd3c
	return;
}

__attribute__((alias("__imp__sub_8270FDD0"))) PPC_WEAK_FUNC(sub_8270FDD0);
PPC_FUNC_IMPL(__imp__sub_8270FDD0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCVRegister v23{};
	PPCVRegister v24{};
	PPCVRegister v25{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcd8
	// stwu r1,-1008(r1)
	ea = -1008 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// clrlwi r9,r9,24
	ctx.r9.u64 = ctx.r9.u32 & 0xFF;
	// lwz r11,1092(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1092);
	// li r7,1
	ctx.r7.s64 = 1;
	// vspltisb v0,0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_set1_epi8(char(0x0)));
	// subfic r9,r9,8
	xer.ca = ctx.r9.u32 <= 8;
	ctx.r9.s64 = 8 - ctx.r9.s64;
	// vspltish v13,1
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// mr r8,r4
	ctx.r8.u64 = ctx.r4.u64;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// stw r9,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r9.u32);
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// slw r7,r7,r11
	ctx.r7.u64 = r11.u8 & 0x20 ? 0 : (ctx.r7.u32 << (r11.u8 & 0x3F));
	// li r11,4
	r11.s64 = 4;
	// cmpwi cr6,r7,4
	cr6.compare<int32_t>(ctx.r7.s32, 4, xer);
	// slw r6,r11,r10
	ctx.r6.u64 = ctx.r10.u8 & 0x20 ? 0 : (r11.u32 << (ctx.r10.u8 & 0x3F));
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lvx128 v12,r0,r11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsplth v23,v12,1
	_mm_store_si128((__m128i*)v23.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_set1_epi16(short(0xD0C))));
	// beq cr6,0x82710328
	if (cr6.eq) goto loc_82710328;
	// cmpwi cr6,r7,8
	cr6.compare<int32_t>(ctx.r7.s32, 8, xer);
	// beq cr6,0x82710138
	if (cr6.eq) goto loc_82710138;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// ble cr6,0x827100bc
	if (!cr6.gt) goto loc_827100BC;
	// addi r11,r7,-1
	r11.s64 = ctx.r7.s64 + -1;
	// rlwinm r26,r8,1,0,30
	r26.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r10,r11,29,3,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 29) & 0x1FFFFFFF;
	// rlwinm r25,r8,2,0,29
	r25.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r24,r8,3,0,28
	r24.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r11,r1,224
	r11.s64 = ctx.r1.s64 + 224;
	// addi r27,r10,1
	r27.s64 = ctx.r10.s64 + 1;
loc_8270FE60:
	// add r31,r25,r9
	r31.u64 = r25.u64 + ctx.r9.u64;
	// lvx128 v12,r0,r9
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r9,16
	r28.s64 = ctx.r9.s64 + 16;
	// lvsl v7,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r10,r26,r9
	ctx.r10.u64 = r26.u64 + ctx.r9.u64;
	// add r29,r9,r8
	r29.u64 = ctx.r9.u64 + ctx.r8.u64;
	// add r30,r24,r9
	r30.u64 = r24.u64 + ctx.r9.u64;
	// add r9,r31,r8
	ctx.r9.u64 = r31.u64 + ctx.r8.u64;
	// lvx128 v8,r0,r31
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v11,r0,r28
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r28,r10,r8
	r28.u64 = ctx.r10.u64 + ctx.r8.u64;
	// lvx128 v9,r0,r10
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v12,v12,v11,v7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v10,r0,r29
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r22,r10,16
	r22.s64 = ctx.r10.s64 + 16;
	// lvsl v3,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r23,r29,16
	r23.s64 = r29.s64 + 16;
	// lvsl v5,r0,r29
	temp.u32 = r29.u32;
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r10,r9,r8
	ctx.r10.u64 = ctx.r9.u64 + ctx.r8.u64;
	// lvx128 v29,r0,r9
	_mm_store_si128((__m128i*)v29.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r9,16
	r29.s64 = ctx.r9.s64 + 16;
	// lvsl v11,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r9,r1,112
	ctx.r9.s64 = ctx.r1.s64 + 112;
	// addi r21,r31,16
	r21.s64 = r31.s64 + 16;
	// lvsl v1,r0,r31
	temp.u32 = r31.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r31,r28,16
	r31.s64 = r28.s64 + 16;
	// lvx128 v6,r0,r23
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r23.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v4,r0,r22
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r22.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v24,v0,v12
	_mm_store_si128((__m128i*)v24.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v31,r0,r28
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v11,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v11,v10,v6,v5
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// lvx128 v2,r0,r21
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r21.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v10,v9,v4,v3
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// vperm v9,v8,v2,v1
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// lvx128 v30,r0,r31
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v2,r0,r10
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r9,r10,r8
	ctx.r9.u64 = ctx.r10.u64 + ctx.r8.u64;
	// lvsl v1,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r31,r10,16
	r31.s64 = ctx.r10.s64 + 16;
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// lvsl v7,r0,r28
	temp.u32 = r28.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vperm v8,v31,v30,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v28,r0,r29
	_mm_store_si128((__m128i*)v28.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r9,16
	r29.s64 = ctx.r9.s64 + 16;
	// vmrghb v6,v0,v11
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvsl v7,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r28,r30,16
	r28.s64 = r30.s64 + 16;
	// lvx128 v30,r0,r31
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v5,v0,v10
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// stvx v7,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lvsl v7,r0,r30
	temp.u32 = r30.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vperm v2,v2,v30,v1
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// lvx128 v27,r0,r29
	_mm_store_si128((__m128i*)v27.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v4,v0,v8
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v31,r0,r9
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v3,v0,v9
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v26,r0,r30
	_mm_store_si128((__m128i*)v26.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v7,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v25,r0,r28
	_mm_store_si128((__m128i*)v25.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// lvx128 v7,r0,r10
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v7,v29,v28,v7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v29.u8), _mm_load_si128((__m128i*)v28.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// vmrghb v28,v0,v2
	_mm_store_si128((__m128i*)v28.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// vmrghb v29,v0,v7
	_mm_store_si128((__m128i*)v29.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v1,r0,r10
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// vperm v31,v31,v27,v1
	_mm_store_si128((__m128i*)v31.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)v27.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// lvx128 v1,r0,r10
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v27,v0,v31
	_mm_store_si128((__m128i*)v27.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vperm v30,v26,v25,v1
	_mm_store_si128((__m128i*)v30.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v26.u8), _mm_load_si128((__m128i*)v25.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// vadduhm v26,v6,v24
	_mm_store_si128((__m128i*)v26.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)v24.u16)));
	// vadduhm v25,v5,v6
	_mm_store_si128((__m128i*)v25.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v5.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vmrglb v24,v0,v12
	_mm_store_si128((__m128i*)v24.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v5,v4,v5
	_mm_store_si128((__m128i*)ctx.v5.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v4.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vmrglb v12,v0,v11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v4,v3,v4
	_mm_store_si128((__m128i*)ctx.v4.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v4.u16)));
	// vmrglb v11,v0,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v1,v0,v30
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrglb v6,v0,v31
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v31,v28,v29
	_mm_store_si128((__m128i*)v31.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)v29.u16)));
	// vmrglb v10,v0,v8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v3,v29,v3
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v29.u16), _mm_load_si128((__m128i*)ctx.v3.u16)));
	// addi r10,r11,-96
	ctx.r10.s64 = r11.s64 + -96;
	// vmrglb v8,v0,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v29,v26,v13
	// vmrglb v9,v0,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrglb v7,v0,v2
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v1,v1,v27
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vmrglb v2,v0,v30
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v30,v27,v28
	_mm_store_si128((__m128i*)v30.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v27.u16), _mm_load_si128((__m128i*)v28.u16)));
	// addi r31,r11,48
	r31.s64 = r11.s64 + 48;
	// vadduhm v27,v12,v24
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)v24.u16)));
	// stvx v29,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v29.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v29,v9,v10
	_mm_store_si128((__m128i*)v29.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// addi r29,r11,96
	r29.s64 = r11.s64 + 96;
	// vadduhm v9,v8,v9
	_mm_store_si128((__m128i*)ctx.v9.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v8.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// addi r28,r11,144
	r28.s64 = r11.s64 + 144;
	// vadduhm v8,v7,v8
	_mm_store_si128((__m128i*)ctx.v8.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v8.u16)));
	// addi r23,r11,192
	r23.s64 = r11.s64 + 192;
	// vslh v4,v4,v13
	// addi r22,r11,240
	r22.s64 = r11.s64 + 240;
	// vslh v3,v3,v13
	// vslh v31,v31,v13
	// addi r9,r11,-48
	ctx.r9.s64 = r11.s64 + -48;
	// vslh v30,v30,v13
	// addi r10,r11,-80
	ctx.r10.s64 = r11.s64 + -80;
	// vslh v1,v1,v13
	// stvx v4,r0,r31
	_mm_store_si128((__m128i*)(base + ((r31.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v12,v11,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// stvx v3,r0,r29
	_mm_store_si128((__m128i*)(base + ((r29.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v7,v6,v7
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// stvx v31,r0,r28
	_mm_store_si128((__m128i*)(base + ((r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v5,v5,v13
	// stvx v30,r0,r23
	_mm_store_si128((__m128i*)(base + ((r23.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v11,v10,v11
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// stvx v1,r0,r22
	_mm_store_si128((__m128i*)(base + ((r22.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v6,v2,v6
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// addi r31,r11,-32
	r31.s64 = r11.s64 + -32;
	// addi r29,r11,16
	r29.s64 = r11.s64 + 16;
	// vslh v28,v25,v13
	// stvx v5,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r11,64
	r28.s64 = r11.s64 + 64;
	// addi r23,r11,112
	r23.s64 = r11.s64 + 112;
	// vslh v10,v27,v13
	// addi r22,r11,160
	r22.s64 = r11.s64 + 160;
	// vslh v12,v12,v13
	// addi r21,r11,208
	r21.s64 = r11.s64 + 208;
	// vslh v11,v11,v13
	// addi r20,r11,256
	r20.s64 = r11.s64 + 256;
	// vslh v5,v29,v13
	// vslh v9,v9,v13
	// addi r27,r27,-1
	r27.s64 = r27.s64 + -1;
	// vslh v8,v8,v13
	// stvx v28,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v28.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v7,v7,v13
	// mr r9,r30
	ctx.r9.u64 = r30.u64;
	// vslh v6,v6,v13
	// addi r11,r11,384
	r11.s64 = r11.s64 + 384;
	// stvx v10,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// stvx v12,r0,r31
	_mm_store_si128((__m128i*)(base + ((r31.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v11,r0,r29
	_mm_store_si128((__m128i*)(base + ((r29.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v5,r0,r28
	_mm_store_si128((__m128i*)(base + ((r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v9,r0,r23
	_mm_store_si128((__m128i*)(base + ((r23.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v8,r0,r22
	_mm_store_si128((__m128i*)(base + ((r22.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v7,r0,r21
	_mm_store_si128((__m128i*)(base + ((r21.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v6,r0,r20
	_mm_store_si128((__m128i*)(base + ((r20.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bne cr6,0x8270fe60
	if (!cr6.eq) goto loc_8270FE60;
loc_827100BC:
	// rlwinm r31,r8,1,0,30
	r31.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r9,r3,16
	ctx.r9.s64 = ctx.r3.s64 + 16;
	// addi r10,r1,160
	ctx.r10.s64 = ctx.r1.s64 + 160;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// ble cr6,0x82710458
	if (!cr6.gt) goto loc_82710458;
	// addi r3,r7,-1
	ctx.r3.s64 = ctx.r7.s64 + -1;
	// subf r27,r31,r8
	r27.s64 = ctx.r8.s64 - r31.s64;
	// rlwinm r3,r3,31,1,31
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 31) & 0x7FFFFFFF;
	// add r11,r31,r9
	r11.u64 = r31.u64 + ctx.r9.u64;
	// addi r8,r3,1
	ctx.r8.s64 = ctx.r3.s64 + 1;
loc_827100E4:
	// lbzx r3,r27,r11
	ctx.r3.u64 = PPC_LOAD_U8(r27.u32 + r11.u32);
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// lbz r30,0(r11)
	r30.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// lbz r29,0(r9)
	r29.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// add r3,r30,r3
	ctx.r3.u64 = r30.u64 + ctx.r3.u64;
	// add r29,r29,r28
	r29.u64 = r29.u64 + r28.u64;
	// rlwinm r3,r3,1,0,30
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r30,r29,1,0,30
	r30.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r31,r9
	ctx.r9.u64 = r31.u64 + ctx.r9.u64;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// sth r3,48(r10)
	PPC_STORE_U16(ctx.r10.u32 + 48, ctx.r3.u16);
	// sth r30,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, r30.u16);
	// addi r10,r10,96
	ctx.r10.s64 = ctx.r10.s64 + 96;
	// bne cr6,0x827100e4
	if (!cr6.eq) goto loc_827100E4;
	// vor v1,v23,v23
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)v23.u8));
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x8270c108
	sub_8270C108(ctx, base);
	// addi r1,r1,1008
	ctx.r1.s64 = ctx.r1.s64 + 1008;
	// b 0x8239bd28
	return;
loc_82710138:
	// add r31,r3,r8
	r31.u64 = ctx.r3.u64 + ctx.r8.u64;
	// lvx128 v12,r0,r3
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r3,16
	r29.s64 = ctx.r3.s64 + 16;
	// lvsl v7,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// rlwinm r10,r8,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r28,r31,16
	r28.s64 = r31.s64 + 16;
	// add r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 + ctx.r3.u64;
	// rlwinm r11,r8,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// lvx128 v10,r0,r31
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v11,r0,r29
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r10,16
	r27.s64 = ctx.r10.s64 + 16;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// vperm v5,v12,v11,v7
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v9,r0,r28
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r9,r8,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r26,r11,16
	r26.s64 = r11.s64 + 16;
	// lvsl v7,r0,r31
	temp.u32 = r31.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vperm v10,v10,v9,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// add r29,r10,r8
	r29.u64 = ctx.r10.u64 + ctx.r8.u64;
	// lvx128 v11,r0,r10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r30,r9,r3
	r30.u64 = ctx.r9.u64 + ctx.r3.u64;
	// lvx128 v9,r0,r27
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r9,r11,r8
	ctx.r9.u64 = r11.u64 + ctx.r8.u64;
	// lvsl v6,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r10,r29,16
	ctx.r10.s64 = r29.s64 + 16;
	// vperm v11,v11,v9,v6
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvx128 v12,r0,r11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r31,r9,16
	r31.s64 = ctx.r9.s64 + 16;
	// lvx128 v9,r0,r26
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r26.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r9,r8
	r11.u64 = ctx.r9.u64 + ctx.r8.u64;
	// vperm v9,v12,v9,v7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v8,r0,r29
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v6,r0,r10
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v12,v0,v10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvsl v7,r0,r29
	temp.u32 = r29.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// add r10,r11,r8
	ctx.r10.u64 = r11.u64 + ctx.r8.u64;
	// vperm v8,v8,v6,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v7,r0,r31
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v10,v0,v9
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v9,r0,r9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v4,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r9,r11,16
	ctx.r9.s64 = r11.s64 + 16;
	// vperm v7,v9,v7,v4
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v4.u8)));
	// lvsl v6,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v9,v0,v8
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// rlwinm r31,r8,1,0,30
	r31.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// vmrghb v5,v0,v5
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v11,v0,v11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vmrghb v8,v0,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v7,r0,r11
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r10,16
	r11.s64 = ctx.r10.s64 + 16;
	// lvx128 v4,r0,r9
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v7,v7,v4,v6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvx128 v6,r0,r10
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v4,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vadduhm v5,v12,v5
	_mm_store_si128((__m128i*)ctx.v5.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vadduhm v12,v11,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// addi r9,r3,8
	ctx.r9.s64 = ctx.r3.s64 + 8;
	// vadduhm v11,v9,v11
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// addi r10,r1,144
	ctx.r10.s64 = ctx.r1.s64 + 144;
	// lvx128 v3,r0,r11
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r30,16
	r11.s64 = r30.s64 + 16;
	// vperm v6,v6,v3,v4
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)ctx.v4.u8)));
	// lvx128 v4,r0,r30
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v3,r0,r30
	temp.u32 = r30.u32;
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v7,v0,v7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vadduhm v9,v10,v9
	_mm_store_si128((__m128i*)ctx.v9.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// li r3,4
	ctx.r3.s64 = 4;
	// vadduhm v10,v8,v10
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v8.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// lvx128 v2,r0,r11
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v6,v0,v6
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vperm v4,v4,v2,v3
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// vadduhm v8,v7,v8
	_mm_store_si128((__m128i*)ctx.v8.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v8.u16)));
	// vslh v12,v12,v13
	// vslh v11,v11,v13
	// vadduhm v7,v6,v7
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vmrghb v0,v0,v4
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v9,v9,v13
	// vadduhm v0,v0,v6
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vslh v6,v5,v13
	// addi r11,r1,128
	r11.s64 = ctx.r1.s64 + 128;
	// vslh v10,v10,v13
	// vslh v8,v8,v13
	// subf r27,r31,r8
	r27.s64 = ctx.r8.s64 - r31.s64;
	// vslh v7,v7,v13
	// vslh v0,v0,v13
	// stvx v6,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,176
	r11.s64 = ctx.r1.s64 + 176;
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,224
	r11.s64 = ctx.r1.s64 + 224;
	// stvx v11,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,272
	r11.s64 = ctx.r1.s64 + 272;
	// stvx v9,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,320
	r11.s64 = ctx.r1.s64 + 320;
	// stvx v10,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,368
	r11.s64 = ctx.r1.s64 + 368;
	// stvx v8,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,416
	r11.s64 = ctx.r1.s64 + 416;
	// stvx v7,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,464
	r11.s64 = ctx.r1.s64 + 464;
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r31,r9
	r11.u64 = r31.u64 + ctx.r9.u64;
loc_827102D4:
	// lbzx r8,r11,r27
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + r27.u32);
	// addi r3,r3,-1
	ctx.r3.s64 = ctx.r3.s64 + -1;
	// lbz r30,0(r11)
	r30.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// lbz r29,0(r9)
	r29.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// mr r28,r8
	r28.u64 = ctx.r8.u64;
	// add r8,r30,r8
	ctx.r8.u64 = r30.u64 + ctx.r8.u64;
	// add r29,r29,r28
	r29.u64 = r29.u64 + r28.u64;
	// rlwinm r8,r8,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r30,r29,1,0,30
	r30.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r31,r9
	ctx.r9.u64 = r31.u64 + ctx.r9.u64;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// sth r8,48(r10)
	PPC_STORE_U16(ctx.r10.u32 + 48, ctx.r8.u16);
	// sth r30,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, r30.u16);
	// addi r10,r10,96
	ctx.r10.s64 = ctx.r10.s64 + 96;
	// bne cr6,0x827102d4
	if (!cr6.eq) goto loc_827102D4;
	// vor v1,v23,v23
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)v23.u8));
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x8270c108
	sub_8270C108(ctx, base);
	// addi r1,r1,1008
	ctx.r1.s64 = ctx.r1.s64 + 1008;
	// b 0x8239bd28
	return;
loc_82710328:
	// addi r31,r3,16
	r31.s64 = ctx.r3.s64 + 16;
	// lvx128 v12,r0,r3
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r10,r3,r8
	ctx.r10.u64 = ctx.r3.u64 + ctx.r8.u64;
	// lvsl v7,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// rlwinm r11,r8,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r30,r10,16
	r30.s64 = ctx.r10.s64 + 16;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// lvx128 v11,r0,r31
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r9,r8,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// vperm v12,v12,v11,v7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvsl v7,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r29,r11,16
	r29.s64 = r11.s64 + 16;
	// lvx128 v8,r0,r30
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r31,r11,r8
	r31.u64 = r11.u64 + ctx.r8.u64;
	// add r9,r9,r3
	ctx.r9.u64 = ctx.r9.u64 + ctx.r3.u64;
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v10,v0,v12
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v12,v12,v8,v7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvsl v6,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// lvx128 v8,r0,r29
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r31,16
	r11.s64 = r31.s64 + 16;
	// vperm v11,v11,v8,v6
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// addi r10,r9,16
	ctx.r10.s64 = ctx.r9.s64 + 16;
	// lvx128 v9,r0,r9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// cmpwi cr6,r6,8
	cr6.compare<int32_t>(ctx.r6.s32, 8, xer);
	// vmrghb v12,v0,v12
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvsl v7,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vmrghb v11,v0,v11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v6,r0,r11
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v8,r0,r10
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,128
	r11.s64 = ctx.r1.s64 + 128;
	// vadduhm v10,v12,v10
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vperm v9,v9,v8,v7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v8,r0,r31
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvsl v7,r0,r31
	temp.u32 = r31.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vadduhm v12,v11,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vperm v8,v8,v6,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// vslh v10,v10,v13
	// vmrghb v9,v0,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vslh v12,v12,v13
	// vmrghb v0,v0,v8
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// stvx v10,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,176
	r11.s64 = ctx.r1.s64 + 176;
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v12,v0,v11
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// addi r11,r1,224
	r11.s64 = ctx.r1.s64 + 224;
	// vadduhm v0,v9,v0
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v0.u16)));
	// vslh v12,v12,v13
	// vslh v0,v0,v13
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,272
	r11.s64 = ctx.r1.s64 + 272;
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bne cr6,0x82710458
	if (!cr6.eq) goto loc_82710458;
	// rlwinm r31,r8,1,0,30
	r31.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r9,r3,8
	ctx.r9.s64 = ctx.r3.s64 + 8;
	// addi r10,r1,144
	ctx.r10.s64 = ctx.r1.s64 + 144;
	// li r3,2
	ctx.r3.s64 = 2;
	// subf r27,r31,r8
	r27.s64 = ctx.r8.s64 - r31.s64;
	// add r11,r31,r9
	r11.u64 = r31.u64 + ctx.r9.u64;
loc_82710418:
	// lbzx r8,r11,r27
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + r27.u32);
	// addi r3,r3,-1
	ctx.r3.s64 = ctx.r3.s64 + -1;
	// lbz r30,0(r11)
	r30.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// lbz r29,0(r9)
	r29.u64 = PPC_LOAD_U8(ctx.r9.u32 + 0);
	// mr r28,r8
	r28.u64 = ctx.r8.u64;
	// add r8,r30,r8
	ctx.r8.u64 = r30.u64 + ctx.r8.u64;
	// add r29,r29,r28
	r29.u64 = r29.u64 + r28.u64;
	// rlwinm r8,r8,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r30,r29,1,0,30
	r30.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r31,r9
	ctx.r9.u64 = r31.u64 + ctx.r9.u64;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// sth r8,48(r10)
	PPC_STORE_U16(ctx.r10.u32 + 48, ctx.r8.u16);
	// sth r30,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, r30.u16);
	// addi r10,r10,96
	ctx.r10.s64 = ctx.r10.s64 + 96;
	// bne cr6,0x82710418
	if (!cr6.eq) goto loc_82710418;
loc_82710458:
	// vor v1,v23,v23
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)v23.u8));
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x8270c108
	sub_8270C108(ctx, base);
	// addi r1,r1,1008
	ctx.r1.s64 = ctx.r1.s64 + 1008;
	// b 0x8239bd28
	return;
}

__attribute__((alias("__imp__sub_8271046C"))) PPC_WEAK_FUNC(sub_8271046C);
PPC_FUNC_IMPL(__imp__sub_8271046C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_82710470"))) PPC_WEAK_FUNC(sub_82710470);
PPC_FUNC_IMPL(__imp__sub_82710470) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcf8
	// stwu r1,-912(r1)
	ea = -912 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,996(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 996);
	// li r8,4
	ctx.r8.s64 = 4;
	// li r7,1
	ctx.r7.s64 = 1;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// clrlwi r9,r9,24
	ctx.r9.u64 = ctx.r9.u32 & 0xFF;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// subfic r9,r9,8
	xer.ca = ctx.r9.u32 <= 8;
	ctx.r9.s64 = 8 - ctx.r9.s64;
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// stw r9,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r9.u32);
	// slw r31,r8,r10
	r31.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r8.u32 << (ctx.r10.u8 & 0x3F));
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// slw r30,r7,r11
	r30.u64 = r11.u8 & 0x20 ? 0 : (ctx.r7.u32 << (r11.u8 & 0x3F));
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// bl 0x82703690
	sub_82703690(ctx, base);
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lvx128 v0,r0,r11
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// vsplth v1,v0,1
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_set1_epi16(short(0xD0C))));
	// bl 0x8270c108
	sub_8270C108(ctx, base);
	// addi r1,r1,912
	ctx.r1.s64 = ctx.r1.s64 + 912;
	// b 0x8239bd48
	return;
}

__attribute__((alias("__imp__sub_827104F0"))) PPC_WEAK_FUNC(sub_827104F0);
PPC_FUNC_IMPL(__imp__sub_827104F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	// mflr r12
	// bl 0x8239bcf0
	// mr r8,r3
	ctx.r8.u64 = ctx.r3.u64;
	// stw r4,28(r1)
	PPC_STORE_U32(ctx.r1.u32 + 28, ctx.r4.u32);
	// rlwinm r11,r4,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// stw r5,36(r1)
	PPC_STORE_U32(ctx.r1.u32 + 36, ctx.r5.u32);
	// rlwinm r9,r6,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// stw r6,44(r1)
	PPC_STORE_U32(ctx.r1.u32 + 44, ctx.r6.u32);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r8,20(r1)
	PPC_STORE_U32(ctx.r1.u32 + 20, ctx.r8.u32);
	// stw r11,-96(r1)
	PPC_STORE_U32(ctx.r1.u32 + -96, r11.u32);
	// stw r9,-92(r1)
	PPC_STORE_U32(ctx.r1.u32 + -92, ctx.r9.u32);
	// bne cr6,0x82710584
	if (!cr6.eq) goto loc_82710584;
	// ld r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r8.u32 + 0);
	// li r3,0
	ctx.r3.s64 = 0;
	// std r10,0(r5)
	PPC_STORE_U64(ctx.r5.u32 + 0, ctx.r10.u64);
	// add r10,r11,r8
	ctx.r10.u64 = r11.u64 + ctx.r8.u64;
	// ldx r7,r8,r4
	ctx.r7.u64 = PPC_LOAD_U64(ctx.r8.u32 + ctx.r4.u32);
	// add r8,r9,r5
	ctx.r8.u64 = ctx.r9.u64 + ctx.r5.u64;
	// stdx r7,r5,r6
	PPC_STORE_U64(ctx.r5.u32 + ctx.r6.u32, ctx.r7.u64);
	// ld r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U64(ctx.r10.u32 + 0);
	// std r7,0(r8)
	PPC_STORE_U64(ctx.r8.u32 + 0, ctx.r7.u64);
	// ldx r7,r10,r4
	ctx.r7.u64 = PPC_LOAD_U64(ctx.r10.u32 + ctx.r4.u32);
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stdx r7,r8,r6
	PPC_STORE_U64(ctx.r8.u32 + ctx.r6.u32, ctx.r7.u64);
	// add r8,r9,r8
	ctx.r8.u64 = ctx.r9.u64 + ctx.r8.u64;
	// ld r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U64(ctx.r10.u32 + 0);
	// std r7,0(r8)
	PPC_STORE_U64(ctx.r8.u32 + 0, ctx.r7.u64);
	// ldx r7,r10,r4
	ctx.r7.u64 = PPC_LOAD_U64(ctx.r10.u32 + ctx.r4.u32);
	// add r10,r9,r8
	ctx.r10.u64 = ctx.r9.u64 + ctx.r8.u64;
	// stdx r7,r8,r6
	PPC_STORE_U64(ctx.r8.u32 + ctx.r6.u32, ctx.r7.u64);
	// ld r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// std r9,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, ctx.r9.u64);
	// ldx r11,r11,r4
	r11.u64 = PPC_LOAD_U64(r11.u32 + ctx.r4.u32);
	// stdx r11,r10,r6
	PPC_STORE_U64(ctx.r10.u32 + ctx.r6.u32, r11.u64);
	// b 0x8239bd40
	return;
loc_82710584:
	// li r7,16
	ctx.r7.s64 = 16;
	// lvlx v0,0,r8
	temp.u32 = ctx.r8.u32;
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// add r10,r8,r4
	ctx.r10.u64 = ctx.r8.u64 + ctx.r4.u64;
	// li r3,16
	ctx.r3.s64 = 16;
	// li r31,16
	r31.s64 = 16;
	// li r30,16
	r30.s64 = 16;
	// lvrx v13,r8,r7
	temp.u32 = ctx.r8.u32 + ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v13.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// li r29,16
	r29.s64 = 16;
	// vor v0,v0,v13
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// lvlx v12,0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v13,r10,r3
	temp.u32 = ctx.r10.u32 + ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v13.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// add r10,r11,r8
	ctx.r10.u64 = r11.u64 + ctx.r8.u64;
	// add r8,r9,r5
	ctx.r8.u64 = ctx.r9.u64 + ctx.r5.u64;
	// vor v13,v12,v13
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// add r7,r10,r4
	ctx.r7.u64 = ctx.r10.u64 + ctx.r4.u64;
	// stvx v0,r0,r5
	_mm_store_si128((__m128i*)(base + ((ctx.r5.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r28,16
	r28.s64 = 16;
	// li r27,16
	r27.s64 = 16;
	// stvx128 v13,r5,r6
	_mm_store_si128((__m128i*)(base + ((ctx.r5.u32 + ctx.r6.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stw r10,20(r1)
	PPC_STORE_U32(ctx.r1.u32 + 20, ctx.r10.u32);
	// stw r8,36(r1)
	PPC_STORE_U32(ctx.r1.u32 + 36, ctx.r8.u32);
	// lvlx v13,0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v0,r10,r31
	temp.u32 = ctx.r10.u32 + r31.u32;
	_mm_store_si128((__m128i*)ctx.v0.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// vor v0,v13,v0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvrx v12,r7,r30
	temp.u32 = ctx.r7.u32 + r30.u32;
	_mm_store_si128((__m128i*)ctx.v12.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// lvlx v13,0,r7
	temp.u32 = ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// add r7,r10,r4
	ctx.r7.u64 = ctx.r10.u64 + ctx.r4.u64;
	// vor v13,v13,v12
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v12.u8)));
	// li r26,16
	r26.s64 = 16;
	// stvx v0,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stw r10,20(r1)
	PPC_STORE_U32(ctx.r1.u32 + 20, ctx.r10.u32);
	// stvx128 v13,r8,r6
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32 + ctx.r6.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r8,r9,r8
	ctx.r8.u64 = ctx.r9.u64 + ctx.r8.u64;
	// stw r8,36(r1)
	PPC_STORE_U32(ctx.r1.u32 + 36, ctx.r8.u32);
	// lvlx v13,0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v0,r10,r29
	temp.u32 = ctx.r10.u32 + r29.u32;
	_mm_store_si128((__m128i*)ctx.v0.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// vor v0,v13,v0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvrx v12,r7,r28
	temp.u32 = ctx.r7.u32 + r28.u32;
	_mm_store_si128((__m128i*)ctx.v12.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// lvlx v13,0,r7
	temp.u32 = ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// add r7,r10,r4
	ctx.r7.u64 = ctx.r10.u64 + ctx.r4.u64;
	// vor v13,v13,v12
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v12.u8)));
	// stvx v0,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stw r10,20(r1)
	PPC_STORE_U32(ctx.r1.u32 + 20, ctx.r10.u32);
	// stvx128 v13,r8,r6
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32 + ctx.r6.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r8,r9,r8
	ctx.r8.u64 = ctx.r9.u64 + ctx.r8.u64;
	// stw r8,36(r1)
	PPC_STORE_U32(ctx.r1.u32 + 36, ctx.r8.u32);
	// lvlx v13,0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v0,r10,r27
	temp.u32 = ctx.r10.u32 + r27.u32;
	_mm_store_si128((__m128i*)ctx.v0.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// vor v0,v13,v0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvlx v12,0,r7
	temp.u32 = ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v13,r7,r26
	temp.u32 = ctx.r7.u32 + r26.u32;
	_mm_store_si128((__m128i*)ctx.v13.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// lwz r7,84(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// vor v13,v12,v13
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// stvx v0,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stw r10,20(r1)
	PPC_STORE_U32(ctx.r1.u32 + 20, ctx.r10.u32);
	// stvx128 v13,r8,r6
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32 + ctx.r6.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r8,r9,r8
	ctx.r8.u64 = ctx.r9.u64 + ctx.r8.u64;
	// stw r8,36(r1)
	PPC_STORE_U32(ctx.r1.u32 + 36, ctx.r8.u32);
	// bne cr6,0x82710744
	if (!cr6.eq) goto loc_82710744;
	// li r5,16
	ctx.r5.s64 = 16;
	// lvlx v0,0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// add r7,r10,r4
	ctx.r7.u64 = ctx.r10.u64 + ctx.r4.u64;
	// lvrx v13,r10,r5
	temp.u32 = ctx.r10.u32 + ctx.r5.u32;
	_mm_store_si128((__m128i*)ctx.v13.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// vor v0,v0,v13
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// lvlx v12,0,r7
	temp.u32 = ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v13,r7,r3
	temp.u32 = ctx.r7.u32 + ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v13.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// add r7,r10,r4
	ctx.r7.u64 = ctx.r10.u64 + ctx.r4.u64;
	// vor v13,v12,v13
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// stvx v0,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stw r10,20(r1)
	PPC_STORE_U32(ctx.r1.u32 + 20, ctx.r10.u32);
	// stvx128 v13,r8,r6
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32 + ctx.r6.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r8,r9,r8
	ctx.r8.u64 = ctx.r9.u64 + ctx.r8.u64;
	// stw r8,36(r1)
	PPC_STORE_U32(ctx.r1.u32 + 36, ctx.r8.u32);
	// lvlx v13,0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v0,r10,r31
	temp.u32 = ctx.r10.u32 + r31.u32;
	_mm_store_si128((__m128i*)ctx.v0.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// vor v0,v13,v0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvrx v12,r7,r30
	temp.u32 = ctx.r7.u32 + r30.u32;
	_mm_store_si128((__m128i*)ctx.v12.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// lvlx v13,0,r7
	temp.u32 = ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// add r7,r10,r4
	ctx.r7.u64 = ctx.r10.u64 + ctx.r4.u64;
	// vor v13,v13,v12
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v12.u8)));
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stvx v0,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stw r10,20(r1)
	PPC_STORE_U32(ctx.r1.u32 + 20, ctx.r10.u32);
	// stvx128 v13,r8,r6
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32 + ctx.r6.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r8,r9,r8
	ctx.r8.u64 = ctx.r9.u64 + ctx.r8.u64;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// stw r8,36(r1)
	PPC_STORE_U32(ctx.r1.u32 + 36, ctx.r8.u32);
	// lvlx v13,0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v0,r10,r29
	temp.u32 = ctx.r10.u32 + r29.u32;
	_mm_store_si128((__m128i*)ctx.v0.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// add r10,r11,r4
	ctx.r10.u64 = r11.u64 + ctx.r4.u64;
	// vor v0,v13,v0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvrx v12,r7,r5
	temp.u32 = ctx.r7.u32 + ctx.r5.u32;
	_mm_store_si128((__m128i*)ctx.v12.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// lvlx v13,0,r7
	temp.u32 = ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// stw r11,20(r1)
	PPC_STORE_U32(ctx.r1.u32 + 20, r11.u32);
	// vor v13,v13,v12
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v12.u8)));
	// stw r9,36(r1)
	PPC_STORE_U32(ctx.r1.u32 + 36, ctx.r9.u32);
	// stvx v0,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v13,r8,r6
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32 + ctx.r6.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvlx v13,0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v0,r10,r28
	temp.u32 = ctx.r10.u32 + r28.u32;
	_mm_store_si128((__m128i*)ctx.v0.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// vor v0,v13,v0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvlx v12,0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v13,r11,r27
	temp.u32 = r11.u32 + r27.u32;
	_mm_store_si128((__m128i*)ctx.v13.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// vor v13,v12,v13
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// stvx v13,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v0,r9,r6
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32 + ctx.r6.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
loc_82710744:
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x8239bd40
	return;
}

__attribute__((alias("__imp__sub_8271074C"))) PPC_WEAK_FUNC(sub_8271074C);
PPC_FUNC_IMPL(__imp__sub_8271074C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_82710750"))) PPC_WEAK_FUNC(sub_82710750);
PPC_FUNC_IMPL(__imp__sub_82710750) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,1072(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1072);
	// mr r8,r10
	ctx.r8.u64 = ctx.r10.u64;
	// subf r3,r4,r3
	ctx.r3.s64 = ctx.r3.s64 - ctx.r4.s64;
	// lwz r9,228(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 228);
	// vspltish v1,6
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// li r11,2
	r11.s64 = 2;
	// slw r7,r11,r10
	ctx.r7.u64 = ctx.r10.u8 & 0x20 ? 0 : (r11.u32 << (ctx.r10.u8 & 0x3F));
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// lvx128 v0,r0,r11
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsplth v2,v0,1
	_mm_store_si128((__m128i*)ctx.v2.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_set1_epi16(short(0xD0C))));
	// bl 0x82706cd0
	sub_82706CD0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_827107A0"))) PPC_WEAK_FUNC(sub_827107A0);
PPC_FUNC_IMPL(__imp__sub_827107A0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,1080(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1080);
	// mr r8,r10
	ctx.r8.u64 = ctx.r10.u64;
	// subf r3,r4,r3
	ctx.r3.s64 = ctx.r3.s64 - ctx.r4.s64;
	// lwz r9,228(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 228);
	// vspltish v1,4
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// li r11,2
	r11.s64 = 2;
	// slw r7,r11,r10
	ctx.r7.u64 = ctx.r10.u8 & 0x20 ? 0 : (r11.u32 << (ctx.r10.u8 & 0x3F));
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// lvx128 v0,r0,r11
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsplth v2,v0,1
	_mm_store_si128((__m128i*)ctx.v2.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_set1_epi16(short(0xD0C))));
	// bl 0x82707008
	sub_82707008(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_827107F0"))) PPC_WEAK_FUNC(sub_827107F0);
PPC_FUNC_IMPL(__imp__sub_827107F0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,1072(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1072);
	// mr r8,r10
	ctx.r8.u64 = ctx.r10.u64;
	// subf r3,r4,r3
	ctx.r3.s64 = ctx.r3.s64 - ctx.r4.s64;
	// lwz r9,228(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 228);
	// vspltish v1,6
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// li r11,2
	r11.s64 = 2;
	// slw r7,r11,r10
	ctx.r7.u64 = ctx.r10.u8 & 0x20 ? 0 : (r11.u32 << (ctx.r10.u8 & 0x3F));
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// lvx128 v0,r0,r11
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsplth v2,v0,1
	_mm_store_si128((__m128i*)ctx.v2.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_set1_epi16(short(0xD0C))));
	// bl 0x82707318
	sub_82707318(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82710840"))) PPC_WEAK_FUNC(sub_82710840);
PPC_FUNC_IMPL(__imp__sub_82710840) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcf4
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,1088(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1088);
	// vspltish v13,6
	// lwz r30,1100(r7)
	r30.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1100);
	// mr r31,r10
	r31.u64 = ctx.r10.u64;
	// lwz r28,260(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 260);
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// addi r3,r3,-1
	ctx.r3.s64 = ctx.r3.s64 + -1;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// addi r11,r1,96
	r11.s64 = ctx.r1.s64 + 96;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lvx128 v0,r0,r11
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// vsplth v0,v0,1
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_set1_epi16(short(0xD0C))));
	// stvx v13,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,96
	r11.s64 = ctx.r1.s64 + 96;
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x82700240
	sub_82700240(ctx, base);
	// cntlzw r11,r28
	r11.u64 = r28.u32 == 0 ? 32 : __builtin_clz(r28.u32);
	// vspltish v12,-1
	// li r8,1
	ctx.r8.s64 = 1;
	// vspltish v0,8
	// rlwinm r10,r11,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// vspltisb v5,0
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_set1_epi8(char(0x0)));
	// mr r11,r29
	r11.u64 = r29.u64;
	// vspltish v4,1
	// and r9,r10,r31
	ctx.r9.u64 = ctx.r10.u64 & r31.u64;
	// vspltish v13,2
	// vslh v31,v12,v0
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// addi r9,r9,3
	ctx.r9.s64 = ctx.r9.s64 + 3;
	// vspltish v12,4
	// vspltish v3,5
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// vspltish v8,0
	// slw r9,r8,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x20 ? 0 : (ctx.r8.u32 << (ctx.r9.u8 & 0x3F));
	// bne cr6,0x8271098c
	if (!cr6.eq) goto loc_8271098C;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x82710a88
	if (!cr6.gt) goto loc_82710A88;
loc_827108F0:
	// addi r8,r10,16
	ctx.r8.s64 = ctx.r10.s64 + 16;
	// lvx128 v0,r0,r10
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// lvx128 v10,r0,r8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r1,96
	ctx.r8.s64 = ctx.r1.s64 + 96;
	// vsldoi v11,v0,v10,2
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v10.u8), 14));
	// vsldoi v9,v0,v10,4
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v10.u8), 12));
	// vsldoi v10,v0,v10,6
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v10.u8), 10));
	// vslh v7,v11,v13
	// vslh v6,v11,v3
	// vslh v2,v11,v12
	// vadduhm v11,v7,v11
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// vadduhm v7,v2,v6
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vslh v6,v9,v12
	// vslh v9,v9,v4
	// vslh v2,v0,v13
	// vadduhm v11,v11,v7
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vadduhm v9,v9,v6
	_mm_store_si128((__m128i*)ctx.v9.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vslh v6,v10,v13
	// vadduhm v11,v11,v9
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// vsubshs v0,v10,v6
	// vsubshs v10,v5,v2
	// vadduhm v0,v0,v10
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// lvx128 v10,r0,r8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v11,v11,v10
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// addi r8,r1,112
	ctx.r8.s64 = ctx.r1.s64 + 112;
	// vadduhm v0,v11,v0
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v0.u16)));
	// lvx128 v11,r0,r8
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r8,4
	ctx.r8.s64 = 4;
	// vsrah v0,v0,v11
	// vor v8,v8,v0
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vpkshus v0,v0,v0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v0.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// stvewx v0,r0,r11
	ea = (r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v0,r11,r8
	ea = (r11.u32 + ctx.r8.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// bne cr6,0x827108f0
	if (!cr6.eq) goto loc_827108F0;
	// b 0x82710a88
	goto loc_82710A88;
loc_8271098C:
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x82710a88
	if (!cr6.gt) goto loc_82710A88;
	// addi r10,r30,32
	ctx.r10.s64 = r30.s64 + 32;
loc_82710998:
	// addi r8,r10,-32
	ctx.r8.s64 = ctx.r10.s64 + -32;
	// lvx128 v9,r0,r10
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r10,-16
	ctx.r7.s64 = ctx.r10.s64 + -16;
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// lvx128 v11,r0,r8
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r1,96
	ctx.r8.s64 = ctx.r1.s64 + 96;
	// lvx128 v0,r0,r7
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsldoi v10,v11,v0,2
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8), 14));
	// vsldoi v7,v11,v0,4
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8), 12));
	// vsldoi v6,v11,v0,6
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8), 10));
	// vslh v11,v11,v13
	// vslh v2,v10,v13
	// vslh v30,v10,v12
	// vslh v1,v10,v3
	// vsubshs v11,v5,v11
	// vadduhm v2,v2,v10
	_mm_store_si128((__m128i*)ctx.v2.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vslh v10,v7,v12
	// vslh v7,v7,v4
	// vadduhm v1,v30,v1
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v30.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vadduhm v7,v7,v10
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vslh v10,v6,v13
	// vadduhm v2,v2,v1
	_mm_store_si128((__m128i*)ctx.v2.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// lvx128 v1,r0,r8
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r1,112
	ctx.r8.s64 = ctx.r1.s64 + 112;
	// vsubshs v10,v6,v10
	// vadduhm v7,v2,v7
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vadduhm v6,v10,v11
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// vsldoi v11,v0,v9,2
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v9.u8), 14));
	// vadduhm v2,v7,v1
	_mm_store_si128((__m128i*)ctx.v2.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vsldoi v10,v0,v9,4
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v9.u8), 12));
	// vsldoi v9,v0,v9,6
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v9.u8), 10));
	// vslh v7,v11,v13
	// vslh v30,v11,v3
	// vslh v29,v11,v12
	// vadduhm v11,v7,v11
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// vadduhm v7,v29,v30
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v29.u16), _mm_load_si128((__m128i*)v30.u16)));
	// vslh v30,v10,v12
	// vslh v10,v10,v4
	// vslh v29,v0,v13
	// vadduhm v11,v11,v7
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vadduhm v10,v10,v30
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)v30.u16)));
	// vslh v30,v9,v13
	// vadduhm v10,v11,v10
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vsubshs v0,v9,v30
	// vsubshs v9,v5,v29
	// vadduhm v10,v10,v1
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vadduhm v30,v0,v9
	_mm_store_si128((__m128i*)v30.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// vadduhm v0,v2,v6
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// lvx128 v6,r0,r8
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v11,v10,v30
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)v30.u16)));
	// vsrah v0,v0,v6
	// vsrah v11,v11,v6
	// vor v9,v8,v0
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vpkshus v0,v0,v11
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// vor v8,v9,v11
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v11.u8)));
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// bne cr6,0x82710998
	if (!cr6.eq) goto loc_82710998;
loc_82710A88:
	// vand v0,v8,v31
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_and_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)v31.u8)));
	// vcmpgtuh. v0,v0,v5
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_cmpgt_epu16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// mfocrf r11,2
	r11.u64 = (cr6.lt << 7) | (cr6.gt << 6) | (cr6.eq << 5) | (cr6.so << 4);
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x8239bd44
	return;
}

__attribute__((alias("__imp__sub_82710AA4"))) PPC_WEAK_FUNC(sub_82710AA4);
PPC_FUNC_IMPL(__imp__sub_82710AA4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_82710AA8"))) PPC_WEAK_FUNC(sub_82710AA8);
PPC_FUNC_IMPL(__imp__sub_82710AA8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCVRegister v19{};
	PPCVRegister v20{};
	PPCVRegister v21{};
	PPCVRegister v22{};
	PPCVRegister v23{};
	PPCVRegister v24{};
	PPCVRegister v25{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcf4
	// lwz r9,1076(r7)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1076);
	// vspltish v31,5
	// stw r10,76(r1)
	PPC_STORE_U32(ctx.r1.u32 + 76, ctx.r10.u32);
	// vspltisb v13,0
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_set1_epi8(char(0x0)));
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// vspltish v30,1
	// li r8,1
	ctx.r8.s64 = 1;
	// vspltish v0,2
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// vspltish v12,4
	// stw r9,-240(r1)
	PPC_STORE_U32(ctx.r1.u32 + -240, ctx.r9.u32);
	// vspltish v20,7
	// lwz r9,1092(r7)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1092);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// lwz r31,1100(r7)
	r31.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1100);
	// addi r7,r1,-240
	ctx.r7.s64 = ctx.r1.s64 + -240;
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// vor v29,v31,v31
	_mm_store_si128((__m128i*)v29.u8, _mm_load_si128((__m128i*)v31.u8));
	// stw r4,28(r1)
	PPC_STORE_U32(ctx.r1.u32 + 28, ctx.r4.u32);
	// addi r30,r11,3
	r30.s64 = r11.s64 + 3;
	// stw r5,36(r1)
	PPC_STORE_U32(ctx.r1.u32 + 36, ctx.r5.u32);
	// stw r9,-224(r1)
	PPC_STORE_U32(ctx.r1.u32 + -224, ctx.r9.u32);
	// addi r9,r1,-240
	ctx.r9.s64 = ctx.r1.s64 + -240;
	// addi r11,r1,-224
	r11.s64 = ctx.r1.s64 + -224;
	// stw r6,44(r1)
	PPC_STORE_U32(ctx.r1.u32 + 44, ctx.r6.u32);
	// stw r31,-204(r1)
	PPC_STORE_U32(ctx.r1.u32 + -204, r31.u32);
	// lvx128 v11,r0,r9
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// vsplth v2,v11,1
	_mm_store_si128((__m128i*)ctx.v2.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_set1_epi16(short(0xD0C))));
	// lvx128 v10,r0,r11
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r9,3
	ctx.r9.s64 = ctx.r9.s64 + 3;
	// vsplth v19,v10,1
	_mm_store_si128((__m128i*)v19.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_set1_epi16(short(0xD0C))));
	// addi r11,r1,-64
	r11.s64 = ctx.r1.s64 + -64;
	// cmpwi cr6,r9,3
	cr6.compare<int32_t>(ctx.r9.s32, 3, xer);
	// addi r9,r1,-176
	ctx.r9.s64 = ctx.r1.s64 + -176;
	// stvx v2,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r1,-224
	ctx.r7.s64 = ctx.r1.s64 + -224;
	// stvx v20,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v20.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// subf r11,r4,r3
	r11.s64 = ctx.r3.s64 - ctx.r4.s64;
	// stvx v31,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-192
	ctx.r9.s64 = ctx.r1.s64 + -192;
	// slw r8,r8,r30
	ctx.r8.u64 = r30.u8 & 0x20 ? 0 : (ctx.r8.u32 << (r30.u8 & 0x3F));
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stvx v19,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v19.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v13,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-112
	ctx.r9.s64 = ctx.r1.s64 + -112;
	// stw r8,-208(r1)
	PPC_STORE_U32(ctx.r1.u32 + -208, ctx.r8.u32);
	// stvx v30,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-144
	ctx.r9.s64 = ctx.r1.s64 + -144;
	// stvx v0,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-80
	ctx.r9.s64 = ctx.r1.s64 + -80;
	// stvx v12,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-256
	ctx.r9.s64 = ctx.r1.s64 + -256;
	// stvx v29,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v29.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bne cr6,0x82710cfc
	if (!cr6.eq) goto loc_82710CFC;
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r7,r11,r4
	ctx.r7.u64 = r11.u64 + ctx.r4.u64;
	// lvsl v7,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r30,r1,-256
	r30.s64 = ctx.r1.s64 + -256;
	// add r11,r7,r4
	r11.u64 = ctx.r7.u64 + ctx.r4.u64;
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
	// lvx128 v10,r0,r3
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r7,16
	ctx.r3.s64 = ctx.r7.s64 + 16;
	// lvx128 v9,r0,r7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// stvx v11,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v11,v11,v10,v7
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvsl v6,r0,r7
	temp.u32 = ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r7,r11,16
	ctx.r7.s64 = r11.s64 + 16;
	// lvsl v1,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// lvx128 v8,r0,r3
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r1,-256
	ctx.r3.s64 = ctx.r1.s64 + -256;
	// vmrghb v5,v13,v11
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrglb v4,v13,v11
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// stvx v10,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r1,-256
	ctx.r3.s64 = ctx.r1.s64 + -256;
	// vperm v10,v9,v8,v6
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// stvx v7,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v11,v13,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// lvx128 v3,r0,r11
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrglb v10,v13,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// lvx128 v28,r0,r7
	_mm_store_si128((__m128i*)v28.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v8,v3,v28,v1
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)v28.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// vmrghb v9,v13,v8
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrglb v8,v13,v8
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// ble cr6,0x82710f30
	if (!cr6.gt) goto loc_82710F30;
	// li r7,0
	ctx.r7.s64 = 0;
loc_82710C10:
	// vslh v3,v11,v12
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// vslh v6,v11,v29
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// vslh v1,v9,v30
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// vslh v7,v11,v0
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// vslh v5,v5,v0
	// vadduhm v6,v3,v6
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// lvx128 v28,r0,r11
	_mm_store_si128((__m128i*)v28.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v3,v9,v12
	// cmpw cr6,r7,r8
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r8.s32, xer);
	// vadduhm v7,v7,v11
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// lvx128 v27,r0,r3
	_mm_store_si128((__m128i*)v27.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsubshs v5,v13,v5
	// addi r3,r9,16
	ctx.r3.s64 = ctx.r9.s64 + 16;
	// vadduhm v3,v1,v3
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)ctx.v3.u16)));
	// vslh v1,v10,v0
	// vadduhm v7,v7,v6
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vadduhm v26,v1,v10
	_mm_store_si128((__m128i*)v26.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// lvsl v1,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vperm v6,v28,v27,v1
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v28.u8), _mm_load_si128((__m128i*)v27.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// vadduhm v3,v7,v3
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v3.u16)));
	// vslh v28,v8,v30
	// vslh v27,v4,v0
	// vmrghb v7,v13,v6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vadduhm v3,v3,v2
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v2.u16)));
	// vmrglb v6,v13,v6
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vsubshs v27,v13,v27
	// vslh v1,v7,v0
	// vsubshs v1,v7,v1
	// vadduhm v5,v1,v5
	_mm_store_si128((__m128i*)ctx.v5.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vslh v1,v10,v12
	// vadduhm v3,v3,v5
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vslh v5,v10,v29
	// vsrah v3,v3,v31
	// vadduhm v1,v1,v5
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vslh v5,v8,v12
	// stvx v3,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r9,48
	ctx.r9.s64 = ctx.r9.s64 + 48;
	// vadduhm v28,v28,v5
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vslh v5,v6,v0
	// vsubshs v4,v6,v5
	// vor v5,v11,v11
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_load_si128((__m128i*)ctx.v11.u8));
	// vor v11,v9,v9
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_load_si128((__m128i*)ctx.v9.u8));
	// vor v9,v7,v7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_load_si128((__m128i*)ctx.v7.u8));
	// vadduhm v7,v26,v1
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v26.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vadduhm v27,v4,v27
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v4.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vor v4,v10,v10
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_load_si128((__m128i*)ctx.v10.u8));
	// vor v10,v8,v8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_load_si128((__m128i*)ctx.v8.u8));
	// vor v8,v6,v6
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_load_si128((__m128i*)ctx.v6.u8));
	// vadduhm v6,v7,v28
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)v28.u16)));
	// vadduhm v6,v6,v2
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)ctx.v2.u16)));
	// vadduhm v7,v6,v27
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vsrah v7,v7,v31
	// stvx v7,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// blt cr6,0x82710c10
	if (cr6.lt) goto loc_82710C10;
	// b 0x82710f30
	goto loc_82710F30;
loc_82710CFC:
	// li r9,16
	ctx.r9.s64 = 16;
	// stw r11,-288(r1)
	PPC_STORE_U32(ctx.r1.u32 + -288, r11.u32);
	// lvlx v11,0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// li r7,16
	ctx.r7.s64 = 16;
	// li r3,32
	ctx.r3.s64 = 32;
	// addi r27,r1,-160
	r27.s64 = ctx.r1.s64 + -160;
	// li r30,16
	r30.s64 = 16;
	// lvrx v10,r11,r9
	temp.u32 = r11.u32 + ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v10.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// li r29,16
	r29.s64 = 16;
	// vor v11,v11,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v10.u8)));
	// lvlx v9,r11,r7
	temp.u32 = r11.u32 + ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v8,r11,r3
	temp.u32 = r11.u32 + ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v8.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// vor v10,v9,v8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v8.u8)));
	// li r28,32
	r28.s64 = 32;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// stvx v11,r0,r27
	_mm_store_si128((__m128i*)(base + ((r27.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r1,-128
	r27.s64 = ctx.r1.s64 + -128;
	// vmrghb v4,v13,v11
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// stw r11,-288(r1)
	PPC_STORE_U32(ctx.r1.u32 + -288, r11.u32);
	// vmrglb v28,v13,v11
	_mm_store_si128((__m128i*)v28.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// stvx v10,r0,r27
	_mm_store_si128((__m128i*)(base + ((r27.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vor v11,v4,v4
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_load_si128((__m128i*)ctx.v4.u8));
	// lvrx v8,r11,r9
	temp.u32 = r11.u32 + ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v8.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// addi r9,r1,-96
	ctx.r9.s64 = ctx.r1.s64 + -96;
	// lvlx v9,0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// vmrghb v10,v13,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vor v7,v9,v8
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v8.u8)));
	// lvlx v6,r11,r7
	temp.u32 = r11.u32 + ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v5,r11,r3
	temp.u32 = r11.u32 + ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v5.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// vor v5,v6,v5
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// vor v9,v28,v28
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_load_si128((__m128i*)v28.u8));
	// stvx v7,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-272
	ctx.r9.s64 = ctx.r1.s64 + -272;
	// stw r11,-288(r1)
	PPC_STORE_U32(ctx.r1.u32 + -288, r11.u32);
	// stvx v5,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvlx v8,0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v6,r11,r30
	temp.u32 = r11.u32 + r30.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// lvlx v3,r11,r29
	temp.u32 = r11.u32 + r29.u32;
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// vor v4,v8,v6
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvrx v1,r11,r28
	temp.u32 = r11.u32 + r28.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// vmrghb v8,v13,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vor v3,v3,v1
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// vmrglb v6,v13,v7
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrghb v7,v13,v5
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrghb v5,v13,v4
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrglb v4,v13,v4
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrghb v3,v13,v3
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// ble cr6,0x82710f30
	if (!cr6.gt) goto loc_82710F30;
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r9,r31,32
	ctx.r9.s64 = r31.s64 + 32;
loc_82710DCC:
	// vor v27,v11,v11
	_mm_store_si128((__m128i*)v27.u8, _mm_load_si128((__m128i*)ctx.v11.u8));
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// vor v11,v8,v8
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_load_si128((__m128i*)ctx.v8.u8));
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// vor v22,v9,v9
	_mm_store_si128((__m128i*)v22.u8, _mm_load_si128((__m128i*)ctx.v9.u8));
	// addi r30,r11,32
	r30.s64 = r11.s64 + 32;
	// vor v9,v6,v6
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_load_si128((__m128i*)ctx.v6.u8));
	// vor v6,v4,v4
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)ctx.v4.u8));
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// vslh v8,v11,v0
	// lvx128 v28,r0,r11
	_mm_store_si128((__m128i*)v28.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v23,v11,v12
	// lvsl v1,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vslh v24,v11,v29
	// cmpw cr6,r7,r8
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r8.s32, xer);
	// lvx128 v26,r0,r30
	_mm_store_si128((__m128i*)v26.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v27,v27,v0
	// vadduhm v25,v8,v11
	_mm_store_si128((__m128i*)v25.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v8.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// addi r30,r9,-16
	r30.s64 = ctx.r9.s64 + -16;
	// vor v8,v5,v5
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_load_si128((__m128i*)ctx.v5.u8));
	// vadduhm v24,v23,v24
	_mm_store_si128((__m128i*)v24.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v23.u16), _mm_load_si128((__m128i*)v24.u16)));
	// vor v23,v10,v10
	_mm_store_si128((__m128i*)v23.u8, _mm_load_si128((__m128i*)ctx.v10.u8));
	// vor v10,v7,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_load_si128((__m128i*)ctx.v7.u8));
	// vor v7,v3,v3
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)ctx.v3.u8));
	// vslh v5,v8,v12
	// vslh v3,v8,v30
	// vadduhm v25,v25,v24
	_mm_store_si128((__m128i*)v25.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v25.u16), _mm_load_si128((__m128i*)v24.u16)));
	// vsubshs v27,v13,v27
	// vslh v24,v9,v12
	// vadduhm v21,v3,v5
	_mm_store_si128((__m128i*)v21.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// lvx128 v5,r0,r3
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v4,v28,v5,v1
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v28.u8), _mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// lvsl v3,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vperm v5,v5,v26,v3
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)v26.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// vslh v26,v9,v29
	// vslh v28,v9,v0
	// addi r3,r9,-32
	ctx.r3.s64 = ctx.r9.s64 + -32;
	// vadduhm v25,v25,v21
	_mm_store_si128((__m128i*)v25.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v25.u16), _mm_load_si128((__m128i*)v21.u16)));
	// vmrghb v3,v13,v4
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vslh v22,v22,v0
	// vmrghb v1,v13,v5
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vadduhm v26,v24,v26
	_mm_store_si128((__m128i*)v26.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v24.u16), _mm_load_si128((__m128i*)v26.u16)));
	// vmrglb v4,v13,v4
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vadduhm v28,v28,v9
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// vslh v24,v6,v30
	// vor v5,v3,v3
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_load_si128((__m128i*)ctx.v3.u8));
	// vor v3,v1,v1
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_load_si128((__m128i*)ctx.v1.u8));
	// vslh v21,v4,v0
	// vadduhm v28,v28,v26
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)v26.u16)));
	// vslh v1,v5,v0
	// vsubshs v1,v5,v1
	// vadduhm v1,v1,v27
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vslh v27,v6,v12
	// vor v26,v1,v1
	_mm_store_si128((__m128i*)v26.u8, _mm_load_si128((__m128i*)ctx.v1.u8));
	// vadduhm v27,v24,v27
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v24.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vsubshs v24,v4,v21
	// vsubshs v21,v13,v22
	// vslh v22,v10,v0
	// vadduhm v1,v28,v27
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vadduhm v27,v25,v2
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v25.u16), _mm_load_si128((__m128i*)ctx.v2.u16)));
	// vadduhm v28,v24,v21
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v24.u16), _mm_load_si128((__m128i*)v21.u16)));
	// vslh v25,v7,v30
	// vadduhm v1,v1,v2
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)ctx.v2.u16)));
	// vadduhm v27,v27,v26
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v27.u16), _mm_load_si128((__m128i*)v26.u16)));
	// vslh v26,v10,v12
	// vslh v24,v23,v0
	// vadduhm v1,v1,v28
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)v28.u16)));
	// vslh v28,v10,v29
	// vsrah v27,v27,v31
	// vsubshs v24,v13,v24
	// vsrah v1,v1,v31
	// vadduhm v28,v26,v28
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v26.u16), _mm_load_si128((__m128i*)v28.u16)));
	// vslh v26,v7,v12
	// stvx v27,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v27.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v22,v22,v10
	_mm_store_si128((__m128i*)v22.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v22.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// stvx v1,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v26,v25,v26
	_mm_store_si128((__m128i*)v26.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v25.u16), _mm_load_si128((__m128i*)v26.u16)));
	// vslh v25,v3,v0
	// vsubshs v25,v3,v25
	// vadduhm v25,v25,v24
	_mm_store_si128((__m128i*)v25.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v25.u16), _mm_load_si128((__m128i*)v24.u16)));
	// vadduhm v1,v22,v28
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v22.u16), _mm_load_si128((__m128i*)v28.u16)));
	// vadduhm v28,v1,v26
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)v26.u16)));
	// vadduhm v28,v28,v2
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)ctx.v2.u16)));
	// vadduhm v1,v28,v25
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)v25.u16)));
	// vsrah v1,v1,v31
	// stvx v1,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r9,48
	ctx.r9.s64 = ctx.r9.s64 + 48;
	// blt cr6,0x82710dcc
	if (cr6.lt) goto loc_82710DCC;
loc_82710F30:
	// vspltish v11,8
	// vor v4,v30,v30
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_load_si128((__m128i*)v30.u8));
	// vspltish v10,-1
	// mr r11,r5
	r11.u64 = ctx.r5.u64;
	// vspltish v8,0
	// vor v5,v13,v13
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_load_si128((__m128i*)ctx.v13.u8));
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
	// vor v3,v31,v31
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_load_si128((__m128i*)v31.u8));
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// vslh v30,v10,v11
	// bne cr6,0x82710ff4
	if (!cr6.eq) goto loc_82710FF4;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x827110e4
	if (!cr6.gt) goto loc_827110E4;
	// mr r10,r8
	ctx.r10.u64 = ctx.r8.u64;
loc_82710F68:
	// addi r8,r9,16
	ctx.r8.s64 = ctx.r9.s64 + 16;
	// lvx128 v13,r0,r9
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// addi r9,r9,48
	ctx.r9.s64 = ctx.r9.s64 + 48;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// lvx128 v10,r0,r8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r8,4
	ctx.r8.s64 = 4;
	// vsldoi v11,v13,v10,2
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v10.u8), 14));
	// vsldoi v9,v13,v10,4
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v10.u8), 12));
	// vsldoi v10,v13,v10,6
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v10.u8), 10));
	// vslh v7,v11,v0
	// vslh v6,v11,v3
	// vslh v2,v11,v12
	// vadduhm v11,v7,v11
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// vadduhm v7,v2,v6
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vslh v6,v9,v12
	// vslh v9,v9,v4
	// vslh v2,v13,v0
	// vadduhm v9,v9,v6
	_mm_store_si128((__m128i*)ctx.v9.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vslh v6,v10,v0
	// vsubshs v13,v10,v6
	// vsubshs v10,v5,v2
	// vadduhm v10,v13,v10
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vadduhm v13,v11,v7
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vadduhm v11,v13,v9
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// vadduhm v11,v11,v19
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)v19.u16)));
	// vadduhm v13,v11,v10
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vsrah v13,v13,v20
	// vor v8,v8,v13
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vpkshus v13,v13,v13
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v13.s16), _mm_load_si128((__m128i*)ctx.v13.s16)));
	// stvewx v13,r0,r11
	ea = (r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v13.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v13,r11,r8
	ea = (r11.u32 + ctx.r8.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v13.u32[3 - ((ea & 0xF) >> 2)]);
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// bne cr6,0x82710f68
	if (!cr6.eq) goto loc_82710F68;
	// b 0x827110e4
	goto loc_827110E4;
loc_82710FF4:
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x827110e4
	if (!cr6.gt) goto loc_827110E4;
	// addi r10,r31,32
	ctx.r10.s64 = r31.s64 + 32;
	// mr r9,r8
	ctx.r9.u64 = ctx.r8.u64;
loc_82711004:
	// addi r8,r10,-32
	ctx.r8.s64 = ctx.r10.s64 + -32;
	// lvx128 v9,r0,r10
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r10,-16
	ctx.r7.s64 = ctx.r10.s64 + -16;
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// lvx128 v11,r0,r8
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v13,r0,r7
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsldoi v10,v11,v13,2
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8), 14));
	// vsldoi v7,v11,v13,4
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8), 12));
	// vsldoi v6,v11,v13,6
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8), 10));
	// vslh v11,v11,v0
	// vslh v2,v10,v0
	// vslh v31,v10,v12
	// vslh v1,v10,v3
	// vsubshs v11,v5,v11
	// vadduhm v2,v2,v10
	_mm_store_si128((__m128i*)ctx.v2.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vslh v10,v7,v12
	// vslh v7,v7,v4
	// vadduhm v1,v31,v1
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v31.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vadduhm v7,v7,v10
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vslh v10,v6,v0
	// vadduhm v2,v2,v1
	_mm_store_si128((__m128i*)ctx.v2.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vsubshs v10,v6,v10
	// vadduhm v7,v2,v7
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vadduhm v6,v10,v11
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// vsldoi v11,v13,v9,2
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v9.u8), 14));
	// vadduhm v2,v7,v19
	_mm_store_si128((__m128i*)ctx.v2.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)v19.u16)));
	// vsldoi v10,v13,v9,4
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v9.u8), 12));
	// vsldoi v9,v13,v9,6
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v9.u8), 10));
	// vslh v7,v11,v0
	// vslh v1,v11,v3
	// vslh v31,v11,v12
	// vadduhm v11,v7,v11
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// vadduhm v7,v31,v1
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v31.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vslh v1,v10,v12
	// vslh v10,v10,v4
	// vslh v31,v13,v0
	// vadduhm v11,v11,v7
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vadduhm v10,v10,v1
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vslh v1,v9,v0
	// vadduhm v10,v11,v10
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vsubshs v13,v9,v1
	// vsubshs v9,v5,v31
	// vadduhm v10,v10,v19
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)v19.u16)));
	// vadduhm v1,v13,v9
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// vadduhm v13,v2,v6
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vadduhm v11,v10,v1
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vsrah v13,v13,v20
	// vsrah v11,v11,v20
	// vor v9,v8,v13
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vpkshus v13,v13,v11
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v13.s16)));
	// vor v8,v9,v11
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v11.u8)));
	// stvx v13,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// bne cr6,0x82711004
	if (!cr6.eq) goto loc_82711004;
loc_827110E4:
	// vand v0,v8,v30
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_and_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)v30.u8)));
	// vcmpgtuh. v0,v0,v5
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_cmpgt_epu16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// mfocrf r11,2
	r11.u64 = (cr6.lt << 7) | (cr6.gt << 6) | (cr6.eq << 5) | (cr6.so << 4);
	// not r11,r11
	r11.u64 = ~r11.u64;
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// b 0x8239bd44
	return;
}

__attribute__((alias("__imp__sub_827110FC"))) PPC_WEAK_FUNC(sub_827110FC);
PPC_FUNC_IMPL(__imp__sub_827110FC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_82711100"))) PPC_WEAK_FUNC(sub_82711100);
PPC_FUNC_IMPL(__imp__sub_82711100) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCVRegister v23{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcf4
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,1084(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1084);
	// mr r31,r10
	r31.u64 = ctx.r10.u64;
	// lwz r10,1092(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1092);
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// lwz r30,1100(r7)
	r30.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1100);
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// lwz r28,292(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 292);
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// vspltish v1,3
	// stw r11,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r11.u32);
	// subf r11,r4,r3
	r11.s64 = ctx.r3.s64 - ctx.r4.s64;
	// stw r10,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r10.u32);
	// addi r10,r1,128
	ctx.r10.s64 = ctx.r1.s64 + 128;
	// addi r3,r11,-1
	ctx.r3.s64 = r11.s64 + -1;
	// vspltish v24,7
	// rlwinm r11,r31,1,0,30
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// addi r6,r11,3
	ctx.r6.s64 = r11.s64 + 3;
	// lvx128 v0,r0,r10
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsplth v23,v0,1
	_mm_store_si128((__m128i*)v23.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_set1_epi16(short(0xD0C))));
	// addi r11,r1,144
	r11.s64 = ctx.r1.s64 + 144;
	// lvx128 v0,r0,r11
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsplth v2,v0,1
	_mm_store_si128((__m128i*)ctx.v2.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_set1_epi16(short(0xD0C))));
	// bl 0x82700aa0
	sub_82700AA0(ctx, base);
	// cntlzw r11,r28
	r11.u64 = r28.u32 == 0 ? 32 : __builtin_clz(r28.u32);
	// vspltish v12,-1
	// li r8,1
	ctx.r8.s64 = 1;
	// vspltish v13,8
	// rlwinm r10,r11,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// vspltisb v5,0
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_set1_epi8(char(0x0)));
	// mr r11,r29
	r11.u64 = r29.u64;
	// vspltish v4,1
	// and r9,r10,r31
	ctx.r9.u64 = ctx.r10.u64 & r31.u64;
	// vspltish v0,2
	// vslh v31,v12,v13
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// addi r9,r9,3
	ctx.r9.s64 = ctx.r9.s64 + 3;
	// vspltish v12,4
	// vspltish v3,5
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// vspltish v8,0
	// slw r9,r8,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x20 ? 0 : (ctx.r8.u32 << (ctx.r9.u8 & 0x3F));
	// bne cr6,0x82711250
	if (!cr6.eq) goto loc_82711250;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x8271133c
	if (!cr6.gt) goto loc_8271133C;
loc_827111C4:
	// addi r8,r10,16
	ctx.r8.s64 = ctx.r10.s64 + 16;
	// lvx128 v13,r0,r10
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// lvx128 v10,r0,r8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r8,4
	ctx.r8.s64 = 4;
	// vsldoi v11,v13,v10,2
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v10.u8), 14));
	// vsldoi v9,v13,v10,4
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v10.u8), 12));
	// vsldoi v10,v13,v10,6
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v10.u8), 10));
	// vslh v7,v11,v0
	// vslh v6,v11,v3
	// vslh v2,v11,v12
	// vadduhm v11,v7,v11
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// vadduhm v7,v2,v6
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vslh v6,v9,v12
	// vslh v9,v9,v4
	// vslh v2,v13,v0
	// vadduhm v9,v9,v6
	_mm_store_si128((__m128i*)ctx.v9.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vslh v6,v10,v0
	// vsubshs v13,v10,v6
	// vsubshs v10,v5,v2
	// vadduhm v10,v13,v10
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vadduhm v13,v11,v7
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vadduhm v11,v13,v9
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// vadduhm v11,v11,v23
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)v23.u16)));
	// vadduhm v13,v11,v10
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vsrah v13,v13,v24
	// vor v8,v8,v13
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vpkshus v13,v13,v13
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v13.s16), _mm_load_si128((__m128i*)ctx.v13.s16)));
	// stvewx v13,r0,r11
	ea = (r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v13.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v13,r11,r8
	ea = (r11.u32 + ctx.r8.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v13.u32[3 - ((ea & 0xF) >> 2)]);
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// bne cr6,0x827111c4
	if (!cr6.eq) goto loc_827111C4;
	// b 0x8271133c
	goto loc_8271133C;
loc_82711250:
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x8271133c
	if (!cr6.gt) goto loc_8271133C;
	// addi r10,r30,32
	ctx.r10.s64 = r30.s64 + 32;
loc_8271125C:
	// addi r8,r10,-32
	ctx.r8.s64 = ctx.r10.s64 + -32;
	// lvx128 v9,r0,r10
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r10,-16
	ctx.r7.s64 = ctx.r10.s64 + -16;
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// lvx128 v11,r0,r8
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v13,r0,r7
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsldoi v10,v11,v13,2
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8), 14));
	// vsldoi v7,v11,v13,4
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8), 12));
	// vsldoi v6,v11,v13,6
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8), 10));
	// vslh v11,v11,v0
	// vslh v2,v10,v0
	// vslh v30,v10,v12
	// vslh v1,v10,v3
	// vsubshs v11,v5,v11
	// vadduhm v2,v2,v10
	_mm_store_si128((__m128i*)ctx.v2.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vslh v10,v7,v12
	// vslh v7,v7,v4
	// vadduhm v1,v30,v1
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v30.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vadduhm v7,v7,v10
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vslh v10,v6,v0
	// vadduhm v2,v2,v1
	_mm_store_si128((__m128i*)ctx.v2.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vsubshs v10,v6,v10
	// vadduhm v7,v2,v7
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vadduhm v6,v10,v11
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// vsldoi v11,v13,v9,2
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v9.u8), 14));
	// vadduhm v2,v7,v23
	_mm_store_si128((__m128i*)ctx.v2.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)v23.u16)));
	// vsldoi v10,v13,v9,4
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v9.u8), 12));
	// vsldoi v9,v13,v9,6
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v9.u8), 10));
	// vslh v7,v11,v0
	// vslh v1,v11,v3
	// vslh v30,v11,v12
	// vadduhm v11,v7,v11
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// vadduhm v7,v30,v1
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v30.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vslh v1,v10,v12
	// vslh v10,v10,v4
	// vslh v30,v13,v0
	// vadduhm v11,v11,v7
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vadduhm v10,v10,v1
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vslh v1,v9,v0
	// vadduhm v10,v11,v10
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vsubshs v13,v9,v1
	// vsubshs v9,v5,v30
	// vadduhm v10,v10,v23
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)v23.u16)));
	// vadduhm v1,v13,v9
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// vadduhm v13,v2,v6
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vadduhm v11,v10,v1
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vsrah v13,v13,v24
	// vsrah v11,v11,v24
	// vor v9,v8,v13
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vpkshus v13,v13,v11
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v13.s16)));
	// vor v8,v9,v11
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v11.u8)));
	// stvx v13,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// bne cr6,0x8271125c
	if (!cr6.eq) goto loc_8271125C;
loc_8271133C:
	// vand v0,v8,v31
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_and_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)v31.u8)));
	// vcmpgtuh. v0,v0,v5
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_cmpgt_epu16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// mfocrf r11,2
	r11.u64 = (cr6.lt << 7) | (cr6.gt << 6) | (cr6.eq << 5) | (cr6.so << 4);
	// not r11,r11
	r11.u64 = ~r11.u64;
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x8239bd44
	return;
}

__attribute__((alias("__imp__sub_82711358"))) PPC_WEAK_FUNC(sub_82711358);
PPC_FUNC_IMPL(__imp__sub_82711358) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCVRegister v19{};
	PPCVRegister v20{};
	PPCVRegister v21{};
	PPCVRegister v22{};
	PPCVRegister v23{};
	PPCVRegister v24{};
	PPCVRegister v25{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcf4
	// lwz r9,1076(r7)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1076);
	// vspltish v4,5
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// vspltisb v13,0
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_set1_epi8(char(0x0)));
	// vspltish v3,1
	// li r8,1
	ctx.r8.s64 = 1;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// vspltish v0,2
	// stw r5,36(r1)
	PPC_STORE_U32(ctx.r1.u32 + 36, ctx.r5.u32);
	// vspltish v12,4
	// stw r9,-224(r1)
	PPC_STORE_U32(ctx.r1.u32 + -224, ctx.r9.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// lwz r9,1092(r7)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1092);
	// vspltish v20,7
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// stw r6,44(r1)
	PPC_STORE_U32(ctx.r1.u32 + 44, ctx.r6.u32);
	// lwz r31,1100(r7)
	r31.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1100);
	// addi r7,r1,-224
	ctx.r7.s64 = ctx.r1.s64 + -224;
	// addi r30,r11,3
	r30.s64 = r11.s64 + 3;
	// stw r10,76(r1)
	PPC_STORE_U32(ctx.r1.u32 + 76, ctx.r10.u32);
	// vor v2,v4,v4
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_load_si128((__m128i*)ctx.v4.u8));
	// stw r4,28(r1)
	PPC_STORE_U32(ctx.r1.u32 + 28, ctx.r4.u32);
	// stw r9,-272(r1)
	PPC_STORE_U32(ctx.r1.u32 + -272, ctx.r9.u32);
	// addi r9,r1,-224
	ctx.r9.s64 = ctx.r1.s64 + -224;
	// addi r11,r1,-272
	r11.s64 = ctx.r1.s64 + -272;
	// stw r31,-208(r1)
	PPC_STORE_U32(ctx.r1.u32 + -208, r31.u32);
	// lvx128 v11,r0,r9
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// vsplth v5,v11,1
	_mm_store_si128((__m128i*)ctx.v5.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_set1_epi16(short(0xD0C))));
	// lvx128 v10,r0,r11
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r9,3
	ctx.r9.s64 = ctx.r9.s64 + 3;
	// vsplth v19,v10,1
	_mm_store_si128((__m128i*)v19.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_set1_epi16(short(0xD0C))));
	// addi r11,r1,-64
	r11.s64 = ctx.r1.s64 + -64;
	// cmpwi cr6,r9,3
	cr6.compare<int32_t>(ctx.r9.s32, 3, xer);
	// addi r9,r1,-176
	ctx.r9.s64 = ctx.r1.s64 + -176;
	// stvx v5,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r1,-272
	ctx.r7.s64 = ctx.r1.s64 + -272;
	// stvx v20,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v20.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// subf r11,r4,r3
	r11.s64 = ctx.r3.s64 - ctx.r4.s64;
	// stvx v4,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-192
	ctx.r9.s64 = ctx.r1.s64 + -192;
	// slw r8,r8,r30
	ctx.r8.u64 = r30.u8 & 0x20 ? 0 : (ctx.r8.u32 << (r30.u8 & 0x3F));
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stvx v19,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v19.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v13,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-112
	ctx.r9.s64 = ctx.r1.s64 + -112;
	// stw r8,-204(r1)
	PPC_STORE_U32(ctx.r1.u32 + -204, ctx.r8.u32);
	// stvx v3,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-144
	ctx.r9.s64 = ctx.r1.s64 + -144;
	// stvx v0,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-80
	ctx.r9.s64 = ctx.r1.s64 + -80;
	// stvx v12,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-240
	ctx.r9.s64 = ctx.r1.s64 + -240;
	// stvx v2,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bne cr6,0x827115c4
	if (!cr6.eq) goto loc_827115C4;
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r7,r11,r4
	ctx.r7.u64 = r11.u64 + ctx.r4.u64;
	// lvsl v7,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r30,r1,-240
	r30.s64 = ctx.r1.s64 + -240;
	// add r11,r7,r4
	r11.u64 = ctx.r7.u64 + ctx.r4.u64;
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
	// lvx128 v10,r0,r3
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r7,16
	ctx.r3.s64 = ctx.r7.s64 + 16;
	// lvx128 v6,r0,r7
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// stvx v11,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v11,v11,v10,v7
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvsl v1,r0,r7
	temp.u32 = ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r7,r11,16
	ctx.r7.s64 = r11.s64 + 16;
	// lvsl v24,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)v24.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// lvx128 v31,r0,r3
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r1,-240
	ctx.r3.s64 = ctx.r1.s64 + -240;
	// vmrghb v9,v13,v11
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrglb v8,v13,v11
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// stvx v10,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r1,-240
	ctx.r3.s64 = ctx.r1.s64 + -240;
	// vperm v10,v6,v31,v1
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// stvx v7,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v11,v13,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// lvx128 v29,r0,r7
	_mm_store_si128((__m128i*)v29.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r1,-272
	ctx.r7.s64 = ctx.r1.s64 + -272;
	// lvx128 v30,r0,r11
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrglb v10,v13,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// stvx v24,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v24.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r1,-272
	ctx.r7.s64 = ctx.r1.s64 + -272;
	// lvx128 v7,r0,r7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v6,v30,v29,v7
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)v29.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// vmrghb v7,v13,v6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrglb v6,v13,v6
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// ble cr6,0x82711800
	if (!cr6.gt) goto loc_82711800;
	// li r7,0
	ctx.r7.s64 = 0;
loc_827114D0:
	// vor v1,v9,v9
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)ctx.v9.u8));
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// vor v9,v11,v11
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_load_si128((__m128i*)ctx.v11.u8));
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// vor v11,v7,v7
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_load_si128((__m128i*)ctx.v7.u8));
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// vslh v28,v1,v0
	// vslh v29,v9,v3
	// cmpw cr6,r7,r8
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r8.s32, xer);
	// vslh v30,v11,v12
	// vslh v31,v11,v2
	// lvx128 v27,r0,r3
	_mm_store_si128((__m128i*)v27.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v7,v11,v0
	// addi r3,r9,16
	ctx.r3.s64 = ctx.r9.s64 + 16;
	// vadduhm v31,v30,v31
	_mm_store_si128((__m128i*)v31.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v30.u16), _mm_load_si128((__m128i*)v31.u16)));
	// vslh v30,v9,v12
	// vadduhm v7,v7,v11
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// vadduhm v30,v29,v30
	_mm_store_si128((__m128i*)v30.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v29.u16), _mm_load_si128((__m128i*)v30.u16)));
	// vsubshs v29,v1,v28
	// lvx128 v28,r0,r11
	_mm_store_si128((__m128i*)v28.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v7,v7,v31
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)v31.u16)));
	// vor v1,v8,v8
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)ctx.v8.u8));
	// vor v8,v10,v10
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_load_si128((__m128i*)ctx.v10.u8));
	// vor v10,v6,v6
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_load_si128((__m128i*)ctx.v6.u8));
	// lvsl v6,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vadduhm v31,v7,v30
	_mm_store_si128((__m128i*)v31.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)v30.u16)));
	// vperm v7,v28,v27,v6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v28.u8), _mm_load_si128((__m128i*)v27.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// vslh v27,v8,v3
	// vmrghb v6,v13,v7
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vadduhm v28,v31,v5
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v31.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vmrglb v30,v13,v7
	_mm_store_si128((__m128i*)v30.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vor v7,v6,v6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)ctx.v6.u8));
	// vor v6,v30,v30
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)v30.u8));
	// vslh v30,v7,v0
	// vslh v26,v6,v0
	// vsubshs v30,v13,v30
	// vadduhm v31,v29,v30
	_mm_store_si128((__m128i*)v31.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v29.u16), _mm_load_si128((__m128i*)v30.u16)));
	// vslh v29,v10,v12
	// vslh v30,v10,v2
	// vadduhm v28,v28,v31
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)v31.u16)));
	// vslh v31,v10,v0
	// vadduhm v30,v29,v30
	_mm_store_si128((__m128i*)v30.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v29.u16), _mm_load_si128((__m128i*)v30.u16)));
	// vslh v29,v8,v12
	// vadduhm v31,v31,v10
	_mm_store_si128((__m128i*)v31.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v31.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vadduhm v29,v27,v29
	_mm_store_si128((__m128i*)v29.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v27.u16), _mm_load_si128((__m128i*)v29.u16)));
	// vslh v27,v1,v0
	// vsubshs v1,v1,v27
	// vsubshs v27,v13,v26
	// vadduhm v27,v1,v27
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vsrah v1,v28,v4
	// stvx v1,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v1,v31,v30
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v31.u16), _mm_load_si128((__m128i*)v30.u16)));
	// addi r9,r9,48
	ctx.r9.s64 = ctx.r9.s64 + 48;
	// vadduhm v31,v1,v29
	_mm_store_si128((__m128i*)v31.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)v29.u16)));
	// vadduhm v31,v31,v5
	_mm_store_si128((__m128i*)v31.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v31.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vadduhm v1,v31,v27
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v31.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vsrah v1,v1,v4
	// stvx v1,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// blt cr6,0x827114d0
	if (cr6.lt) goto loc_827114D0;
	// b 0x82711800
	goto loc_82711800;
loc_827115C4:
	// li r9,16
	ctx.r9.s64 = 16;
	// stw r11,-288(r1)
	PPC_STORE_U32(ctx.r1.u32 + -288, r11.u32);
	// lvlx v11,0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// li r7,16
	ctx.r7.s64 = 16;
	// li r3,32
	ctx.r3.s64 = 32;
	// addi r27,r1,-160
	r27.s64 = ctx.r1.s64 + -160;
	// li r30,16
	r30.s64 = 16;
	// lvrx v10,r11,r9
	temp.u32 = r11.u32 + ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v10.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// li r29,16
	r29.s64 = 16;
	// vor v11,v11,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v10.u8)));
	// lvlx v9,r11,r7
	temp.u32 = r11.u32 + ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v8,r11,r3
	temp.u32 = r11.u32 + ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v8.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// vor v9,v9,v8
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v8.u8)));
	// li r28,32
	r28.s64 = 32;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// stvx v11,r0,r27
	_mm_store_si128((__m128i*)(base + ((r27.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r1,-128
	r27.s64 = ctx.r1.s64 + -128;
	// vmrghb v31,v13,v11
	_mm_store_si128((__m128i*)v31.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// stw r11,-288(r1)
	PPC_STORE_U32(ctx.r1.u32 + -288, r11.u32);
	// vmrglb v28,v13,v11
	_mm_store_si128((__m128i*)v28.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// stvx v9,r0,r27
	_mm_store_si128((__m128i*)(base + ((r27.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvrx v8,r11,r9
	temp.u32 = r11.u32 + ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v8.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// addi r9,r1,-96
	ctx.r9.s64 = ctx.r1.s64 + -96;
	// lvlx v10,0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// vor v10,v10,v8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v8.u8)));
	// lvlx v7,r11,r7
	temp.u32 = r11.u32 + ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v6,r11,r3
	temp.u32 = r11.u32 + ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// vor v1,v7,v6
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// vor v8,v31,v31
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_load_si128((__m128i*)v31.u8));
	// stvx v10,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-256
	ctx.r9.s64 = ctx.r1.s64 + -256;
	// vor v6,v28,v28
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)v28.u8));
	// stw r11,-288(r1)
	PPC_STORE_U32(ctx.r1.u32 + -288, r11.u32);
	// stvx v1,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvlx v11,0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v7,r11,r30
	temp.u32 = r11.u32 + r30.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// lvlx v30,r11,r29
	temp.u32 = r11.u32 + r29.u32;
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// vor v31,v11,v7
	_mm_store_si128((__m128i*)v31.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvrx v29,r11,r28
	temp.u32 = r11.u32 + r28.u32;
	_mm_store_si128((__m128i*)v29.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// vmrghb v7,v13,v9
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vor v29,v30,v29
	_mm_store_si128((__m128i*)v29.u8, _mm_or_si128(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)v29.u8)));
	// vmrghb v11,v13,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrglb v9,v13,v10
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrghb v10,v13,v1
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrghb v1,v13,v31
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrglb v30,v13,v31
	_mm_store_si128((__m128i*)v30.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrghb v31,v13,v29
	_mm_store_si128((__m128i*)v31.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)v29.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// ble cr6,0x82711800
	if (!cr6.gt) goto loc_82711800;
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r9,r31,32
	ctx.r9.s64 = r31.s64 + 32;
loc_82711694:
	// vor v29,v8,v8
	_mm_store_si128((__m128i*)v29.u8, _mm_load_si128((__m128i*)ctx.v8.u8));
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// vor v8,v11,v11
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_load_si128((__m128i*)ctx.v11.u8));
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// vor v11,v1,v1
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_load_si128((__m128i*)ctx.v1.u8));
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// addi r30,r11,32
	r30.s64 = r11.s64 + 32;
	// vslh v21,v29,v0
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// vslh v22,v8,v3
	// lvx128 v26,r0,r11
	_mm_store_si128((__m128i*)v26.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v28,v11,v0
	// lvsl v1,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vslh v27,v11,v2
	// vslh v23,v11,v12
	// lvx128 v25,r0,r30
	_mm_store_si128((__m128i*)v25.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsubshs v29,v29,v21
	// addi r30,r9,-16
	r30.s64 = ctx.r9.s64 + -16;
	// vadduhm v24,v28,v11
	_mm_store_si128((__m128i*)v24.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// vor v28,v7,v7
	_mm_store_si128((__m128i*)v28.u8, _mm_load_si128((__m128i*)ctx.v7.u8));
	// vor v7,v10,v10
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)ctx.v10.u8));
	// vor v10,v31,v31
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_load_si128((__m128i*)v31.u8));
	// vslh v31,v8,v12
	// vadduhm v23,v23,v27
	_mm_store_si128((__m128i*)v23.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v23.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vor v27,v6,v6
	_mm_store_si128((__m128i*)v27.u8, _mm_load_si128((__m128i*)ctx.v6.u8));
	// vor v6,v9,v9
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)ctx.v9.u8));
	// vor v9,v30,v30
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_load_si128((__m128i*)v30.u8));
	// lvsl v30,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)v30.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vadduhm v22,v22,v31
	_mm_store_si128((__m128i*)v22.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v22.u16), _mm_load_si128((__m128i*)v31.u16)));
	// lvx128 v31,r0,r3
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r1,-272
	ctx.r3.s64 = ctx.r1.s64 + -272;
	// vadduhm v24,v24,v23
	_mm_store_si128((__m128i*)v24.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v24.u16), _mm_load_si128((__m128i*)v23.u16)));
	// vslh v23,v9,v12
	// vadduhm v24,v24,v22
	_mm_store_si128((__m128i*)v24.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v24.u16), _mm_load_si128((__m128i*)v22.u16)));
	// stvx v30,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r1,-272
	ctx.r3.s64 = ctx.r1.s64 + -272;
	// vperm v30,v26,v31,v1
	_mm_store_si128((__m128i*)v30.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v26.u8), _mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// vslh v22,v6,v3
	// vslh v26,v9,v0
	// lvx128 v1,r0,r3
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r9,-32
	ctx.r3.s64 = ctx.r9.s64 + -32;
	// vperm v1,v31,v25,v1
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)v25.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// vslh v25,v9,v2
	// vadduhm v26,v26,v9
	_mm_store_si128((__m128i*)v26.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v26.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// vmrghb v31,v13,v1
	_mm_store_si128((__m128i*)v31.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vadduhm v25,v23,v25
	_mm_store_si128((__m128i*)v25.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v23.u16), _mm_load_si128((__m128i*)v25.u16)));
	// vmrghb v1,v13,v30
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrglb v30,v13,v30
	_mm_store_si128((__m128i*)v30.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vadduhm v26,v26,v25
	_mm_store_si128((__m128i*)v26.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v26.u16), _mm_load_si128((__m128i*)v25.u16)));
	// vslh v21,v1,v0
	// vsubshs v23,v13,v21
	// vslh v21,v27,v0
	// vadduhm v29,v29,v23
	_mm_store_si128((__m128i*)v29.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v29.u16), _mm_load_si128((__m128i*)v23.u16)));
	// vslh v23,v6,v12
	// vsubshs v27,v27,v21
	// vslh v21,v10,v0
	// vor v25,v29,v29
	_mm_store_si128((__m128i*)v25.u8, _mm_load_si128((__m128i*)v29.u8));
	// vadduhm v23,v22,v23
	_mm_store_si128((__m128i*)v23.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v22.u16), _mm_load_si128((__m128i*)v23.u16)));
	// vslh v22,v30,v0
	// vadduhm v21,v21,v10
	_mm_store_si128((__m128i*)v21.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v21.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vsubshs v22,v13,v22
	// vadduhm v29,v27,v22
	_mm_store_si128((__m128i*)v29.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v27.u16), _mm_load_si128((__m128i*)v22.u16)));
	// vadduhm v27,v26,v23
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v26.u16), _mm_load_si128((__m128i*)v23.u16)));
	// vadduhm v26,v24,v5
	_mm_store_si128((__m128i*)v26.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v24.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vslh v24,v7,v3
	// vslh v23,v31,v0
	// vadduhm v27,v27,v5
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v27.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vadduhm v26,v26,v25
	_mm_store_si128((__m128i*)v26.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v26.u16), _mm_load_si128((__m128i*)v25.u16)));
	// vslh v25,v10,v12
	// vadduhm v29,v27,v29
	_mm_store_si128((__m128i*)v29.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v27.u16), _mm_load_si128((__m128i*)v29.u16)));
	// vslh v27,v10,v2
	// vsrah v29,v29,v4
	// vadduhm v27,v25,v27
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v25.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vslh v25,v7,v12
	// vadduhm v25,v24,v25
	_mm_store_si128((__m128i*)v25.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v24.u16), _mm_load_si128((__m128i*)v25.u16)));
	// vslh v24,v28,v0
	// vsubshs v28,v28,v24
	// vsubshs v24,v13,v23
	// vadduhm v24,v28,v24
	_mm_store_si128((__m128i*)v24.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)v24.u16)));
	// vsrah v28,v26,v4
	// stvx v28,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v28.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v29,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v29.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v29,v21,v27
	_mm_store_si128((__m128i*)v29.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v21.u16), _mm_load_si128((__m128i*)v27.u16)));
	// cmpw cr6,r7,r8
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r8.s32, xer);
	// vadduhm v28,v29,v25
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v29.u16), _mm_load_si128((__m128i*)v25.u16)));
	// vadduhm v28,v28,v5
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vadduhm v29,v28,v24
	_mm_store_si128((__m128i*)v29.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)v24.u16)));
	// vsrah v29,v29,v4
	// stvx v29,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v29.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r9,48
	ctx.r9.s64 = ctx.r9.s64 + 48;
	// blt cr6,0x82711694
	if (cr6.lt) goto loc_82711694;
loc_82711800:
	// vspltish v11,8
	// mr r11,r5
	r11.u64 = ctx.r5.u64;
	// vspltish v10,-1
	// vor v5,v13,v13
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_load_si128((__m128i*)ctx.v13.u8));
	// vspltish v8,0
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// vslh v31,v10,v11
	// bne cr6,0x827118bc
	if (!cr6.eq) goto loc_827118BC;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x827119ac
	if (!cr6.gt) goto loc_827119AC;
	// mr r10,r8
	ctx.r10.u64 = ctx.r8.u64;
loc_82711830:
	// addi r8,r9,16
	ctx.r8.s64 = ctx.r9.s64 + 16;
	// lvx128 v13,r0,r9
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// addi r9,r9,48
	ctx.r9.s64 = ctx.r9.s64 + 48;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// lvx128 v10,r0,r8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r8,4
	ctx.r8.s64 = 4;
	// vsldoi v11,v13,v10,2
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v10.u8), 14));
	// vsldoi v9,v13,v10,4
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v10.u8), 12));
	// vsldoi v10,v13,v10,6
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v10.u8), 10));
	// vslh v7,v11,v0
	// vslh v6,v11,v4
	// vslh v2,v11,v12
	// vadduhm v11,v7,v11
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// vadduhm v7,v2,v6
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vslh v6,v9,v12
	// vslh v9,v9,v3
	// vslh v2,v13,v0
	// vadduhm v9,v9,v6
	_mm_store_si128((__m128i*)ctx.v9.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vslh v6,v10,v0
	// vsubshs v13,v10,v6
	// vsubshs v10,v5,v2
	// vadduhm v10,v13,v10
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vadduhm v13,v11,v7
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vadduhm v11,v13,v9
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// vadduhm v11,v11,v19
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)v19.u16)));
	// vadduhm v13,v11,v10
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vsrah v13,v13,v20
	// vor v8,v8,v13
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vpkshus v13,v13,v13
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v13.s16), _mm_load_si128((__m128i*)ctx.v13.s16)));
	// stvewx v13,r0,r11
	ea = (r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v13.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v13,r11,r8
	ea = (r11.u32 + ctx.r8.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v13.u32[3 - ((ea & 0xF) >> 2)]);
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// bne cr6,0x82711830
	if (!cr6.eq) goto loc_82711830;
	// b 0x827119ac
	goto loc_827119AC;
loc_827118BC:
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x827119ac
	if (!cr6.gt) goto loc_827119AC;
	// addi r10,r31,32
	ctx.r10.s64 = r31.s64 + 32;
	// mr r9,r8
	ctx.r9.u64 = ctx.r8.u64;
loc_827118CC:
	// addi r8,r10,-32
	ctx.r8.s64 = ctx.r10.s64 + -32;
	// lvx128 v9,r0,r10
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r10,-16
	ctx.r7.s64 = ctx.r10.s64 + -16;
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// lvx128 v11,r0,r8
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v13,r0,r7
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsldoi v10,v11,v13,2
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8), 14));
	// vsldoi v7,v11,v13,4
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8), 12));
	// vsldoi v6,v11,v13,6
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8), 10));
	// vslh v11,v11,v0
	// vslh v2,v10,v0
	// vslh v30,v10,v12
	// vslh v1,v10,v4
	// vsubshs v11,v5,v11
	// vadduhm v2,v2,v10
	_mm_store_si128((__m128i*)ctx.v2.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vslh v10,v7,v12
	// vslh v7,v7,v3
	// vadduhm v1,v30,v1
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v30.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vadduhm v7,v7,v10
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vslh v10,v6,v0
	// vadduhm v2,v2,v1
	_mm_store_si128((__m128i*)ctx.v2.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vsubshs v10,v6,v10
	// vadduhm v7,v2,v7
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vadduhm v6,v10,v11
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// vsldoi v11,v13,v9,2
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v9.u8), 14));
	// vadduhm v2,v7,v19
	_mm_store_si128((__m128i*)ctx.v2.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)v19.u16)));
	// vsldoi v10,v13,v9,4
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v9.u8), 12));
	// vsldoi v9,v13,v9,6
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v9.u8), 10));
	// vslh v7,v11,v0
	// vslh v1,v11,v4
	// vslh v30,v11,v12
	// vadduhm v11,v7,v11
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// vadduhm v7,v30,v1
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v30.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vslh v1,v10,v12
	// vslh v10,v10,v3
	// vslh v30,v13,v0
	// vadduhm v11,v11,v7
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vadduhm v10,v10,v1
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vslh v1,v9,v0
	// vadduhm v10,v11,v10
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vsubshs v13,v9,v1
	// vsubshs v9,v5,v30
	// vadduhm v10,v10,v19
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)v19.u16)));
	// vadduhm v1,v13,v9
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// vadduhm v13,v2,v6
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vadduhm v11,v10,v1
	_mm_store_si128((__m128i*)ctx.v11.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vsrah v13,v13,v20
	// vsrah v11,v11,v20
	// vor v9,v8,v13
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vpkshus v13,v13,v11
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v13.s16)));
	// vor v8,v9,v11
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v11.u8)));
	// stvx v13,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// bne cr6,0x827118cc
	if (!cr6.eq) goto loc_827118CC;
loc_827119AC:
	// vand v0,v8,v31
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_and_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)v31.u8)));
	// vcmpgtuh. v0,v0,v5
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_cmpgt_epu16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// mfocrf r11,2
	r11.u64 = (cr6.lt << 7) | (cr6.gt << 6) | (cr6.eq << 5) | (cr6.so << 4);
	// not r11,r11
	r11.u64 = ~r11.u64;
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// b 0x8239bd44
	return;
}

__attribute__((alias("__imp__sub_827119C4"))) PPC_WEAK_FUNC(sub_827119C4);
PPC_FUNC_IMPL(__imp__sub_827119C4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_827119C8"))) PPC_WEAK_FUNC(sub_827119C8);
PPC_FUNC_IMPL(__imp__sub_827119C8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcf4
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,1096(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1096);
	// vspltish v13,4
	// lwz r30,1100(r7)
	r30.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1100);
	// mr r31,r10
	r31.u64 = ctx.r10.u64;
	// lwz r28,260(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 260);
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// addi r3,r3,-1
	ctx.r3.s64 = ctx.r3.s64 + -1;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// addi r11,r1,96
	r11.s64 = ctx.r1.s64 + 96;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lvx128 v0,r0,r11
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// vsplth v0,v0,1
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_set1_epi16(short(0xD0C))));
	// stvx v13,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,96
	r11.s64 = ctx.r1.s64 + 96;
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x82700240
	sub_82700240(ctx, base);
	// cntlzw r11,r28
	r11.u64 = r28.u32 == 0 ? 32 : __builtin_clz(r28.u32);
	// vspltish v0,8
	// li r8,1
	ctx.r8.s64 = 1;
	// vspltish v13,-1
	// rlwinm r10,r11,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// vspltisb v9,0
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_set1_epi8(char(0x0)));
	// mr r11,r29
	r11.u64 = r29.u64;
	// vspltish v8,3
	// and r9,r10,r31
	ctx.r9.u64 = ctx.r10.u64 & r31.u64;
	// vspltish v11,0
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// vslh v3,v13,v0
	// addi r9,r9,3
	ctx.r9.s64 = ctx.r9.s64 + 3;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// slw r9,r8,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x20 ? 0 : (ctx.r8.u32 << (ctx.r9.u8 & 0x3F));
	// bne cr6,0x82711ae4
	if (!cr6.eq) goto loc_82711AE4;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x82711b94
	if (!cr6.gt) goto loc_82711B94;
loc_82711A6C:
	// addi r8,r10,16
	ctx.r8.s64 = ctx.r10.s64 + 16;
	// lvx128 v0,r0,r10
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r7,4
	ctx.r7.s64 = 4;
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// lvx128 v13,r0,r8
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r1,96
	ctx.r8.s64 = ctx.r1.s64 + 96;
	// vsldoi v12,v0,v13,2
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v13.u8), 14));
	// vsldoi v10,v0,v13,4
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v13.u8), 12));
	// vsldoi v7,v0,v13,6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v13.u8), 10));
	// vadduhm v13,v12,v10
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vadduhm v0,v0,v7
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vslh v12,v13,v8
	// vsubshs v0,v9,v0
	// vadduhm v13,v13,v12
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// lvx128 v12,r0,r8
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r1,112
	ctx.r8.s64 = ctx.r1.s64 + 112;
	// vadduhm v13,v13,v12
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vadduhm v0,v13,v0
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v0.u16)));
	// lvx128 v13,r0,r8
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsrah v0,v0,v13
	// vpkshus v13,v0,v0
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v0.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// vor v11,v11,v0
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vor v0,v13,v13
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_load_si128((__m128i*)ctx.v13.u8));
	// stvewx v0,r0,r11
	ea = (r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v0,r11,r7
	ea = (r11.u32 + ctx.r7.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// bne cr6,0x82711a6c
	if (!cr6.eq) goto loc_82711A6C;
	// b 0x82711b94
	goto loc_82711B94;
loc_82711AE4:
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x82711b94
	if (!cr6.gt) goto loc_82711B94;
	// addi r10,r30,32
	ctx.r10.s64 = r30.s64 + 32;
loc_82711AF0:
	// addi r8,r10,-32
	ctx.r8.s64 = ctx.r10.s64 + -32;
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r10,-16
	ctx.r7.s64 = ctx.r10.s64 + -16;
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// lvx128 v13,r0,r8
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r1,96
	ctx.r8.s64 = ctx.r1.s64 + 96;
	// lvx128 v0,r0,r7
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsldoi v7,v13,v0,4
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v0.u8), 12));
	// vsldoi v10,v13,v0,2
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v0.u8), 14));
	// vsldoi v5,v0,v12,2
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v12.u8), 14));
	// vsldoi v4,v0,v12,4
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v12.u8), 12));
	// vsldoi v12,v0,v12,6
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v12.u8), 10));
	// vadduhm v10,v10,v7
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vsldoi v6,v13,v0,6
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v0.u8), 10));
	// vadduhm v12,v0,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vslh v7,v10,v8
	// vadduhm v13,v13,v6
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vadduhm v6,v5,v4
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v5.u16), _mm_load_si128((__m128i*)ctx.v4.u16)));
	// vsubshs v12,v9,v12
	// vadduhm v0,v10,v7
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// lvx128 v7,r0,r8
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsubshs v13,v9,v13
	// addi r8,r1,112
	ctx.r8.s64 = ctx.r1.s64 + 112;
	// vadduhm v10,v0,v7
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vor v0,v6,v6
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_load_si128((__m128i*)ctx.v6.u8));
	// vadduhm v13,v10,v13
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v13.u16)));
	// vslh v10,v0,v8
	// vadduhm v0,v0,v10
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// lvx128 v10,r0,r8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v0,v0,v7
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vadduhm v12,v0,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vsrah v0,v13,v10
	// vsrah v13,v12,v10
	// vor v12,v11,v0
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vpkshus v0,v0,v13
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v13.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// vor v11,v12,v13
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// bne cr6,0x82711af0
	if (!cr6.eq) goto loc_82711AF0;
loc_82711B94:
	// vand v0,v11,v3
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_and_si128(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// vcmpgtuh. v0,v0,v9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_cmpgt_epu16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// mfocrf r11,2
	r11.u64 = (cr6.lt << 7) | (cr6.gt << 6) | (cr6.eq << 5) | (cr6.so << 4);
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x8239bd44
	return;
}

__attribute__((alias("__imp__sub_82711BB0"))) PPC_WEAK_FUNC(sub_82711BB0);
PPC_FUNC_IMPL(__imp__sub_82711BB0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCVRegister v19{};
	PPCVRegister v20{};
	PPCVRegister v21{};
	PPCVRegister v22{};
	PPCVRegister v23{};
	PPCVRegister v24{};
	PPCVRegister v25{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcf4
	// lwz r9,1084(r7)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1084);
	// vspltish v31,1
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r8,1
	ctx.r8.s64 = 1;
	// stw r10,76(r1)
	PPC_STORE_U32(ctx.r1.u32 + 76, ctx.r10.u32);
	// vspltish v20,7
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// vspltish v29,3
	// addi r31,r1,-64
	r31.s64 = ctx.r1.s64 + -64;
	// vspltisb v13,0
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_set1_epi8(char(0x0)));
	// stw r9,-240(r1)
	PPC_STORE_U32(ctx.r1.u32 + -240, ctx.r9.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// lwz r9,1092(r7)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1092);
	// vspltish v30,5
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// stw r4,28(r1)
	PPC_STORE_U32(ctx.r1.u32 + 28, ctx.r4.u32);
	// stw r5,36(r1)
	PPC_STORE_U32(ctx.r1.u32 + 36, ctx.r5.u32);
	// addi r30,r11,3
	r30.s64 = r11.s64 + 3;
	// stvx v20,r0,r31
	_mm_store_si128((__m128i*)(base + ((r31.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v20.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-176
	r11.s64 = ctx.r1.s64 + -176;
	// lwz r31,1100(r7)
	r31.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1100);
	// stw r9,-224(r1)
	PPC_STORE_U32(ctx.r1.u32 + -224, ctx.r9.u32);
	// addi r9,r1,-240
	ctx.r9.s64 = ctx.r1.s64 + -240;
	// addi r7,r1,-112
	ctx.r7.s64 = ctx.r1.s64 + -112;
	// stw r6,44(r1)
	PPC_STORE_U32(ctx.r1.u32 + 44, ctx.r6.u32);
	// stvx v31,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-240
	r11.s64 = ctx.r1.s64 + -240;
	// lvx128 v0,r0,r9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-224
	ctx.r9.s64 = ctx.r1.s64 + -224;
	// vsplth v2,v0,1
	_mm_store_si128((__m128i*)ctx.v2.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_set1_epi16(short(0xD0C))));
	// stw r31,-204(r1)
	PPC_STORE_U32(ctx.r1.u32 + -204, r31.u32);
	// vspltish v0,2
	// lvx128 v12,r0,r9
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// vsplth v19,v12,1
	_mm_store_si128((__m128i*)v19.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_set1_epi16(short(0xD0C))));
	// addi r9,r9,3
	ctx.r9.s64 = ctx.r9.s64 + 3;
	// vspltish v12,4
	// stvx v2,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// subf r11,r4,r3
	r11.s64 = ctx.r3.s64 - ctx.r4.s64;
	// cmpwi cr6,r9,3
	cr6.compare<int32_t>(ctx.r9.s32, 3, xer);
	// addi r3,r1,-224
	ctx.r3.s64 = ctx.r1.s64 + -224;
	// addi r9,r1,-80
	ctx.r9.s64 = ctx.r1.s64 + -80;
	// slw r8,r8,r30
	ctx.r8.u64 = r30.u8 & 0x20 ? 0 : (ctx.r8.u32 << (r30.u8 & 0x3F));
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stvx v12,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r1,-144
	ctx.r7.s64 = ctx.r1.s64 + -144;
	// stvx v19,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v19.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r1,-192
	ctx.r3.s64 = ctx.r1.s64 + -192;
	// stvx v29,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v29.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-256
	ctx.r9.s64 = ctx.r1.s64 + -256;
	// stw r8,-208(r1)
	PPC_STORE_U32(ctx.r1.u32 + -208, ctx.r8.u32);
	// stvx v30,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v0,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v13,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bne cr6,0x82711e04
	if (!cr6.eq) goto loc_82711E04;
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r7,r11,r4
	ctx.r7.u64 = r11.u64 + ctx.r4.u64;
	// lvsl v7,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r30,r1,-256
	r30.s64 = ctx.r1.s64 + -256;
	// add r11,r7,r4
	r11.u64 = ctx.r7.u64 + ctx.r4.u64;
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
	// lvx128 v10,r0,r3
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r7,16
	ctx.r3.s64 = ctx.r7.s64 + 16;
	// lvx128 v9,r0,r7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// stvx v11,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v11,v11,v10,v7
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvsl v6,r0,r7
	temp.u32 = ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r7,r11,16
	ctx.r7.s64 = r11.s64 + 16;
	// lvsl v1,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// lvx128 v8,r0,r3
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r1,-256
	ctx.r3.s64 = ctx.r1.s64 + -256;
	// vmrghb v5,v13,v11
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrglb v4,v13,v11
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// stvx v10,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r1,-256
	ctx.r3.s64 = ctx.r1.s64 + -256;
	// vperm v10,v9,v8,v6
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// stvx v7,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v11,v13,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// lvx128 v3,r0,r11
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrglb v10,v13,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// lvx128 v28,r0,r7
	_mm_store_si128((__m128i*)v28.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v8,v3,v28,v1
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)v28.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// vmrghb v9,v13,v8
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrglb v8,v13,v8
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// ble cr6,0x82712038
	if (!cr6.gt) goto loc_82712038;
	// li r7,0
	ctx.r7.s64 = 0;
loc_82711D18:
	// vslh v3,v11,v12
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// vslh v6,v11,v30
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// vslh v1,v9,v31
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// vslh v7,v11,v0
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// vslh v5,v5,v0
	// vadduhm v6,v3,v6
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// lvx128 v28,r0,r11
	_mm_store_si128((__m128i*)v28.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v3,v9,v12
	// cmpw cr6,r7,r8
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r8.s32, xer);
	// vadduhm v7,v7,v11
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// lvx128 v27,r0,r3
	_mm_store_si128((__m128i*)v27.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsubshs v5,v13,v5
	// addi r3,r9,16
	ctx.r3.s64 = ctx.r9.s64 + 16;
	// vadduhm v3,v1,v3
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)ctx.v3.u16)));
	// vslh v1,v10,v0
	// vadduhm v7,v7,v6
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vadduhm v26,v1,v10
	_mm_store_si128((__m128i*)v26.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// lvsl v1,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vperm v6,v28,v27,v1
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v28.u8), _mm_load_si128((__m128i*)v27.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// vadduhm v3,v7,v3
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v3.u16)));
	// vslh v28,v8,v31
	// vslh v27,v4,v0
	// vmrghb v7,v13,v6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vadduhm v3,v3,v2
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v2.u16)));
	// vmrglb v6,v13,v6
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vsubshs v27,v13,v27
	// vslh v1,v7,v0
	// vsubshs v1,v7,v1
	// vadduhm v5,v1,v5
	_mm_store_si128((__m128i*)ctx.v5.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vslh v1,v10,v12
	// vadduhm v3,v3,v5
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vslh v5,v10,v30
	// vsrah v3,v3,v29
	// vadduhm v1,v1,v5
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vslh v5,v8,v12
	// stvx v3,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r9,48
	ctx.r9.s64 = ctx.r9.s64 + 48;
	// vadduhm v28,v28,v5
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vslh v5,v6,v0
	// vsubshs v4,v6,v5
	// vor v5,v11,v11
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_load_si128((__m128i*)ctx.v11.u8));
	// vor v11,v9,v9
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_load_si128((__m128i*)ctx.v9.u8));
	// vor v9,v7,v7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_load_si128((__m128i*)ctx.v7.u8));
	// vadduhm v7,v26,v1
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v26.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vadduhm v27,v4,v27
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v4.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vor v4,v10,v10
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_load_si128((__m128i*)ctx.v10.u8));
	// vor v10,v8,v8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_load_si128((__m128i*)ctx.v8.u8));
	// vor v8,v6,v6
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_load_si128((__m128i*)ctx.v6.u8));
	// vadduhm v6,v7,v28
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)v28.u16)));
	// vadduhm v6,v6,v2
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)ctx.v2.u16)));
	// vadduhm v7,v6,v27
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vsrah v7,v7,v29
	// stvx v7,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// blt cr6,0x82711d18
	if (cr6.lt) goto loc_82711D18;
	// b 0x82712038
	goto loc_82712038;
loc_82711E04:
	// li r9,16
	ctx.r9.s64 = 16;
	// stw r11,-288(r1)
	PPC_STORE_U32(ctx.r1.u32 + -288, r11.u32);
	// lvlx v11,0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// li r7,16
	ctx.r7.s64 = 16;
	// li r3,32
	ctx.r3.s64 = 32;
	// addi r27,r1,-160
	r27.s64 = ctx.r1.s64 + -160;
	// li r30,16
	r30.s64 = 16;
	// lvrx v10,r11,r9
	temp.u32 = r11.u32 + ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v10.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// li r29,16
	r29.s64 = 16;
	// vor v11,v11,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v10.u8)));
	// lvlx v9,r11,r7
	temp.u32 = r11.u32 + ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v8,r11,r3
	temp.u32 = r11.u32 + ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v8.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// vor v10,v9,v8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v8.u8)));
	// li r28,32
	r28.s64 = 32;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// stvx v11,r0,r27
	_mm_store_si128((__m128i*)(base + ((r27.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r1,-128
	r27.s64 = ctx.r1.s64 + -128;
	// vmrghb v4,v13,v11
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// stw r11,-288(r1)
	PPC_STORE_U32(ctx.r1.u32 + -288, r11.u32);
	// vmrglb v28,v13,v11
	_mm_store_si128((__m128i*)v28.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// stvx v10,r0,r27
	_mm_store_si128((__m128i*)(base + ((r27.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vor v11,v4,v4
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_load_si128((__m128i*)ctx.v4.u8));
	// lvrx v8,r11,r9
	temp.u32 = r11.u32 + ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v8.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// addi r9,r1,-96
	ctx.r9.s64 = ctx.r1.s64 + -96;
	// lvlx v9,0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// vmrghb v10,v13,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vor v7,v9,v8
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v8.u8)));
	// lvlx v6,r11,r7
	temp.u32 = r11.u32 + ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v5,r11,r3
	temp.u32 = r11.u32 + ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v5.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// vor v5,v6,v5
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// vor v9,v28,v28
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_load_si128((__m128i*)v28.u8));
	// stvx v7,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-272
	ctx.r9.s64 = ctx.r1.s64 + -272;
	// stw r11,-288(r1)
	PPC_STORE_U32(ctx.r1.u32 + -288, r11.u32);
	// stvx v5,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvlx v8,0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v6,r11,r30
	temp.u32 = r11.u32 + r30.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// lvlx v3,r11,r29
	temp.u32 = r11.u32 + r29.u32;
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// vor v4,v8,v6
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvrx v1,r11,r28
	temp.u32 = r11.u32 + r28.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// vmrghb v8,v13,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vor v3,v3,v1
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// vmrglb v6,v13,v7
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrghb v7,v13,v5
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrghb v5,v13,v4
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrglb v4,v13,v4
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrghb v3,v13,v3
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// ble cr6,0x82712038
	if (!cr6.gt) goto loc_82712038;
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r9,r31,32
	ctx.r9.s64 = r31.s64 + 32;
loc_82711ED4:
	// vor v27,v11,v11
	_mm_store_si128((__m128i*)v27.u8, _mm_load_si128((__m128i*)ctx.v11.u8));
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// vor v11,v8,v8
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_load_si128((__m128i*)ctx.v8.u8));
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// vor v22,v9,v9
	_mm_store_si128((__m128i*)v22.u8, _mm_load_si128((__m128i*)ctx.v9.u8));
	// addi r30,r11,32
	r30.s64 = r11.s64 + 32;
	// vor v9,v6,v6
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_load_si128((__m128i*)ctx.v6.u8));
	// vor v6,v4,v4
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)ctx.v4.u8));
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// vslh v8,v11,v0
	// lvx128 v28,r0,r11
	_mm_store_si128((__m128i*)v28.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v23,v11,v12
	// lvsl v1,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vslh v24,v11,v30
	// cmpw cr6,r7,r8
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r8.s32, xer);
	// lvx128 v26,r0,r30
	_mm_store_si128((__m128i*)v26.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v27,v27,v0
	// vadduhm v25,v8,v11
	_mm_store_si128((__m128i*)v25.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v8.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// addi r30,r9,-16
	r30.s64 = ctx.r9.s64 + -16;
	// vor v8,v5,v5
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_load_si128((__m128i*)ctx.v5.u8));
	// vadduhm v24,v23,v24
	_mm_store_si128((__m128i*)v24.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v23.u16), _mm_load_si128((__m128i*)v24.u16)));
	// vor v23,v10,v10
	_mm_store_si128((__m128i*)v23.u8, _mm_load_si128((__m128i*)ctx.v10.u8));
	// vor v10,v7,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_load_si128((__m128i*)ctx.v7.u8));
	// vor v7,v3,v3
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)ctx.v3.u8));
	// vslh v5,v8,v12
	// vslh v3,v8,v31
	// vadduhm v25,v25,v24
	_mm_store_si128((__m128i*)v25.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v25.u16), _mm_load_si128((__m128i*)v24.u16)));
	// vsubshs v27,v13,v27
	// vslh v24,v9,v12
	// vadduhm v21,v3,v5
	_mm_store_si128((__m128i*)v21.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// lvx128 v5,r0,r3
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v4,v28,v5,v1
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v28.u8), _mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// lvsl v3,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vperm v5,v5,v26,v3
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)v26.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// vslh v26,v9,v30
	// vslh v28,v9,v0
	// addi r3,r9,-32
	ctx.r3.s64 = ctx.r9.s64 + -32;
	// vadduhm v25,v25,v21
	_mm_store_si128((__m128i*)v25.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v25.u16), _mm_load_si128((__m128i*)v21.u16)));
	// vmrghb v3,v13,v4
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vslh v22,v22,v0
	// vmrghb v1,v13,v5
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vadduhm v26,v24,v26
	_mm_store_si128((__m128i*)v26.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v24.u16), _mm_load_si128((__m128i*)v26.u16)));
	// vmrglb v4,v13,v4
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vadduhm v28,v28,v9
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// vslh v24,v6,v31
	// vor v5,v3,v3
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_load_si128((__m128i*)ctx.v3.u8));
	// vor v3,v1,v1
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_load_si128((__m128i*)ctx.v1.u8));
	// vslh v21,v4,v0
	// vadduhm v28,v28,v26
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)v26.u16)));
	// vslh v1,v5,v0
	// vsubshs v1,v5,v1
	// vadduhm v1,v1,v27
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vslh v27,v6,v12
	// vor v26,v1,v1
	_mm_store_si128((__m128i*)v26.u8, _mm_load_si128((__m128i*)ctx.v1.u8));
	// vadduhm v27,v24,v27
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v24.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vsubshs v24,v4,v21
	// vsubshs v21,v13,v22
	// vslh v22,v10,v0
	// vadduhm v1,v28,v27
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vadduhm v27,v25,v2
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v25.u16), _mm_load_si128((__m128i*)ctx.v2.u16)));
	// vadduhm v28,v24,v21
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v24.u16), _mm_load_si128((__m128i*)v21.u16)));
	// vslh v25,v7,v31
	// vadduhm v1,v1,v2
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)ctx.v2.u16)));
	// vadduhm v27,v27,v26
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v27.u16), _mm_load_si128((__m128i*)v26.u16)));
	// vslh v26,v10,v12
	// vslh v24,v23,v0
	// vadduhm v1,v1,v28
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)v28.u16)));
	// vslh v28,v10,v30
	// vsrah v27,v27,v29
	// vsubshs v24,v13,v24
	// vsrah v1,v1,v29
	// vadduhm v28,v26,v28
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v26.u16), _mm_load_si128((__m128i*)v28.u16)));
	// vslh v26,v7,v12
	// stvx v27,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v27.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v22,v22,v10
	_mm_store_si128((__m128i*)v22.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v22.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// stvx v1,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v26,v25,v26
	_mm_store_si128((__m128i*)v26.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v25.u16), _mm_load_si128((__m128i*)v26.u16)));
	// vslh v25,v3,v0
	// vsubshs v25,v3,v25
	// vadduhm v25,v25,v24
	_mm_store_si128((__m128i*)v25.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v25.u16), _mm_load_si128((__m128i*)v24.u16)));
	// vadduhm v1,v22,v28
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v22.u16), _mm_load_si128((__m128i*)v28.u16)));
	// vadduhm v28,v1,v26
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)v26.u16)));
	// vadduhm v28,v28,v2
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)ctx.v2.u16)));
	// vadduhm v1,v28,v25
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)v25.u16)));
	// vsrah v1,v1,v29
	// stvx v1,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r9,48
	ctx.r9.s64 = ctx.r9.s64 + 48;
	// blt cr6,0x82711ed4
	if (cr6.lt) goto loc_82711ED4;
loc_82712038:
	// vspltish v0,8
	// mr r11,r5
	r11.u64 = ctx.r5.u64;
	// vspltish v12,-1
	// vor v9,v13,v13
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_load_si128((__m128i*)ctx.v13.u8));
	// vspltish v11,0
	// vor v8,v29,v29
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_load_si128((__m128i*)v29.u8));
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// vslh v3,v12,v0
	// bne cr6,0x827120d4
	if (!cr6.eq) goto loc_827120D4;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x82712178
	if (!cr6.gt) goto loc_82712178;
	// mr r10,r8
	ctx.r10.u64 = ctx.r8.u64;
loc_8271206C:
	// addi r8,r9,16
	ctx.r8.s64 = ctx.r9.s64 + 16;
	// lvx128 v0,r0,r9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r7,4
	ctx.r7.s64 = 4;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// addi r9,r9,48
	ctx.r9.s64 = ctx.r9.s64 + 48;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// lvx128 v13,r0,r8
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsldoi v12,v0,v13,2
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v13.u8), 14));
	// vsldoi v10,v0,v13,4
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v13.u8), 12));
	// vsldoi v7,v0,v13,6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v13.u8), 10));
	// vadduhm v13,v12,v10
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vadduhm v0,v0,v7
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vslh v12,v13,v8
	// vsubshs v0,v9,v0
	// vadduhm v13,v13,v12
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vadduhm v13,v13,v19
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)v19.u16)));
	// vadduhm v0,v13,v0
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v0.u16)));
	// vsrah v0,v0,v20
	// vpkshus v13,v0,v0
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v0.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// vor v11,v11,v0
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vor v0,v13,v13
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_load_si128((__m128i*)ctx.v13.u8));
	// stvewx v0,r0,r11
	ea = (r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v0,r11,r7
	ea = (r11.u32 + ctx.r7.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// bne cr6,0x8271206c
	if (!cr6.eq) goto loc_8271206C;
	// b 0x82712178
	goto loc_82712178;
loc_827120D4:
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x82712178
	if (!cr6.gt) goto loc_82712178;
	// addi r10,r31,32
	ctx.r10.s64 = r31.s64 + 32;
	// mr r9,r8
	ctx.r9.u64 = ctx.r8.u64;
loc_827120E4:
	// addi r8,r10,-32
	ctx.r8.s64 = ctx.r10.s64 + -32;
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r10,-16
	ctx.r7.s64 = ctx.r10.s64 + -16;
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// lvx128 v13,r0,r8
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v0,r0,r7
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsldoi v7,v13,v0,4
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v0.u8), 12));
	// vsldoi v10,v13,v0,2
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v0.u8), 14));
	// vsldoi v5,v0,v12,2
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v12.u8), 14));
	// vsldoi v4,v0,v12,4
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v12.u8), 12));
	// vsldoi v12,v0,v12,6
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v12.u8), 10));
	// vadduhm v10,v10,v7
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vsldoi v6,v13,v0,6
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v0.u8), 10));
	// vadduhm v12,v0,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vslh v7,v10,v8
	// vadduhm v13,v13,v6
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vadduhm v6,v5,v4
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v5.u16), _mm_load_si128((__m128i*)ctx.v4.u16)));
	// vsubshs v12,v9,v12
	// vadduhm v0,v10,v7
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vsubshs v13,v9,v13
	// vadduhm v10,v0,v19
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)v19.u16)));
	// vor v0,v6,v6
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_load_si128((__m128i*)ctx.v6.u8));
	// vadduhm v13,v10,v13
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v13.u16)));
	// vslh v10,v0,v8
	// vadduhm v0,v0,v10
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vadduhm v0,v0,v19
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)v19.u16)));
	// vadduhm v12,v0,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vsrah v0,v13,v20
	// vsrah v13,v12,v20
	// vor v12,v11,v0
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vpkshus v0,v0,v13
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v13.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// vor v11,v12,v13
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// bne cr6,0x827120e4
	if (!cr6.eq) goto loc_827120E4;
loc_82712178:
	// vand v0,v11,v3
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_and_si128(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// vcmpgtuh. v0,v0,v9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_cmpgt_epu16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// mfocrf r11,2
	r11.u64 = (cr6.lt << 7) | (cr6.gt << 6) | (cr6.eq << 5) | (cr6.so << 4);
	// not r11,r11
	r11.u64 = ~r11.u64;
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// b 0x8239bd44
	return;
}

__attribute__((alias("__imp__sub_82712190"))) PPC_WEAK_FUNC(sub_82712190);
PPC_FUNC_IMPL(__imp__sub_82712190) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCVRegister v23{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcf4
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lbz r11,35(r7)
	r11.u64 = PPC_LOAD_U8(ctx.r7.u32 + 35);
	// mr r31,r10
	r31.u64 = ctx.r10.u64;
	// lwz r10,1092(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1092);
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// lwz r30,1100(r7)
	r30.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1100);
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// lwz r28,292(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 292);
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// vspltish v1,1
	// stw r11,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r11.u32);
	// subf r11,r4,r3
	r11.s64 = ctx.r3.s64 - ctx.r4.s64;
	// stw r10,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r10.u32);
	// addi r10,r1,128
	ctx.r10.s64 = ctx.r1.s64 + 128;
	// addi r3,r11,-1
	ctx.r3.s64 = r11.s64 + -1;
	// vspltish v24,7
	// rlwinm r11,r31,1,0,30
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// addi r6,r11,3
	ctx.r6.s64 = r11.s64 + 3;
	// lvx128 v0,r0,r10
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsplth v23,v0,1
	_mm_store_si128((__m128i*)v23.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_set1_epi16(short(0xD0C))));
	// addi r11,r1,144
	r11.s64 = ctx.r1.s64 + 144;
	// lvx128 v0,r0,r11
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsplth v2,v0,1
	_mm_store_si128((__m128i*)ctx.v2.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_set1_epi16(short(0xD0C))));
	// bl 0x82700aa0
	sub_82700AA0(ctx, base);
	// cntlzw r11,r28
	r11.u64 = r28.u32 == 0 ? 32 : __builtin_clz(r28.u32);
	// vspltish v0,8
	// li r8,1
	ctx.r8.s64 = 1;
	// vspltish v13,-1
	// rlwinm r10,r11,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// vspltisb v9,0
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_set1_epi8(char(0x0)));
	// mr r11,r29
	r11.u64 = r29.u64;
	// vspltish v8,3
	// and r9,r10,r31
	ctx.r9.u64 = ctx.r10.u64 & r31.u64;
	// vspltish v11,0
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// vslh v3,v13,v0
	// addi r9,r9,3
	ctx.r9.s64 = ctx.r9.s64 + 3;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// slw r9,r8,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x20 ? 0 : (ctx.r8.u32 << (ctx.r9.u8 & 0x3F));
	// bne cr6,0x827122b0
	if (!cr6.eq) goto loc_827122B0;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x82712350
	if (!cr6.gt) goto loc_82712350;
loc_82712248:
	// addi r8,r10,16
	ctx.r8.s64 = ctx.r10.s64 + 16;
	// lvx128 v0,r0,r10
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r7,4
	ctx.r7.s64 = 4;
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// lvx128 v13,r0,r8
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsldoi v12,v0,v13,2
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v13.u8), 14));
	// vsldoi v10,v0,v13,4
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v13.u8), 12));
	// vsldoi v7,v0,v13,6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v13.u8), 10));
	// vadduhm v13,v12,v10
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vadduhm v0,v0,v7
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vslh v12,v13,v8
	// vsubshs v0,v9,v0
	// vadduhm v13,v13,v12
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vadduhm v13,v13,v23
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)v23.u16)));
	// vadduhm v0,v13,v0
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v0.u16)));
	// vsrah v0,v0,v24
	// vpkshus v13,v0,v0
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v0.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// vor v11,v11,v0
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vor v0,v13,v13
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_load_si128((__m128i*)ctx.v13.u8));
	// stvewx v0,r0,r11
	ea = (r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v0,r11,r7
	ea = (r11.u32 + ctx.r7.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// bne cr6,0x82712248
	if (!cr6.eq) goto loc_82712248;
	// b 0x82712350
	goto loc_82712350;
loc_827122B0:
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x82712350
	if (!cr6.gt) goto loc_82712350;
	// addi r10,r30,32
	ctx.r10.s64 = r30.s64 + 32;
loc_827122BC:
	// addi r8,r10,-32
	ctx.r8.s64 = ctx.r10.s64 + -32;
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r10,-16
	ctx.r7.s64 = ctx.r10.s64 + -16;
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// lvx128 v13,r0,r8
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v0,r0,r7
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsldoi v7,v13,v0,4
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v0.u8), 12));
	// vsldoi v10,v13,v0,2
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v0.u8), 14));
	// vsldoi v5,v0,v12,2
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v12.u8), 14));
	// vsldoi v4,v0,v12,4
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v12.u8), 12));
	// vsldoi v12,v0,v12,6
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v12.u8), 10));
	// vadduhm v10,v10,v7
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vsldoi v6,v13,v0,6
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v0.u8), 10));
	// vadduhm v12,v0,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vslh v7,v10,v8
	// vadduhm v13,v13,v6
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vadduhm v6,v5,v4
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v5.u16), _mm_load_si128((__m128i*)ctx.v4.u16)));
	// vsubshs v12,v9,v12
	// vadduhm v0,v10,v7
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vsubshs v13,v9,v13
	// vadduhm v10,v0,v23
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)v23.u16)));
	// vor v0,v6,v6
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_load_si128((__m128i*)ctx.v6.u8));
	// vadduhm v13,v10,v13
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v13.u16)));
	// vslh v10,v0,v8
	// vadduhm v0,v0,v10
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vadduhm v0,v0,v23
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)v23.u16)));
	// vadduhm v12,v0,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vsrah v0,v13,v24
	// vsrah v13,v12,v24
	// vor v12,v11,v0
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vpkshus v0,v0,v13
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v13.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// vor v11,v12,v13
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// bne cr6,0x827122bc
	if (!cr6.eq) goto loc_827122BC;
loc_82712350:
	// vand v0,v11,v3
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_and_si128(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// vcmpgtuh. v0,v0,v9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_cmpgt_epu16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// mfocrf r11,2
	r11.u64 = (cr6.lt << 7) | (cr6.gt << 6) | (cr6.eq << 5) | (cr6.so << 4);
	// not r11,r11
	r11.u64 = ~r11.u64;
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x8239bd44
	return;
}

__attribute__((alias("__imp__sub_8271236C"))) PPC_WEAK_FUNC(sub_8271236C);
PPC_FUNC_IMPL(__imp__sub_8271236C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_82712370"))) PPC_WEAK_FUNC(sub_82712370);
PPC_FUNC_IMPL(__imp__sub_82712370) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCVRegister v19{};
	PPCVRegister v20{};
	PPCVRegister v21{};
	PPCVRegister v22{};
	PPCVRegister v23{};
	PPCVRegister v24{};
	PPCVRegister v25{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcf4
	// lwz r9,1084(r7)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1084);
	// vspltish v4,1
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r8,1
	ctx.r8.s64 = 1;
	// stw r5,36(r1)
	PPC_STORE_U32(ctx.r1.u32 + 36, ctx.r5.u32);
	// vspltish v20,7
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// stw r6,44(r1)
	PPC_STORE_U32(ctx.r1.u32 + 44, ctx.r6.u32);
	// addi r31,r1,-64
	r31.s64 = ctx.r1.s64 + -64;
	// vspltish v2,3
	// stw r9,-224(r1)
	PPC_STORE_U32(ctx.r1.u32 + -224, ctx.r9.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// lwz r9,1092(r7)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1092);
	// vspltisb v13,0
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_set1_epi8(char(0x0)));
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// vspltish v3,5
	// stw r10,76(r1)
	PPC_STORE_U32(ctx.r1.u32 + 76, ctx.r10.u32);
	// addi r30,r11,3
	r30.s64 = r11.s64 + 3;
	// stvx v20,r0,r31
	_mm_store_si128((__m128i*)(base + ((r31.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v20.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-176
	r11.s64 = ctx.r1.s64 + -176;
	// lwz r31,1100(r7)
	r31.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1100);
	// stw r9,-272(r1)
	PPC_STORE_U32(ctx.r1.u32 + -272, ctx.r9.u32);
	// addi r9,r1,-224
	ctx.r9.s64 = ctx.r1.s64 + -224;
	// addi r7,r1,-112
	ctx.r7.s64 = ctx.r1.s64 + -112;
	// stw r4,28(r1)
	PPC_STORE_U32(ctx.r1.u32 + 28, ctx.r4.u32);
	// stvx v4,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,-224
	r11.s64 = ctx.r1.s64 + -224;
	// lvx128 v0,r0,r9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-272
	ctx.r9.s64 = ctx.r1.s64 + -272;
	// vsplth v5,v0,1
	_mm_store_si128((__m128i*)ctx.v5.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_set1_epi16(short(0xD0C))));
	// stw r31,-208(r1)
	PPC_STORE_U32(ctx.r1.u32 + -208, r31.u32);
	// vspltish v0,2
	// lvx128 v12,r0,r9
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// vsplth v19,v12,1
	_mm_store_si128((__m128i*)v19.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_set1_epi16(short(0xD0C))));
	// addi r9,r9,3
	ctx.r9.s64 = ctx.r9.s64 + 3;
	// vspltish v12,4
	// stvx v5,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// subf r11,r4,r3
	r11.s64 = ctx.r3.s64 - ctx.r4.s64;
	// cmpwi cr6,r9,3
	cr6.compare<int32_t>(ctx.r9.s32, 3, xer);
	// addi r3,r1,-272
	ctx.r3.s64 = ctx.r1.s64 + -272;
	// addi r9,r1,-80
	ctx.r9.s64 = ctx.r1.s64 + -80;
	// slw r8,r8,r30
	ctx.r8.u64 = r30.u8 & 0x20 ? 0 : (ctx.r8.u32 << (r30.u8 & 0x3F));
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stvx v12,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r1,-144
	ctx.r7.s64 = ctx.r1.s64 + -144;
	// stvx v19,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v19.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r1,-192
	ctx.r3.s64 = ctx.r1.s64 + -192;
	// stvx v2,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-240
	ctx.r9.s64 = ctx.r1.s64 + -240;
	// stw r8,-204(r1)
	PPC_STORE_U32(ctx.r1.u32 + -204, ctx.r8.u32);
	// stvx v3,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v0,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v13,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bne cr6,0x827125dc
	if (!cr6.eq) goto loc_827125DC;
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r7,r11,r4
	ctx.r7.u64 = r11.u64 + ctx.r4.u64;
	// lvsl v7,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r30,r1,-240
	r30.s64 = ctx.r1.s64 + -240;
	// add r11,r7,r4
	r11.u64 = ctx.r7.u64 + ctx.r4.u64;
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
	// lvx128 v10,r0,r3
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r7,16
	ctx.r3.s64 = ctx.r7.s64 + 16;
	// lvx128 v6,r0,r7
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// stvx v11,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v11,v11,v10,v7
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvsl v1,r0,r7
	temp.u32 = ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r7,r11,16
	ctx.r7.s64 = r11.s64 + 16;
	// lvsl v24,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)v24.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// lvx128 v31,r0,r3
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r1,-240
	ctx.r3.s64 = ctx.r1.s64 + -240;
	// vmrghb v9,v13,v11
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrglb v8,v13,v11
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// stvx v10,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r1,-240
	ctx.r3.s64 = ctx.r1.s64 + -240;
	// vperm v10,v6,v31,v1
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// stvx v7,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v11,v13,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// lvx128 v29,r0,r7
	_mm_store_si128((__m128i*)v29.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r1,-272
	ctx.r7.s64 = ctx.r1.s64 + -272;
	// lvx128 v30,r0,r11
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrglb v10,v13,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// stvx v24,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v24.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r1,-272
	ctx.r7.s64 = ctx.r1.s64 + -272;
	// lvx128 v7,r0,r7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v6,v30,v29,v7
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)v29.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// vmrghb v7,v13,v6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrglb v6,v13,v6
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// ble cr6,0x82712818
	if (!cr6.gt) goto loc_82712818;
	// li r7,0
	ctx.r7.s64 = 0;
loc_827124E8:
	// vor v1,v9,v9
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)ctx.v9.u8));
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// vor v9,v11,v11
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_load_si128((__m128i*)ctx.v11.u8));
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// vor v11,v7,v7
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_load_si128((__m128i*)ctx.v7.u8));
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// vslh v28,v1,v0
	// vslh v29,v9,v4
	// cmpw cr6,r7,r8
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r8.s32, xer);
	// vslh v30,v11,v12
	// vslh v31,v11,v3
	// lvx128 v27,r0,r3
	_mm_store_si128((__m128i*)v27.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v7,v11,v0
	// addi r3,r9,16
	ctx.r3.s64 = ctx.r9.s64 + 16;
	// vadduhm v31,v30,v31
	_mm_store_si128((__m128i*)v31.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v30.u16), _mm_load_si128((__m128i*)v31.u16)));
	// vslh v30,v9,v12
	// vadduhm v7,v7,v11
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// vadduhm v30,v29,v30
	_mm_store_si128((__m128i*)v30.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v29.u16), _mm_load_si128((__m128i*)v30.u16)));
	// vsubshs v29,v1,v28
	// lvx128 v28,r0,r11
	_mm_store_si128((__m128i*)v28.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v7,v7,v31
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)v31.u16)));
	// vor v1,v8,v8
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)ctx.v8.u8));
	// vor v8,v10,v10
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_load_si128((__m128i*)ctx.v10.u8));
	// vor v10,v6,v6
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_load_si128((__m128i*)ctx.v6.u8));
	// lvsl v6,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vadduhm v31,v7,v30
	_mm_store_si128((__m128i*)v31.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)v30.u16)));
	// vperm v7,v28,v27,v6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v28.u8), _mm_load_si128((__m128i*)v27.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// vslh v27,v8,v4
	// vmrghb v6,v13,v7
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vadduhm v28,v31,v5
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v31.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vmrglb v30,v13,v7
	_mm_store_si128((__m128i*)v30.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vor v7,v6,v6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)ctx.v6.u8));
	// vor v6,v30,v30
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)v30.u8));
	// vslh v30,v7,v0
	// vslh v26,v6,v0
	// vsubshs v30,v13,v30
	// vadduhm v31,v29,v30
	_mm_store_si128((__m128i*)v31.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v29.u16), _mm_load_si128((__m128i*)v30.u16)));
	// vslh v29,v10,v12
	// vslh v30,v10,v3
	// vadduhm v28,v28,v31
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)v31.u16)));
	// vslh v31,v10,v0
	// vadduhm v30,v29,v30
	_mm_store_si128((__m128i*)v30.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v29.u16), _mm_load_si128((__m128i*)v30.u16)));
	// vslh v29,v8,v12
	// vadduhm v31,v31,v10
	_mm_store_si128((__m128i*)v31.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v31.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vadduhm v29,v27,v29
	_mm_store_si128((__m128i*)v29.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v27.u16), _mm_load_si128((__m128i*)v29.u16)));
	// vslh v27,v1,v0
	// vsubshs v1,v1,v27
	// vsubshs v27,v13,v26
	// vadduhm v27,v1,v27
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vsrah v1,v28,v2
	// stvx v1,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v1,v31,v30
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v31.u16), _mm_load_si128((__m128i*)v30.u16)));
	// addi r9,r9,48
	ctx.r9.s64 = ctx.r9.s64 + 48;
	// vadduhm v31,v1,v29
	_mm_store_si128((__m128i*)v31.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)v29.u16)));
	// vadduhm v31,v31,v5
	_mm_store_si128((__m128i*)v31.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v31.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vadduhm v1,v31,v27
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v31.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vsrah v1,v1,v2
	// stvx v1,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// blt cr6,0x827124e8
	if (cr6.lt) goto loc_827124E8;
	// b 0x82712818
	goto loc_82712818;
loc_827125DC:
	// li r9,16
	ctx.r9.s64 = 16;
	// stw r11,-288(r1)
	PPC_STORE_U32(ctx.r1.u32 + -288, r11.u32);
	// lvlx v11,0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// li r7,16
	ctx.r7.s64 = 16;
	// li r3,32
	ctx.r3.s64 = 32;
	// addi r27,r1,-160
	r27.s64 = ctx.r1.s64 + -160;
	// li r30,16
	r30.s64 = 16;
	// lvrx v10,r11,r9
	temp.u32 = r11.u32 + ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v10.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// li r29,16
	r29.s64 = 16;
	// vor v11,v11,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v10.u8)));
	// lvlx v9,r11,r7
	temp.u32 = r11.u32 + ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v8,r11,r3
	temp.u32 = r11.u32 + ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v8.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// vor v9,v9,v8
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v8.u8)));
	// li r28,32
	r28.s64 = 32;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// stvx v11,r0,r27
	_mm_store_si128((__m128i*)(base + ((r27.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r1,-128
	r27.s64 = ctx.r1.s64 + -128;
	// vmrghb v31,v13,v11
	_mm_store_si128((__m128i*)v31.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// stw r11,-288(r1)
	PPC_STORE_U32(ctx.r1.u32 + -288, r11.u32);
	// vmrglb v28,v13,v11
	_mm_store_si128((__m128i*)v28.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// stvx v9,r0,r27
	_mm_store_si128((__m128i*)(base + ((r27.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvrx v8,r11,r9
	temp.u32 = r11.u32 + ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v8.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// addi r9,r1,-96
	ctx.r9.s64 = ctx.r1.s64 + -96;
	// lvlx v10,0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// vor v10,v10,v8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v8.u8)));
	// lvlx v7,r11,r7
	temp.u32 = r11.u32 + ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v6,r11,r3
	temp.u32 = r11.u32 + ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// vor v1,v7,v6
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// vor v8,v31,v31
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_load_si128((__m128i*)v31.u8));
	// stvx v10,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-256
	ctx.r9.s64 = ctx.r1.s64 + -256;
	// vor v6,v28,v28
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)v28.u8));
	// stw r11,-288(r1)
	PPC_STORE_U32(ctx.r1.u32 + -288, r11.u32);
	// stvx v1,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvlx v11,0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v7,r11,r30
	temp.u32 = r11.u32 + r30.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// lvlx v30,r11,r29
	temp.u32 = r11.u32 + r29.u32;
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// vor v31,v11,v7
	_mm_store_si128((__m128i*)v31.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvrx v29,r11,r28
	temp.u32 = r11.u32 + r28.u32;
	_mm_store_si128((__m128i*)v29.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// vmrghb v7,v13,v9
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vor v29,v30,v29
	_mm_store_si128((__m128i*)v29.u8, _mm_or_si128(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)v29.u8)));
	// vmrghb v11,v13,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrglb v9,v13,v10
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrghb v10,v13,v1
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrghb v1,v13,v31
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrglb v30,v13,v31
	_mm_store_si128((__m128i*)v30.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrghb v31,v13,v29
	_mm_store_si128((__m128i*)v31.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)v29.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// ble cr6,0x82712818
	if (!cr6.gt) goto loc_82712818;
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r9,r31,32
	ctx.r9.s64 = r31.s64 + 32;
loc_827126AC:
	// vor v29,v8,v8
	_mm_store_si128((__m128i*)v29.u8, _mm_load_si128((__m128i*)ctx.v8.u8));
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// vor v8,v11,v11
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_load_si128((__m128i*)ctx.v11.u8));
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// vor v11,v1,v1
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_load_si128((__m128i*)ctx.v1.u8));
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// addi r30,r11,32
	r30.s64 = r11.s64 + 32;
	// vslh v21,v29,v0
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// vslh v22,v8,v4
	// lvx128 v26,r0,r11
	_mm_store_si128((__m128i*)v26.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v28,v11,v0
	// lvsl v1,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vslh v27,v11,v3
	// vslh v23,v11,v12
	// lvx128 v25,r0,r30
	_mm_store_si128((__m128i*)v25.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsubshs v29,v29,v21
	// addi r30,r9,-16
	r30.s64 = ctx.r9.s64 + -16;
	// vadduhm v24,v28,v11
	_mm_store_si128((__m128i*)v24.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// vor v28,v7,v7
	_mm_store_si128((__m128i*)v28.u8, _mm_load_si128((__m128i*)ctx.v7.u8));
	// vor v7,v10,v10
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)ctx.v10.u8));
	// vor v10,v31,v31
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_load_si128((__m128i*)v31.u8));
	// vslh v31,v8,v12
	// vadduhm v23,v23,v27
	_mm_store_si128((__m128i*)v23.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v23.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vor v27,v6,v6
	_mm_store_si128((__m128i*)v27.u8, _mm_load_si128((__m128i*)ctx.v6.u8));
	// vor v6,v9,v9
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)ctx.v9.u8));
	// vor v9,v30,v30
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_load_si128((__m128i*)v30.u8));
	// lvsl v30,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)v30.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vadduhm v22,v22,v31
	_mm_store_si128((__m128i*)v22.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v22.u16), _mm_load_si128((__m128i*)v31.u16)));
	// lvx128 v31,r0,r3
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r1,-272
	ctx.r3.s64 = ctx.r1.s64 + -272;
	// vadduhm v24,v24,v23
	_mm_store_si128((__m128i*)v24.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v24.u16), _mm_load_si128((__m128i*)v23.u16)));
	// vslh v23,v9,v12
	// vadduhm v24,v24,v22
	_mm_store_si128((__m128i*)v24.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v24.u16), _mm_load_si128((__m128i*)v22.u16)));
	// stvx v30,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r1,-272
	ctx.r3.s64 = ctx.r1.s64 + -272;
	// vperm v30,v26,v31,v1
	_mm_store_si128((__m128i*)v30.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v26.u8), _mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// vslh v22,v6,v4
	// vslh v26,v9,v0
	// lvx128 v1,r0,r3
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r9,-32
	ctx.r3.s64 = ctx.r9.s64 + -32;
	// vperm v1,v31,v25,v1
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)v25.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// vslh v25,v9,v3
	// vadduhm v26,v26,v9
	_mm_store_si128((__m128i*)v26.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v26.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// vmrghb v31,v13,v1
	_mm_store_si128((__m128i*)v31.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vadduhm v25,v23,v25
	_mm_store_si128((__m128i*)v25.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v23.u16), _mm_load_si128((__m128i*)v25.u16)));
	// vmrghb v1,v13,v30
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrglb v30,v13,v30
	_mm_store_si128((__m128i*)v30.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vadduhm v26,v26,v25
	_mm_store_si128((__m128i*)v26.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v26.u16), _mm_load_si128((__m128i*)v25.u16)));
	// vslh v21,v1,v0
	// vsubshs v23,v13,v21
	// vslh v21,v27,v0
	// vadduhm v29,v29,v23
	_mm_store_si128((__m128i*)v29.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v29.u16), _mm_load_si128((__m128i*)v23.u16)));
	// vslh v23,v6,v12
	// vsubshs v27,v27,v21
	// vslh v21,v10,v0
	// vor v25,v29,v29
	_mm_store_si128((__m128i*)v25.u8, _mm_load_si128((__m128i*)v29.u8));
	// vadduhm v23,v22,v23
	_mm_store_si128((__m128i*)v23.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v22.u16), _mm_load_si128((__m128i*)v23.u16)));
	// vslh v22,v30,v0
	// vadduhm v21,v21,v10
	_mm_store_si128((__m128i*)v21.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v21.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vsubshs v22,v13,v22
	// vadduhm v29,v27,v22
	_mm_store_si128((__m128i*)v29.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v27.u16), _mm_load_si128((__m128i*)v22.u16)));
	// vadduhm v27,v26,v23
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v26.u16), _mm_load_si128((__m128i*)v23.u16)));
	// vadduhm v26,v24,v5
	_mm_store_si128((__m128i*)v26.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v24.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vslh v24,v7,v4
	// vslh v23,v31,v0
	// vadduhm v27,v27,v5
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v27.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vadduhm v26,v26,v25
	_mm_store_si128((__m128i*)v26.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v26.u16), _mm_load_si128((__m128i*)v25.u16)));
	// vslh v25,v10,v12
	// vadduhm v29,v27,v29
	_mm_store_si128((__m128i*)v29.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v27.u16), _mm_load_si128((__m128i*)v29.u16)));
	// vslh v27,v10,v3
	// vsrah v29,v29,v2
	// vadduhm v27,v25,v27
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v25.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vslh v25,v7,v12
	// vadduhm v25,v24,v25
	_mm_store_si128((__m128i*)v25.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v24.u16), _mm_load_si128((__m128i*)v25.u16)));
	// vslh v24,v28,v0
	// vsubshs v28,v28,v24
	// vsubshs v24,v13,v23
	// vadduhm v24,v28,v24
	_mm_store_si128((__m128i*)v24.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)v24.u16)));
	// vsrah v28,v26,v2
	// stvx v28,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v28.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v29,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v29.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v29,v21,v27
	_mm_store_si128((__m128i*)v29.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v21.u16), _mm_load_si128((__m128i*)v27.u16)));
	// cmpw cr6,r7,r8
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r8.s32, xer);
	// vadduhm v28,v29,v25
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v29.u16), _mm_load_si128((__m128i*)v25.u16)));
	// vadduhm v28,v28,v5
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vadduhm v29,v28,v24
	_mm_store_si128((__m128i*)v29.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)v24.u16)));
	// vsrah v29,v29,v2
	// stvx v29,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v29.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r9,48
	ctx.r9.s64 = ctx.r9.s64 + 48;
	// blt cr6,0x827126ac
	if (cr6.lt) goto loc_827126AC;
loc_82712818:
	// vspltish v0,8
	// mr r11,r5
	r11.u64 = ctx.r5.u64;
	// vspltish v12,-1
	// vor v9,v13,v13
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_load_si128((__m128i*)ctx.v13.u8));
	// vspltish v11,0
	// vor v8,v2,v2
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_load_si128((__m128i*)ctx.v2.u8));
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// vslh v3,v12,v0
	// bne cr6,0x827128b4
	if (!cr6.eq) goto loc_827128B4;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x82712958
	if (!cr6.gt) goto loc_82712958;
	// mr r10,r8
	ctx.r10.u64 = ctx.r8.u64;
loc_8271284C:
	// addi r8,r9,16
	ctx.r8.s64 = ctx.r9.s64 + 16;
	// lvx128 v0,r0,r9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r7,4
	ctx.r7.s64 = 4;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// addi r9,r9,48
	ctx.r9.s64 = ctx.r9.s64 + 48;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// lvx128 v13,r0,r8
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsldoi v12,v0,v13,2
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v13.u8), 14));
	// vsldoi v10,v0,v13,4
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v13.u8), 12));
	// vsldoi v7,v0,v13,6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v13.u8), 10));
	// vadduhm v13,v12,v10
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vadduhm v0,v0,v7
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vslh v12,v13,v8
	// vsubshs v0,v9,v0
	// vadduhm v13,v13,v12
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vadduhm v13,v13,v19
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)v19.u16)));
	// vadduhm v0,v13,v0
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v0.u16)));
	// vsrah v0,v0,v20
	// vpkshus v13,v0,v0
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v0.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// vor v11,v11,v0
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vor v0,v13,v13
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_load_si128((__m128i*)ctx.v13.u8));
	// stvewx v0,r0,r11
	ea = (r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v0,r11,r7
	ea = (r11.u32 + ctx.r7.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// bne cr6,0x8271284c
	if (!cr6.eq) goto loc_8271284C;
	// b 0x82712958
	goto loc_82712958;
loc_827128B4:
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x82712958
	if (!cr6.gt) goto loc_82712958;
	// addi r10,r31,32
	ctx.r10.s64 = r31.s64 + 32;
	// mr r9,r8
	ctx.r9.u64 = ctx.r8.u64;
loc_827128C4:
	// addi r8,r10,-32
	ctx.r8.s64 = ctx.r10.s64 + -32;
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r10,-16
	ctx.r7.s64 = ctx.r10.s64 + -16;
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// lvx128 v13,r0,r8
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v0,r0,r7
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsldoi v7,v13,v0,4
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v0.u8), 12));
	// vsldoi v10,v13,v0,2
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v0.u8), 14));
	// vsldoi v5,v0,v12,2
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v12.u8), 14));
	// vsldoi v4,v0,v12,4
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v12.u8), 12));
	// vsldoi v12,v0,v12,6
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v12.u8), 10));
	// vadduhm v10,v10,v7
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vsldoi v6,v13,v0,6
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v0.u8), 10));
	// vadduhm v12,v0,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vslh v7,v10,v8
	// vadduhm v13,v13,v6
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v13.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vadduhm v6,v5,v4
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v5.u16), _mm_load_si128((__m128i*)ctx.v4.u16)));
	// vsubshs v12,v9,v12
	// vadduhm v0,v10,v7
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vsubshs v13,v9,v13
	// vadduhm v10,v0,v19
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)v19.u16)));
	// vor v0,v6,v6
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_load_si128((__m128i*)ctx.v6.u8));
	// vadduhm v13,v10,v13
	_mm_store_si128((__m128i*)ctx.v13.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v13.u16)));
	// vslh v10,v0,v8
	// vadduhm v0,v0,v10
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vadduhm v0,v0,v19
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)v19.u16)));
	// vadduhm v12,v0,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vsrah v0,v13,v20
	// vsrah v13,v12,v20
	// vor v12,v11,v0
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vpkshus v0,v0,v13
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v13.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// vor v11,v12,v13
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// bne cr6,0x827128c4
	if (!cr6.eq) goto loc_827128C4;
loc_82712958:
	// vand v0,v11,v3
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_and_si128(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// vcmpgtuh. v0,v0,v9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_cmpgt_epu16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// mfocrf r11,2
	r11.u64 = (cr6.lt << 7) | (cr6.gt << 6) | (cr6.eq << 5) | (cr6.so << 4);
	// not r11,r11
	r11.u64 = ~r11.u64;
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// b 0x8239bd44
	return;
}

__attribute__((alias("__imp__sub_82712970"))) PPC_WEAK_FUNC(sub_82712970);
PPC_FUNC_IMPL(__imp__sub_82712970) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcf4
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,1088(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1088);
	// vspltish v13,6
	// lwz r30,1100(r7)
	r30.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1100);
	// mr r31,r10
	r31.u64 = ctx.r10.u64;
	// lwz r28,260(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 260);
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// addi r3,r3,-1
	ctx.r3.s64 = ctx.r3.s64 + -1;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// addi r11,r1,96
	r11.s64 = ctx.r1.s64 + 96;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lvx128 v0,r0,r11
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// vsplth v0,v0,1
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_set1_epi16(short(0xD0C))));
	// stvx v13,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,96
	r11.s64 = ctx.r1.s64 + 96;
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x82700240
	sub_82700240(ctx, base);
	// cntlzw r11,r28
	r11.u64 = r28.u32 == 0 ? 32 : __builtin_clz(r28.u32);
	// vspltish v0,8
	// li r8,1
	ctx.r8.s64 = 1;
	// vspltish v12,-1
	// rlwinm r10,r11,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// vspltisb v6,0
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_set1_epi8(char(0x0)));
	// mr r11,r29
	r11.u64 = r29.u64;
	// vspltish v5,1
	// and r9,r10,r31
	ctx.r9.u64 = ctx.r10.u64 & r31.u64;
	// vspltish v13,2
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// vslh v31,v12,v0
	// addi r9,r9,3
	ctx.r9.s64 = ctx.r9.s64 + 3;
	// vspltish v11,4
	// vspltish v4,5
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// vspltish v8,0
	// slw r9,r8,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x20 ? 0 : (ctx.r8.u32 << (ctx.r9.u8 & 0x3F));
	// bne cr6,0x82712abc
	if (!cr6.eq) goto loc_82712ABC;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x82712bb8
	if (!cr6.gt) goto loc_82712BB8;
loc_82712A20:
	// addi r8,r10,16
	ctx.r8.s64 = ctx.r10.s64 + 16;
	// lvx128 v0,r0,r10
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// lvx128 v10,r0,r8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r1,96
	ctx.r8.s64 = ctx.r1.s64 + 96;
	// vsldoi v12,v0,v10,4
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v10.u8), 12));
	// vsldoi v9,v0,v10,2
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v10.u8), 14));
	// vsldoi v7,v0,v10,6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v10.u8), 10));
	// vslh v10,v12,v13
	// vslh v3,v12,v4
	// vslh v2,v12,v11
	// vslh v7,v7,v13
	// vadduhm v12,v10,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vadduhm v10,v2,v3
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v3.u16)));
	// vslh v3,v9,v11
	// vslh v9,v9,v5
	// vsubshs v7,v6,v7
	// vadduhm v9,v9,v3
	_mm_store_si128((__m128i*)ctx.v9.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v3.u16)));
	// vslh v3,v0,v13
	// vsubshs v0,v0,v3
	// vadduhm v7,v0,v7
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vadduhm v0,v12,v10
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// lvx128 v10,r0,r8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r1,112
	ctx.r8.s64 = ctx.r1.s64 + 112;
	// vadduhm v12,v0,v9
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// vadduhm v12,v12,v10
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vadduhm v0,v12,v7
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// lvx128 v12,r0,r8
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r8,4
	ctx.r8.s64 = 4;
	// vsrah v0,v0,v12
	// vor v8,v8,v0
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vpkshus v0,v0,v0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v0.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// stvewx v0,r0,r11
	ea = (r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v0,r11,r8
	ea = (r11.u32 + ctx.r8.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// bne cr6,0x82712a20
	if (!cr6.eq) goto loc_82712A20;
	// b 0x82712bb8
	goto loc_82712BB8;
loc_82712ABC:
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x82712bb8
	if (!cr6.gt) goto loc_82712BB8;
	// addi r10,r30,32
	ctx.r10.s64 = r30.s64 + 32;
loc_82712AC8:
	// addi r8,r10,-32
	ctx.r8.s64 = ctx.r10.s64 + -32;
	// lvx128 v9,r0,r10
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r10,-16
	ctx.r7.s64 = ctx.r10.s64 + -16;
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// lvx128 v12,r0,r8
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r1,96
	ctx.r8.s64 = ctx.r1.s64 + 96;
	// lvx128 v0,r0,r7
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsldoi v10,v12,v0,4
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8), 12));
	// vsldoi v7,v12,v0,2
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8), 14));
	// vsldoi v2,v12,v0,6
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8), 10));
	// vslh v3,v10,v13
	// vslh v30,v10,v11
	// vslh v1,v10,v4
	// vadduhm v3,v3,v10
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vslh v10,v7,v11
	// vslh v7,v7,v5
	// vadduhm v1,v30,v1
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v30.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vslh v30,v12,v13
	// vadduhm v7,v7,v10
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vslh v10,v2,v13
	// vsubshs v12,v12,v30
	// vadduhm v3,v3,v1
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// lvx128 v1,r0,r8
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r1,112
	ctx.r8.s64 = ctx.r1.s64 + 112;
	// vsubshs v10,v6,v10
	// vadduhm v7,v3,v7
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vadduhm v2,v12,v10
	_mm_store_si128((__m128i*)ctx.v2.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vsldoi v12,v0,v9,4
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v9.u8), 12));
	// vsldoi v10,v0,v9,2
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v9.u8), 14));
	// vadduhm v3,v7,v1
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vsldoi v9,v0,v9,6
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v9.u8), 10));
	// vslh v7,v12,v13
	// vslh v30,v12,v4
	// vslh v29,v12,v11
	// vslh v9,v9,v13
	// vadduhm v12,v7,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vadduhm v7,v29,v30
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v29.u16), _mm_load_si128((__m128i*)v30.u16)));
	// vslh v30,v10,v11
	// vslh v10,v10,v5
	// vsubshs v9,v6,v9
	// vadduhm v12,v12,v7
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vadduhm v10,v10,v30
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)v30.u16)));
	// vslh v30,v0,v13
	// vadduhm v10,v12,v10
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vsubshs v0,v0,v30
	// vadduhm v10,v10,v1
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vadduhm v30,v0,v9
	_mm_store_si128((__m128i*)v30.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// vadduhm v0,v3,v2
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v2.u16)));
	// lvx128 v3,r0,r8
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v12,v10,v30
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)v30.u16)));
	// vsrah v0,v0,v3
	// vsrah v12,v12,v3
	// vor v9,v8,v0
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vpkshus v0,v0,v12
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// vor v8,v9,v12
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v12.u8)));
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// bne cr6,0x82712ac8
	if (!cr6.eq) goto loc_82712AC8;
loc_82712BB8:
	// vand v0,v8,v31
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_and_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)v31.u8)));
	// vcmpgtuh. v0,v0,v6
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_cmpgt_epu16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// mfocrf r11,2
	r11.u64 = (cr6.lt << 7) | (cr6.gt << 6) | (cr6.eq << 5) | (cr6.so << 4);
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x8239bd44
	return;
}

__attribute__((alias("__imp__sub_82712BD4"))) PPC_WEAK_FUNC(sub_82712BD4);
PPC_FUNC_IMPL(__imp__sub_82712BD4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_82712BD8"))) PPC_WEAK_FUNC(sub_82712BD8);
PPC_FUNC_IMPL(__imp__sub_82712BD8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCVRegister v19{};
	PPCVRegister v20{};
	PPCVRegister v21{};
	PPCVRegister v22{};
	PPCVRegister v23{};
	PPCVRegister v24{};
	PPCVRegister v25{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcf4
	// lwz r9,1076(r7)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1076);
	// vspltish v31,5
	// stw r10,76(r1)
	PPC_STORE_U32(ctx.r1.u32 + 76, ctx.r10.u32);
	// vspltisb v13,0
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_set1_epi8(char(0x0)));
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// vspltish v30,1
	// li r8,1
	ctx.r8.s64 = 1;
	// vspltish v0,2
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// vspltish v12,4
	// stw r9,-240(r1)
	PPC_STORE_U32(ctx.r1.u32 + -240, ctx.r9.u32);
	// vspltish v20,7
	// lwz r9,1092(r7)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1092);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// lwz r31,1100(r7)
	r31.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1100);
	// addi r7,r1,-240
	ctx.r7.s64 = ctx.r1.s64 + -240;
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// vor v29,v31,v31
	_mm_store_si128((__m128i*)v29.u8, _mm_load_si128((__m128i*)v31.u8));
	// stw r4,28(r1)
	PPC_STORE_U32(ctx.r1.u32 + 28, ctx.r4.u32);
	// addi r30,r11,3
	r30.s64 = r11.s64 + 3;
	// stw r5,36(r1)
	PPC_STORE_U32(ctx.r1.u32 + 36, ctx.r5.u32);
	// stw r9,-224(r1)
	PPC_STORE_U32(ctx.r1.u32 + -224, ctx.r9.u32);
	// addi r9,r1,-240
	ctx.r9.s64 = ctx.r1.s64 + -240;
	// addi r11,r1,-224
	r11.s64 = ctx.r1.s64 + -224;
	// stw r6,44(r1)
	PPC_STORE_U32(ctx.r1.u32 + 44, ctx.r6.u32);
	// stw r31,-204(r1)
	PPC_STORE_U32(ctx.r1.u32 + -204, r31.u32);
	// lvx128 v11,r0,r9
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// vsplth v2,v11,1
	_mm_store_si128((__m128i*)ctx.v2.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_set1_epi16(short(0xD0C))));
	// lvx128 v10,r0,r11
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r9,3
	ctx.r9.s64 = ctx.r9.s64 + 3;
	// vsplth v19,v10,1
	_mm_store_si128((__m128i*)v19.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_set1_epi16(short(0xD0C))));
	// addi r11,r1,-64
	r11.s64 = ctx.r1.s64 + -64;
	// cmpwi cr6,r9,3
	cr6.compare<int32_t>(ctx.r9.s32, 3, xer);
	// addi r9,r1,-176
	ctx.r9.s64 = ctx.r1.s64 + -176;
	// stvx v2,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r1,-224
	ctx.r7.s64 = ctx.r1.s64 + -224;
	// stvx v20,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v20.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// subf r11,r4,r3
	r11.s64 = ctx.r3.s64 - ctx.r4.s64;
	// stvx v31,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-192
	ctx.r9.s64 = ctx.r1.s64 + -192;
	// slw r8,r8,r30
	ctx.r8.u64 = r30.u8 & 0x20 ? 0 : (ctx.r8.u32 << (r30.u8 & 0x3F));
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stvx v19,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v19.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v13,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-112
	ctx.r9.s64 = ctx.r1.s64 + -112;
	// stw r8,-208(r1)
	PPC_STORE_U32(ctx.r1.u32 + -208, ctx.r8.u32);
	// stvx v30,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-144
	ctx.r9.s64 = ctx.r1.s64 + -144;
	// stvx v0,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-80
	ctx.r9.s64 = ctx.r1.s64 + -80;
	// stvx v12,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-256
	ctx.r9.s64 = ctx.r1.s64 + -256;
	// stvx v29,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v29.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bne cr6,0x82712e2c
	if (!cr6.eq) goto loc_82712E2C;
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r7,r11,r4
	ctx.r7.u64 = r11.u64 + ctx.r4.u64;
	// lvsl v7,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r30,r1,-256
	r30.s64 = ctx.r1.s64 + -256;
	// add r11,r7,r4
	r11.u64 = ctx.r7.u64 + ctx.r4.u64;
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
	// lvx128 v10,r0,r3
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r7,16
	ctx.r3.s64 = ctx.r7.s64 + 16;
	// lvx128 v9,r0,r7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// stvx v11,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v11,v11,v10,v7
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvsl v6,r0,r7
	temp.u32 = ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r7,r11,16
	ctx.r7.s64 = r11.s64 + 16;
	// lvsl v1,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// lvx128 v8,r0,r3
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r1,-256
	ctx.r3.s64 = ctx.r1.s64 + -256;
	// vmrghb v5,v13,v11
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrglb v4,v13,v11
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// stvx v10,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r1,-256
	ctx.r3.s64 = ctx.r1.s64 + -256;
	// vperm v10,v9,v8,v6
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// stvx v7,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v11,v13,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// lvx128 v3,r0,r11
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrglb v10,v13,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// lvx128 v28,r0,r7
	_mm_store_si128((__m128i*)v28.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v8,v3,v28,v1
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)v28.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// vmrghb v9,v13,v8
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrglb v8,v13,v8
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// ble cr6,0x82713060
	if (!cr6.gt) goto loc_82713060;
	// li r7,0
	ctx.r7.s64 = 0;
loc_82712D40:
	// vslh v3,v11,v12
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// vslh v6,v11,v29
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// vslh v1,v9,v30
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// vslh v7,v11,v0
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// vslh v5,v5,v0
	// vadduhm v6,v3,v6
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// lvx128 v28,r0,r11
	_mm_store_si128((__m128i*)v28.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v3,v9,v12
	// cmpw cr6,r7,r8
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r8.s32, xer);
	// vadduhm v7,v7,v11
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// lvx128 v27,r0,r3
	_mm_store_si128((__m128i*)v27.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsubshs v5,v13,v5
	// addi r3,r9,16
	ctx.r3.s64 = ctx.r9.s64 + 16;
	// vadduhm v3,v1,v3
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)ctx.v3.u16)));
	// vslh v1,v10,v0
	// vadduhm v7,v7,v6
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// vadduhm v26,v1,v10
	_mm_store_si128((__m128i*)v26.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// lvsl v1,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vperm v6,v28,v27,v1
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v28.u8), _mm_load_si128((__m128i*)v27.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// vadduhm v3,v7,v3
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v3.u16)));
	// vslh v28,v8,v30
	// vslh v27,v4,v0
	// vmrghb v7,v13,v6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vadduhm v3,v3,v2
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v2.u16)));
	// vmrglb v6,v13,v6
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vsubshs v27,v13,v27
	// vslh v1,v7,v0
	// vsubshs v1,v7,v1
	// vadduhm v5,v1,v5
	_mm_store_si128((__m128i*)ctx.v5.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vslh v1,v10,v12
	// vadduhm v3,v3,v5
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vslh v5,v10,v29
	// vsrah v3,v3,v31
	// vadduhm v1,v1,v5
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vslh v5,v8,v12
	// stvx v3,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r9,48
	ctx.r9.s64 = ctx.r9.s64 + 48;
	// vadduhm v28,v28,v5
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vslh v5,v6,v0
	// vsubshs v4,v6,v5
	// vor v5,v11,v11
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_load_si128((__m128i*)ctx.v11.u8));
	// vor v11,v9,v9
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_load_si128((__m128i*)ctx.v9.u8));
	// vor v9,v7,v7
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_load_si128((__m128i*)ctx.v7.u8));
	// vadduhm v7,v26,v1
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v26.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vadduhm v27,v4,v27
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v4.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vor v4,v10,v10
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_load_si128((__m128i*)ctx.v10.u8));
	// vor v10,v8,v8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_load_si128((__m128i*)ctx.v8.u8));
	// vor v8,v6,v6
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_load_si128((__m128i*)ctx.v6.u8));
	// vadduhm v6,v7,v28
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)v28.u16)));
	// vadduhm v6,v6,v2
	_mm_store_si128((__m128i*)ctx.v6.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)ctx.v2.u16)));
	// vadduhm v7,v6,v27
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v6.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vsrah v7,v7,v31
	// stvx v7,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// blt cr6,0x82712d40
	if (cr6.lt) goto loc_82712D40;
	// b 0x82713060
	goto loc_82713060;
loc_82712E2C:
	// li r9,16
	ctx.r9.s64 = 16;
	// stw r11,-288(r1)
	PPC_STORE_U32(ctx.r1.u32 + -288, r11.u32);
	// lvlx v11,0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// li r7,16
	ctx.r7.s64 = 16;
	// li r3,32
	ctx.r3.s64 = 32;
	// addi r27,r1,-160
	r27.s64 = ctx.r1.s64 + -160;
	// li r30,16
	r30.s64 = 16;
	// lvrx v10,r11,r9
	temp.u32 = r11.u32 + ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v10.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// li r29,16
	r29.s64 = 16;
	// vor v11,v11,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v10.u8)));
	// lvlx v9,r11,r7
	temp.u32 = r11.u32 + ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v8,r11,r3
	temp.u32 = r11.u32 + ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v8.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// vor v10,v9,v8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v8.u8)));
	// li r28,32
	r28.s64 = 32;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// stvx v11,r0,r27
	_mm_store_si128((__m128i*)(base + ((r27.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r1,-128
	r27.s64 = ctx.r1.s64 + -128;
	// vmrghb v4,v13,v11
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// stw r11,-288(r1)
	PPC_STORE_U32(ctx.r1.u32 + -288, r11.u32);
	// vmrglb v28,v13,v11
	_mm_store_si128((__m128i*)v28.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// stvx v10,r0,r27
	_mm_store_si128((__m128i*)(base + ((r27.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vor v11,v4,v4
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_load_si128((__m128i*)ctx.v4.u8));
	// lvrx v8,r11,r9
	temp.u32 = r11.u32 + ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v8.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// addi r9,r1,-96
	ctx.r9.s64 = ctx.r1.s64 + -96;
	// lvlx v9,0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// vmrghb v10,v13,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vor v7,v9,v8
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v8.u8)));
	// lvlx v6,r11,r7
	temp.u32 = r11.u32 + ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v5,r11,r3
	temp.u32 = r11.u32 + ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v5.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// vor v5,v6,v5
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// vor v9,v28,v28
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_load_si128((__m128i*)v28.u8));
	// stvx v7,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-272
	ctx.r9.s64 = ctx.r1.s64 + -272;
	// stw r11,-288(r1)
	PPC_STORE_U32(ctx.r1.u32 + -288, r11.u32);
	// stvx v5,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvlx v8,0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v6,r11,r30
	temp.u32 = r11.u32 + r30.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// lvlx v3,r11,r29
	temp.u32 = r11.u32 + r29.u32;
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// vor v4,v8,v6
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvrx v1,r11,r28
	temp.u32 = r11.u32 + r28.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// vmrghb v8,v13,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vor v3,v3,v1
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// vmrglb v6,v13,v7
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrghb v7,v13,v5
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrghb v5,v13,v4
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrglb v4,v13,v4
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrghb v3,v13,v3
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// ble cr6,0x82713060
	if (!cr6.gt) goto loc_82713060;
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r9,r31,32
	ctx.r9.s64 = r31.s64 + 32;
loc_82712EFC:
	// vor v27,v11,v11
	_mm_store_si128((__m128i*)v27.u8, _mm_load_si128((__m128i*)ctx.v11.u8));
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// vor v11,v8,v8
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_load_si128((__m128i*)ctx.v8.u8));
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// vor v22,v9,v9
	_mm_store_si128((__m128i*)v22.u8, _mm_load_si128((__m128i*)ctx.v9.u8));
	// addi r30,r11,32
	r30.s64 = r11.s64 + 32;
	// vor v9,v6,v6
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_load_si128((__m128i*)ctx.v6.u8));
	// vor v6,v4,v4
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)ctx.v4.u8));
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// vslh v8,v11,v0
	// lvx128 v28,r0,r11
	_mm_store_si128((__m128i*)v28.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v23,v11,v12
	// lvsl v1,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vslh v24,v11,v29
	// cmpw cr6,r7,r8
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r8.s32, xer);
	// lvx128 v26,r0,r30
	_mm_store_si128((__m128i*)v26.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v27,v27,v0
	// vadduhm v25,v8,v11
	_mm_store_si128((__m128i*)v25.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v8.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// addi r30,r9,-16
	r30.s64 = ctx.r9.s64 + -16;
	// vor v8,v5,v5
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_load_si128((__m128i*)ctx.v5.u8));
	// vadduhm v24,v23,v24
	_mm_store_si128((__m128i*)v24.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v23.u16), _mm_load_si128((__m128i*)v24.u16)));
	// vor v23,v10,v10
	_mm_store_si128((__m128i*)v23.u8, _mm_load_si128((__m128i*)ctx.v10.u8));
	// vor v10,v7,v7
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_load_si128((__m128i*)ctx.v7.u8));
	// vor v7,v3,v3
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)ctx.v3.u8));
	// vslh v5,v8,v12
	// vslh v3,v8,v30
	// vadduhm v25,v25,v24
	_mm_store_si128((__m128i*)v25.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v25.u16), _mm_load_si128((__m128i*)v24.u16)));
	// vsubshs v27,v13,v27
	// vslh v24,v9,v12
	// vadduhm v21,v3,v5
	_mm_store_si128((__m128i*)v21.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// lvx128 v5,r0,r3
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v4,v28,v5,v1
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v28.u8), _mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// lvsl v3,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vperm v5,v5,v26,v3
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)v26.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// vslh v26,v9,v29
	// vslh v28,v9,v0
	// addi r3,r9,-32
	ctx.r3.s64 = ctx.r9.s64 + -32;
	// vadduhm v25,v25,v21
	_mm_store_si128((__m128i*)v25.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v25.u16), _mm_load_si128((__m128i*)v21.u16)));
	// vmrghb v3,v13,v4
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vslh v22,v22,v0
	// vmrghb v1,v13,v5
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vadduhm v26,v24,v26
	_mm_store_si128((__m128i*)v26.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v24.u16), _mm_load_si128((__m128i*)v26.u16)));
	// vmrglb v4,v13,v4
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vadduhm v28,v28,v9
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// vslh v24,v6,v30
	// vor v5,v3,v3
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_load_si128((__m128i*)ctx.v3.u8));
	// vor v3,v1,v1
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_load_si128((__m128i*)ctx.v1.u8));
	// vslh v21,v4,v0
	// vadduhm v28,v28,v26
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)v26.u16)));
	// vslh v1,v5,v0
	// vsubshs v1,v5,v1
	// vadduhm v1,v1,v27
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vslh v27,v6,v12
	// vor v26,v1,v1
	_mm_store_si128((__m128i*)v26.u8, _mm_load_si128((__m128i*)ctx.v1.u8));
	// vadduhm v27,v24,v27
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v24.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vsubshs v24,v4,v21
	// vsubshs v21,v13,v22
	// vslh v22,v10,v0
	// vadduhm v1,v28,v27
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vadduhm v27,v25,v2
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v25.u16), _mm_load_si128((__m128i*)ctx.v2.u16)));
	// vadduhm v28,v24,v21
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v24.u16), _mm_load_si128((__m128i*)v21.u16)));
	// vslh v25,v7,v30
	// vadduhm v1,v1,v2
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)ctx.v2.u16)));
	// vadduhm v27,v27,v26
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v27.u16), _mm_load_si128((__m128i*)v26.u16)));
	// vslh v26,v10,v12
	// vslh v24,v23,v0
	// vadduhm v1,v1,v28
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)v28.u16)));
	// vslh v28,v10,v29
	// vsrah v27,v27,v31
	// vsubshs v24,v13,v24
	// vsrah v1,v1,v31
	// vadduhm v28,v26,v28
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v26.u16), _mm_load_si128((__m128i*)v28.u16)));
	// vslh v26,v7,v12
	// stvx v27,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v27.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v22,v22,v10
	_mm_store_si128((__m128i*)v22.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v22.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// stvx v1,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v26,v25,v26
	_mm_store_si128((__m128i*)v26.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v25.u16), _mm_load_si128((__m128i*)v26.u16)));
	// vslh v25,v3,v0
	// vsubshs v25,v3,v25
	// vadduhm v25,v25,v24
	_mm_store_si128((__m128i*)v25.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v25.u16), _mm_load_si128((__m128i*)v24.u16)));
	// vadduhm v1,v22,v28
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v22.u16), _mm_load_si128((__m128i*)v28.u16)));
	// vadduhm v28,v1,v26
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)v26.u16)));
	// vadduhm v28,v28,v2
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)ctx.v2.u16)));
	// vadduhm v1,v28,v25
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)v25.u16)));
	// vsrah v1,v1,v31
	// stvx v1,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r9,48
	ctx.r9.s64 = ctx.r9.s64 + 48;
	// blt cr6,0x82712efc
	if (cr6.lt) goto loc_82712EFC;
loc_82713060:
	// vspltish v11,8
	// vor v5,v30,v30
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_load_si128((__m128i*)v30.u8));
	// vspltish v10,-1
	// vor v6,v13,v13
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)ctx.v13.u8));
	// mr r11,r5
	r11.u64 = ctx.r5.u64;
	// vspltish v8,0
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
	// vor v13,v0,v0
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_load_si128((__m128i*)ctx.v0.u8));
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// vor v4,v31,v31
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_load_si128((__m128i*)v31.u8));
	// vslh v30,v10,v11
	// vor v11,v12,v12
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_load_si128((__m128i*)ctx.v12.u8));
	// bne cr6,0x8271312c
	if (!cr6.eq) goto loc_8271312C;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x8271321c
	if (!cr6.gt) goto loc_8271321C;
	// mr r10,r8
	ctx.r10.u64 = ctx.r8.u64;
loc_827130A0:
	// addi r8,r9,16
	ctx.r8.s64 = ctx.r9.s64 + 16;
	// lvx128 v0,r0,r9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// addi r9,r9,48
	ctx.r9.s64 = ctx.r9.s64 + 48;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// lvx128 v10,r0,r8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r8,4
	ctx.r8.s64 = 4;
	// vsldoi v12,v0,v10,4
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v10.u8), 12));
	// vsldoi v9,v0,v10,2
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v10.u8), 14));
	// vsldoi v7,v0,v10,6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v10.u8), 10));
	// vslh v10,v12,v13
	// vslh v3,v12,v4
	// vslh v2,v12,v11
	// vslh v7,v7,v13
	// vadduhm v12,v10,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vadduhm v10,v2,v3
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v3.u16)));
	// vslh v3,v9,v11
	// vslh v9,v9,v5
	// vsubshs v7,v6,v7
	// vadduhm v9,v9,v3
	_mm_store_si128((__m128i*)ctx.v9.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v3.u16)));
	// vslh v3,v0,v13
	// vsubshs v0,v0,v3
	// vadduhm v7,v0,v7
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vadduhm v0,v12,v10
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vadduhm v12,v0,v9
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// vadduhm v12,v12,v19
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)v19.u16)));
	// vadduhm v0,v12,v7
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vsrah v0,v0,v20
	// vor v8,v8,v0
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vpkshus v0,v0,v0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v0.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// stvewx v0,r0,r11
	ea = (r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v0,r11,r8
	ea = (r11.u32 + ctx.r8.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// bne cr6,0x827130a0
	if (!cr6.eq) goto loc_827130A0;
	// b 0x8271321c
	goto loc_8271321C;
loc_8271312C:
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x8271321c
	if (!cr6.gt) goto loc_8271321C;
	// addi r10,r31,32
	ctx.r10.s64 = r31.s64 + 32;
	// mr r9,r8
	ctx.r9.u64 = ctx.r8.u64;
loc_8271313C:
	// addi r8,r10,-32
	ctx.r8.s64 = ctx.r10.s64 + -32;
	// lvx128 v9,r0,r10
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r10,-16
	ctx.r7.s64 = ctx.r10.s64 + -16;
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// lvx128 v12,r0,r8
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v0,r0,r7
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsldoi v10,v12,v0,4
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8), 12));
	// vsldoi v7,v12,v0,2
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8), 14));
	// vsldoi v2,v12,v0,6
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8), 10));
	// vslh v3,v10,v13
	// vslh v31,v10,v11
	// vslh v1,v10,v4
	// vadduhm v3,v3,v10
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vslh v10,v7,v11
	// vslh v7,v7,v5
	// vadduhm v1,v31,v1
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v31.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vslh v31,v12,v13
	// vadduhm v7,v7,v10
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vslh v10,v2,v13
	// vsubshs v12,v12,v31
	// vadduhm v3,v3,v1
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vsubshs v10,v6,v10
	// vadduhm v7,v3,v7
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vadduhm v2,v12,v10
	_mm_store_si128((__m128i*)ctx.v2.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vsldoi v12,v0,v9,4
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v9.u8), 12));
	// vsldoi v10,v0,v9,2
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v9.u8), 14));
	// vadduhm v3,v7,v19
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)v19.u16)));
	// vsldoi v9,v0,v9,6
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v9.u8), 10));
	// vslh v7,v12,v13
	// vslh v1,v12,v4
	// vslh v31,v12,v11
	// vslh v9,v9,v13
	// vadduhm v12,v7,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vadduhm v7,v31,v1
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v31.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vslh v1,v10,v11
	// vslh v10,v10,v5
	// vsubshs v9,v6,v9
	// vadduhm v12,v12,v7
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vadduhm v10,v10,v1
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vslh v1,v0,v13
	// vadduhm v10,v12,v10
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vsubshs v0,v0,v1
	// vadduhm v10,v10,v19
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)v19.u16)));
	// vadduhm v1,v0,v9
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// vadduhm v0,v3,v2
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v2.u16)));
	// vadduhm v12,v10,v1
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vsrah v0,v0,v20
	// vsrah v12,v12,v20
	// vor v9,v8,v0
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vpkshus v0,v0,v12
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// vor v8,v9,v12
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v12.u8)));
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// bne cr6,0x8271313c
	if (!cr6.eq) goto loc_8271313C;
loc_8271321C:
	// vand v0,v8,v30
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_and_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)v30.u8)));
	// vcmpgtuh. v0,v0,v6
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_cmpgt_epu16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// mfocrf r11,2
	r11.u64 = (cr6.lt << 7) | (cr6.gt << 6) | (cr6.eq << 5) | (cr6.so << 4);
	// not r11,r11
	r11.u64 = ~r11.u64;
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// b 0x8239bd44
	return;
}

__attribute__((alias("__imp__sub_82713234"))) PPC_WEAK_FUNC(sub_82713234);
PPC_FUNC_IMPL(__imp__sub_82713234) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_82713238"))) PPC_WEAK_FUNC(sub_82713238);
PPC_FUNC_IMPL(__imp__sub_82713238) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCVRegister v23{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcf4
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,1084(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1084);
	// mr r31,r10
	r31.u64 = ctx.r10.u64;
	// lwz r10,1092(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1092);
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// lwz r30,1100(r7)
	r30.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1100);
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// lwz r28,292(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 292);
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// vspltish v1,3
	// stw r11,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r11.u32);
	// subf r11,r4,r3
	r11.s64 = ctx.r3.s64 - ctx.r4.s64;
	// stw r10,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r10.u32);
	// addi r10,r1,128
	ctx.r10.s64 = ctx.r1.s64 + 128;
	// addi r3,r11,-1
	ctx.r3.s64 = r11.s64 + -1;
	// vspltish v24,7
	// rlwinm r11,r31,1,0,30
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// addi r6,r11,3
	ctx.r6.s64 = r11.s64 + 3;
	// lvx128 v0,r0,r10
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsplth v23,v0,1
	_mm_store_si128((__m128i*)v23.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_set1_epi16(short(0xD0C))));
	// addi r11,r1,144
	r11.s64 = ctx.r1.s64 + 144;
	// lvx128 v0,r0,r11
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsplth v2,v0,1
	_mm_store_si128((__m128i*)ctx.v2.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_set1_epi16(short(0xD0C))));
	// bl 0x82700aa0
	sub_82700AA0(ctx, base);
	// cntlzw r11,r28
	r11.u64 = r28.u32 == 0 ? 32 : __builtin_clz(r28.u32);
	// vspltish v0,8
	// li r8,1
	ctx.r8.s64 = 1;
	// vspltish v12,-1
	// rlwinm r10,r11,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// vspltisb v6,0
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_set1_epi8(char(0x0)));
	// mr r11,r29
	r11.u64 = r29.u64;
	// vspltish v5,1
	// and r9,r10,r31
	ctx.r9.u64 = ctx.r10.u64 & r31.u64;
	// vspltish v13,2
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// vslh v31,v12,v0
	// addi r9,r9,3
	ctx.r9.s64 = ctx.r9.s64 + 3;
	// vspltish v11,4
	// vspltish v4,5
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// vspltish v8,0
	// slw r9,r8,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x20 ? 0 : (ctx.r8.u32 << (ctx.r9.u8 & 0x3F));
	// bne cr6,0x82713388
	if (!cr6.eq) goto loc_82713388;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x82713474
	if (!cr6.gt) goto loc_82713474;
loc_827132FC:
	// addi r8,r10,16
	ctx.r8.s64 = ctx.r10.s64 + 16;
	// lvx128 v0,r0,r10
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// lvx128 v10,r0,r8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r8,4
	ctx.r8.s64 = 4;
	// vsldoi v12,v0,v10,4
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v10.u8), 12));
	// vsldoi v9,v0,v10,2
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v10.u8), 14));
	// vsldoi v7,v0,v10,6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v10.u8), 10));
	// vslh v10,v12,v13
	// vslh v3,v12,v4
	// vslh v2,v12,v11
	// vslh v7,v7,v13
	// vadduhm v12,v10,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vadduhm v10,v2,v3
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v3.u16)));
	// vslh v3,v9,v11
	// vslh v9,v9,v5
	// vsubshs v7,v6,v7
	// vadduhm v9,v9,v3
	_mm_store_si128((__m128i*)ctx.v9.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v3.u16)));
	// vslh v3,v0,v13
	// vsubshs v0,v0,v3
	// vadduhm v7,v0,v7
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vadduhm v0,v12,v10
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vadduhm v12,v0,v9
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// vadduhm v12,v12,v23
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)v23.u16)));
	// vadduhm v0,v12,v7
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vsrah v0,v0,v24
	// vor v8,v8,v0
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vpkshus v0,v0,v0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v0.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// stvewx v0,r0,r11
	ea = (r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v0,r11,r8
	ea = (r11.u32 + ctx.r8.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// bne cr6,0x827132fc
	if (!cr6.eq) goto loc_827132FC;
	// b 0x82713474
	goto loc_82713474;
loc_82713388:
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x82713474
	if (!cr6.gt) goto loc_82713474;
	// addi r10,r30,32
	ctx.r10.s64 = r30.s64 + 32;
loc_82713394:
	// addi r8,r10,-32
	ctx.r8.s64 = ctx.r10.s64 + -32;
	// lvx128 v9,r0,r10
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r10,-16
	ctx.r7.s64 = ctx.r10.s64 + -16;
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// lvx128 v12,r0,r8
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v0,r0,r7
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsldoi v10,v12,v0,4
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8), 12));
	// vsldoi v7,v12,v0,2
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8), 14));
	// vsldoi v2,v12,v0,6
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8), 10));
	// vslh v3,v10,v13
	// vslh v30,v10,v11
	// vslh v1,v10,v4
	// vadduhm v3,v3,v10
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vslh v10,v7,v11
	// vslh v7,v7,v5
	// vadduhm v1,v30,v1
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v30.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vslh v30,v12,v13
	// vadduhm v7,v7,v10
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vslh v10,v2,v13
	// vsubshs v12,v12,v30
	// vadduhm v3,v3,v1
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vsubshs v10,v6,v10
	// vadduhm v7,v3,v7
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vadduhm v2,v12,v10
	_mm_store_si128((__m128i*)ctx.v2.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vsldoi v12,v0,v9,4
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v9.u8), 12));
	// vsldoi v10,v0,v9,2
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v9.u8), 14));
	// vadduhm v3,v7,v23
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)v23.u16)));
	// vsldoi v9,v0,v9,6
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v9.u8), 10));
	// vslh v7,v12,v13
	// vslh v1,v12,v4
	// vslh v30,v12,v11
	// vslh v9,v9,v13
	// vadduhm v12,v7,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vadduhm v7,v30,v1
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v30.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vslh v1,v10,v11
	// vslh v10,v10,v5
	// vsubshs v9,v6,v9
	// vadduhm v12,v12,v7
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vadduhm v10,v10,v1
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vslh v1,v0,v13
	// vadduhm v10,v12,v10
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vsubshs v0,v0,v1
	// vadduhm v10,v10,v23
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)v23.u16)));
	// vadduhm v1,v0,v9
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// vadduhm v0,v3,v2
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v2.u16)));
	// vadduhm v12,v10,v1
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vsrah v0,v0,v24
	// vsrah v12,v12,v24
	// vor v9,v8,v0
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vpkshus v0,v0,v12
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// vor v8,v9,v12
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v12.u8)));
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// bne cr6,0x82713394
	if (!cr6.eq) goto loc_82713394;
loc_82713474:
	// vand v0,v8,v31
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_and_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)v31.u8)));
	// vcmpgtuh. v0,v0,v6
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_cmpgt_epu16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// mfocrf r11,2
	r11.u64 = (cr6.lt << 7) | (cr6.gt << 6) | (cr6.eq << 5) | (cr6.so << 4);
	// not r11,r11
	r11.u64 = ~r11.u64;
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x8239bd44
	return;
}

__attribute__((alias("__imp__sub_82713490"))) PPC_WEAK_FUNC(sub_82713490);
PPC_FUNC_IMPL(__imp__sub_82713490) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCVRegister v19{};
	PPCVRegister v20{};
	PPCVRegister v21{};
	PPCVRegister v22{};
	PPCVRegister v23{};
	PPCVRegister v24{};
	PPCVRegister v25{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcf4
	// lwz r9,1076(r7)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1076);
	// vspltish v4,5
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// vspltisb v13,0
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_set1_epi8(char(0x0)));
	// vspltish v3,1
	// li r8,1
	ctx.r8.s64 = 1;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// vspltish v0,2
	// stw r5,36(r1)
	PPC_STORE_U32(ctx.r1.u32 + 36, ctx.r5.u32);
	// vspltish v12,4
	// stw r9,-224(r1)
	PPC_STORE_U32(ctx.r1.u32 + -224, ctx.r9.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// lwz r9,1092(r7)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1092);
	// vspltish v20,7
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// stw r6,44(r1)
	PPC_STORE_U32(ctx.r1.u32 + 44, ctx.r6.u32);
	// lwz r31,1100(r7)
	r31.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1100);
	// addi r7,r1,-224
	ctx.r7.s64 = ctx.r1.s64 + -224;
	// addi r30,r11,3
	r30.s64 = r11.s64 + 3;
	// stw r10,76(r1)
	PPC_STORE_U32(ctx.r1.u32 + 76, ctx.r10.u32);
	// vor v2,v4,v4
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_load_si128((__m128i*)ctx.v4.u8));
	// stw r4,28(r1)
	PPC_STORE_U32(ctx.r1.u32 + 28, ctx.r4.u32);
	// stw r9,-272(r1)
	PPC_STORE_U32(ctx.r1.u32 + -272, ctx.r9.u32);
	// addi r9,r1,-224
	ctx.r9.s64 = ctx.r1.s64 + -224;
	// addi r11,r1,-272
	r11.s64 = ctx.r1.s64 + -272;
	// stw r31,-208(r1)
	PPC_STORE_U32(ctx.r1.u32 + -208, r31.u32);
	// lvx128 v11,r0,r9
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// vsplth v5,v11,1
	_mm_store_si128((__m128i*)ctx.v5.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u16), _mm_set1_epi16(short(0xD0C))));
	// lvx128 v10,r0,r11
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r9,3
	ctx.r9.s64 = ctx.r9.s64 + 3;
	// vsplth v19,v10,1
	_mm_store_si128((__m128i*)v19.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_set1_epi16(short(0xD0C))));
	// addi r11,r1,-64
	r11.s64 = ctx.r1.s64 + -64;
	// cmpwi cr6,r9,3
	cr6.compare<int32_t>(ctx.r9.s32, 3, xer);
	// addi r9,r1,-176
	ctx.r9.s64 = ctx.r1.s64 + -176;
	// stvx v5,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r1,-272
	ctx.r7.s64 = ctx.r1.s64 + -272;
	// stvx v20,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v20.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// subf r11,r4,r3
	r11.s64 = ctx.r3.s64 - ctx.r4.s64;
	// stvx v4,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-192
	ctx.r9.s64 = ctx.r1.s64 + -192;
	// slw r8,r8,r30
	ctx.r8.u64 = r30.u8 & 0x20 ? 0 : (ctx.r8.u32 << (r30.u8 & 0x3F));
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stvx v19,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v19.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v13,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-112
	ctx.r9.s64 = ctx.r1.s64 + -112;
	// stw r8,-204(r1)
	PPC_STORE_U32(ctx.r1.u32 + -204, ctx.r8.u32);
	// stvx v3,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-144
	ctx.r9.s64 = ctx.r1.s64 + -144;
	// stvx v0,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-80
	ctx.r9.s64 = ctx.r1.s64 + -80;
	// stvx v12,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-240
	ctx.r9.s64 = ctx.r1.s64 + -240;
	// stvx v2,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bne cr6,0x827136fc
	if (!cr6.eq) goto loc_827136FC;
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// lvx128 v11,r0,r11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r7,r11,r4
	ctx.r7.u64 = r11.u64 + ctx.r4.u64;
	// lvsl v7,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r30,r1,-240
	r30.s64 = ctx.r1.s64 + -240;
	// add r11,r7,r4
	r11.u64 = ctx.r7.u64 + ctx.r4.u64;
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
	// lvx128 v10,r0,r3
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r7,16
	ctx.r3.s64 = ctx.r7.s64 + 16;
	// lvx128 v6,r0,r7
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// stvx v11,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v11,v11,v10,v7
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvsl v1,r0,r7
	temp.u32 = ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// addi r7,r11,16
	ctx.r7.s64 = r11.s64 + 16;
	// lvsl v24,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)v24.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// lvx128 v31,r0,r3
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r1,-240
	ctx.r3.s64 = ctx.r1.s64 + -240;
	// vmrghb v9,v13,v11
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrglb v8,v13,v11
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// stvx v10,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r1,-240
	ctx.r3.s64 = ctx.r1.s64 + -240;
	// vperm v10,v6,v31,v1
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// stvx v7,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v11,v13,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// lvx128 v29,r0,r7
	_mm_store_si128((__m128i*)v29.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r1,-272
	ctx.r7.s64 = ctx.r1.s64 + -272;
	// lvx128 v30,r0,r11
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrglb v10,v13,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// stvx v24,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v24.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r1,-272
	ctx.r7.s64 = ctx.r1.s64 + -272;
	// lvx128 v7,r0,r7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vperm v6,v30,v29,v7
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)v29.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// vmrghb v7,v13,v6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrglb v6,v13,v6
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// ble cr6,0x82713938
	if (!cr6.gt) goto loc_82713938;
	// li r7,0
	ctx.r7.s64 = 0;
loc_82713608:
	// vor v1,v9,v9
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)ctx.v9.u8));
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// vor v9,v11,v11
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_load_si128((__m128i*)ctx.v11.u8));
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// vor v11,v7,v7
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_load_si128((__m128i*)ctx.v7.u8));
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// vslh v28,v1,v0
	// vslh v29,v9,v3
	// cmpw cr6,r7,r8
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r8.s32, xer);
	// vslh v30,v11,v12
	// vslh v31,v11,v2
	// lvx128 v27,r0,r3
	_mm_store_si128((__m128i*)v27.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v7,v11,v0
	// addi r3,r9,16
	ctx.r3.s64 = ctx.r9.s64 + 16;
	// vadduhm v31,v30,v31
	_mm_store_si128((__m128i*)v31.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v30.u16), _mm_load_si128((__m128i*)v31.u16)));
	// vslh v30,v9,v12
	// vadduhm v7,v7,v11
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// vadduhm v30,v29,v30
	_mm_store_si128((__m128i*)v30.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v29.u16), _mm_load_si128((__m128i*)v30.u16)));
	// vsubshs v29,v1,v28
	// lvx128 v28,r0,r11
	_mm_store_si128((__m128i*)v28.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v7,v7,v31
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)v31.u16)));
	// vor v1,v8,v8
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)ctx.v8.u8));
	// vor v8,v10,v10
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_load_si128((__m128i*)ctx.v10.u8));
	// vor v10,v6,v6
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_load_si128((__m128i*)ctx.v6.u8));
	// lvsl v6,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vadduhm v31,v7,v30
	_mm_store_si128((__m128i*)v31.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)v30.u16)));
	// vperm v7,v28,v27,v6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v28.u8), _mm_load_si128((__m128i*)v27.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// vslh v27,v8,v3
	// vmrghb v6,v13,v7
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vadduhm v28,v31,v5
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v31.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vmrglb v30,v13,v7
	_mm_store_si128((__m128i*)v30.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vor v7,v6,v6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)ctx.v6.u8));
	// vor v6,v30,v30
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)v30.u8));
	// vslh v30,v7,v0
	// vslh v26,v6,v0
	// vsubshs v30,v13,v30
	// vadduhm v31,v29,v30
	_mm_store_si128((__m128i*)v31.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v29.u16), _mm_load_si128((__m128i*)v30.u16)));
	// vslh v29,v10,v12
	// vslh v30,v10,v2
	// vadduhm v28,v28,v31
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)v31.u16)));
	// vslh v31,v10,v0
	// vadduhm v30,v29,v30
	_mm_store_si128((__m128i*)v30.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v29.u16), _mm_load_si128((__m128i*)v30.u16)));
	// vslh v29,v8,v12
	// vadduhm v31,v31,v10
	_mm_store_si128((__m128i*)v31.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v31.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vadduhm v29,v27,v29
	_mm_store_si128((__m128i*)v29.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v27.u16), _mm_load_si128((__m128i*)v29.u16)));
	// vslh v27,v1,v0
	// vsubshs v1,v1,v27
	// vsubshs v27,v13,v26
	// vadduhm v27,v1,v27
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vsrah v1,v28,v4
	// stvx v1,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v1,v31,v30
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v31.u16), _mm_load_si128((__m128i*)v30.u16)));
	// addi r9,r9,48
	ctx.r9.s64 = ctx.r9.s64 + 48;
	// vadduhm v31,v1,v29
	_mm_store_si128((__m128i*)v31.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v1.u16), _mm_load_si128((__m128i*)v29.u16)));
	// vadduhm v31,v31,v5
	_mm_store_si128((__m128i*)v31.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v31.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vadduhm v1,v31,v27
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v31.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vsrah v1,v1,v4
	// stvx v1,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// blt cr6,0x82713608
	if (cr6.lt) goto loc_82713608;
	// b 0x82713938
	goto loc_82713938;
loc_827136FC:
	// li r9,16
	ctx.r9.s64 = 16;
	// stw r11,-288(r1)
	PPC_STORE_U32(ctx.r1.u32 + -288, r11.u32);
	// lvlx v11,0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// li r7,16
	ctx.r7.s64 = 16;
	// li r3,32
	ctx.r3.s64 = 32;
	// addi r27,r1,-160
	r27.s64 = ctx.r1.s64 + -160;
	// li r30,16
	r30.s64 = 16;
	// lvrx v10,r11,r9
	temp.u32 = r11.u32 + ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v10.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// li r29,16
	r29.s64 = 16;
	// vor v11,v11,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v10.u8)));
	// lvlx v9,r11,r7
	temp.u32 = r11.u32 + ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v8,r11,r3
	temp.u32 = r11.u32 + ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v8.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// vor v9,v9,v8
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v8.u8)));
	// li r28,32
	r28.s64 = 32;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// stvx v11,r0,r27
	_mm_store_si128((__m128i*)(base + ((r27.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r1,-128
	r27.s64 = ctx.r1.s64 + -128;
	// vmrghb v31,v13,v11
	_mm_store_si128((__m128i*)v31.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// stw r11,-288(r1)
	PPC_STORE_U32(ctx.r1.u32 + -288, r11.u32);
	// vmrglb v28,v13,v11
	_mm_store_si128((__m128i*)v28.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// stvx v9,r0,r27
	_mm_store_si128((__m128i*)(base + ((r27.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvrx v8,r11,r9
	temp.u32 = r11.u32 + ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v8.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// addi r9,r1,-96
	ctx.r9.s64 = ctx.r1.s64 + -96;
	// lvlx v10,0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// vor v10,v10,v8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v8.u8)));
	// lvlx v7,r11,r7
	temp.u32 = r11.u32 + ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v6,r11,r3
	temp.u32 = r11.u32 + ctx.r3.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// vor v1,v7,v6
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// vor v8,v31,v31
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_load_si128((__m128i*)v31.u8));
	// stvx v10,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,-256
	ctx.r9.s64 = ctx.r1.s64 + -256;
	// vor v6,v28,v28
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)v28.u8));
	// stw r11,-288(r1)
	PPC_STORE_U32(ctx.r1.u32 + -288, r11.u32);
	// stvx v1,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvlx v11,0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v7,r11,r30
	temp.u32 = r11.u32 + r30.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// lvlx v30,r11,r29
	temp.u32 = r11.u32 + r29.u32;
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// vor v31,v11,v7
	_mm_store_si128((__m128i*)v31.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvrx v29,r11,r28
	temp.u32 = r11.u32 + r28.u32;
	_mm_store_si128((__m128i*)v29.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// vmrghb v7,v13,v9
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vor v29,v30,v29
	_mm_store_si128((__m128i*)v29.u8, _mm_or_si128(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)v29.u8)));
	// vmrghb v11,v13,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrglb v9,v13,v10
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrghb v10,v13,v1
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrghb v1,v13,v31
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrglb v30,v13,v31
	_mm_store_si128((__m128i*)v30.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrghb v31,v13,v29
	_mm_store_si128((__m128i*)v31.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)v29.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// ble cr6,0x82713938
	if (!cr6.gt) goto loc_82713938;
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r9,r31,32
	ctx.r9.s64 = r31.s64 + 32;
loc_827137CC:
	// vor v29,v8,v8
	_mm_store_si128((__m128i*)v29.u8, _mm_load_si128((__m128i*)ctx.v8.u8));
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// vor v8,v11,v11
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_load_si128((__m128i*)ctx.v11.u8));
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// vor v11,v1,v1
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_load_si128((__m128i*)ctx.v1.u8));
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// addi r30,r11,32
	r30.s64 = r11.s64 + 32;
	// vslh v21,v29,v0
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// vslh v22,v8,v3
	// lvx128 v26,r0,r11
	_mm_store_si128((__m128i*)v26.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vslh v28,v11,v0
	// lvsl v1,r0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vslh v27,v11,v2
	// vslh v23,v11,v12
	// lvx128 v25,r0,r30
	_mm_store_si128((__m128i*)v25.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsubshs v29,v29,v21
	// addi r30,r9,-16
	r30.s64 = ctx.r9.s64 + -16;
	// vadduhm v24,v28,v11
	_mm_store_si128((__m128i*)v24.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)ctx.v11.u16)));
	// vor v28,v7,v7
	_mm_store_si128((__m128i*)v28.u8, _mm_load_si128((__m128i*)ctx.v7.u8));
	// vor v7,v10,v10
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)ctx.v10.u8));
	// vor v10,v31,v31
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_load_si128((__m128i*)v31.u8));
	// vslh v31,v8,v12
	// vadduhm v23,v23,v27
	_mm_store_si128((__m128i*)v23.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v23.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vor v27,v6,v6
	_mm_store_si128((__m128i*)v27.u8, _mm_load_si128((__m128i*)ctx.v6.u8));
	// vor v6,v9,v9
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)ctx.v9.u8));
	// vor v9,v30,v30
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_load_si128((__m128i*)v30.u8));
	// lvsl v30,r0,r3
	temp.u32 = ctx.r3.u32;
	_mm_store_si128((__m128i*)v30.u8, _mm_load_si128((__m128i*)&VectorShiftTableL[(temp.u32 & 0xF) * 16]));
	// vadduhm v22,v22,v31
	_mm_store_si128((__m128i*)v22.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v22.u16), _mm_load_si128((__m128i*)v31.u16)));
	// lvx128 v31,r0,r3
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r1,-272
	ctx.r3.s64 = ctx.r1.s64 + -272;
	// vadduhm v24,v24,v23
	_mm_store_si128((__m128i*)v24.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v24.u16), _mm_load_si128((__m128i*)v23.u16)));
	// vslh v23,v9,v12
	// vadduhm v24,v24,v22
	_mm_store_si128((__m128i*)v24.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v24.u16), _mm_load_si128((__m128i*)v22.u16)));
	// stvx v30,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r1,-272
	ctx.r3.s64 = ctx.r1.s64 + -272;
	// vperm v30,v26,v31,v1
	_mm_store_si128((__m128i*)v30.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v26.u8), _mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// vslh v22,v6,v3
	// vslh v26,v9,v0
	// lvx128 v1,r0,r3
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r9,-32
	ctx.r3.s64 = ctx.r9.s64 + -32;
	// vperm v1,v31,v25,v1
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_perm_epi8_(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)v25.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// vslh v25,v9,v2
	// vadduhm v26,v26,v9
	_mm_store_si128((__m128i*)v26.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v26.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// vmrghb v31,v13,v1
	_mm_store_si128((__m128i*)v31.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vadduhm v25,v23,v25
	_mm_store_si128((__m128i*)v25.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v23.u16), _mm_load_si128((__m128i*)v25.u16)));
	// vmrghb v1,v13,v30
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vmrglb v30,v13,v30
	_mm_store_si128((__m128i*)v30.u8, _mm_unpacklo_epi8(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// vadduhm v26,v26,v25
	_mm_store_si128((__m128i*)v26.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v26.u16), _mm_load_si128((__m128i*)v25.u16)));
	// vslh v21,v1,v0
	// vsubshs v23,v13,v21
	// vslh v21,v27,v0
	// vadduhm v29,v29,v23
	_mm_store_si128((__m128i*)v29.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v29.u16), _mm_load_si128((__m128i*)v23.u16)));
	// vslh v23,v6,v12
	// vsubshs v27,v27,v21
	// vslh v21,v10,v0
	// vor v25,v29,v29
	_mm_store_si128((__m128i*)v25.u8, _mm_load_si128((__m128i*)v29.u8));
	// vadduhm v23,v22,v23
	_mm_store_si128((__m128i*)v23.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v22.u16), _mm_load_si128((__m128i*)v23.u16)));
	// vslh v22,v30,v0
	// vadduhm v21,v21,v10
	_mm_store_si128((__m128i*)v21.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v21.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vsubshs v22,v13,v22
	// vadduhm v29,v27,v22
	_mm_store_si128((__m128i*)v29.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v27.u16), _mm_load_si128((__m128i*)v22.u16)));
	// vadduhm v27,v26,v23
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v26.u16), _mm_load_si128((__m128i*)v23.u16)));
	// vadduhm v26,v24,v5
	_mm_store_si128((__m128i*)v26.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v24.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vslh v24,v7,v3
	// vslh v23,v31,v0
	// vadduhm v27,v27,v5
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v27.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vadduhm v26,v26,v25
	_mm_store_si128((__m128i*)v26.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v26.u16), _mm_load_si128((__m128i*)v25.u16)));
	// vslh v25,v10,v12
	// vadduhm v29,v27,v29
	_mm_store_si128((__m128i*)v29.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v27.u16), _mm_load_si128((__m128i*)v29.u16)));
	// vslh v27,v10,v2
	// vsrah v29,v29,v4
	// vadduhm v27,v25,v27
	_mm_store_si128((__m128i*)v27.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v25.u16), _mm_load_si128((__m128i*)v27.u16)));
	// vslh v25,v7,v12
	// vadduhm v25,v24,v25
	_mm_store_si128((__m128i*)v25.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v24.u16), _mm_load_si128((__m128i*)v25.u16)));
	// vslh v24,v28,v0
	// vsubshs v28,v28,v24
	// vsubshs v24,v13,v23
	// vadduhm v24,v28,v24
	_mm_store_si128((__m128i*)v24.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)v24.u16)));
	// vsrah v28,v26,v4
	// stvx v28,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v28.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v29,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v29.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vadduhm v29,v21,v27
	_mm_store_si128((__m128i*)v29.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v21.u16), _mm_load_si128((__m128i*)v27.u16)));
	// cmpw cr6,r7,r8
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r8.s32, xer);
	// vadduhm v28,v29,v25
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v29.u16), _mm_load_si128((__m128i*)v25.u16)));
	// vadduhm v28,v28,v5
	_mm_store_si128((__m128i*)v28.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)ctx.v5.u16)));
	// vadduhm v29,v28,v24
	_mm_store_si128((__m128i*)v29.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v28.u16), _mm_load_si128((__m128i*)v24.u16)));
	// vsrah v29,v29,v4
	// stvx v29,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v29.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r9,48
	ctx.r9.s64 = ctx.r9.s64 + 48;
	// blt cr6,0x827137cc
	if (cr6.lt) goto loc_827137CC;
loc_82713938:
	// vspltish v11,8
	// vor v6,v13,v13
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)ctx.v13.u8));
	// vspltish v10,-1
	// mr r11,r5
	r11.u64 = ctx.r5.u64;
	// vspltish v8,0
	// vor v5,v3,v3
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_load_si128((__m128i*)ctx.v3.u8));
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
	// vor v13,v0,v0
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_load_si128((__m128i*)ctx.v0.u8));
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// vslh v31,v10,v11
	// vor v11,v12,v12
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_load_si128((__m128i*)ctx.v12.u8));
	// bne cr6,0x82713a00
	if (!cr6.eq) goto loc_82713A00;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x82713af0
	if (!cr6.gt) goto loc_82713AF0;
	// mr r10,r8
	ctx.r10.u64 = ctx.r8.u64;
loc_82713974:
	// addi r8,r9,16
	ctx.r8.s64 = ctx.r9.s64 + 16;
	// lvx128 v0,r0,r9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// addi r9,r9,48
	ctx.r9.s64 = ctx.r9.s64 + 48;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// lvx128 v10,r0,r8
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r8,4
	ctx.r8.s64 = 4;
	// vsldoi v12,v0,v10,4
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v10.u8), 12));
	// vsldoi v9,v0,v10,2
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v10.u8), 14));
	// vsldoi v7,v0,v10,6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v10.u8), 10));
	// vslh v10,v12,v13
	// vslh v3,v12,v4
	// vslh v2,v12,v11
	// vslh v7,v7,v13
	// vadduhm v12,v10,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vadduhm v10,v2,v3
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v2.u16), _mm_load_si128((__m128i*)ctx.v3.u16)));
	// vslh v3,v9,v11
	// vslh v9,v9,v5
	// vsubshs v7,v6,v7
	// vadduhm v9,v9,v3
	_mm_store_si128((__m128i*)ctx.v9.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v9.u16), _mm_load_si128((__m128i*)ctx.v3.u16)));
	// vslh v3,v0,v13
	// vsubshs v0,v0,v3
	// vadduhm v7,v0,v7
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vadduhm v0,v12,v10
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vadduhm v12,v0,v9
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// vadduhm v12,v12,v19
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)v19.u16)));
	// vadduhm v0,v12,v7
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vsrah v0,v0,v20
	// vor v8,v8,v0
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vpkshus v0,v0,v0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v0.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// stvewx v0,r0,r11
	ea = (r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v0,r11,r8
	ea = (r11.u32 + ctx.r8.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// bne cr6,0x82713974
	if (!cr6.eq) goto loc_82713974;
	// b 0x82713af0
	goto loc_82713AF0;
loc_82713A00:
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x82713af0
	if (!cr6.gt) goto loc_82713AF0;
	// addi r10,r31,32
	ctx.r10.s64 = r31.s64 + 32;
	// mr r9,r8
	ctx.r9.u64 = ctx.r8.u64;
loc_82713A10:
	// addi r8,r10,-32
	ctx.r8.s64 = ctx.r10.s64 + -32;
	// lvx128 v9,r0,r10
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r10,-16
	ctx.r7.s64 = ctx.r10.s64 + -16;
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// lvx128 v12,r0,r8
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v0,r0,r7
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsldoi v10,v12,v0,4
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8), 12));
	// vsldoi v7,v12,v0,2
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8), 14));
	// vsldoi v2,v12,v0,6
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8), 10));
	// vslh v3,v10,v13
	// vslh v30,v10,v11
	// vslh v1,v10,v4
	// vadduhm v3,v3,v10
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vslh v10,v7,v11
	// vslh v7,v7,v5
	// vadduhm v1,v30,v1
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v30.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vslh v30,v12,v13
	// vadduhm v7,v7,v10
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vslh v10,v2,v13
	// vsubshs v12,v12,v30
	// vadduhm v3,v3,v1
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vsubshs v10,v6,v10
	// vadduhm v7,v3,v7
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vadduhm v2,v12,v10
	_mm_store_si128((__m128i*)ctx.v2.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vsldoi v12,v0,v9,4
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v9.u8), 12));
	// vsldoi v10,v0,v9,2
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v9.u8), 14));
	// vadduhm v3,v7,v19
	_mm_store_si128((__m128i*)ctx.v3.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)v19.u16)));
	// vsldoi v9,v0,v9,6
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_alignr_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v9.u8), 10));
	// vslh v7,v12,v13
	// vslh v1,v12,v4
	// vslh v30,v12,v11
	// vslh v9,v9,v13
	// vadduhm v12,v7,v12
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v7.u16), _mm_load_si128((__m128i*)ctx.v12.u16)));
	// vadduhm v7,v30,v1
	_mm_store_si128((__m128i*)ctx.v7.u16, _mm_add_epi16(_mm_load_si128((__m128i*)v30.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vslh v1,v10,v11
	// vslh v10,v10,v5
	// vsubshs v9,v6,v9
	// vadduhm v12,v12,v7
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v7.u16)));
	// vadduhm v10,v10,v1
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vslh v1,v0,v13
	// vadduhm v10,v12,v10
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v12.u16), _mm_load_si128((__m128i*)ctx.v10.u16)));
	// vsubshs v0,v0,v1
	// vadduhm v10,v10,v19
	_mm_store_si128((__m128i*)ctx.v10.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)v19.u16)));
	// vadduhm v1,v0,v9
	_mm_store_si128((__m128i*)ctx.v1.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v9.u16)));
	// vadduhm v0,v3,v2
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v3.u16), _mm_load_si128((__m128i*)ctx.v2.u16)));
	// vadduhm v12,v10,v1
	_mm_store_si128((__m128i*)ctx.v12.u16, _mm_add_epi16(_mm_load_si128((__m128i*)ctx.v10.u16), _mm_load_si128((__m128i*)ctx.v1.u16)));
	// vsrah v0,v0,v20
	// vsrah v12,v12,v20
	// vor v9,v8,v0
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vpkshus v0,v0,v12
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// vor v8,v9,v12
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v12.u8)));
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// bne cr6,0x82713a10
	if (!cr6.eq) goto loc_82713A10;
loc_82713AF0:
	// vand v0,v8,v31
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_and_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)v31.u8)));
	// vcmpgtuh. v0,v0,v6
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_cmpgt_epu16(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_load_si128((__m128i*)ctx.v6.u16)));
	// mfocrf r11,2
	r11.u64 = (cr6.lt << 7) | (cr6.gt << 6) | (cr6.eq << 5) | (cr6.so << 4);
	// not r11,r11
	r11.u64 = ~r11.u64;
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// b 0x8239bd44
	return;
}

__attribute__((alias("__imp__sub_82713B08"))) PPC_WEAK_FUNC(sub_82713B08);
PPC_FUNC_IMPL(__imp__sub_82713B08) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcf0
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r10,448(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 448);
	// mr r11,r4
	r11.u64 = ctx.r4.u64;
	// mr r7,r6
	ctx.r7.u64 = ctx.r6.u64;
	// dcbzl r0,r10
	memset(base + ((ctx.r10.u32) & ~127), 0, 128);
	// lwz r10,448(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 448);
	// subfic r27,r5,2
	xer.ca = ctx.r5.u32 <= 2;
	r27.s64 = 2 - ctx.r5.s64;
	// lwz r9,260(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 260);
	// addi r5,r3,996
	ctx.r5.s64 = ctx.r3.s64 + 996;
	// lwz r4,452(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 452);
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// stw r9,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r9.u32);
	// lwz r9,20(r7)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + 20);
	// stw r10,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r10.u32);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// stw r9,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r9.u32);
	// stw r10,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r10.u32);
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r10.u32);
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// lwz r10,24(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + 24);
	// addi r9,r10,1
	ctx.r9.s64 = ctx.r10.s64 + 1;
	// lbz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// stw r9,24(r7)
	PPC_STORE_U32(ctx.r7.u32 + 24, ctx.r9.u32);
	// stw r10,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r10.u32);
	// lwz r10,260(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 260);
	// stw r10,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r10.u32);
	// dcbzl r0,r10
	memset(base + ((ctx.r10.u32) & ~127), 0, 128);
	// lwz r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplwi cr6,r10,128
	cr6.compare<uint32_t>(ctx.r10.u32, 128, xer);
	// blt cr6,0x82713b9c
	if (cr6.lt) goto loc_82713B9C;
	// mr r6,r11
	ctx.r6.u64 = r11.u64;
	// bl 0x82611f38
	sub_82611F38(ctx, base);
	// b 0x82713c20
	goto loc_82713C20;
loc_82713B9C:
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// lwz r31,84(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// ble cr6,0x82713c18
	if (!cr6.gt) goto loc_82713C18;
	// lwz r30,100(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// lwz r29,104(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lwz r28,108(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r8,112(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
loc_82713BC0:
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r3,r3,-1
	ctx.r3.s64 = ctx.r3.s64 + -1;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
	// rlwinm r10,r10,24,8,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0xFFFFFF;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// mullw r10,r10,r30
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(r30.s32);
	// add r6,r10,r29
	ctx.r6.u64 = ctx.r10.u64 + r29.u64;
	// rlwinm r10,r9,25,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 25) & 0x1;
	// clrlwi r9,r9,26
	ctx.r9.u64 = ctx.r9.u32 & 0x3F;
	// neg r10,r10
	ctx.r10.s64 = -ctx.r10.s64;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// xor r6,r6,r10
	ctx.r6.u64 = ctx.r6.u64 ^ ctx.r10.u64;
	// subf r10,r10,r6
	ctx.r10.s64 = ctx.r6.s64 - ctx.r10.s64;
	// lbzx r8,r9,r4
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r9.u32 + ctx.r4.u32);
	// rotlwi r26,r8,1
	r26.u64 = __builtin_rotateleft32(ctx.r8.u32, 1);
	// lbzx r6,r8,r5
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r8.u32 + ctx.r5.u32);
	// addi r8,r9,1
	ctx.r8.s64 = ctx.r9.s64 + 1;
	// or r31,r6,r31
	r31.u64 = ctx.r6.u64 | r31.u64;
	// sthx r10,r26,r28
	PPC_STORE_U16(r26.u32 + r28.u32, ctx.r10.u16);
	// bne cr6,0x82713bc0
	if (!cr6.eq) goto loc_82713BC0;
loc_82713C18:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,20(r7)
	PPC_STORE_U32(ctx.r7.u32 + 20, r11.u32);
loc_82713C20:
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82713c94
	if (!cr6.eq) goto loc_82713C94;
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r9,92(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rlwinm r11,r27,6,0,25
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 6) & 0xFFFFFFC0;
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// addi r8,r10,1
	ctx.r8.s64 = ctx.r10.s64 + 1;
	// addi r7,r11,32
	ctx.r7.s64 = r11.s64 + 32;
	// srawi r9,r8,1
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x1) != 0);
	ctx.r9.s64 = ctx.r8.s32 >> 1;
	// addi r8,r11,16
	ctx.r8.s64 = r11.s64 + 16;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r6,r11,48
	ctx.r6.s64 = r11.s64 + 48;
	// srawi r9,r10,4
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xF) != 0);
	ctx.r9.s64 = ctx.r10.s32 >> 4;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// stw r10,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r10.u32);
	// addi r10,r1,128
	ctx.r10.s64 = ctx.r1.s64 + 128;
	// lvx128 v0,r0,r10
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsplth v0,v0,1
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_set1_epi16(short(0xD0C))));
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v0,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v0,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v0,r0,r6
	_mm_store_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x8239bd40
	return;
loc_82713C94:
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// rlwinm r11,r27,6,0,25
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 6) & 0xFFFFFFC0;
	// lwz r3,88(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// add r4,r11,r10
	ctx.r4.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x826ffe70
	sub_826FFE70(ctx, base);
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x8239bd40
	return;
}

__attribute__((alias("__imp__sub_82713CB0"))) PPC_WEAK_FUNC(sub_82713CB0);
PPC_FUNC_IMPL(__imp__sub_82713CB0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bce8
	// stwu r1,-272(r1)
	ea = -272 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// li r26,0
	r26.s64 = 0;
	// addi r31,r29,996
	r31.s64 = r29.s64 + 996;
	// lwz r10,260(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 260);
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// lwz r4,452(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 452);
	// stw r26,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r26.u32);
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// lwz r10,448(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 448);
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// lwz r11,24(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 24);
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// lwz r10,4(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + 4);
	// stw r10,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r10.u32);
	// lwz r10,20(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 20);
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,24(r27)
	PPC_STORE_U32(r27.u32 + 24, ctx.r10.u32);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// lwz r11,260(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 260);
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// dcbzl r0,r11
	memset(base + ((r11.u32) & ~127), 0, 128);
	// lwz r7,112(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmplwi cr6,r7,128
	cr6.compare<uint32_t>(ctx.r7.u32, 128, xer);
	// blt cr6,0x82713d48
	if (cr6.lt) goto loc_82713D48;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// bl 0x82611f38
	sub_82611F38(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// b 0x82713dc4
	goto loc_82713DC4;
loc_82713D48:
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// lwz r6,84(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// ble cr6,0x82713dc0
	if (!cr6.gt) goto loc_82713DC0;
	// lwz r5,116(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r3,120(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// lwz r30,124(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// lwz r8,128(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
loc_82713D68:
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
	// rlwinm r10,r10,24,8,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0xFFFFFF;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// mullw r10,r10,r5
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r5.s32);
	// add r25,r10,r3
	r25.u64 = ctx.r10.u64 + ctx.r3.u64;
	// rlwinm r10,r9,25,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 25) & 0x1;
	// clrlwi r9,r9,26
	ctx.r9.u64 = ctx.r9.u32 & 0x3F;
	// neg r10,r10
	ctx.r10.s64 = -ctx.r10.s64;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// xor r25,r25,r10
	r25.u64 = r25.u64 ^ ctx.r10.u64;
	// subf r10,r10,r25
	ctx.r10.s64 = r25.s64 - ctx.r10.s64;
	// lbzx r8,r9,r4
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r9.u32 + ctx.r4.u32);
	// rotlwi r24,r8,1
	r24.u64 = __builtin_rotateleft32(ctx.r8.u32, 1);
	// lbzx r25,r8,r31
	r25.u64 = PPC_LOAD_U8(ctx.r8.u32 + r31.u32);
	// addi r8,r9,1
	ctx.r8.s64 = ctx.r9.s64 + 1;
	// or r6,r25,r6
	ctx.r6.u64 = r25.u64 | ctx.r6.u64;
	// sthx r10,r24,r30
	PPC_STORE_U16(r24.u32 + r30.u32, ctx.r10.u16);
	// bne cr6,0x82713d68
	if (!cr6.eq) goto loc_82713D68;
loc_82713DC0:
	// stw r11,20(r27)
	PPC_STORE_U32(r27.u32 + 20, r11.u32);
loc_82713DC4:
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// bne cr6,0x82713e2c
	if (!cr6.eq) goto loc_82713E2C;
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// addi r8,r11,16
	ctx.r8.s64 = r11.s64 + 16;
	// addi r9,r10,1
	ctx.r9.s64 = ctx.r10.s64 + 1;
	// addi r7,r11,32
	ctx.r7.s64 = r11.s64 + 32;
	// srawi r9,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 1;
	// addi r6,r11,48
	ctx.r6.s64 = r11.s64 + 48;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// srawi r9,r10,4
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xF) != 0);
	ctx.r9.s64 = ctx.r10.s32 >> 4;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// stw r10,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r10.u32);
	// addi r10,r1,160
	ctx.r10.s64 = ctx.r1.s64 + 160;
	// lvx128 v0,r0,r10
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsplth v0,v0,1
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_set1_epi16(short(0xD0C))));
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v0,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v0,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v0,r0,r6
	_mm_store_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// b 0x82713e38
	goto loc_82713E38;
loc_82713E2C:
	// lwz r4,88(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// bl 0x826ffe70
	sub_826FFE70(ctx, base);
loc_82713E38:
	// lwz r10,448(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 448);
	// lwz r11,24(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 24);
	// lwz r4,452(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 452);
	// stw r26,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, r26.u32);
	// stw r26,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r26.u32);
	// stw r10,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r10.u32);
	// lwz r10,260(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 260);
	// stw r10,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r10.u32);
	// lwz r10,0(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// stw r10,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r10.u32);
	// lwz r10,4(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + 4);
	// stw r10,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r10.u32);
	// lwz r10,20(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 20);
	// stw r10,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r10.u32);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,24(r27)
	PPC_STORE_U32(r27.u32 + 24, ctx.r10.u32);
	// stw r11,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r11.u32);
	// lwz r11,260(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 260);
	// stw r11,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r11.u32);
	// dcbzl r0,r11
	memset(base + ((r11.u32) & ~127), 0, 128);
	// lwz r7,132(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// cmplwi cr6,r7,128
	cr6.compare<uint32_t>(ctx.r7.u32, 128, xer);
	// blt cr6,0x82713eb4
	if (cr6.lt) goto loc_82713EB4;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82611f38
	sub_82611F38(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// b 0x82713f30
	goto loc_82713F30;
loc_82713EB4:
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// lwz r6,100(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// ble cr6,0x82713f2c
	if (!cr6.gt) goto loc_82713F2C;
	// lwz r5,136(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// lwz r3,140(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// lwz r30,144(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// lwz r8,148(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
loc_82713ED4:
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
	// rlwinm r10,r10,24,8,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0xFFFFFF;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// mullw r10,r10,r5
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r5.s32);
	// add r29,r10,r3
	r29.u64 = ctx.r10.u64 + ctx.r3.u64;
	// rlwinm r10,r9,25,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 25) & 0x1;
	// clrlwi r9,r9,26
	ctx.r9.u64 = ctx.r9.u32 & 0x3F;
	// neg r10,r10
	ctx.r10.s64 = -ctx.r10.s64;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// xor r29,r29,r10
	r29.u64 = r29.u64 ^ ctx.r10.u64;
	// subf r10,r10,r29
	ctx.r10.s64 = r29.s64 - ctx.r10.s64;
	// lbzx r8,r9,r4
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r9.u32 + ctx.r4.u32);
	// rotlwi r28,r8,1
	r28.u64 = __builtin_rotateleft32(ctx.r8.u32, 1);
	// lbzx r29,r8,r31
	r29.u64 = PPC_LOAD_U8(ctx.r8.u32 + r31.u32);
	// addi r8,r9,1
	ctx.r8.s64 = ctx.r9.s64 + 1;
	// or r6,r29,r6
	ctx.r6.u64 = r29.u64 | ctx.r6.u64;
	// sthx r10,r28,r30
	PPC_STORE_U16(r28.u32 + r30.u32, ctx.r10.u16);
	// bne cr6,0x82713ed4
	if (!cr6.eq) goto loc_82713ED4;
loc_82713F2C:
	// stw r11,20(r27)
	PPC_STORE_U32(r27.u32 + 20, r11.u32);
loc_82713F30:
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// bne cr6,0x82713fa0
	if (!cr6.eq) goto loc_82713FA0;
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// addi r11,r11,64
	r11.s64 = r11.s64 + 64;
	// addi r9,r10,1
	ctx.r9.s64 = ctx.r10.s64 + 1;
	// addi r8,r11,16
	ctx.r8.s64 = r11.s64 + 16;
	// srawi r9,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 1;
	// addi r7,r11,32
	ctx.r7.s64 = r11.s64 + 32;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r6,r11,48
	ctx.r6.s64 = r11.s64 + 48;
	// srawi r9,r10,4
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xF) != 0);
	ctx.r9.s64 = ctx.r10.s32 >> 4;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// stw r10,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, ctx.r10.u32);
	// addi r10,r1,176
	ctx.r10.s64 = ctx.r1.s64 + 176;
	// lvx128 v0,r0,r10
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsplth v0,v0,1
	_mm_store_si128((__m128i*)ctx.v0.u16, _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u16), _mm_set1_epi16(short(0xD0C))));
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v0,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v0,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v0,r0,r6
	_mm_store_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// b 0x8239bd38
	return;
loc_82713FA0:
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lwz r3,108(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// addi r4,r11,64
	ctx.r4.s64 = r11.s64 + 64;
	// bl 0x826ffe70
	sub_826FFE70(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// b 0x8239bd38
	return;
}

__attribute__((alias("__imp__sub_82713FB8"))) PPC_WEAK_FUNC(sub_82713FB8);
PPC_FUNC_IMPL(__imp__sub_82713FB8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcf0
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r10,448(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 448);
	// mr r11,r4
	r11.u64 = ctx.r4.u64;
	// mr r7,r6
	ctx.r7.u64 = ctx.r6.u64;
	// dcbzl r0,r10
	memset(base + ((ctx.r10.u32) & ~127), 0, 128);
	// lwz r10,448(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 448);
	// subfic r27,r5,2
	xer.ca = ctx.r5.u32 <= 2;
	r27.s64 = 2 - ctx.r5.s64;
	// lwz r9,260(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 260);
	// addi r5,r3,932
	ctx.r5.s64 = ctx.r3.s64 + 932;
	// lwz r4,456(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 456);
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// stw r9,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r9.u32);
	// lwz r9,20(r7)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + 20);
	// stw r10,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r10.u32);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// stw r9,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r9.u32);
	// stw r10,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r10.u32);
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r10.u32);
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// lwz r10,24(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + 24);
	// addi r9,r10,1
	ctx.r9.s64 = ctx.r10.s64 + 1;
	// lbz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// stw r9,24(r7)
	PPC_STORE_U32(ctx.r7.u32 + 24, ctx.r9.u32);
	// stw r10,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r10.u32);
	// lwz r10,260(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 260);
	// stw r10,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r10.u32);
	// dcbzl r0,r10
	memset(base + ((ctx.r10.u32) & ~127), 0, 128);
	// lwz r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplwi cr6,r10,128
	cr6.compare<uint32_t>(ctx.r10.u32, 128, xer);
	// blt cr6,0x8271404c
	if (cr6.lt) goto loc_8271404C;
	// mr r6,r11
	ctx.r6.u64 = r11.u64;
	// bl 0x82611f38
	sub_82611F38(ctx, base);
	// b 0x827140d0
	goto loc_827140D0;
loc_8271404C:
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// lwz r31,84(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// ble cr6,0x827140c8
	if (!cr6.gt) goto loc_827140C8;
	// lwz r30,100(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// lwz r29,104(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lwz r28,108(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r8,112(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
loc_82714070:
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r3,r3,-1
	ctx.r3.s64 = ctx.r3.s64 + -1;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
	// rlwinm r10,r10,24,8,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0xFFFFFF;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// mullw r10,r10,r30
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(r30.s32);
	// add r6,r10,r29
	ctx.r6.u64 = ctx.r10.u64 + r29.u64;
	// rlwinm r10,r9,25,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 25) & 0x1;
	// clrlwi r9,r9,26
	ctx.r9.u64 = ctx.r9.u32 & 0x3F;
	// neg r10,r10
	ctx.r10.s64 = -ctx.r10.s64;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// xor r6,r6,r10
	ctx.r6.u64 = ctx.r6.u64 ^ ctx.r10.u64;
	// subf r10,r10,r6
	ctx.r10.s64 = ctx.r6.s64 - ctx.r10.s64;
	// lbzx r8,r9,r4
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r9.u32 + ctx.r4.u32);
	// rotlwi r26,r8,1
	r26.u64 = __builtin_rotateleft32(ctx.r8.u32, 1);
	// lbzx r6,r8,r5
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r8.u32 + ctx.r5.u32);
	// addi r8,r9,1
	ctx.r8.s64 = ctx.r9.s64 + 1;
	// or r31,r6,r31
	r31.u64 = ctx.r6.u64 | r31.u64;
	// sthx r10,r26,r28
	PPC_STORE_U16(r26.u32 + r28.u32, ctx.r10.u16);
	// bne cr6,0x82714070
	if (!cr6.eq) goto loc_82714070;
loc_827140C8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,20(r7)
	PPC_STORE_U32(ctx.r7.u32 + 20, r11.u32);
loc_827140D0:
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8271414c
	if (!cr6.eq) goto loc_8271414C;
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r9,92(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rlwinm r11,r27,3,0,28
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 3) & 0xFFFFFFF8;
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r9,r10,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// addi r10,r10,16
	ctx.r10.s64 = ctx.r10.s64 + 16;
	// srawi r10,r10,5
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1F) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 5;
	// clrldi r10,r10,48
	ctx.r10.u64 = ctx.r10.u64 & 0xFFFF;
	// rldicr r9,r10,16,47
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u64, 16) & 0xFFFFFFFFFFFF0000;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// rldicr r9,r10,32,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u64, 32) & 0xFFFFFFFF00000000;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// std r10,112(r11)
	PPC_STORE_U64(r11.u32 + 112, ctx.r10.u64);
	// std r10,96(r11)
	PPC_STORE_U64(r11.u32 + 96, ctx.r10.u64);
	// std r10,80(r11)
	PPC_STORE_U64(r11.u32 + 80, ctx.r10.u64);
	// std r10,64(r11)
	PPC_STORE_U64(r11.u32 + 64, ctx.r10.u64);
	// std r10,48(r11)
	PPC_STORE_U64(r11.u32 + 48, ctx.r10.u64);
	// std r10,32(r11)
	PPC_STORE_U64(r11.u32 + 32, ctx.r10.u64);
	// std r10,16(r11)
	PPC_STORE_U64(r11.u32 + 16, ctx.r10.u64);
	// std r10,0(r11)
	PPC_STORE_U64(r11.u32 + 0, ctx.r10.u64);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x8239bd40
	return;
loc_8271414C:
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// rlwinm r11,r27,3,0,28
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 3) & 0xFFFFFFF8;
	// lwz r3,88(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// add r4,r11,r10
	ctx.r4.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x826ffbb0
	sub_826FFBB0(ctx, base);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x8239bd40
	return;
}

__attribute__((alias("__imp__sub_82714168"))) PPC_WEAK_FUNC(sub_82714168);
PPC_FUNC_IMPL(__imp__sub_82714168) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bce8
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// li r26,0
	r26.s64 = 0;
	// addi r31,r29,932
	r31.s64 = r29.s64 + 932;
	// lwz r10,260(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 260);
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// lwz r4,456(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 456);
	// stw r26,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r26.u32);
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// lwz r10,448(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 448);
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// lwz r11,24(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 24);
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// lwz r10,4(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + 4);
	// stw r10,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r10.u32);
	// lwz r10,20(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 20);
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,24(r27)
	PPC_STORE_U32(r27.u32 + 24, ctx.r10.u32);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// lwz r11,260(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 260);
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// dcbzl r0,r11
	memset(base + ((r11.u32) & ~127), 0, 128);
	// lwz r7,112(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmplwi cr6,r7,128
	cr6.compare<uint32_t>(ctx.r7.u32, 128, xer);
	// blt cr6,0x82714200
	if (cr6.lt) goto loc_82714200;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// bl 0x82611f38
	sub_82611F38(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// b 0x8271427c
	goto loc_8271427C;
loc_82714200:
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// lwz r6,84(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// ble cr6,0x82714278
	if (!cr6.gt) goto loc_82714278;
	// lwz r5,116(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r3,120(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// lwz r30,124(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// lwz r8,128(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
loc_82714220:
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
	// rlwinm r10,r10,24,8,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0xFFFFFF;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// mullw r10,r10,r5
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r5.s32);
	// add r25,r10,r3
	r25.u64 = ctx.r10.u64 + ctx.r3.u64;
	// rlwinm r10,r9,25,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 25) & 0x1;
	// clrlwi r9,r9,26
	ctx.r9.u64 = ctx.r9.u32 & 0x3F;
	// neg r10,r10
	ctx.r10.s64 = -ctx.r10.s64;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// xor r25,r25,r10
	r25.u64 = r25.u64 ^ ctx.r10.u64;
	// subf r10,r10,r25
	ctx.r10.s64 = r25.s64 - ctx.r10.s64;
	// lbzx r8,r9,r4
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r9.u32 + ctx.r4.u32);
	// rotlwi r24,r8,1
	r24.u64 = __builtin_rotateleft32(ctx.r8.u32, 1);
	// lbzx r25,r8,r31
	r25.u64 = PPC_LOAD_U8(ctx.r8.u32 + r31.u32);
	// addi r8,r9,1
	ctx.r8.s64 = ctx.r9.s64 + 1;
	// or r6,r25,r6
	ctx.r6.u64 = r25.u64 | ctx.r6.u64;
	// sthx r10,r24,r30
	PPC_STORE_U16(r24.u32 + r30.u32, ctx.r10.u16);
	// bne cr6,0x82714220
	if (!cr6.eq) goto loc_82714220;
loc_82714278:
	// stw r11,20(r27)
	PPC_STORE_U32(r27.u32 + 20, r11.u32);
loc_8271427C:
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// bne cr6,0x827142ec
	if (!cr6.eq) goto loc_827142EC;
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lhz r11,0(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// rlwinm r10,r11,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// srawi r11,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	r11.s64 = r11.s32 >> 3;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r11,r11,16
	r11.s64 = r11.s64 + 16;
	// srawi r11,r11,5
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1F) != 0);
	r11.s64 = r11.s32 >> 5;
	// clrldi r11,r11,48
	r11.u64 = r11.u64 & 0xFFFF;
	// rldicr r10,r11,16,47
	ctx.r10.u64 = __builtin_rotateleft64(r11.u64, 16) & 0xFFFFFFFFFFFF0000;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// rldicr r10,r11,32,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u64, 32) & 0xFFFFFFFF00000000;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// std r11,112(r10)
	PPC_STORE_U64(ctx.r10.u32 + 112, r11.u64);
	// std r11,96(r10)
	PPC_STORE_U64(ctx.r10.u32 + 96, r11.u64);
	// std r11,80(r10)
	PPC_STORE_U64(ctx.r10.u32 + 80, r11.u64);
	// std r11,64(r10)
	PPC_STORE_U64(ctx.r10.u32 + 64, r11.u64);
	// std r11,48(r10)
	PPC_STORE_U64(ctx.r10.u32 + 48, r11.u64);
	// std r11,32(r10)
	PPC_STORE_U64(ctx.r10.u32 + 32, r11.u64);
	// std r11,16(r10)
	PPC_STORE_U64(ctx.r10.u32 + 16, r11.u64);
	// std r11,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, r11.u64);
	// b 0x827142f8
	goto loc_827142F8;
loc_827142EC:
	// lwz r4,88(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// bl 0x826ffbb0
	sub_826FFBB0(ctx, base);
loc_827142F8:
	// lwz r10,448(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 448);
	// lwz r11,24(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 24);
	// lwz r4,456(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 456);
	// stw r26,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, r26.u32);
	// stw r26,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r26.u32);
	// stw r10,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r10.u32);
	// lwz r10,260(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 260);
	// stw r10,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r10.u32);
	// lwz r10,0(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// stw r10,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r10.u32);
	// lwz r10,4(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + 4);
	// stw r10,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r10.u32);
	// lwz r10,20(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 20);
	// stw r10,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r10.u32);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,24(r27)
	PPC_STORE_U32(r27.u32 + 24, ctx.r10.u32);
	// stw r11,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r11.u32);
	// lwz r11,260(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 260);
	// stw r11,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r11.u32);
	// dcbzl r0,r11
	memset(base + ((r11.u32) & ~127), 0, 128);
	// lwz r7,132(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// cmplwi cr6,r7,128
	cr6.compare<uint32_t>(ctx.r7.u32, 128, xer);
	// blt cr6,0x82714374
	if (cr6.lt) goto loc_82714374;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82611f38
	sub_82611F38(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// b 0x827143f0
	goto loc_827143F0;
loc_82714374:
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// lwz r6,100(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// ble cr6,0x827143ec
	if (!cr6.gt) goto loc_827143EC;
	// lwz r5,136(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// lwz r3,140(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// lwz r30,144(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// lwz r8,148(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
loc_82714394:
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
	// rlwinm r10,r10,24,8,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0xFFFFFF;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// mullw r10,r10,r5
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r5.s32);
	// add r29,r10,r3
	r29.u64 = ctx.r10.u64 + ctx.r3.u64;
	// rlwinm r10,r9,25,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 25) & 0x1;
	// clrlwi r9,r9,26
	ctx.r9.u64 = ctx.r9.u32 & 0x3F;
	// neg r10,r10
	ctx.r10.s64 = -ctx.r10.s64;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// xor r29,r29,r10
	r29.u64 = r29.u64 ^ ctx.r10.u64;
	// subf r10,r10,r29
	ctx.r10.s64 = r29.s64 - ctx.r10.s64;
	// lbzx r8,r9,r4
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r9.u32 + ctx.r4.u32);
	// rotlwi r28,r8,1
	r28.u64 = __builtin_rotateleft32(ctx.r8.u32, 1);
	// lbzx r29,r8,r31
	r29.u64 = PPC_LOAD_U8(ctx.r8.u32 + r31.u32);
	// addi r8,r9,1
	ctx.r8.s64 = ctx.r9.s64 + 1;
	// or r6,r29,r6
	ctx.r6.u64 = r29.u64 | ctx.r6.u64;
	// sthx r10,r28,r30
	PPC_STORE_U16(r28.u32 + r30.u32, ctx.r10.u16);
	// bne cr6,0x82714394
	if (!cr6.eq) goto loc_82714394;
loc_827143EC:
	// stw r11,20(r27)
	PPC_STORE_U32(r27.u32 + 20, r11.u32);
loc_827143F0:
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// bne cr6,0x82714464
	if (!cr6.eq) goto loc_82714464;
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r10,104(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lhz r11,0(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// rlwinm r9,r11,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// add r11,r9,r11
	r11.u64 = ctx.r9.u64 + r11.u64;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// srawi r11,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	r11.s64 = r11.s32 >> 3;
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// addi r11,r11,16
	r11.s64 = r11.s64 + 16;
	// srawi r11,r11,5
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1F) != 0);
	r11.s64 = r11.s32 >> 5;
	// clrldi r11,r11,48
	r11.u64 = r11.u64 & 0xFFFF;
	// rldicr r9,r11,16,47
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 16) & 0xFFFFFFFFFFFF0000;
	// or r11,r9,r11
	r11.u64 = ctx.r9.u64 | r11.u64;
	// rldicr r9,r11,32,31
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 32) & 0xFFFFFFFF00000000;
	// or r11,r9,r11
	r11.u64 = ctx.r9.u64 | r11.u64;
	// std r11,120(r10)
	PPC_STORE_U64(ctx.r10.u32 + 120, r11.u64);
	// std r11,104(r10)
	PPC_STORE_U64(ctx.r10.u32 + 104, r11.u64);
	// std r11,88(r10)
	PPC_STORE_U64(ctx.r10.u32 + 88, r11.u64);
	// std r11,72(r10)
	PPC_STORE_U64(ctx.r10.u32 + 72, r11.u64);
	// std r11,56(r10)
	PPC_STORE_U64(ctx.r10.u32 + 56, r11.u64);
	// std r11,40(r10)
	PPC_STORE_U64(ctx.r10.u32 + 40, r11.u64);
	// std r11,24(r10)
	PPC_STORE_U64(ctx.r10.u32 + 24, r11.u64);
	// std r11,8(r10)
	PPC_STORE_U64(ctx.r10.u32 + 8, r11.u64);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x8239bd38
	return;
loc_82714464:
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lwz r3,108(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// addi r4,r11,8
	ctx.r4.s64 = r11.s64 + 8;
	// bl 0x826ffbb0
	sub_826FFBB0(ctx, base);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x8239bd38
	return;
}

__attribute__((alias("__imp__sub_8271447C"))) PPC_WEAK_FUNC(sub_8271447C);
PPC_FUNC_IMPL(__imp__sub_8271447C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_82714480"))) PPC_WEAK_FUNC(sub_82714480);
PPC_FUNC_IMPL(__imp__sub_82714480) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcf0
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// add r10,r3,r5
	ctx.r10.u64 = ctx.r3.u64 + ctx.r5.u64;
	// mr r11,r4
	r11.u64 = ctx.r4.u64;
	// mr r7,r6
	ctx.r7.u64 = ctx.r6.u64;
	// lbz r10,500(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 500);
	// stb r10,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r10.u8);
	// lwz r10,448(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 448);
	// dcbzl r0,r10
	memset(base + ((ctx.r10.u32) & ~127), 0, 128);
	// addi r5,r3,996
	ctx.r5.s64 = ctx.r3.s64 + 996;
	// lwz r10,448(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 448);
	// lwz r9,260(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 260);
	// lwz r4,464(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 464);
	// stw r10,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r10.u32);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// stw r9,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r9.u32);
	// lwz r9,20(r7)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + 20);
	// stw r10,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r10.u32);
	// lbz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// stw r9,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r9.u32);
	// clrlwi r27,r10,30
	r27.u64 = ctx.r10.u32 & 0x3;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// stw r10,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r10.u32);
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r10.u32);
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// lwz r10,24(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + 24);
	// addi r9,r10,1
	ctx.r9.s64 = ctx.r10.s64 + 1;
	// lbz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// stw r9,24(r7)
	PPC_STORE_U32(ctx.r7.u32 + 24, ctx.r9.u32);
	// stw r10,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r10.u32);
	// lwz r10,260(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 260);
	// stw r10,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r10.u32);
	// dcbzl r0,r10
	memset(base + ((ctx.r10.u32) & ~127), 0, 128);
	// lwz r10,100(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmplwi cr6,r10,128
	cr6.compare<uint32_t>(ctx.r10.u32, 128, xer);
	// blt cr6,0x82714524
	if (cr6.lt) goto loc_82714524;
	// mr r6,r11
	ctx.r6.u64 = r11.u64;
	// bl 0x82611f38
	sub_82611F38(ctx, base);
	// b 0x827145a8
	goto loc_827145A8;
loc_82714524:
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// lwz r31,88(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// ble cr6,0x827145a0
	if (!cr6.gt) goto loc_827145A0;
	// lwz r30,104(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// lwz r29,108(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r28,112(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lwz r8,116(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
loc_82714548:
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r3,r3,-1
	ctx.r3.s64 = ctx.r3.s64 + -1;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
	// rlwinm r10,r10,24,8,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0xFFFFFF;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// mullw r10,r10,r30
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(r30.s32);
	// add r6,r10,r29
	ctx.r6.u64 = ctx.r10.u64 + r29.u64;
	// rlwinm r10,r9,25,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 25) & 0x1;
	// clrlwi r9,r9,26
	ctx.r9.u64 = ctx.r9.u32 & 0x3F;
	// neg r10,r10
	ctx.r10.s64 = -ctx.r10.s64;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// xor r6,r6,r10
	ctx.r6.u64 = ctx.r6.u64 ^ ctx.r10.u64;
	// subf r10,r10,r6
	ctx.r10.s64 = ctx.r6.s64 - ctx.r10.s64;
	// lbzx r8,r9,r4
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r9.u32 + ctx.r4.u32);
	// rotlwi r26,r8,1
	r26.u64 = __builtin_rotateleft32(ctx.r8.u32, 1);
	// lbzx r6,r8,r5
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r8.u32 + ctx.r5.u32);
	// addi r8,r9,1
	ctx.r8.s64 = ctx.r9.s64 + 1;
	// or r31,r6,r31
	r31.u64 = ctx.r6.u64 | r31.u64;
	// sthx r10,r26,r28
	PPC_STORE_U16(r26.u32 + r28.u32, ctx.r10.u16);
	// bne cr6,0x82714548
	if (!cr6.eq) goto loc_82714548;
loc_827145A0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,20(r7)
	PPC_STORE_U32(ctx.r7.u32 + 20, r11.u32);
loc_827145A8:
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82714620
	if (!cr6.eq) goto loc_82714620;
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// clrlwi r9,r27,31
	ctx.r9.u64 = r27.u32 & 0x1;
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rlwinm r11,r27,2,28,28
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0x8;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// lwz r9,96(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r9,r10,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// srawi r9,r10,4
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xF) != 0);
	ctx.r9.s64 = ctx.r10.s32 >> 4;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// clrldi r10,r10,48
	ctx.r10.u64 = ctx.r10.u64 & 0xFFFF;
	// rldicr r9,r10,16,47
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u64, 16) & 0xFFFFFFFFFFFF0000;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// rldicr r9,r10,32,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u64, 32) & 0xFFFFFFFF00000000;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// std r10,48(r11)
	PPC_STORE_U64(r11.u32 + 48, ctx.r10.u64);
	// std r10,32(r11)
	PPC_STORE_U64(r11.u32 + 32, ctx.r10.u64);
	// std r10,16(r11)
	PPC_STORE_U64(r11.u32 + 16, ctx.r10.u64);
	// std r10,0(r11)
	PPC_STORE_U64(r11.u32 + 0, ctx.r10.u64);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x8239bd40
	return;
loc_82714620:
	// clrlwi r10,r27,31
	ctx.r10.u64 = r27.u32 & 0x1;
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// rlwinm r11,r27,2,28,28
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0x8;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lwz r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r4,r11,r10
	ctx.r4.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x827000d8
	sub_827000D8(ctx, base);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x8239bd40
	return;
}

__attribute__((alias("__imp__sub_82714648"))) PPC_WEAK_FUNC(sub_82714648);
PPC_FUNC_IMPL(__imp__sub_82714648) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bce4
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// add r11,r31,r5
	r11.u64 = r31.u64 + ctx.r5.u64;
	// mr r26,r6
	r26.u64 = ctx.r6.u64;
	// lbz r11,500(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 500);
	// stb r11,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r11.u8);
	// lwz r11,448(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 448);
	// dcbzl r0,r11
	memset(base + ((r11.u32) & ~127), 0, 128);
	// li r25,0
	r25.s64 = 0;
	// lwz r11,448(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 448);
	// addi r30,r31,996
	r30.s64 = r31.s64 + 996;
	// lwz r10,260(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// lwz r4,464(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 464);
	// stw r25,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r25.u32);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// lwz r10,4(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// stw r25,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r25.u32);
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// lbz r11,80(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// stw r10,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r10.u32);
	// lwz r10,20(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 20);
	// clrlwi r28,r11,30
	r28.u64 = r11.u32 & 0x3;
	// lwz r11,24(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 24);
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,24(r26)
	PPC_STORE_U32(r26.u32 + 24, ctx.r10.u32);
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// lwz r11,260(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// stw r11,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r11.u32);
	// dcbzl r0,r11
	memset(base + ((r11.u32) & ~127), 0, 128);
	// lwz r7,116(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// cmplwi cr6,r7,128
	cr6.compare<uint32_t>(ctx.r7.u32, 128, xer);
	// blt cr6,0x827146fc
	if (cr6.lt) goto loc_827146FC;
	// mr r7,r26
	ctx.r7.u64 = r26.u64;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// bl 0x82611f38
	sub_82611F38(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// b 0x82714778
	goto loc_82714778;
loc_827146FC:
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// lwz r6,88(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// ble cr6,0x82714774
	if (!cr6.gt) goto loc_82714774;
	// lwz r5,120(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// lwz r3,124(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// lwz r29,128(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// lwz r8,132(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
loc_8271471C:
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
	// rlwinm r10,r10,24,8,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0xFFFFFF;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// mullw r10,r10,r5
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r5.s32);
	// add r24,r10,r3
	r24.u64 = ctx.r10.u64 + ctx.r3.u64;
	// rlwinm r10,r9,25,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 25) & 0x1;
	// clrlwi r9,r9,26
	ctx.r9.u64 = ctx.r9.u32 & 0x3F;
	// neg r10,r10
	ctx.r10.s64 = -ctx.r10.s64;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// xor r24,r24,r10
	r24.u64 = r24.u64 ^ ctx.r10.u64;
	// subf r10,r10,r24
	ctx.r10.s64 = r24.s64 - ctx.r10.s64;
	// lbzx r8,r9,r4
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r9.u32 + ctx.r4.u32);
	// rotlwi r23,r8,1
	r23.u64 = __builtin_rotateleft32(ctx.r8.u32, 1);
	// lbzx r24,r8,r30
	r24.u64 = PPC_LOAD_U8(ctx.r8.u32 + r30.u32);
	// addi r8,r9,1
	ctx.r8.s64 = ctx.r9.s64 + 1;
	// or r6,r24,r6
	ctx.r6.u64 = r24.u64 | ctx.r6.u64;
	// sthx r10,r23,r29
	PPC_STORE_U16(r23.u32 + r29.u32, ctx.r10.u16);
	// bne cr6,0x8271471c
	if (!cr6.eq) goto loc_8271471C;
loc_82714774:
	// stw r11,20(r26)
	PPC_STORE_U32(r26.u32 + 20, r11.u32);
loc_82714778:
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// bne cr6,0x827147ec
	if (!cr6.eq) goto loc_827147EC;
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// clrlwi r9,r28,31
	ctx.r9.u64 = r28.u32 & 0x1;
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rlwinm r11,r28,2,28,28
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0x8;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// lwz r9,96(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r9,r10,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// srawi r9,r10,4
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xF) != 0);
	ctx.r9.s64 = ctx.r10.s32 >> 4;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// clrldi r10,r10,48
	ctx.r10.u64 = ctx.r10.u64 & 0xFFFF;
	// rldicr r9,r10,16,47
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u64, 16) & 0xFFFFFFFFFFFF0000;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// rldicr r9,r10,32,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u64, 32) & 0xFFFFFFFF00000000;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// std r10,48(r11)
	PPC_STORE_U64(r11.u32 + 48, ctx.r10.u64);
	// std r10,32(r11)
	PPC_STORE_U64(r11.u32 + 32, ctx.r10.u64);
	// std r10,16(r11)
	PPC_STORE_U64(r11.u32 + 16, ctx.r10.u64);
	// std r10,0(r11)
	PPC_STORE_U64(r11.u32 + 0, ctx.r10.u64);
	// b 0x8271480c
	goto loc_8271480C;
loc_827147EC:
	// clrlwi r10,r28,31
	ctx.r10.u64 = r28.u32 & 0x1;
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// rlwinm r11,r28,2,28,28
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0x8;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lwz r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r4,r11,r10
	ctx.r4.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x827000d8
	sub_827000D8(ctx, base);
loc_8271480C:
	// lbz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// lwz r11,24(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 24);
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// lwz r9,448(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 448);
	// lwz r4,464(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 464);
	// clrlwi r29,r10,30
	r29.u64 = ctx.r10.u32 & 0x3;
	// lwz r10,260(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// stw r25,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, r25.u32);
	// stw r25,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r25.u32);
	// stw r9,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r9.u32);
	// stw r10,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r10.u32);
	// lwz r10,0(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// stw r10,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r10.u32);
	// lwz r10,4(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// stw r10,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r10.u32);
	// lwz r10,20(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 20);
	// stw r10,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r10.u32);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,24(r26)
	PPC_STORE_U32(r26.u32 + 24, ctx.r10.u32);
	// stw r11,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, r11.u32);
	// lwz r11,260(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// stw r11,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, r11.u32);
	// dcbzl r0,r11
	memset(base + ((r11.u32) & ~127), 0, 128);
	// lwz r7,136(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// cmplwi cr6,r7,128
	cr6.compare<uint32_t>(ctx.r7.u32, 128, xer);
	// blt cr6,0x82714894
	if (cr6.lt) goto loc_82714894;
	// mr r7,r26
	ctx.r7.u64 = r26.u64;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82611f38
	sub_82611F38(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// b 0x82714910
	goto loc_82714910;
loc_82714894:
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// lwz r6,104(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// ble cr6,0x8271490c
	if (!cr6.gt) goto loc_8271490C;
	// lwz r5,140(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// lwz r3,144(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// lwz r31,148(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// lwz r8,152(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
loc_827148B4:
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
	// rlwinm r10,r10,24,8,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0xFFFFFF;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// mullw r10,r10,r5
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r5.s32);
	// add r28,r10,r3
	r28.u64 = ctx.r10.u64 + ctx.r3.u64;
	// rlwinm r10,r9,25,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 25) & 0x1;
	// clrlwi r9,r9,26
	ctx.r9.u64 = ctx.r9.u32 & 0x3F;
	// neg r10,r10
	ctx.r10.s64 = -ctx.r10.s64;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// xor r28,r28,r10
	r28.u64 = r28.u64 ^ ctx.r10.u64;
	// subf r10,r10,r28
	ctx.r10.s64 = r28.s64 - ctx.r10.s64;
	// lbzx r8,r9,r4
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r9.u32 + ctx.r4.u32);
	// rotlwi r27,r8,1
	r27.u64 = __builtin_rotateleft32(ctx.r8.u32, 1);
	// lbzx r28,r8,r30
	r28.u64 = PPC_LOAD_U8(ctx.r8.u32 + r30.u32);
	// addi r8,r9,1
	ctx.r8.s64 = ctx.r9.s64 + 1;
	// or r6,r28,r6
	ctx.r6.u64 = r28.u64 | ctx.r6.u64;
	// sthx r10,r27,r31
	PPC_STORE_U16(r27.u32 + r31.u32, ctx.r10.u16);
	// bne cr6,0x827148b4
	if (!cr6.eq) goto loc_827148B4;
loc_8271490C:
	// stw r11,20(r26)
	PPC_STORE_U32(r26.u32 + 20, r11.u32);
loc_82714910:
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// bne cr6,0x82714988
	if (!cr6.eq) goto loc_82714988;
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// clrlwi r9,r29,31
	ctx.r9.u64 = r29.u32 & 0x1;
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rlwinm r11,r29,2,28,28
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 2) & 0x8;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// lwz r9,112(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r9,r10,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// srawi r9,r10,4
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xF) != 0);
	ctx.r9.s64 = ctx.r10.s32 >> 4;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// clrldi r10,r10,48
	ctx.r10.u64 = ctx.r10.u64 & 0xFFFF;
	// rldicr r9,r10,16,47
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u64, 16) & 0xFFFFFFFFFFFF0000;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// rldicr r9,r10,32,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u64, 32) & 0xFFFFFFFF00000000;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// std r10,48(r11)
	PPC_STORE_U64(r11.u32 + 48, ctx.r10.u64);
	// std r10,32(r11)
	PPC_STORE_U64(r11.u32 + 32, ctx.r10.u64);
	// std r10,16(r11)
	PPC_STORE_U64(r11.u32 + 16, ctx.r10.u64);
	// std r10,0(r11)
	PPC_STORE_U64(r11.u32 + 0, ctx.r10.u64);
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// b 0x8239bd34
	return;
loc_82714988:
	// clrlwi r10,r29,31
	ctx.r10.u64 = r29.u32 & 0x1;
	// lwz r3,108(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// rlwinm r11,r29,2,28,28
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 2) & 0x8;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r4,r11,r10
	ctx.r4.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x827000d8
	sub_827000D8(ctx, base);
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// b 0x8239bd34
	return;
}

__attribute__((alias("__imp__sub_827149B0"))) PPC_WEAK_FUNC(sub_827149B0);
PPC_FUNC_IMPL(__imp__sub_827149B0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bce4
	// stwu r1,-272(r1)
	ea = -272 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r26,r4
	r26.u64 = ctx.r4.u64;
	// add r11,r31,r5
	r11.u64 = r31.u64 + ctx.r5.u64;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// lbz r11,500(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 500);
	// stb r11,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r11.u8);
	// lwz r11,448(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 448);
	// dcbzl r0,r11
	memset(base + ((r11.u32) & ~127), 0, 128);
	// li r25,0
	r25.s64 = 0;
	// lwz r11,448(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 448);
	// addi r29,r31,996
	r29.s64 = r31.s64 + 996;
	// lwz r10,260(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// lwz r4,464(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 464);
	// stw r25,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, r25.u32);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// lwz r10,4(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// stw r25,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r25.u32);
	// stw r11,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, r11.u32);
	// lbz r11,80(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// stw r10,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r10.u32);
	// lwz r10,20(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 20);
	// clrlwi r28,r11,30
	r28.u64 = r11.u32 & 0x3;
	// lwz r11,24(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 24);
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,24(r27)
	PPC_STORE_U32(r27.u32 + 24, ctx.r10.u32);
	// stw r11,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r11.u32);
	// lwz r11,260(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// stw r11,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r11.u32);
	// dcbzl r0,r11
	memset(base + ((r11.u32) & ~127), 0, 128);
	// lwz r7,132(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// cmplwi cr6,r7,128
	cr6.compare<uint32_t>(ctx.r7.u32, 128, xer);
	// blt cr6,0x82714a64
	if (cr6.lt) goto loc_82714A64;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// bl 0x82611f38
	sub_82611F38(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// b 0x82714ae0
	goto loc_82714AE0;
loc_82714A64:
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// lwz r6,88(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// ble cr6,0x82714adc
	if (!cr6.gt) goto loc_82714ADC;
	// lwz r5,136(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// lwz r3,140(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// lwz r30,144(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// lwz r8,148(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
loc_82714A84:
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
	// rlwinm r10,r10,24,8,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0xFFFFFF;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// mullw r10,r10,r5
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r5.s32);
	// add r24,r10,r3
	r24.u64 = ctx.r10.u64 + ctx.r3.u64;
	// rlwinm r10,r9,25,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 25) & 0x1;
	// clrlwi r9,r9,26
	ctx.r9.u64 = ctx.r9.u32 & 0x3F;
	// neg r10,r10
	ctx.r10.s64 = -ctx.r10.s64;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// xor r24,r24,r10
	r24.u64 = r24.u64 ^ ctx.r10.u64;
	// subf r10,r10,r24
	ctx.r10.s64 = r24.s64 - ctx.r10.s64;
	// lbzx r8,r9,r4
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r9.u32 + ctx.r4.u32);
	// rotlwi r23,r8,1
	r23.u64 = __builtin_rotateleft32(ctx.r8.u32, 1);
	// lbzx r24,r8,r29
	r24.u64 = PPC_LOAD_U8(ctx.r8.u32 + r29.u32);
	// addi r8,r9,1
	ctx.r8.s64 = ctx.r9.s64 + 1;
	// or r6,r24,r6
	ctx.r6.u64 = r24.u64 | ctx.r6.u64;
	// sthx r10,r23,r30
	PPC_STORE_U16(r23.u32 + r30.u32, ctx.r10.u16);
	// bne cr6,0x82714a84
	if (!cr6.eq) goto loc_82714A84;
loc_82714ADC:
	// stw r11,20(r27)
	PPC_STORE_U32(r27.u32 + 20, r11.u32);
loc_82714AE0:
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// bne cr6,0x82714b54
	if (!cr6.eq) goto loc_82714B54;
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// clrlwi r9,r28,31
	ctx.r9.u64 = r28.u32 & 0x1;
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rlwinm r11,r28,2,28,28
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0x8;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// lwz r9,96(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r9,r10,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// srawi r9,r10,4
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xF) != 0);
	ctx.r9.s64 = ctx.r10.s32 >> 4;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// clrldi r10,r10,48
	ctx.r10.u64 = ctx.r10.u64 & 0xFFFF;
	// rldicr r9,r10,16,47
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u64, 16) & 0xFFFFFFFFFFFF0000;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// rldicr r9,r10,32,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u64, 32) & 0xFFFFFFFF00000000;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// std r10,48(r11)
	PPC_STORE_U64(r11.u32 + 48, ctx.r10.u64);
	// std r10,32(r11)
	PPC_STORE_U64(r11.u32 + 32, ctx.r10.u64);
	// std r10,16(r11)
	PPC_STORE_U64(r11.u32 + 16, ctx.r10.u64);
	// std r10,0(r11)
	PPC_STORE_U64(r11.u32 + 0, ctx.r10.u64);
	// b 0x82714b74
	goto loc_82714B74;
loc_82714B54:
	// clrlwi r10,r28,31
	ctx.r10.u64 = r28.u32 & 0x1;
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// rlwinm r11,r28,2,28,28
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0x8;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lwz r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r4,r11,r10
	ctx.r4.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x827000d8
	sub_827000D8(ctx, base);
loc_82714B74:
	// lbz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// lwz r11,24(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 24);
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// lwz r9,448(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 448);
	// lwz r4,464(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 464);
	// clrlwi r28,r10,30
	r28.u64 = ctx.r10.u32 & 0x3;
	// stw r25,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, r25.u32);
	// stw r25,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r25.u32);
	// stb r10,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r10.u8);
	// lwz r10,260(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// stw r9,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r9.u32);
	// stw r10,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r10.u32);
	// lwz r10,0(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// stw r10,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, ctx.r10.u32);
	// lwz r10,4(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// stw r10,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r10.u32);
	// lwz r10,20(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 20);
	// stw r10,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r10.u32);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,24(r27)
	PPC_STORE_U32(r27.u32 + 24, ctx.r10.u32);
	// stw r11,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, r11.u32);
	// lwz r11,260(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// stw r11,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, r11.u32);
	// dcbzl r0,r11
	memset(base + ((r11.u32) & ~127), 0, 128);
	// lwz r7,152(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// cmplwi cr6,r7,128
	cr6.compare<uint32_t>(ctx.r7.u32, 128, xer);
	// blt cr6,0x82714c00
	if (cr6.lt) goto loc_82714C00;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82611f38
	sub_82611F38(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// b 0x82714c7c
	goto loc_82714C7C;
loc_82714C00:
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// lwz r6,104(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// ble cr6,0x82714c78
	if (!cr6.gt) goto loc_82714C78;
	// lwz r5,156(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// lwz r3,160(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// lwz r30,164(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// lwz r8,168(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
loc_82714C20:
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
	// rlwinm r10,r10,24,8,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0xFFFFFF;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// mullw r10,r10,r5
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r5.s32);
	// add r24,r10,r3
	r24.u64 = ctx.r10.u64 + ctx.r3.u64;
	// rlwinm r10,r9,25,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 25) & 0x1;
	// clrlwi r9,r9,26
	ctx.r9.u64 = ctx.r9.u32 & 0x3F;
	// neg r10,r10
	ctx.r10.s64 = -ctx.r10.s64;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// xor r24,r24,r10
	r24.u64 = r24.u64 ^ ctx.r10.u64;
	// subf r10,r10,r24
	ctx.r10.s64 = r24.s64 - ctx.r10.s64;
	// lbzx r8,r9,r4
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r9.u32 + ctx.r4.u32);
	// rotlwi r23,r8,1
	r23.u64 = __builtin_rotateleft32(ctx.r8.u32, 1);
	// lbzx r24,r8,r29
	r24.u64 = PPC_LOAD_U8(ctx.r8.u32 + r29.u32);
	// addi r8,r9,1
	ctx.r8.s64 = ctx.r9.s64 + 1;
	// or r6,r24,r6
	ctx.r6.u64 = r24.u64 | ctx.r6.u64;
	// sthx r10,r23,r30
	PPC_STORE_U16(r23.u32 + r30.u32, ctx.r10.u16);
	// bne cr6,0x82714c20
	if (!cr6.eq) goto loc_82714C20;
loc_82714C78:
	// stw r11,20(r27)
	PPC_STORE_U32(r27.u32 + 20, r11.u32);
loc_82714C7C:
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// bne cr6,0x82714cf0
	if (!cr6.eq) goto loc_82714CF0;
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// clrlwi r9,r28,31
	ctx.r9.u64 = r28.u32 & 0x1;
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rlwinm r11,r28,2,28,28
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0x8;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// lwz r9,112(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r9,r10,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// srawi r9,r10,4
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xF) != 0);
	ctx.r9.s64 = ctx.r10.s32 >> 4;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// clrldi r10,r10,48
	ctx.r10.u64 = ctx.r10.u64 & 0xFFFF;
	// rldicr r9,r10,16,47
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u64, 16) & 0xFFFFFFFFFFFF0000;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// rldicr r9,r10,32,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u64, 32) & 0xFFFFFFFF00000000;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// std r10,48(r11)
	PPC_STORE_U64(r11.u32 + 48, ctx.r10.u64);
	// std r10,32(r11)
	PPC_STORE_U64(r11.u32 + 32, ctx.r10.u64);
	// std r10,16(r11)
	PPC_STORE_U64(r11.u32 + 16, ctx.r10.u64);
	// std r10,0(r11)
	PPC_STORE_U64(r11.u32 + 0, ctx.r10.u64);
	// b 0x82714d10
	goto loc_82714D10;
loc_82714CF0:
	// clrlwi r10,r28,31
	ctx.r10.u64 = r28.u32 & 0x1;
	// lwz r3,108(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// rlwinm r11,r28,2,28,28
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0x8;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r4,r11,r10
	ctx.r4.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x827000d8
	sub_827000D8(ctx, base);
loc_82714D10:
	// lbz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// lwz r11,24(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 24);
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// lwz r9,448(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 448);
	// lwz r4,464(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 464);
	// clrlwi r30,r10,30
	r30.u64 = ctx.r10.u32 & 0x3;
	// lwz r10,260(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// stw r25,188(r1)
	PPC_STORE_U32(ctx.r1.u32 + 188, r25.u32);
	// stw r25,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r25.u32);
	// stw r9,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r9.u32);
	// stw r10,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r10.u32);
	// lwz r10,0(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// stw r10,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, ctx.r10.u32);
	// lwz r10,4(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// stw r10,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, ctx.r10.u32);
	// lwz r10,20(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 20);
	// stw r10,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r10.u32);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,24(r27)
	PPC_STORE_U32(r27.u32 + 24, ctx.r10.u32);
	// stw r11,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, r11.u32);
	// lwz r11,260(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// stw r11,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, r11.u32);
	// dcbzl r0,r11
	memset(base + ((r11.u32) & ~127), 0, 128);
	// lwz r7,172(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// cmplwi cr6,r7,128
	cr6.compare<uint32_t>(ctx.r7.u32, 128, xer);
	// blt cr6,0x82714d98
	if (cr6.lt) goto loc_82714D98;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82611f38
	sub_82611F38(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// b 0x82714e14
	goto loc_82714E14;
loc_82714D98:
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// lwz r6,120(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// ble cr6,0x82714e10
	if (!cr6.gt) goto loc_82714E10;
	// lwz r5,176(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// lwz r3,180(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r31,184(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// lwz r8,188(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
loc_82714DB8:
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
	// rlwinm r10,r10,24,8,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0xFFFFFF;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// mullw r10,r10,r5
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r5.s32);
	// add r28,r10,r3
	r28.u64 = ctx.r10.u64 + ctx.r3.u64;
	// rlwinm r10,r9,25,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 25) & 0x1;
	// clrlwi r9,r9,26
	ctx.r9.u64 = ctx.r9.u32 & 0x3F;
	// neg r10,r10
	ctx.r10.s64 = -ctx.r10.s64;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// xor r28,r28,r10
	r28.u64 = r28.u64 ^ ctx.r10.u64;
	// subf r10,r10,r28
	ctx.r10.s64 = r28.s64 - ctx.r10.s64;
	// lbzx r8,r9,r4
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r9.u32 + ctx.r4.u32);
	// rotlwi r26,r8,1
	r26.u64 = __builtin_rotateleft32(ctx.r8.u32, 1);
	// lbzx r28,r8,r29
	r28.u64 = PPC_LOAD_U8(ctx.r8.u32 + r29.u32);
	// addi r8,r9,1
	ctx.r8.s64 = ctx.r9.s64 + 1;
	// or r6,r28,r6
	ctx.r6.u64 = r28.u64 | ctx.r6.u64;
	// sthx r10,r26,r31
	PPC_STORE_U16(r26.u32 + r31.u32, ctx.r10.u16);
	// bne cr6,0x82714db8
	if (!cr6.eq) goto loc_82714DB8;
loc_82714E10:
	// stw r11,20(r27)
	PPC_STORE_U32(r27.u32 + 20, r11.u32);
loc_82714E14:
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// bne cr6,0x82714e8c
	if (!cr6.eq) goto loc_82714E8C;
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// clrlwi r9,r30,31
	ctx.r9.u64 = r30.u32 & 0x1;
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rlwinm r11,r30,2,28,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0x8;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// lwz r9,128(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r9,r10,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// srawi r9,r10,4
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xF) != 0);
	ctx.r9.s64 = ctx.r10.s32 >> 4;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// clrldi r10,r10,48
	ctx.r10.u64 = ctx.r10.u64 & 0xFFFF;
	// rldicr r9,r10,16,47
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u64, 16) & 0xFFFFFFFFFFFF0000;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// rldicr r9,r10,32,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u64, 32) & 0xFFFFFFFF00000000;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// std r10,48(r11)
	PPC_STORE_U64(r11.u32 + 48, ctx.r10.u64);
	// std r10,32(r11)
	PPC_STORE_U64(r11.u32 + 32, ctx.r10.u64);
	// std r10,16(r11)
	PPC_STORE_U64(r11.u32 + 16, ctx.r10.u64);
	// std r10,0(r11)
	PPC_STORE_U64(r11.u32 + 0, ctx.r10.u64);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// b 0x8239bd34
	return;
loc_82714E8C:
	// clrlwi r10,r30,31
	ctx.r10.u64 = r30.u32 & 0x1;
	// lwz r3,124(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// rlwinm r11,r30,2,28,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0x8;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lwz r10,128(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r4,r11,r10
	ctx.r4.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x827000d8
	sub_827000D8(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// b 0x8239bd34
	return;
}

__attribute__((alias("__imp__sub_82714EB4"))) PPC_WEAK_FUNC(sub_82714EB4);
PPC_FUNC_IMPL(__imp__sub_82714EB4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_82714EB8"))) PPC_WEAK_FUNC(sub_82714EB8);
PPC_FUNC_IMPL(__imp__sub_82714EB8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bce4
	// stwu r1,-320(r1)
	ea = -320 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r26,r4
	r26.u64 = ctx.r4.u64;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// li r25,0
	r25.s64 = 0;
	// addi r30,r29,996
	r30.s64 = r29.s64 + 996;
	// lwz r10,260(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 260);
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// lwz r4,464(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 464);
	// stw r25,196(r1)
	PPC_STORE_U32(ctx.r1.u32 + 196, r25.u32);
	// stw r25,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r25.u32);
	// stw r10,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r10.u32);
	// lwz r10,448(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 448);
	// stw r11,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, r11.u32);
	// add r11,r29,r5
	r11.u64 = r29.u64 + ctx.r5.u64;
	// stw r10,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r10.u32);
	// lwz r10,4(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// lbz r11,500(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 500);
	// clrlwi r28,r11,30
	r28.u64 = r11.u32 & 0x3;
	// stw r10,220(r1)
	PPC_STORE_U32(ctx.r1.u32 + 220, ctx.r10.u32);
	// lwz r10,20(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 20);
	// stb r11,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r11.u8);
	// lwz r11,24(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 24);
	// stw r10,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r10.u32);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,24(r27)
	PPC_STORE_U32(r27.u32 + 24, ctx.r10.u32);
	// stw r11,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, r11.u32);
	// lwz r11,260(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 260);
	// stw r11,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, r11.u32);
	// dcbzl r0,r11
	memset(base + ((r11.u32) & ~127), 0, 128);
	// lwz r7,156(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// cmplwi cr6,r7,128
	cr6.compare<uint32_t>(ctx.r7.u32, 128, xer);
	// blt cr6,0x82714f60
	if (cr6.lt) goto loc_82714F60;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// bl 0x82611f38
	sub_82611F38(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// b 0x82714fdc
	goto loc_82714FDC;
loc_82714F60:
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// lwz r6,92(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// ble cr6,0x82714fd8
	if (!cr6.gt) goto loc_82714FD8;
	// lwz r5,148(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// lwz r3,220(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 220);
	// lwz r31,164(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// lwz r8,196(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 196);
loc_82714F80:
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
	// rlwinm r10,r10,24,8,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0xFFFFFF;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// mullw r10,r10,r5
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r5.s32);
	// add r24,r10,r3
	r24.u64 = ctx.r10.u64 + ctx.r3.u64;
	// rlwinm r10,r9,25,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 25) & 0x1;
	// clrlwi r9,r9,26
	ctx.r9.u64 = ctx.r9.u32 & 0x3F;
	// neg r10,r10
	ctx.r10.s64 = -ctx.r10.s64;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// xor r24,r24,r10
	r24.u64 = r24.u64 ^ ctx.r10.u64;
	// subf r10,r10,r24
	ctx.r10.s64 = r24.s64 - ctx.r10.s64;
	// lbzx r8,r9,r4
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r9.u32 + ctx.r4.u32);
	// rotlwi r23,r8,1
	r23.u64 = __builtin_rotateleft32(ctx.r8.u32, 1);
	// lbzx r24,r8,r30
	r24.u64 = PPC_LOAD_U8(ctx.r8.u32 + r30.u32);
	// addi r8,r9,1
	ctx.r8.s64 = ctx.r9.s64 + 1;
	// or r6,r24,r6
	ctx.r6.u64 = r24.u64 | ctx.r6.u64;
	// sthx r10,r23,r31
	PPC_STORE_U16(r23.u32 + r31.u32, ctx.r10.u16);
	// bne cr6,0x82714f80
	if (!cr6.eq) goto loc_82714F80;
loc_82714FD8:
	// stw r11,20(r27)
	PPC_STORE_U32(r27.u32 + 20, r11.u32);
loc_82714FDC:
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// bne cr6,0x82715050
	if (!cr6.eq) goto loc_82715050;
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// clrlwi r9,r28,31
	ctx.r9.u64 = r28.u32 & 0x1;
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rlwinm r11,r28,2,28,28
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0x8;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// lwz r9,100(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r9,r10,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// srawi r9,r10,4
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xF) != 0);
	ctx.r9.s64 = ctx.r10.s32 >> 4;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// clrldi r10,r10,48
	ctx.r10.u64 = ctx.r10.u64 & 0xFFFF;
	// rldicr r9,r10,16,47
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u64, 16) & 0xFFFFFFFFFFFF0000;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// rldicr r9,r10,32,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u64, 32) & 0xFFFFFFFF00000000;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// std r10,48(r11)
	PPC_STORE_U64(r11.u32 + 48, ctx.r10.u64);
	// std r10,32(r11)
	PPC_STORE_U64(r11.u32 + 32, ctx.r10.u64);
	// std r10,16(r11)
	PPC_STORE_U64(r11.u32 + 16, ctx.r10.u64);
	// std r10,0(r11)
	PPC_STORE_U64(r11.u32 + 0, ctx.r10.u64);
	// b 0x82715070
	goto loc_82715070;
loc_82715050:
	// clrlwi r10,r28,31
	ctx.r10.u64 = r28.u32 & 0x1;
	// lwz r3,132(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// rlwinm r11,r28,2,28,28
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0x8;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lwz r10,100(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r4,r11,r10
	ctx.r4.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x827000d8
	sub_827000D8(ctx, base);
loc_82715070:
	// lbz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// lwz r11,24(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 24);
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// lwz r9,448(r29)
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + 448);
	// lwz r4,464(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 464);
	// clrlwi r28,r10,30
	r28.u64 = ctx.r10.u32 & 0x3;
	// stw r25,188(r1)
	PPC_STORE_U32(ctx.r1.u32 + 188, r25.u32);
	// stw r25,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r25.u32);
	// stb r10,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r10.u8);
	// lwz r10,260(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 260);
	// stw r9,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r9.u32);
	// stw r10,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r10.u32);
	// lwz r10,0(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// stw r10,212(r1)
	PPC_STORE_U32(ctx.r1.u32 + 212, ctx.r10.u32);
	// lwz r10,4(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// stw r10,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, ctx.r10.u32);
	// lwz r10,20(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 20);
	// stw r10,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r10.u32);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,24(r27)
	PPC_STORE_U32(r27.u32 + 24, ctx.r10.u32);
	// stw r11,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, r11.u32);
	// lwz r11,260(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 260);
	// stw r11,204(r1)
	PPC_STORE_U32(ctx.r1.u32 + 204, r11.u32);
	// dcbzl r0,r11
	memset(base + ((r11.u32) & ~127), 0, 128);
	// lwz r7,172(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// cmplwi cr6,r7,128
	cr6.compare<uint32_t>(ctx.r7.u32, 128, xer);
	// blt cr6,0x827150fc
	if (cr6.lt) goto loc_827150FC;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82611f38
	sub_82611F38(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// b 0x82715178
	goto loc_82715178;
loc_827150FC:
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// lwz r6,108(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// ble cr6,0x82715174
	if (!cr6.gt) goto loc_82715174;
	// lwz r5,212(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 212);
	// lwz r3,180(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r31,204(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 204);
	// lwz r8,188(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
loc_8271511C:
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
	// rlwinm r10,r10,24,8,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0xFFFFFF;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// mullw r10,r10,r5
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r5.s32);
	// add r24,r10,r3
	r24.u64 = ctx.r10.u64 + ctx.r3.u64;
	// rlwinm r10,r9,25,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 25) & 0x1;
	// clrlwi r9,r9,26
	ctx.r9.u64 = ctx.r9.u32 & 0x3F;
	// neg r10,r10
	ctx.r10.s64 = -ctx.r10.s64;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// xor r24,r24,r10
	r24.u64 = r24.u64 ^ ctx.r10.u64;
	// subf r10,r10,r24
	ctx.r10.s64 = r24.s64 - ctx.r10.s64;
	// lbzx r8,r9,r4
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r9.u32 + ctx.r4.u32);
	// rotlwi r23,r8,1
	r23.u64 = __builtin_rotateleft32(ctx.r8.u32, 1);
	// lbzx r24,r8,r30
	r24.u64 = PPC_LOAD_U8(ctx.r8.u32 + r30.u32);
	// addi r8,r9,1
	ctx.r8.s64 = ctx.r9.s64 + 1;
	// or r6,r24,r6
	ctx.r6.u64 = r24.u64 | ctx.r6.u64;
	// sthx r10,r23,r31
	PPC_STORE_U16(r23.u32 + r31.u32, ctx.r10.u16);
	// bne cr6,0x8271511c
	if (!cr6.eq) goto loc_8271511C;
loc_82715174:
	// stw r11,20(r27)
	PPC_STORE_U32(r27.u32 + 20, r11.u32);
loc_82715178:
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// bne cr6,0x827151ec
	if (!cr6.eq) goto loc_827151EC;
	// lwz r11,140(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// clrlwi r9,r28,31
	ctx.r9.u64 = r28.u32 & 0x1;
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rlwinm r11,r28,2,28,28
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0x8;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r9,r10,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// srawi r9,r10,4
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xF) != 0);
	ctx.r9.s64 = ctx.r10.s32 >> 4;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// clrldi r10,r10,48
	ctx.r10.u64 = ctx.r10.u64 & 0xFFFF;
	// rldicr r9,r10,16,47
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u64, 16) & 0xFFFFFFFFFFFF0000;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// rldicr r9,r10,32,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u64, 32) & 0xFFFFFFFF00000000;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// std r10,48(r11)
	PPC_STORE_U64(r11.u32 + 48, ctx.r10.u64);
	// std r10,32(r11)
	PPC_STORE_U64(r11.u32 + 32, ctx.r10.u64);
	// std r10,16(r11)
	PPC_STORE_U64(r11.u32 + 16, ctx.r10.u64);
	// std r10,0(r11)
	PPC_STORE_U64(r11.u32 + 0, ctx.r10.u64);
	// b 0x8271520c
	goto loc_8271520C;
loc_827151EC:
	// clrlwi r10,r28,31
	ctx.r10.u64 = r28.u32 & 0x1;
	// lwz r3,140(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// rlwinm r11,r28,2,28,28
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0x8;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r4,r11,r10
	ctx.r4.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x827000d8
	sub_827000D8(ctx, base);
loc_8271520C:
	// lbz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// lwz r11,24(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 24);
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// lwz r9,448(r29)
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + 448);
	// lwz r4,464(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 464);
	// clrlwi r28,r10,30
	r28.u64 = ctx.r10.u32 & 0x3;
	// stw r25,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, r25.u32);
	// stw r25,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r25.u32);
	// stb r10,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r10.u8);
	// lwz r10,260(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 260);
	// stw r9,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r9.u32);
	// stw r10,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r10.u32);
	// lwz r10,0(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// stw r10,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r10.u32);
	// lwz r10,4(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// stw r10,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, ctx.r10.u32);
	// lwz r10,20(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 20);
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,24(r27)
	PPC_STORE_U32(r27.u32 + 24, ctx.r10.u32);
	// stw r11,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, r11.u32);
	// lwz r11,260(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 260);
	// stw r11,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, r11.u32);
	// dcbzl r0,r11
	memset(base + ((r11.u32) & ~127), 0, 128);
	// lwz r7,152(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// cmplwi cr6,r7,128
	cr6.compare<uint32_t>(ctx.r7.u32, 128, xer);
	// blt cr6,0x82715298
	if (cr6.lt) goto loc_82715298;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82611f38
	sub_82611F38(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// b 0x82715314
	goto loc_82715314;
loc_82715298:
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// lwz r6,96(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// ble cr6,0x82715310
	if (!cr6.gt) goto loc_82715310;
	// lwz r5,160(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// lwz r3,168(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// lwz r31,176(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// lwz r8,184(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
loc_827152B8:
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
	// rlwinm r10,r10,24,8,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0xFFFFFF;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// mullw r10,r10,r5
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r5.s32);
	// add r24,r10,r3
	r24.u64 = ctx.r10.u64 + ctx.r3.u64;
	// rlwinm r10,r9,25,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 25) & 0x1;
	// clrlwi r9,r9,26
	ctx.r9.u64 = ctx.r9.u32 & 0x3F;
	// neg r10,r10
	ctx.r10.s64 = -ctx.r10.s64;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// xor r24,r24,r10
	r24.u64 = r24.u64 ^ ctx.r10.u64;
	// subf r10,r10,r24
	ctx.r10.s64 = r24.s64 - ctx.r10.s64;
	// lbzx r8,r9,r4
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r9.u32 + ctx.r4.u32);
	// rotlwi r23,r8,1
	r23.u64 = __builtin_rotateleft32(ctx.r8.u32, 1);
	// lbzx r24,r8,r30
	r24.u64 = PPC_LOAD_U8(ctx.r8.u32 + r30.u32);
	// addi r8,r9,1
	ctx.r8.s64 = ctx.r9.s64 + 1;
	// or r6,r24,r6
	ctx.r6.u64 = r24.u64 | ctx.r6.u64;
	// sthx r10,r23,r31
	PPC_STORE_U16(r23.u32 + r31.u32, ctx.r10.u16);
	// bne cr6,0x827152b8
	if (!cr6.eq) goto loc_827152B8;
loc_82715310:
	// stw r11,20(r27)
	PPC_STORE_U32(r27.u32 + 20, r11.u32);
loc_82715314:
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// bne cr6,0x82715388
	if (!cr6.eq) goto loc_82715388;
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// clrlwi r9,r28,31
	ctx.r9.u64 = r28.u32 & 0x1;
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rlwinm r11,r28,2,28,28
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0x8;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// lwz r9,112(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r9,r10,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// srawi r9,r10,4
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xF) != 0);
	ctx.r9.s64 = ctx.r10.s32 >> 4;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// clrldi r10,r10,48
	ctx.r10.u64 = ctx.r10.u64 & 0xFFFF;
	// rldicr r9,r10,16,47
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u64, 16) & 0xFFFFFFFFFFFF0000;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// rldicr r9,r10,32,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u64, 32) & 0xFFFFFFFF00000000;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// std r10,48(r11)
	PPC_STORE_U64(r11.u32 + 48, ctx.r10.u64);
	// std r10,32(r11)
	PPC_STORE_U64(r11.u32 + 32, ctx.r10.u64);
	// std r10,16(r11)
	PPC_STORE_U64(r11.u32 + 16, ctx.r10.u64);
	// std r10,0(r11)
	PPC_STORE_U64(r11.u32 + 0, ctx.r10.u64);
	// b 0x827153a8
	goto loc_827153A8;
loc_82715388:
	// clrlwi r10,r28,31
	ctx.r10.u64 = r28.u32 & 0x1;
	// lwz r3,104(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// rlwinm r11,r28,2,28,28
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0x8;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r4,r11,r10
	ctx.r4.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x827000d8
	sub_827000D8(ctx, base);
loc_827153A8:
	// lbz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// lwz r11,24(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 24);
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// lwz r9,448(r29)
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + 448);
	// lwz r4,464(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + 464);
	// clrlwi r28,r10,30
	r28.u64 = ctx.r10.u32 & 0x3;
	// lwz r10,260(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 260);
	// stw r25,224(r1)
	PPC_STORE_U32(ctx.r1.u32 + 224, r25.u32);
	// stw r25,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r25.u32);
	// stw r9,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r9.u32);
	// stw r10,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r10.u32);
	// lwz r10,0(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// stw r10,200(r1)
	PPC_STORE_U32(ctx.r1.u32 + 200, ctx.r10.u32);
	// lwz r10,4(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// stw r10,208(r1)
	PPC_STORE_U32(ctx.r1.u32 + 208, ctx.r10.u32);
	// lwz r10,20(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 20);
	// stw r10,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r10.u32);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r11,0(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,24(r27)
	PPC_STORE_U32(r27.u32 + 24, ctx.r10.u32);
	// stw r11,192(r1)
	PPC_STORE_U32(ctx.r1.u32 + 192, r11.u32);
	// lwz r11,260(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 260);
	// stw r11,216(r1)
	PPC_STORE_U32(ctx.r1.u32 + 216, r11.u32);
	// dcbzl r0,r11
	memset(base + ((r11.u32) & ~127), 0, 128);
	// lwz r7,192(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 192);
	// cmplwi cr6,r7,128
	cr6.compare<uint32_t>(ctx.r7.u32, 128, xer);
	// blt cr6,0x82715430
	if (cr6.lt) goto loc_82715430;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82611f38
	sub_82611F38(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// b 0x827154ac
	goto loc_827154AC;
loc_82715430:
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// lwz r6,128(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// ble cr6,0x827154a8
	if (!cr6.gt) goto loc_827154A8;
	// lwz r5,200(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 200);
	// lwz r3,208(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 208);
	// lwz r31,216(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 216);
	// lwz r8,224(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 224);
loc_82715450:
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
	// rlwinm r10,r10,24,8,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0xFFFFFF;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// mullw r10,r10,r5
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r5.s32);
	// add r29,r10,r3
	r29.u64 = ctx.r10.u64 + ctx.r3.u64;
	// rlwinm r10,r9,25,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 25) & 0x1;
	// clrlwi r9,r9,26
	ctx.r9.u64 = ctx.r9.u32 & 0x3F;
	// neg r10,r10
	ctx.r10.s64 = -ctx.r10.s64;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// xor r29,r29,r10
	r29.u64 = r29.u64 ^ ctx.r10.u64;
	// subf r10,r10,r29
	ctx.r10.s64 = r29.s64 - ctx.r10.s64;
	// lbzx r8,r9,r4
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r9.u32 + ctx.r4.u32);
	// rotlwi r26,r8,1
	r26.u64 = __builtin_rotateleft32(ctx.r8.u32, 1);
	// lbzx r29,r8,r30
	r29.u64 = PPC_LOAD_U8(ctx.r8.u32 + r30.u32);
	// addi r8,r9,1
	ctx.r8.s64 = ctx.r9.s64 + 1;
	// or r6,r29,r6
	ctx.r6.u64 = r29.u64 | ctx.r6.u64;
	// sthx r10,r26,r31
	PPC_STORE_U16(r26.u32 + r31.u32, ctx.r10.u16);
	// bne cr6,0x82715450
	if (!cr6.eq) goto loc_82715450;
loc_827154A8:
	// stw r11,20(r27)
	PPC_STORE_U32(r27.u32 + 20, r11.u32);
loc_827154AC:
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// bne cr6,0x82715524
	if (!cr6.eq) goto loc_82715524;
	// lwz r11,136(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// clrlwi r9,r28,31
	ctx.r9.u64 = r28.u32 & 0x1;
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rlwinm r11,r28,2,28,28
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0x8;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// lwz r9,144(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r9,r10,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// srawi r9,r10,4
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xF) != 0);
	ctx.r9.s64 = ctx.r10.s32 >> 4;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// clrldi r10,r10,48
	ctx.r10.u64 = ctx.r10.u64 & 0xFFFF;
	// rldicr r9,r10,16,47
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u64, 16) & 0xFFFFFFFFFFFF0000;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// rldicr r9,r10,32,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u64, 32) & 0xFFFFFFFF00000000;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// std r10,48(r11)
	PPC_STORE_U64(r11.u32 + 48, ctx.r10.u64);
	// std r10,32(r11)
	PPC_STORE_U64(r11.u32 + 32, ctx.r10.u64);
	// std r10,16(r11)
	PPC_STORE_U64(r11.u32 + 16, ctx.r10.u64);
	// std r10,0(r11)
	PPC_STORE_U64(r11.u32 + 0, ctx.r10.u64);
	// addi r1,r1,320
	ctx.r1.s64 = ctx.r1.s64 + 320;
	// b 0x8239bd34
	return;
loc_82715524:
	// clrlwi r10,r28,31
	ctx.r10.u64 = r28.u32 & 0x1;
	// lwz r3,136(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// rlwinm r11,r28,2,28,28
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0x8;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lwz r10,144(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r4,r11,r10
	ctx.r4.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x827000d8
	sub_827000D8(ctx, base);
	// addi r1,r1,320
	ctx.r1.s64 = ctx.r1.s64 + 320;
	// b 0x8239bd34
	return;
}

__attribute__((alias("__imp__sub_82715600"))) PPC_WEAK_FUNC(sub_82715600);
PPC_FUNC_IMPL(__imp__sub_82715600) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcc0
	// stwu r1,-1888(r1)
	ea = -1888 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// lis r9,1
	ctx.r9.s64 = 65536;
	// mr r19,r5
	r19.u64 = ctx.r5.u64;
	// ori r9,r9,33684
	ctx.r9.u64 = ctx.r9.u64 | 33684;
	// lwz r10,21560(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 21560);
	// addi r27,r30,21712
	r27.s64 = r30.s64 + 21712;
	// lwz r11,1248(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1248);
	// li r28,0
	r28.s64 = 0;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// lwzx r29,r30,r9
	r29.u64 = PPC_LOAD_U32(r30.u32 + ctx.r9.u32);
	// stw r10,28(r19)
	PPC_STORE_U32(r19.u32 + 28, ctx.r10.u32);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// stw r11,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r11.u32);
	// lwz r11,21572(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 21572);
	// stw r27,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, r27.u32);
	// stw r28,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, r28.u32);
	// stw r11,32(r19)
	PPC_STORE_U32(r19.u32 + 32, r11.u32);
	// lis r11,-32126
	r11.s64 = -2105409536;
	// lwz r3,3360(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 3360);
	// bl 0x8271d5f8
	sub_8271D5F8(ctx, base);
	// lwz r7,3720(r30)
	ctx.r7.u64 = PPC_LOAD_U32(r30.u32 + 3720);
	// lwz r6,220(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 220);
	// lwz r9,32(r19)
	ctx.r9.u64 = PPC_LOAD_U32(r19.u32 + 32);
	// add r7,r7,r6
	ctx.r7.u64 = ctx.r7.u64 + ctx.r6.u64;
	// lwz r10,224(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 224);
	// lwz r8,3724(r30)
	ctx.r8.u64 = PPC_LOAD_U32(r30.u32 + 3724);
	// stw r28,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r28.u32);
	// stw r28,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, r28.u32);
	// lwz r11,0(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// stw r7,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r7.u32);
	// clrlwi r7,r11,16
	ctx.r7.u64 = r11.u32 & 0xFFFF;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// stw r28,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r28.u32);
	// stw r28,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r28.u32);
	// stw r9,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r9.u32);
	// lwz r9,3728(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 3728);
	// stw r7,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r7.u32);
	// rlwinm r7,r11,16,20,31
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFF;
	// rlwinm r11,r11,4,29,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0x7;
	// stw r28,0(r19)
	PPC_STORE_U32(r19.u32 + 0, r28.u32);
	// stw r28,4(r19)
	PPC_STORE_U32(r19.u32 + 4, r28.u32);
	// sth r28,16(r19)
	PPC_STORE_U16(r19.u32 + 16, r28.u16);
	// stw r7,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r7.u32);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// addi r11,r29,-1
	r11.s64 = r29.s64 + -1;
	// stw r11,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r11.u32);
	// add r11,r8,r10
	r11.u64 = ctx.r8.u64 + ctx.r10.u64;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// lhz r11,52(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 52);
	// lhz r10,50(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 50);
	// rlwinm r11,r11,31,1,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFF;
	// rlwinm r10,r10,31,1,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stw r11,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, r11.u32);
	// stw r10,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r10.u32);
	// beq cr6,0x82716068
	if (cr6.eq) goto loc_82716068;
loc_827156FC:
	// lwz r9,100(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// li r11,0
	r11.s64 = 0;
	// lwz r6,120(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// mr r23,r11
	r23.u64 = r11.u64;
	// lwz r30,80(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r4,148(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// mr r10,r6
	ctx.r10.u64 = ctx.r6.u64;
	// stw r9,8(r19)
	PPC_STORE_U32(r19.u32 + 8, ctx.r9.u32);
	// cmplw cr6,r30,r4
	cr6.compare<uint32_t>(r30.u32, ctx.r4.u32, xer);
	// lwz r9,108(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// stw r23,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, r23.u32);
	// sth r11,18(r19)
	PPC_STORE_U16(r19.u32 + 18, r11.u16);
	// stw r9,12(r19)
	PPC_STORE_U32(r19.u32 + 12, ctx.r9.u32);
	// bne cr6,0x82715a3c
	if (!cr6.eq) goto loc_82715A3C;
	// lwz r3,104(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// stw r10,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r10.u32);
	// beq cr6,0x82715a3c
	if (cr6.eq) goto loc_82715A3C;
	// lwz r5,96(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
loc_82715750:
	// lwz r7,84(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
loc_82715754:
	// cmplw cr6,r11,r3
	cr6.compare<uint32_t>(r11.u32, ctx.r3.u32, xer);
	// bne cr6,0x827159d8
	if (!cr6.eq) goto loc_827159D8;
	// addi r9,r5,98
	ctx.r9.s64 = ctx.r5.s64 + 98;
	// lwz r10,28(r19)
	ctx.r10.u64 = PPC_LOAD_U32(r19.u32 + 28);
	// srawi r11,r5,2
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x3) != 0);
	r11.s64 = ctx.r5.s32 >> 2;
	// rlwinm r8,r9,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r9,r10,-128
	ctx.r9.s64 = ctx.r10.s64 + -128;
	// lbz r10,0(r7)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r7.u32 + 0);
	// addi r7,r11,2
	ctx.r7.s64 = r11.s64 + 2;
	// clrlwi r10,r10,26
	ctx.r10.u64 = ctx.r10.u32 & 0x3F;
	// stw r11,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, r11.u32);
	// rlwinm r11,r7,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r8,r8,r31
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + r31.u32);
	// li r6,-128
	ctx.r6.s64 = -128;
	// stw r9,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, ctx.r9.u32);
	// stw r10,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, ctx.r10.u32);
	// lwzx r11,r11,r19
	r11.u64 = PPC_LOAD_U32(r11.u32 + r19.u32);
	// lwz r10,260(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// stw r10,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r10.u32);
	// stw r11,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, r11.u32);
	// dcbt r6,r9
	// dcbzl r0,r10
	memset(base + ((ctx.r10.u32) & ~127), 0, 128);
	// lwz r30,96(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r3,176(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// srawi r11,r30,2
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x3) != 0);
	r11.s64 = r30.s32 >> 2;
	// lwz r10,156(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// lwz r7,168(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// addi r9,r11,45
	ctx.r9.s64 = r11.s64 + 45;
	// rlwinm r11,r10,6,18,25
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 6) & 0x3FC0;
	// stw r3,28(r19)
	PPC_STORE_U32(r19.u32 + 28, ctx.r3.u32);
	// rlwinm r8,r9,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r10,224(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 224);
	// lis r9,-32126
	ctx.r9.s64 = -2105409536;
	// lwz r4,260(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// add r5,r11,r10
	ctx.r5.u64 = r11.u64 + ctx.r10.u64;
	// lis r11,-32126
	r11.s64 = -2105409536;
	// lhzx r8,r8,r31
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r8.u32 + r31.u32);
	// lwz r9,3364(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 3364);
	// lwz r6,3352(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 3352);
	// bl 0x8266b9b8
	sub_8266B9B8(ctx, base);
	// lbz r11,33(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 33);
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82715988
	if (cr6.eq) goto loc_82715988;
	// lwz r10,104(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// lhz r6,54(r31)
	ctx.r6.u64 = PPC_LOAD_U16(r31.u32 + 54);
	// li r8,8
	ctx.r8.s64 = 8;
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r10,184(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// clrlwi r5,r10,16
	ctx.r5.u64 = ctx.r10.u32 & 0xFFFF;
	// rlwinm r4,r11,3,0,28
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// lwz r11,160(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// addi r9,r30,104
	ctx.r9.s64 = r30.s64 + 104;
	// mr r7,r11
	ctx.r7.u64 = r11.u64;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r9,r31
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + r31.u32);
	// srw r6,r6,r5
	ctx.r6.u64 = ctx.r5.u8 & 0x20 ? 0 : (ctx.r6.u32 >> (ctx.r5.u8 & 0x3F));
	// sraw r10,r4,r10
	temp.u32 = ctx.r10.u32 & 0x3F;
	if (temp.u32 > 0x1F) temp.u32 = 0x1F;
	xer.ca = (ctx.r4.s32 < 0) & (((ctx.r4.s32 >> temp.u32) << temp.u32) != ctx.r4.s32);
	ctx.r10.s64 = ctx.r4.s32 >> temp.u32;
	// rlwinm r10,r10,1,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFF0;
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// mr r10,r9
	ctx.r10.u64 = ctx.r9.u64;
	// mtctr r8
	ctr.u64 = ctx.r8.u64;
loc_82715858:
	// lhz r8,0(r7)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r7.u32 + 0);
	// addi r7,r7,2
	ctx.r7.s64 = ctx.r7.s64 + 2;
	// sth r8,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r8.u16);
	// addi r10,r10,2
	ctx.r10.s64 = ctx.r10.s64 + 2;
	// bdnz 0x82715858
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82715858;
	// rlwinm r10,r6,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r8,r11,16
	ctx.r8.s64 = r11.s64 + 16;
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// li r6,8
	ctx.r6.s64 = 8;
	// mr r7,r9
	ctx.r7.u64 = ctx.r9.u64;
	// mtctr r6
	ctr.u64 = ctx.r6.u64;
loc_82715884:
	// lhz r6,0(r8)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// sth r6,0(r7)
	PPC_STORE_U16(ctx.r7.u32 + 0, ctx.r6.u16);
	// addi r7,r7,2
	ctx.r7.s64 = ctx.r7.s64 + 2;
	// bdnz 0x82715884
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82715884;
	// addi r8,r11,32
	ctx.r8.s64 = r11.s64 + 32;
	// add r7,r10,r9
	ctx.r7.u64 = ctx.r10.u64 + ctx.r9.u64;
	// mr r9,r8
	ctx.r9.u64 = ctx.r8.u64;
	// mr r8,r7
	ctx.r8.u64 = ctx.r7.u64;
	// li r6,8
	ctx.r6.s64 = 8;
	// mtctr r6
	ctr.u64 = ctx.r6.u64;
loc_827158B0:
	// lhz r6,0(r9)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// addi r9,r9,2
	ctx.r9.s64 = ctx.r9.s64 + 2;
	// sth r6,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r6.u16);
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// bdnz 0x827158b0
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_827158B0;
	// add r7,r10,r7
	ctx.r7.u64 = ctx.r10.u64 + ctx.r7.u64;
	// addi r9,r11,48
	ctx.r9.s64 = r11.s64 + 48;
	// mr r8,r7
	ctx.r8.u64 = ctx.r7.u64;
	// li r6,8
	ctx.r6.s64 = 8;
	// mtctr r6
	ctr.u64 = ctx.r6.u64;
loc_827158D8:
	// lhz r6,0(r9)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// addi r9,r9,2
	ctx.r9.s64 = ctx.r9.s64 + 2;
	// sth r6,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r6.u16);
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// bdnz 0x827158d8
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_827158D8;
	// add r7,r10,r7
	ctx.r7.u64 = ctx.r10.u64 + ctx.r7.u64;
	// addi r9,r11,64
	ctx.r9.s64 = r11.s64 + 64;
	// mr r8,r7
	ctx.r8.u64 = ctx.r7.u64;
	// li r6,8
	ctx.r6.s64 = 8;
	// mtctr r6
	ctr.u64 = ctx.r6.u64;
loc_82715900:
	// lhz r6,0(r9)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// addi r9,r9,2
	ctx.r9.s64 = ctx.r9.s64 + 2;
	// sth r6,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r6.u16);
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// bdnz 0x82715900
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82715900;
	// add r7,r10,r7
	ctx.r7.u64 = ctx.r10.u64 + ctx.r7.u64;
	// addi r9,r11,80
	ctx.r9.s64 = r11.s64 + 80;
	// mr r8,r7
	ctx.r8.u64 = ctx.r7.u64;
	// li r6,8
	ctx.r6.s64 = 8;
	// mtctr r6
	ctr.u64 = ctx.r6.u64;
loc_82715928:
	// lhz r6,0(r9)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// addi r9,r9,2
	ctx.r9.s64 = ctx.r9.s64 + 2;
	// sth r6,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r6.u16);
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// bdnz 0x82715928
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82715928;
	// add r7,r10,r7
	ctx.r7.u64 = ctx.r10.u64 + ctx.r7.u64;
	// addi r9,r11,96
	ctx.r9.s64 = r11.s64 + 96;
	// mr r8,r7
	ctx.r8.u64 = ctx.r7.u64;
	// li r6,8
	ctx.r6.s64 = 8;
	// mtctr r6
	ctr.u64 = ctx.r6.u64;
loc_82715950:
	// lhz r6,0(r9)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// addi r9,r9,2
	ctx.r9.s64 = ctx.r9.s64 + 2;
	// sth r6,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r6.u16);
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// bdnz 0x82715950
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82715950;
	// add r10,r10,r7
	ctx.r10.u64 = ctx.r10.u64 + ctx.r7.u64;
	// addi r11,r11,112
	r11.s64 = r11.s64 + 112;
	// li r9,8
	ctx.r9.s64 = 8;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_82715974:
	// lhz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// sth r9,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r9.u16);
	// addi r10,r10,2
	ctx.r10.s64 = ctx.r10.s64 + 2;
	// bdnz 0x82715974
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82715974;
loc_82715988:
	// lwz r10,128(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// lwz r30,80(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r6,120(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// rlwinm r4,r11,16,20,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFF;
	// clrlwi r3,r11,16
	ctx.r3.u64 = r11.u32 & 0xFFFF;
	// rlwinm r5,r11,4,29,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0x7;
	// lwz r11,140(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// stw r10,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r10.u32);
	// cmplw cr6,r30,r4
	cr6.compare<uint32_t>(r30.u32, ctx.r4.u32, xer);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r4,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r4.u32);
	// stw r3,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r3.u32);
	// stw r5,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r5.u32);
	// stw r11,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r11.u32);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// beq cr6,0x82715750
	if (cr6.eq) goto loc_82715750;
loc_827159D0:
	// addi r23,r11,1
	r23.s64 = r11.s64 + 1;
	// b 0x82715a38
	goto loc_82715A38;
loc_827159D8:
	// cmplw cr6,r30,r4
	cr6.compare<uint32_t>(r30.u32, ctx.r4.u32, xer);
	// bne cr6,0x827159d0
	if (!cr6.eq) goto loc_827159D0;
	// lhz r9,18(r19)
	ctx.r9.u64 = PPC_LOAD_U16(r19.u32 + 18);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r10,0(r19)
	ctx.r10.u64 = PPC_LOAD_U32(r19.u32 + 0);
	// addi r7,r7,8
	ctx.r7.s64 = ctx.r7.s64 + 8;
	// addi r29,r9,2
	r29.s64 = ctx.r9.s64 + 2;
	// lwz r8,4(r19)
	ctx.r8.u64 = PPC_LOAD_U32(r19.u32 + 4);
	// addi r28,r10,2
	r28.s64 = ctx.r10.s64 + 2;
	// lwz r9,8(r19)
	ctx.r9.u64 = PPC_LOAD_U32(r19.u32 + 8);
	// lwz r10,12(r19)
	ctx.r10.u64 = PPC_LOAD_U32(r19.u32 + 12);
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// addi r9,r9,16
	ctx.r9.s64 = ctx.r9.s64 + 16;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// stw r7,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r7.u32);
	// cmplw cr6,r11,r6
	cr6.compare<uint32_t>(r11.u32, ctx.r6.u32, xer);
	// sth r29,18(r19)
	PPC_STORE_U16(r19.u32 + 18, r29.u16);
	// stw r28,0(r19)
	PPC_STORE_U32(r19.u32 + 0, r28.u32);
	// stw r8,4(r19)
	PPC_STORE_U32(r19.u32 + 4, ctx.r8.u32);
	// stw r9,8(r19)
	PPC_STORE_U32(r19.u32 + 8, ctx.r9.u32);
	// stw r10,12(r19)
	PPC_STORE_U32(r19.u32 + 12, ctx.r10.u32);
	// blt cr6,0x82715754
	if (cr6.lt) goto loc_82715754;
	// lwz r23,164(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
loc_82715A38:
	// lwz r10,132(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
loc_82715A3C:
	// lhz r9,16(r19)
	ctx.r9.u64 = PPC_LOAD_U16(r19.u32 + 16);
	// rlwinm r11,r6,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r8,136(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// addi r7,r9,2
	ctx.r7.s64 = ctx.r9.s64 + 2;
	// lwz r9,116(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// add r8,r6,r8
	ctx.r8.u64 = ctx.r6.u64 + ctx.r8.u64;
	// add r9,r11,r9
	ctx.r9.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r11,r6,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// sth r7,16(r19)
	PPC_STORE_U16(r19.u32 + 16, ctx.r7.u16);
	// stw r8,4(r19)
	PPC_STORE_U32(r19.u32 + 4, ctx.r8.u32);
	// stw r9,0(r19)
	PPC_STORE_U32(r19.u32 + 0, ctx.r9.u32);
	// stw r9,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r9.u32);
	// lwz r9,144(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// lhz r20,74(r31)
	r20.u64 = PPC_LOAD_U16(r31.u32 + 74);
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// stw r8,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r8.u32);
	// lwz r8,100(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// rotlwi r9,r20,4
	ctx.r9.u64 = __builtin_rotateleft32(r20.u32, 4);
	// lhz r15,76(r31)
	r15.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// stw r11,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r11.u32);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// lbz r11,33(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 33);
	// stw r9,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r9.u32);
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// lwz r9,108(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// rotlwi r11,r15,3
	r11.u64 = __builtin_rotateleft32(r15.u32, 3);
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// stw r11,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r11.u32);
	// beq cr6,0x82715e48
	if (cr6.eq) goto loc_82715E48;
	// lhz r29,50(r31)
	r29.u64 = PPC_LOAD_U16(r31.u32 + 50);
	// mr r24,r10
	r24.u64 = ctx.r10.u64;
	// lwz r4,116(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// rotlwi r11,r29,1
	r11.u64 = __builtin_rotateleft32(r29.u32, 1);
	// lwz r8,80(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r6,1240(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 1240);
	// rotlwi r17,r29,2
	r17.u64 = __builtin_rotateleft32(r29.u32, 2);
	// subf r11,r11,r4
	r11.s64 = ctx.r4.s64 - r11.s64;
	// lwz r9,192(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 192);
	// rlwinm r4,r8,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r7,188(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// neg r5,r8
	ctx.r5.s64 = -ctx.r8.s64;
	// rotlwi r21,r29,3
	r21.u64 = __builtin_rotateleft32(r29.u32, 3);
	// srawi r8,r5,31
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x7FFFFFFF) != 0);
	ctx.r8.s64 = ctx.r5.s32 >> 31;
	// srawi r16,r29,1
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x1) != 0);
	r16.s64 = r29.s32 >> 1;
	// lwzx r6,r4,r6
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r4.u32 + ctx.r6.u32);
	// srawi r5,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	ctx.r5.s64 = r11.s32 >> 2;
	// addi r4,r8,1
	ctx.r4.s64 = ctx.r8.s64 + 1;
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r11,r5,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// or r14,r6,r4
	r14.u64 = ctx.r6.u64 | ctx.r4.u64;
	// add r18,r11,r9
	r18.u64 = r11.u64 + ctx.r9.u64;
	// add r27,r8,r7
	r27.u64 = ctx.r8.u64 + ctx.r7.u64;
	// rlwinm r11,r10,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// bne cr6,0x82715b28
	if (!cr6.eq) goto loc_82715B28;
	// li r11,1
	r11.s64 = 1;
	// li r24,1
	r24.s64 = 1;
loc_82715B28:
	// rlwinm r8,r23,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 1) & 0xFFFFFFFE;
	// cmpw cr6,r11,r8
	cr6.compare<int32_t>(r11.s32, ctx.r8.s32, xer);
	// bge cr6,0x82715bb8
	if (!cr6.lt) goto loc_82715BB8;
	// add r10,r11,r29
	ctx.r10.u64 = r11.u64 + r29.u64;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r30,r11,4,0,27
	r30.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// add r26,r9,r27
	r26.u64 = ctx.r9.u64 + r27.u64;
	// add r25,r10,r27
	r25.u64 = ctx.r10.u64 + r27.u64;
	// subf r28,r11,r8
	r28.s64 = ctx.r8.s64 - r11.s64;
loc_82715B50:
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// bne cr6,0x82715b78
	if (!cr6.eq) goto loc_82715B78;
	// lwz r11,-4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -4);
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// bne cr6,0x82715b78
	if (!cr6.eq) goto loc_82715B78;
	// lwz r11,1264(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1264);
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// add r3,r30,r11
	ctx.r3.u64 = r30.u64 + r11.u64;
	// bl 0x826112d8
	sub_826112D8(ctx, base);
loc_82715B78:
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// bne cr6,0x82715ba0
	if (!cr6.eq) goto loc_82715BA0;
	// lwz r11,-4(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + -4);
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// bne cr6,0x82715ba0
	if (!cr6.eq) goto loc_82715BA0;
	// lwz r11,1272(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1272);
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x826112d8
	sub_826112D8(ctx, base);
loc_82715BA0:
	// addi r28,r28,-1
	r28.s64 = r28.s64 + -1;
	// addi r26,r26,4
	r26.s64 = r26.s64 + 4;
	// addi r25,r25,4
	r25.s64 = r25.s64 + 4;
	// addi r30,r30,16
	r30.s64 = r30.s64 + 16;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x82715b50
	if (!cr6.eq) goto loc_82715B50;
loc_82715BB8:
	// cmpw cr6,r24,r23
	cr6.compare<int32_t>(r24.s32, r23.s32, xer);
	// bge cr6,0x82715c1c
	if (!cr6.lt) goto loc_82715C1C;
	// rlwinm r11,r24,2,0,29
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r30,r24,4,0,27
	r30.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 4) & 0xFFFFFFF0;
	// add r28,r11,r18
	r28.u64 = r11.u64 + r18.u64;
	// subf r26,r24,r23
	r26.s64 = r23.s64 - r24.s64;
loc_82715BD0:
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// bne cr6,0x82715c08
	if (!cr6.eq) goto loc_82715C08;
	// lwz r11,-4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -4);
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// bne cr6,0x82715c08
	if (!cr6.eq) goto loc_82715C08;
	// lwz r11,1276(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1276);
	// mr r4,r17
	ctx.r4.u64 = r17.u64;
	// add r3,r30,r11
	ctx.r3.u64 = r30.u64 + r11.u64;
	// bl 0x826112d8
	sub_826112D8(ctx, base);
	// lwz r11,1284(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1284);
	// mr r4,r17
	ctx.r4.u64 = r17.u64;
	// add r3,r30,r11
	ctx.r3.u64 = r30.u64 + r11.u64;
	// bl 0x826112d8
	sub_826112D8(ctx, base);
loc_82715C08:
	// addi r26,r26,-1
	r26.s64 = r26.s64 + -1;
	// addi r28,r28,4
	r28.s64 = r28.s64 + 4;
	// addi r30,r30,16
	r30.s64 = r30.s64 + 16;
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// bne cr6,0x82715bd0
	if (!cr6.eq) goto loc_82715BD0;
loc_82715C1C:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// ble cr6,0x82715d18
	if (!cr6.gt) goto loc_82715D18;
	// lwz r26,124(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// rlwinm r11,r29,2,0,29
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r10,r20,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r20.u32 | (r20.u64 << 32), 3) & 0xFFFFFFF8;
	// li r30,0
	r30.s64 = 0;
	// add r25,r10,r26
	r25.u64 = ctx.r10.u64 + r26.u64;
	// mr r23,r29
	r23.u64 = r29.u64;
	// add r24,r27,r11
	r24.u64 = r27.u64 + r11.u64;
	// subf r22,r11,r27
	r22.s64 = r27.s64 - r11.s64;
loc_82715C44:
	// cmpwi cr6,r14,0
	cr6.compare<int32_t>(r14.s32, 0, xer);
	// bne cr6,0x82715c5c
	if (!cr6.eq) goto loc_82715C5C;
	// lwz r11,0(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// li r8,1
	ctx.r8.s64 = 1;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x82715c60
	if (cr6.eq) goto loc_82715C60;
loc_82715C5C:
	// li r8,0
	ctx.r8.s64 = 0;
loc_82715C60:
	// lwz r10,0(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// lwz r11,0(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// addi r10,r10,-16384
	ctx.r10.s64 = ctx.r10.s64 + -16384;
	// addi r11,r11,-16384
	r11.s64 = r11.s64 + -16384;
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r29,r10,27,31,31
	r29.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// rlwinm r28,r11,27,31,31
	r28.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bne cr6,0x82715c90
	if (!cr6.eq) goto loc_82715C90;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// beq cr6,0x82715cc0
	if (cr6.eq) goto loc_82715CC0;
loc_82715C90:
	// lwz r4,1264(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 1264);
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r11,1268(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1268);
	// mr r9,r29
	ctx.r9.u64 = r29.u64;
	// mr r7,r20
	ctx.r7.u64 = r20.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// add r4,r4,r30
	ctx.r4.u64 = ctx.r4.u64 + r30.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x82611550
	sub_82611550(ctx, base);
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// bne cr6,0x82715cc8
	if (!cr6.eq) goto loc_82715CC8;
loc_82715CC0:
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// beq cr6,0x82715cf4
	if (cr6.eq) goto loc_82715CF4;
loc_82715CC8:
	// lwz r4,1272(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 1272);
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r11,1264(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1264);
	// mr r9,r28
	ctx.r9.u64 = r28.u64;
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
	// mr r7,r20
	ctx.r7.u64 = r20.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// add r4,r4,r30
	ctx.r4.u64 = ctx.r4.u64 + r30.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x82611550
	sub_82611550(ctx, base);
loc_82715CF4:
	// addi r23,r23,-1
	r23.s64 = r23.s64 + -1;
	// addi r22,r22,4
	r22.s64 = r22.s64 + 4;
	// addi r27,r27,4
	r27.s64 = r27.s64 + 4;
	// addi r24,r24,4
	r24.s64 = r24.s64 + 4;
	// addi r26,r26,8
	r26.s64 = r26.s64 + 8;
	// addi r25,r25,8
	r25.s64 = r25.s64 + 8;
	// addi r30,r30,16
	r30.s64 = r30.s64 + 16;
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// bne cr6,0x82715c44
	if (!cr6.eq) goto loc_82715C44;
loc_82715D18:
	// cmpwi cr6,r16,0
	cr6.compare<int32_t>(r16.s32, 0, xer);
	// ble cr6,0x82715df0
	if (!cr6.gt) goto loc_82715DF0;
	// rlwinm r11,r16,2,0,29
	r11.u64 = __builtin_rotateleft64(r16.u32 | (r16.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r27,88(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// li r30,0
	r30.s64 = 0;
	// subf r23,r11,r18
	r23.s64 = r18.s64 - r11.s64;
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// mr r25,r18
	r25.u64 = r18.u64;
	// subf r26,r27,r11
	r26.s64 = r11.s64 - r27.s64;
	// mr r24,r16
	r24.u64 = r16.u64;
loc_82715D40:
	// cmpwi cr6,r14,0
	cr6.compare<int32_t>(r14.s32, 0, xer);
	// bne cr6,0x82715d58
	if (!cr6.eq) goto loc_82715D58;
	// lwz r11,0(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 0);
	// li r29,1
	r29.s64 = 1;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x82715d5c
	if (cr6.eq) goto loc_82715D5C;
loc_82715D58:
	// li r29,0
	r29.s64 = 0;
loc_82715D5C:
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// addi r11,r11,-16384
	r11.s64 = r11.s64 + -16384;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r28,r11,27,31,31
	r28.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bne cr6,0x82715d7c
	if (!cr6.eq) goto loc_82715D7C;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// beq cr6,0x82715dd4
	if (cr6.eq) goto loc_82715DD4;
loc_82715D7C:
	// lwz r4,1276(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 1276);
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r11,1280(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1280);
	// mr r9,r28
	ctx.r9.u64 = r28.u64;
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
	// mr r7,r15
	ctx.r7.u64 = r15.u64;
	// add r6,r26,r27
	ctx.r6.u64 = r26.u64 + r27.u64;
	// mr r5,r17
	ctx.r5.u64 = r17.u64;
	// add r4,r4,r30
	ctx.r4.u64 = ctx.r4.u64 + r30.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x82611550
	sub_82611550(ctx, base);
	// lwz r4,1284(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 1284);
	// lwz r11,1288(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1288);
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r9,r28
	ctx.r9.u64 = r28.u64;
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
	// mr r7,r15
	ctx.r7.u64 = r15.u64;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r5,r17
	ctx.r5.u64 = r17.u64;
	// add r4,r4,r30
	ctx.r4.u64 = ctx.r4.u64 + r30.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x82611550
	sub_82611550(ctx, base);
loc_82715DD4:
	// addi r24,r24,-1
	r24.s64 = r24.s64 + -1;
	// addi r23,r23,4
	r23.s64 = r23.s64 + 4;
	// addi r25,r25,4
	r25.s64 = r25.s64 + 4;
	// addi r27,r27,8
	r27.s64 = r27.s64 + 8;
	// addi r30,r30,16
	r30.s64 = r30.s64 + 16;
	// cmplwi cr6,r24,0
	cr6.compare<uint32_t>(r24.u32, 0, xer);
	// bne cr6,0x82715d40
	if (!cr6.eq) goto loc_82715D40;
loc_82715DF0:
	// lwz r9,1268(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1268);
	// lwz r7,1280(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1280);
	// lwz r6,1288(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 1288);
	// rotlwi r10,r9,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// lwz r8,1272(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1272);
	// lwz r5,1276(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 1276);
	// stw r9,1272(r31)
	PPC_STORE_U32(r31.u32 + 1272, ctx.r9.u32);
	// lwz r9,1284(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1284);
	// stw r7,1276(r31)
	PPC_STORE_U32(r31.u32 + 1276, ctx.r7.u32);
	// rotlwi r7,r7,0
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r7.u32, 0);
	// stw r6,1284(r31)
	PPC_STORE_U32(r31.u32 + 1284, ctx.r6.u32);
	// rotlwi r6,r6,0
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 0);
	// lwz r11,1264(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1264);
	// stw r8,1268(r31)
	PPC_STORE_U32(r31.u32 + 1268, ctx.r8.u32);
	// stw r5,1280(r31)
	PPC_STORE_U32(r31.u32 + 1280, ctx.r5.u32);
	// stw r9,1288(r31)
	PPC_STORE_U32(r31.u32 + 1288, ctx.r9.u32);
	// stw r7,432(r31)
	PPC_STORE_U32(r31.u32 + 432, ctx.r7.u32);
	// stw r11,420(r31)
	PPC_STORE_U32(r31.u32 + 420, r11.u32);
	// stw r11,416(r31)
	PPC_STORE_U32(r31.u32 + 416, r11.u32);
	// stw r6,436(r31)
	PPC_STORE_U32(r31.u32 + 436, ctx.r6.u32);
	// stw r10,428(r31)
	PPC_STORE_U32(r31.u32 + 428, ctx.r10.u32);
	// stw r10,424(r31)
	PPC_STORE_U32(r31.u32 + 424, ctx.r10.u32);
loc_82715E48:
	// lwz r9,80(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r11,152(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// addi r10,r9,1
	ctx.r10.s64 = ctx.r9.s64 + 1;
	// lwz r8,1240(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1240);
	// subf r11,r11,r9
	r11.s64 = ctx.r9.s64 - r11.s64;
	// lhz r24,74(r31)
	r24.u64 = PPC_LOAD_U16(r31.u32 + 74);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r7,33(r31)
	ctx.r7.u64 = PPC_LOAD_U8(r31.u32 + 33);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lhz r22,76(r31)
	r22.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// rlwinm r11,r11,1,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// lwzx r10,r10,r8
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r8.u32);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r8,124(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rotlwi r10,r24,4
	ctx.r10.u64 = __builtin_rotateleft32(r24.u32, 4);
	// and r11,r11,r7
	r11.u64 = r11.u64 & ctx.r7.u64;
	// add r29,r10,r8
	r29.u64 = ctx.r10.u64 + ctx.r8.u64;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// rotlwi r11,r22,3
	r11.u64 = __builtin_rotateleft32(r22.u32, 3);
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// stw r29,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r29.u32);
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// add r6,r11,r10
	ctx.r6.u64 = r11.u64 + ctx.r10.u64;
	// stw r6,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r6.u32);
	// beq cr6,0x8271604c
	if (cr6.eq) goto loc_8271604C;
	// lhz r11,50(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 50);
	// lwz r10,0(r19)
	ctx.r10.u64 = PPC_LOAD_U32(r19.u32 + 0);
	// srawi r27,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r27.s64 = r11.s32 >> 1;
	// lwz r7,188(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// srawi r5,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r5.s64 = ctx.r10.s32 >> 2;
	// lwz r9,192(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 192);
	// rlwinm r8,r10,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r10,r5,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// rotlwi r23,r11,2
	r23.u64 = __builtin_rotateleft32(r11.u32, 2);
	// rotlwi r25,r11,3
	r25.u64 = __builtin_rotateleft32(r11.u32, 3);
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// add r21,r10,r9
	r21.u64 = ctx.r10.u64 + ctx.r9.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x82715f54
	if (!cr6.gt) goto loc_82715F54;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// li r30,0
	r30.s64 = 0;
	// subf r26,r10,r8
	r26.s64 = ctx.r8.s64 - ctx.r10.s64;
	// mr r28,r11
	r28.u64 = r11.u64;
loc_82715F00:
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// bne cr6,0x82715f38
	if (!cr6.eq) goto loc_82715F38;
	// lwz r4,1264(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 1264);
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r11,1268(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1268);
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,1
	ctx.r8.s64 = 1;
	// mr r7,r24
	ctx.r7.u64 = r24.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// add r4,r30,r4
	ctx.r4.u64 = r30.u64 + ctx.r4.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x82611550
	sub_82611550(ctx, base);
loc_82715F38:
	// addi r28,r28,-1
	r28.s64 = r28.s64 + -1;
	// addi r26,r26,4
	r26.s64 = r26.s64 + 4;
	// addi r29,r29,8
	r29.s64 = r29.s64 + 8;
	// addi r30,r30,16
	r30.s64 = r30.s64 + 16;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x82715f00
	if (!cr6.eq) goto loc_82715F00;
	// lwz r6,88(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
loc_82715F54:
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// ble cr6,0x82715ff0
	if (!cr6.gt) goto loc_82715FF0;
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// li r30,0
	r30.s64 = 0;
	// subf r26,r11,r21
	r26.s64 = r21.s64 - r11.s64;
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// subf r28,r6,r11
	r28.s64 = r11.s64 - ctx.r6.s64;
loc_82715F74:
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// bne cr6,0x82715fd8
	if (!cr6.eq) goto loc_82715FD8;
	// lwz r4,1276(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 1276);
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r11,1280(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1280);
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,1
	ctx.r8.s64 = 1;
	// mr r7,r22
	ctx.r7.u64 = r22.u64;
	// add r6,r29,r28
	ctx.r6.u64 = r29.u64 + r28.u64;
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// add r4,r30,r4
	ctx.r4.u64 = r30.u64 + ctx.r4.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x82611550
	sub_82611550(ctx, base);
	// lwz r4,1284(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 1284);
	// lwz r11,1288(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1288);
	// li r10,0
	ctx.r10.s64 = 0;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,1
	ctx.r8.s64 = 1;
	// mr r7,r22
	ctx.r7.u64 = r22.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// add r4,r30,r4
	ctx.r4.u64 = r30.u64 + ctx.r4.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x82611550
	sub_82611550(ctx, base);
loc_82715FD8:
	// addi r27,r27,-1
	r27.s64 = r27.s64 + -1;
	// addi r26,r26,4
	r26.s64 = r26.s64 + 4;
	// addi r29,r29,8
	r29.s64 = r29.s64 + 8;
	// addi r30,r30,16
	r30.s64 = r30.s64 + 16;
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// bne cr6,0x82715f74
	if (!cr6.eq) goto loc_82715F74;
loc_82715FF0:
	// lwz r9,1268(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1268);
	// lwz r7,1280(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1280);
	// lwz r6,1288(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 1288);
	// rotlwi r10,r9,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// lwz r8,1272(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1272);
	// lwz r5,1276(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 1276);
	// stw r9,1272(r31)
	PPC_STORE_U32(r31.u32 + 1272, ctx.r9.u32);
	// lwz r9,1284(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1284);
	// stw r7,1276(r31)
	PPC_STORE_U32(r31.u32 + 1276, ctx.r7.u32);
	// rotlwi r7,r7,0
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r7.u32, 0);
	// stw r6,1284(r31)
	PPC_STORE_U32(r31.u32 + 1284, ctx.r6.u32);
	// rotlwi r6,r6,0
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 0);
	// lwz r11,1264(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1264);
	// stw r8,1268(r31)
	PPC_STORE_U32(r31.u32 + 1268, ctx.r8.u32);
	// stw r9,1288(r31)
	PPC_STORE_U32(r31.u32 + 1288, ctx.r9.u32);
	// lwz r9,80(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r5,1280(r31)
	PPC_STORE_U32(r31.u32 + 1280, ctx.r5.u32);
	// stw r11,420(r31)
	PPC_STORE_U32(r31.u32 + 420, r11.u32);
	// stw r11,416(r31)
	PPC_STORE_U32(r31.u32 + 416, r11.u32);
	// stw r7,432(r31)
	PPC_STORE_U32(r31.u32 + 432, ctx.r7.u32);
	// stw r6,436(r31)
	PPC_STORE_U32(r31.u32 + 436, ctx.r6.u32);
	// stw r10,428(r31)
	PPC_STORE_U32(r31.u32 + 428, ctx.r10.u32);
	// stw r10,424(r31)
	PPC_STORE_U32(r31.u32 + 424, ctx.r10.u32);
loc_8271604C:
	// addi r11,r9,1
	r11.s64 = ctx.r9.s64 + 1;
	// lwz r10,152(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// blt cr6,0x827156fc
	if (cr6.lt) goto loc_827156FC;
	// lwz r27,172(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// li r28,0
	r28.s64 = 0;
loc_82716068:
	// lis r11,-32126
	r11.s64 = -2105409536;
	// addi r4,r1,192
	ctx.r4.s64 = ctx.r1.s64 + 192;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwz r31,3360(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 3360);
	// bl 0x8271d940
	sub_8271D940(ctx, base);
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// addi r10,r31,8
	ctx.r10.s64 = r31.s64 + 8;
	// addi r11,r1,1204
	r11.s64 = ctx.r1.s64 + 1204;
	// lis r7,-32126
	ctx.r7.s64 = -2105409536;
loc_8271608C:
	// lwz r9,-8(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + -8);
	// lwz r6,-4(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -4);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x827160cc
	if (!cr6.eq) goto loc_827160CC;
	// lwz r9,-4(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + -4);
	// lwz r6,0(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x827160cc
	if (!cr6.eq) goto loc_827160CC;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// lwz r6,4(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x827160cc
	if (!cr6.eq) goto loc_827160CC;
	// lwz r9,4(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// lwz r6,8(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// beq cr6,0x827160d0
	if (cr6.eq) goto loc_827160D0;
loc_827160CC:
	// stw r8,-25044(r7)
	PPC_STORE_U32(ctx.r7.u32 + -25044, ctx.r8.u32);
loc_827160D0:
	// lwz r9,8(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// lwz r6,-20(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -20);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x82716110
	if (!cr6.eq) goto loc_82716110;
	// lwz r9,12(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	// lwz r6,-16(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -16);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x82716110
	if (!cr6.eq) goto loc_82716110;
	// lwz r9,16(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	// lwz r6,-12(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -12);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x82716110
	if (!cr6.eq) goto loc_82716110;
	// lwz r9,20(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 20);
	// lwz r6,-8(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -8);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// beq cr6,0x82716118
	if (cr6.eq) goto loc_82716118;
loc_82716110:
	// addi r9,r8,1
	ctx.r9.s64 = ctx.r8.s64 + 1;
	// stw r9,-25044(r7)
	PPC_STORE_U32(ctx.r7.u32 + -25044, ctx.r9.u32);
loc_82716118:
	// lwz r9,24(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	// lwz r6,-36(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -36);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x82716158
	if (!cr6.eq) goto loc_82716158;
	// lwz r9,28(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 28);
	// lwz r6,-32(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -32);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x82716158
	if (!cr6.eq) goto loc_82716158;
	// lwz r9,32(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 32);
	// lwz r6,-28(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -28);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x82716158
	if (!cr6.eq) goto loc_82716158;
	// lwz r9,36(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 36);
	// lwz r6,-24(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -24);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// beq cr6,0x82716160
	if (cr6.eq) goto loc_82716160;
loc_82716158:
	// addi r9,r8,2
	ctx.r9.s64 = ctx.r8.s64 + 2;
	// stw r9,-25044(r7)
	PPC_STORE_U32(ctx.r7.u32 + -25044, ctx.r9.u32);
loc_82716160:
	// addi r8,r8,3
	ctx.r8.s64 = ctx.r8.s64 + 3;
	// addi r11,r11,-48
	r11.s64 = r11.s64 + -48;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmpwi cr6,r8,9
	cr6.compare<int32_t>(ctx.r8.s32, 9, xer);
	// blt cr6,0x8271608c
	if (cr6.lt) goto loc_8271608C;
	// lwz r3,180(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// addi r1,r1,1888
	ctx.r1.s64 = ctx.r1.s64 + 1888;
	// b 0x8239bd10
	return;
}

__attribute__((alias("__imp__sub_82716180"))) PPC_WEAK_FUNC(sub_82716180);
PPC_FUNC_IMPL(__imp__sub_82716180) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcc0
	// stwu r1,-1840(r1)
	ea = -1840 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r18,r3
	r18.u64 = ctx.r3.u64;
	// mr r25,r4
	r25.u64 = ctx.r4.u64;
	// lis r9,1
	ctx.r9.s64 = 65536;
	// mr r20,r5
	r20.u64 = ctx.r5.u64;
	// ori r9,r9,33684
	ctx.r9.u64 = ctx.r9.u64 | 33684;
	// lwz r11,136(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 136);
	// addi r31,r18,21712
	r31.s64 = r18.s64 + 21712;
	// lwz r10,21560(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 21560);
	// rlwinm r26,r11,4,0,27
	r26.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// lhz r11,52(r25)
	r11.u64 = PPC_LOAD_U16(r25.u32 + 52);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// rlwinm r30,r11,31,1,31
	r30.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFF;
	// lwzx r11,r18,r9
	r11.u64 = PPC_LOAD_U32(r18.u32 + ctx.r9.u32);
	// stw r31,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r31.u32);
	// stw r26,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, r26.u32);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// lhz r11,50(r25)
	r11.u64 = PPC_LOAD_U16(r25.u32 + 50);
	// stw r10,28(r20)
	PPC_STORE_U32(r20.u32 + 28, ctx.r10.u32);
	// rlwinm r22,r11,31,1,31
	r22.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFF;
	// lwz r10,21572(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 21572);
	// srawi r11,r26,1
	xer.ca = (r26.s32 < 0) & ((r26.u32 & 0x1) != 0);
	r11.s64 = r26.s32 >> 1;
	// stw r30,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r30.u32);
	// stw r10,32(r20)
	PPC_STORE_U32(r20.u32 + 32, ctx.r10.u32);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// lis r11,-32126
	r11.s64 = -2105409536;
	// stw r22,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r22.u32);
	// lwz r3,3360(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 3360);
	// bl 0x8271d5f8
	sub_8271D5F8(ctx, base);
	// lwz r9,3720(r18)
	ctx.r9.u64 = PPC_LOAD_U32(r18.u32 + 3720);
	// li r23,0
	r23.s64 = 0;
	// lwz r6,220(r18)
	ctx.r6.u64 = PPC_LOAD_U32(r18.u32 + 220);
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// lwz r11,32(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 32);
	// add r19,r9,r6
	r19.u64 = ctx.r9.u64 + ctx.r6.u64;
	// lbz r9,33(r25)
	ctx.r9.u64 = PPC_LOAD_U8(r25.u32 + 33);
	// lwz r10,224(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 224);
	// lwz r8,3728(r18)
	ctx.r8.u64 = PPC_LOAD_U32(r18.u32 + 3728);
	// lwz r7,3724(r18)
	ctx.r7.u64 = PPC_LOAD_U32(r18.u32 + 3724);
	// lwz r17,268(r18)
	r17.u64 = PPC_LOAD_U32(r18.u32 + 268);
	// stb r9,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r9.u8);
	// add r24,r7,r10
	r24.u64 = ctx.r7.u64 + ctx.r10.u64;
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r23,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r23.u32);
	// stw r19,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r19.u32);
	// stw r24,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r24.u32);
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// add r11,r8,r10
	r11.u64 = ctx.r8.u64 + ctx.r10.u64;
	// clrlwi r8,r9,16
	ctx.r8.u64 = ctx.r9.u32 & 0xFFFF;
	// rlwinm r9,r9,16,20,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 16) & 0xFFF;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// ble cr6,0x82716a1c
	if (!cr6.gt) goto loc_82716A1C;
	// lis r15,-32126
	r15.s64 = -2105409536;
loc_82716260:
	// li r14,0
	r14.s64 = 0;
	// mr r21,r24
	r21.u64 = r24.u64;
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// stw r14,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r14.u32);
	// ble cr6,0x827169dc
	if (!cr6.gt) goto loc_827169DC;
	// li r28,0
	r28.s64 = 0;
	// li r27,0
	r27.s64 = 0;
	// subf r16,r24,r11
	r16.s64 = r11.s64 - r24.s64;
	// stw r28,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r28.u32);
	// stw r27,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r27.u32);
loc_82716288:
	// cmplw cr6,r23,r9
	cr6.compare<uint32_t>(r23.u32, ctx.r9.u32, xer);
	// bne cr6,0x827169a4
	if (!cr6.eq) goto loc_827169A4;
	// cmplw cr6,r14,r8
	cr6.compare<uint32_t>(r14.u32, ctx.r8.u32, xer);
	// bne cr6,0x827169a4
	if (!cr6.eq) goto loc_827169A4;
	// li r30,0
	r30.s64 = 0;
	// li r31,0
	r31.s64 = 0;
	// addi r29,r25,392
	r29.s64 = r25.s64 + 392;
loc_827162A4:
	// lwz r10,28(r20)
	ctx.r10.u64 = PPC_LOAD_U32(r20.u32 + 28);
	// srawi r11,r30,2
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x3) != 0);
	r11.s64 = r30.s32 >> 2;
	// lwz r9,0(r29)
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// li r8,-128
	ctx.r8.s64 = -128;
	// addi r3,r10,-128
	ctx.r3.s64 = ctx.r10.s64 + -128;
	// addi r10,r11,2
	ctx.r10.s64 = r11.s64 + 2;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r10,r20
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r20.u32);
	// add r7,r10,r9
	ctx.r7.u64 = ctx.r10.u64 + ctx.r9.u64;
	// dcbt r8,r3
	// addi r11,r11,45
	r11.s64 = r11.s64 + 45;
	// stw r3,28(r20)
	PPC_STORE_U32(r20.u32 + 28, ctx.r3.u32);
	// lbz r10,4(r17)
	ctx.r10.u64 = PPC_LOAD_U8(r17.u32 + 4);
	// rlwinm r8,r11,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r5,224(r25)
	ctx.r5.u64 = PPC_LOAD_U32(r25.u32 + 224);
	// lis r11,-32126
	r11.s64 = -2105409536;
	// lwz r9,3364(r15)
	ctx.r9.u64 = PPC_LOAD_U32(r15.u32 + 3364);
	// rotlwi r10,r10,6
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 6);
	// add r5,r10,r5
	ctx.r5.u64 = ctx.r10.u64 + ctx.r5.u64;
	// lhzx r8,r8,r25
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r8.u32 + r25.u32);
	// lwz r6,3352(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 3352);
	// lwz r11,1312(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 1312);
	// add r4,r31,r11
	ctx.r4.u64 = r31.u64 + r11.u64;
	// bl 0x8266bff0
	sub_8266BFF0(ctx, base);
	// addi r31,r31,128
	r31.s64 = r31.s64 + 128;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// cmpwi cr6,r31,768
	cr6.compare<int32_t>(r31.s32, 768, xer);
	// blt cr6,0x827162a4
	if (cr6.lt) goto loc_827162A4;
	// lbz r11,80(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82716920
	if (cr6.eq) goto loc_82716920;
	// lwz r11,0(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 0);
	// rlwinm r10,r11,0,20,20
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x800;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82716920
	if (cr6.eq) goto loc_82716920;
	// lwz r9,19992(r18)
	ctx.r9.u64 = PPC_LOAD_U32(r18.u32 + 19992);
	// rlwinm r8,r11,0,15,15
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x10000;
	// lwz r10,19996(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 19996);
	// li r6,8
	ctx.r6.s64 = 8;
	// lwz r11,20000(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 20000);
	// add r24,r9,r27
	r24.u64 = ctx.r9.u64 + r27.u64;
	// lwz r31,1312(r25)
	r31.u64 = PPC_LOAD_U32(r25.u32 + 1312);
	// add r23,r10,r28
	r23.u64 = ctx.r10.u64 + r28.u64;
	// add r22,r11,r28
	r22.u64 = r11.u64 + r28.u64;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bne cr6,0x82716378
	if (!cr6.eq) goto loc_82716378;
	// rlwinm r11,r26,4,0,27
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 4) & 0xFFFFFFF0;
	// mr r7,r26
	ctx.r7.u64 = r26.u64;
	// add r5,r11,r24
	ctx.r5.u64 = r11.u64 + r24.u64;
	// b 0x82716380
	goto loc_82716380;
loc_82716378:
	// rlwinm r7,r26,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 1) & 0xFFFFFFFE;
	// add r5,r7,r24
	ctx.r5.u64 = ctx.r7.u64 + r24.u64;
loc_82716380:
	// bl 0x8261c808
	sub_8261C808(ctx, base);
	// li r6,8
	ctx.r6.s64 = 8;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// lwz r7,112(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// addi r3,r31,512
	ctx.r3.s64 = r31.s64 + 512;
	// bl 0x8261c6f8
	sub_8261C6F8(ctx, base);
	// lhz r11,50(r25)
	r11.u64 = PPC_LOAD_U16(r25.u32 + 50);
	// cmpwi cr6,r14,0
	cr6.compare<int32_t>(r14.s32, 0, xer);
	// rotlwi r26,r11,3
	r26.u64 = __builtin_rotateleft32(r11.u32, 3);
	// beq cr6,0x82716490
	if (cr6.eq) goto loc_82716490;
	// lwz r11,-20(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + -20);
	// rlwinm r11,r11,0,20,20
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x800;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82716490
	if (cr6.eq) goto loc_82716490;
	// mr r11,r24
	r11.u64 = r24.u64;
	// li r10,1
	ctx.r10.s64 = 1;
	// rlwinm r27,r26,1,0,30
	r27.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 1) & 0xFFFFFFFE;
	// li r5,16
	ctx.r5.s64 = 16;
loc_827163CC:
	// addi r4,r11,-2
	ctx.r4.s64 = r11.s64 + -2;
	// lhz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r31,r11,2
	r31.s64 = r11.s64 + 2;
	// addi r3,r11,-4
	ctx.r3.s64 = r11.s64 + -4;
	// extsh r7,r9
	ctx.r7.s64 = ctx.r9.s16;
	// addi r5,r5,-1
	ctx.r5.s64 = ctx.r5.s64 + -1;
	// lhz r8,0(r4)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r4.u32 + 0);
	// lhz r30,0(r31)
	r30.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// extsh r6,r8
	ctx.r6.s64 = ctx.r8.s16;
	// lhz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r3.u32 + 0);
	// extsh r8,r30
	ctx.r8.s64 = r30.s16;
	// rlwinm r29,r6,3,0,28
	r29.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// rlwinm r30,r7,3,0,28
	r30.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 3) & 0xFFFFFFF8;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// subf r29,r6,r29
	r29.s64 = r29.s64 - ctx.r6.s64;
	// subf r30,r7,r30
	r30.s64 = r30.s64 - ctx.r7.s64;
	// rlwinm r28,r9,3,0,28
	r28.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r29,r9,r29
	r29.s64 = r29.s64 - ctx.r9.s64;
	// subf r30,r8,r30
	r30.s64 = r30.s64 - ctx.r8.s64;
	// subf r28,r9,r28
	r28.s64 = r28.s64 - ctx.r9.s64;
	// rlwinm r14,r8,3,0,28
	r14.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r29,r10,r29
	r29.s64 = r29.s64 - ctx.r10.s64;
	// add r30,r30,r6
	r30.u64 = r30.u64 + ctx.r6.u64;
	// add r6,r28,r8
	ctx.r6.u64 = r28.u64 + ctx.r8.u64;
	// subf r28,r8,r14
	r28.s64 = r14.s64 - ctx.r8.s64;
	// add r7,r29,r7
	ctx.r7.u64 = r29.u64 + ctx.r7.u64;
	// add r29,r30,r9
	r29.u64 = r30.u64 + ctx.r9.u64;
	// add r30,r6,r10
	r30.u64 = ctx.r6.u64 + ctx.r10.u64;
	// subf r6,r10,r28
	ctx.r6.s64 = r28.s64 - ctx.r10.s64;
	// add r7,r7,r8
	ctx.r7.u64 = ctx.r7.u64 + ctx.r8.u64;
	// add r8,r29,r10
	ctx.r8.u64 = r29.u64 + ctx.r10.u64;
	// add r9,r6,r9
	ctx.r9.u64 = ctx.r6.u64 + ctx.r9.u64;
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// addi r7,r7,4
	ctx.r7.s64 = ctx.r7.s64 + 4;
	// addi r8,r8,3
	ctx.r8.s64 = ctx.r8.s64 + 3;
	// srawi r6,r30,3
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x7) != 0);
	ctx.r6.s64 = r30.s32 >> 3;
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// srawi r7,r7,3
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x7) != 0);
	ctx.r7.s64 = ctx.r7.s32 >> 3;
	// srawi r8,r8,3
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7) != 0);
	ctx.r8.s64 = ctx.r8.s32 >> 3;
	// srawi r9,r9,3
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x7) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 3;
	// xori r10,r10,1
	ctx.r10.u64 = ctx.r10.u64 ^ 1;
	// sth r6,0(r3)
	PPC_STORE_U16(ctx.r3.u32 + 0, ctx.r6.u16);
	// sth r7,0(r4)
	PPC_STORE_U16(ctx.r4.u32 + 0, ctx.r7.u16);
	// sth r8,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r8.u16);
	// add r11,r27,r11
	r11.u64 = r27.u64 + r11.u64;
	// sth r9,0(r31)
	PPC_STORE_U16(r31.u32 + 0, ctx.r9.u16);
	// bne cr6,0x827163cc
	if (!cr6.eq) goto loc_827163CC;
	// lwz r14,84(r1)
	r14.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
loc_82716490:
	// addi r11,r24,16
	r11.s64 = r24.s64 + 16;
	// li r10,1
	ctx.r10.s64 = 1;
	// rlwinm r27,r26,1,0,30
	r27.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 1) & 0xFFFFFFFE;
	// li r5,16
	ctx.r5.s64 = 16;
loc_827164A0:
	// addi r4,r11,-2
	ctx.r4.s64 = r11.s64 + -2;
	// lhz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r31,r11,2
	r31.s64 = r11.s64 + 2;
	// addi r3,r11,-4
	ctx.r3.s64 = r11.s64 + -4;
	// extsh r7,r9
	ctx.r7.s64 = ctx.r9.s16;
	// addi r5,r5,-1
	ctx.r5.s64 = ctx.r5.s64 + -1;
	// lhz r8,0(r4)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r4.u32 + 0);
	// lhz r30,0(r31)
	r30.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// extsh r6,r8
	ctx.r6.s64 = ctx.r8.s16;
	// lhz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r3.u32 + 0);
	// extsh r8,r30
	ctx.r8.s64 = r30.s16;
	// rlwinm r29,r6,3,0,28
	r29.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// rlwinm r30,r7,3,0,28
	r30.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 3) & 0xFFFFFFF8;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// subf r29,r6,r29
	r29.s64 = r29.s64 - ctx.r6.s64;
	// subf r30,r7,r30
	r30.s64 = r30.s64 - ctx.r7.s64;
	// rlwinm r28,r9,3,0,28
	r28.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r29,r9,r29
	r29.s64 = r29.s64 - ctx.r9.s64;
	// subf r30,r8,r30
	r30.s64 = r30.s64 - ctx.r8.s64;
	// subf r28,r9,r28
	r28.s64 = r28.s64 - ctx.r9.s64;
	// rlwinm r26,r8,3,0,28
	r26.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r29,r10,r29
	r29.s64 = r29.s64 - ctx.r10.s64;
	// add r30,r30,r6
	r30.u64 = r30.u64 + ctx.r6.u64;
	// add r6,r28,r8
	ctx.r6.u64 = r28.u64 + ctx.r8.u64;
	// subf r28,r8,r26
	r28.s64 = r26.s64 - ctx.r8.s64;
	// add r7,r29,r7
	ctx.r7.u64 = r29.u64 + ctx.r7.u64;
	// add r29,r30,r9
	r29.u64 = r30.u64 + ctx.r9.u64;
	// add r30,r6,r10
	r30.u64 = ctx.r6.u64 + ctx.r10.u64;
	// subf r6,r10,r28
	ctx.r6.s64 = r28.s64 - ctx.r10.s64;
	// add r7,r7,r8
	ctx.r7.u64 = ctx.r7.u64 + ctx.r8.u64;
	// add r8,r29,r10
	ctx.r8.u64 = r29.u64 + ctx.r10.u64;
	// add r9,r6,r9
	ctx.r9.u64 = ctx.r6.u64 + ctx.r9.u64;
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// addi r7,r7,4
	ctx.r7.s64 = ctx.r7.s64 + 4;
	// addi r8,r8,3
	ctx.r8.s64 = ctx.r8.s64 + 3;
	// srawi r6,r30,3
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x7) != 0);
	ctx.r6.s64 = r30.s32 >> 3;
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// srawi r7,r7,3
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x7) != 0);
	ctx.r7.s64 = ctx.r7.s32 >> 3;
	// srawi r8,r8,3
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7) != 0);
	ctx.r8.s64 = ctx.r8.s32 >> 3;
	// srawi r9,r9,3
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x7) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 3;
	// xori r10,r10,1
	ctx.r10.u64 = ctx.r10.u64 ^ 1;
	// sth r6,0(r3)
	PPC_STORE_U16(ctx.r3.u32 + 0, ctx.r6.u16);
	// sth r7,0(r4)
	PPC_STORE_U16(ctx.r4.u32 + 0, ctx.r7.u16);
	// sth r8,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r8.u16);
	// add r11,r27,r11
	r11.u64 = r27.u64 + r11.u64;
	// sth r9,0(r31)
	PPC_STORE_U16(r31.u32 + 0, ctx.r9.u16);
	// bne cr6,0x827164a0
	if (!cr6.eq) goto loc_827164A0;
	// lhz r11,50(r25)
	r11.u64 = PPC_LOAD_U16(r25.u32 + 50);
	// cmpwi cr6,r14,0
	cr6.compare<int32_t>(r14.s32, 0, xer);
	// rotlwi r26,r11,2
	r26.u64 = __builtin_rotateleft32(r11.u32, 2);
	// beq cr6,0x82716734
	if (cr6.eq) goto loc_82716734;
	// lwz r11,-20(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + -20);
	// rlwinm r11,r11,0,20,20
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x800;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82716654
	if (cr6.eq) goto loc_82716654;
	// mr r11,r23
	r11.u64 = r23.u64;
	// li r10,1
	ctx.r10.s64 = 1;
	// rlwinm r27,r26,1,0,30
	r27.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 1) & 0xFFFFFFFE;
	// li r5,8
	ctx.r5.s64 = 8;
loc_82716590:
	// addi r4,r11,-2
	ctx.r4.s64 = r11.s64 + -2;
	// lhz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r31,r11,2
	r31.s64 = r11.s64 + 2;
	// addi r3,r11,-4
	ctx.r3.s64 = r11.s64 + -4;
	// extsh r7,r9
	ctx.r7.s64 = ctx.r9.s16;
	// addi r5,r5,-1
	ctx.r5.s64 = ctx.r5.s64 + -1;
	// lhz r8,0(r4)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r4.u32 + 0);
	// lhz r30,0(r31)
	r30.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// extsh r6,r8
	ctx.r6.s64 = ctx.r8.s16;
	// lhz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r3.u32 + 0);
	// extsh r8,r30
	ctx.r8.s64 = r30.s16;
	// rlwinm r29,r6,3,0,28
	r29.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// rlwinm r30,r7,3,0,28
	r30.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 3) & 0xFFFFFFF8;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// subf r29,r6,r29
	r29.s64 = r29.s64 - ctx.r6.s64;
	// subf r30,r7,r30
	r30.s64 = r30.s64 - ctx.r7.s64;
	// rlwinm r28,r9,3,0,28
	r28.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r29,r9,r29
	r29.s64 = r29.s64 - ctx.r9.s64;
	// subf r30,r8,r30
	r30.s64 = r30.s64 - ctx.r8.s64;
	// subf r28,r9,r28
	r28.s64 = r28.s64 - ctx.r9.s64;
	// rlwinm r14,r8,3,0,28
	r14.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r29,r10,r29
	r29.s64 = r29.s64 - ctx.r10.s64;
	// add r30,r30,r6
	r30.u64 = r30.u64 + ctx.r6.u64;
	// add r6,r28,r8
	ctx.r6.u64 = r28.u64 + ctx.r8.u64;
	// subf r28,r8,r14
	r28.s64 = r14.s64 - ctx.r8.s64;
	// add r7,r29,r7
	ctx.r7.u64 = r29.u64 + ctx.r7.u64;
	// add r29,r30,r9
	r29.u64 = r30.u64 + ctx.r9.u64;
	// add r30,r6,r10
	r30.u64 = ctx.r6.u64 + ctx.r10.u64;
	// subf r6,r10,r28
	ctx.r6.s64 = r28.s64 - ctx.r10.s64;
	// add r7,r7,r8
	ctx.r7.u64 = ctx.r7.u64 + ctx.r8.u64;
	// add r8,r29,r10
	ctx.r8.u64 = r29.u64 + ctx.r10.u64;
	// add r9,r6,r9
	ctx.r9.u64 = ctx.r6.u64 + ctx.r9.u64;
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// addi r7,r7,4
	ctx.r7.s64 = ctx.r7.s64 + 4;
	// addi r8,r8,3
	ctx.r8.s64 = ctx.r8.s64 + 3;
	// srawi r6,r30,3
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x7) != 0);
	ctx.r6.s64 = r30.s32 >> 3;
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// srawi r7,r7,3
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x7) != 0);
	ctx.r7.s64 = ctx.r7.s32 >> 3;
	// srawi r8,r8,3
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7) != 0);
	ctx.r8.s64 = ctx.r8.s32 >> 3;
	// srawi r9,r9,3
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x7) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 3;
	// xori r10,r10,1
	ctx.r10.u64 = ctx.r10.u64 ^ 1;
	// sth r6,0(r3)
	PPC_STORE_U16(ctx.r3.u32 + 0, ctx.r6.u16);
	// sth r7,0(r4)
	PPC_STORE_U16(ctx.r4.u32 + 0, ctx.r7.u16);
	// sth r8,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r8.u16);
	// add r11,r27,r11
	r11.u64 = r27.u64 + r11.u64;
	// sth r9,0(r31)
	PPC_STORE_U16(r31.u32 + 0, ctx.r9.u16);
	// bne cr6,0x82716590
	if (!cr6.eq) goto loc_82716590;
	// lwz r14,84(r1)
	r14.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
loc_82716654:
	// lwz r11,-20(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + -20);
	// rlwinm r11,r11,0,20,20
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x800;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82716734
	if (cr6.eq) goto loc_82716734;
	// mr r11,r22
	r11.u64 = r22.u64;
	// li r10,1
	ctx.r10.s64 = 1;
	// rlwinm r27,r26,1,0,30
	r27.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 1) & 0xFFFFFFFE;
	// li r5,8
	ctx.r5.s64 = 8;
loc_82716674:
	// addi r4,r11,-2
	ctx.r4.s64 = r11.s64 + -2;
	// lhz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r31,r11,2
	r31.s64 = r11.s64 + 2;
	// addi r3,r11,-4
	ctx.r3.s64 = r11.s64 + -4;
	// extsh r7,r9
	ctx.r7.s64 = ctx.r9.s16;
	// addi r5,r5,-1
	ctx.r5.s64 = ctx.r5.s64 + -1;
	// lhz r8,0(r4)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r4.u32 + 0);
	// lhz r30,0(r31)
	r30.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// extsh r6,r8
	ctx.r6.s64 = ctx.r8.s16;
	// lhz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r3.u32 + 0);
	// extsh r8,r30
	ctx.r8.s64 = r30.s16;
	// rlwinm r29,r6,3,0,28
	r29.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// rlwinm r30,r7,3,0,28
	r30.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 3) & 0xFFFFFFF8;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// subf r29,r6,r29
	r29.s64 = r29.s64 - ctx.r6.s64;
	// subf r30,r7,r30
	r30.s64 = r30.s64 - ctx.r7.s64;
	// rlwinm r28,r9,3,0,28
	r28.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r29,r9,r29
	r29.s64 = r29.s64 - ctx.r9.s64;
	// subf r30,r8,r30
	r30.s64 = r30.s64 - ctx.r8.s64;
	// subf r28,r9,r28
	r28.s64 = r28.s64 - ctx.r9.s64;
	// rlwinm r26,r8,3,0,28
	r26.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r29,r10,r29
	r29.s64 = r29.s64 - ctx.r10.s64;
	// add r30,r30,r6
	r30.u64 = r30.u64 + ctx.r6.u64;
	// add r6,r28,r8
	ctx.r6.u64 = r28.u64 + ctx.r8.u64;
	// subf r28,r8,r26
	r28.s64 = r26.s64 - ctx.r8.s64;
	// add r7,r29,r7
	ctx.r7.u64 = r29.u64 + ctx.r7.u64;
	// add r29,r30,r9
	r29.u64 = r30.u64 + ctx.r9.u64;
	// add r30,r6,r10
	r30.u64 = ctx.r6.u64 + ctx.r10.u64;
	// subf r6,r10,r28
	ctx.r6.s64 = r28.s64 - ctx.r10.s64;
	// add r7,r7,r8
	ctx.r7.u64 = ctx.r7.u64 + ctx.r8.u64;
	// add r8,r29,r10
	ctx.r8.u64 = r29.u64 + ctx.r10.u64;
	// add r9,r6,r9
	ctx.r9.u64 = ctx.r6.u64 + ctx.r9.u64;
	// addi r30,r30,3
	r30.s64 = r30.s64 + 3;
	// addi r7,r7,4
	ctx.r7.s64 = ctx.r7.s64 + 4;
	// addi r8,r8,3
	ctx.r8.s64 = ctx.r8.s64 + 3;
	// srawi r6,r30,3
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x7) != 0);
	ctx.r6.s64 = r30.s32 >> 3;
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// srawi r7,r7,3
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x7) != 0);
	ctx.r7.s64 = ctx.r7.s32 >> 3;
	// srawi r8,r8,3
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7) != 0);
	ctx.r8.s64 = ctx.r8.s32 >> 3;
	// srawi r9,r9,3
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x7) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 3;
	// xori r10,r10,1
	ctx.r10.u64 = ctx.r10.u64 ^ 1;
	// sth r6,0(r3)
	PPC_STORE_U16(ctx.r3.u32 + 0, ctx.r6.u16);
	// sth r7,0(r4)
	PPC_STORE_U16(ctx.r4.u32 + 0, ctx.r7.u16);
	// sth r8,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r8.u16);
	// add r11,r27,r11
	r11.u64 = r27.u64 + r11.u64;
	// sth r9,0(r31)
	PPC_STORE_U16(r31.u32 + 0, ctx.r9.u16);
	// bne cr6,0x82716674
	if (!cr6.eq) goto loc_82716674;
loc_82716734:
	// lhz r11,50(r25)
	r11.u64 = PPC_LOAD_U16(r25.u32 + 50);
	// li r6,0
	ctx.r6.s64 = 0;
	// cmpwi cr6,r14,0
	cr6.compare<int32_t>(r14.s32, 0, xer);
	// rotlwi r10,r11,3
	ctx.r10.u64 = __builtin_rotateleft32(r11.u32, 3);
	// beq cr6,0x8271675c
	if (cr6.eq) goto loc_8271675C;
	// lwz r11,-20(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + -20);
	// rlwinm r11,r11,0,20,20
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x800;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271675c
	if (cr6.eq) goto loc_8271675C;
	// li r6,-2
	ctx.r6.s64 = -2;
loc_8271675C:
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// li r8,0
	ctx.r8.s64 = 0;
	// rlwinm r5,r10,1,0,30
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r7,r11,r24
	ctx.r7.u64 = r11.u64 + r24.u64;
loc_8271676C:
	// mr r11,r6
	r11.u64 = ctx.r6.u64;
	// cmpwi cr6,r6,16
	cr6.compare<int32_t>(ctx.r6.s32, 16, xer);
	// bge cr6,0x827167c0
	if (!cr6.lt) goto loc_827167C0;
	// mr r9,r7
	ctx.r9.u64 = ctx.r7.u64;
loc_8271677C:
	// lhz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// cmplwi cr6,r10,255
	cr6.compare<uint32_t>(ctx.r10.u32, 255, xer);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// ble cr6,0x8271679c
	if (!cr6.gt) goto loc_8271679C;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// li r10,0
	ctx.r10.s64 = 0;
	// blt cr6,0x8271679c
	if (cr6.lt) goto loc_8271679C;
	// li r10,255
	ctx.r10.s64 = 255;
loc_8271679C:
	// lhz r4,74(r25)
	ctx.r4.u64 = PPC_LOAD_U16(r25.u32 + 74);
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// addi r9,r9,2
	ctx.r9.s64 = ctx.r9.s64 + 2;
	// mullw r10,r4,r8
	ctx.r10.s64 = int64_t(ctx.r4.s32) * int64_t(ctx.r8.s32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,16
	cr6.compare<int32_t>(r11.s32, 16, xer);
	// stbx r3,r10,r19
	PPC_STORE_U8(ctx.r10.u32 + r19.u32, ctx.r3.u8);
	// blt cr6,0x8271677c
	if (cr6.lt) goto loc_8271677C;
loc_827167C0:
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// add r7,r5,r7
	ctx.r7.u64 = ctx.r5.u64 + ctx.r7.u64;
	// cmpwi cr6,r8,16
	cr6.compare<int32_t>(ctx.r8.s32, 16, xer);
	// blt cr6,0x8271676c
	if (cr6.lt) goto loc_8271676C;
	// li r6,0
	ctx.r6.s64 = 0;
	// cmpwi cr6,r14,0
	cr6.compare<int32_t>(r14.s32, 0, xer);
	// beq cr6,0x827167f0
	if (cr6.eq) goto loc_827167F0;
	// lwz r11,-20(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + -20);
	// rlwinm r11,r11,0,20,20
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x800;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x827167f0
	if (cr6.eq) goto loc_827167F0;
	// li r6,-2
	ctx.r6.s64 = -2;
loc_827167F0:
	// lhz r11,50(r25)
	r11.u64 = PPC_LOAD_U16(r25.u32 + 50);
	// rlwinm r10,r6,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// li r8,0
	ctx.r8.s64 = 0;
	// add r7,r10,r23
	ctx.r7.u64 = ctx.r10.u64 + r23.u64;
	// rotlwi r5,r11,3
	ctx.r5.u64 = __builtin_rotateleft32(r11.u32, 3);
loc_82716804:
	// mr r11,r6
	r11.u64 = ctx.r6.u64;
	// cmpwi cr6,r6,8
	cr6.compare<int32_t>(ctx.r6.s32, 8, xer);
	// bge cr6,0x82716858
	if (!cr6.lt) goto loc_82716858;
	// mr r9,r7
	ctx.r9.u64 = ctx.r7.u64;
loc_82716814:
	// lhz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// cmplwi cr6,r10,255
	cr6.compare<uint32_t>(ctx.r10.u32, 255, xer);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// ble cr6,0x82716834
	if (!cr6.gt) goto loc_82716834;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// li r10,0
	ctx.r10.s64 = 0;
	// blt cr6,0x82716834
	if (cr6.lt) goto loc_82716834;
	// li r10,255
	ctx.r10.s64 = 255;
loc_82716834:
	// lhz r4,76(r25)
	ctx.r4.u64 = PPC_LOAD_U16(r25.u32 + 76);
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// addi r9,r9,2
	ctx.r9.s64 = ctx.r9.s64 + 2;
	// mullw r10,r4,r8
	ctx.r10.s64 = int64_t(ctx.r4.s32) * int64_t(ctx.r8.s32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// stbx r3,r10,r21
	PPC_STORE_U8(ctx.r10.u32 + r21.u32, ctx.r3.u8);
	// blt cr6,0x82716814
	if (cr6.lt) goto loc_82716814;
loc_82716858:
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// add r7,r5,r7
	ctx.r7.u64 = ctx.r5.u64 + ctx.r7.u64;
	// cmpwi cr6,r8,8
	cr6.compare<int32_t>(ctx.r8.s32, 8, xer);
	// blt cr6,0x82716804
	if (cr6.lt) goto loc_82716804;
	// li r6,0
	ctx.r6.s64 = 0;
	// cmpwi cr6,r14,0
	cr6.compare<int32_t>(r14.s32, 0, xer);
	// beq cr6,0x82716888
	if (cr6.eq) goto loc_82716888;
	// lwz r11,-20(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + -20);
	// rlwinm r11,r11,0,20,20
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x800;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82716888
	if (cr6.eq) goto loc_82716888;
	// li r6,-2
	ctx.r6.s64 = -2;
loc_82716888:
	// lhz r11,50(r25)
	r11.u64 = PPC_LOAD_U16(r25.u32 + 50);
	// rlwinm r10,r6,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// li r8,0
	ctx.r8.s64 = 0;
	// add r7,r10,r22
	ctx.r7.u64 = ctx.r10.u64 + r22.u64;
	// rotlwi r5,r11,3
	ctx.r5.u64 = __builtin_rotateleft32(r11.u32, 3);
loc_8271689C:
	// mr r11,r6
	r11.u64 = ctx.r6.u64;
	// cmpwi cr6,r6,8
	cr6.compare<int32_t>(ctx.r6.s32, 8, xer);
	// bge cr6,0x827168f4
	if (!cr6.lt) goto loc_827168F4;
	// mr r9,r7
	ctx.r9.u64 = ctx.r7.u64;
loc_827168AC:
	// lhz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// cmplwi cr6,r10,255
	cr6.compare<uint32_t>(ctx.r10.u32, 255, xer);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// ble cr6,0x827168cc
	if (!cr6.gt) goto loc_827168CC;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// li r10,0
	ctx.r10.s64 = 0;
	// blt cr6,0x827168cc
	if (cr6.lt) goto loc_827168CC;
	// li r10,255
	ctx.r10.s64 = 255;
loc_827168CC:
	// lhz r4,76(r25)
	ctx.r4.u64 = PPC_LOAD_U16(r25.u32 + 76);
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// addi r9,r9,2
	ctx.r9.s64 = ctx.r9.s64 + 2;
	// mullw r10,r4,r8
	ctx.r10.s64 = int64_t(ctx.r4.s32) * int64_t(ctx.r8.s32);
	// add r10,r10,r16
	ctx.r10.u64 = ctx.r10.u64 + r16.u64;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// stbx r3,r10,r21
	PPC_STORE_U8(ctx.r10.u32 + r21.u32, ctx.r3.u8);
	// blt cr6,0x827168ac
	if (cr6.lt) goto loc_827168AC;
loc_827168F4:
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// add r7,r5,r7
	ctx.r7.u64 = ctx.r5.u64 + ctx.r7.u64;
	// cmpwi cr6,r8,8
	cr6.compare<int32_t>(ctx.r8.s32, 8, xer);
	// blt cr6,0x8271689c
	if (cr6.lt) goto loc_8271689C;
	// lwz r27,104(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lwz r28,116(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r22,128(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// lwz r26,136(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// lwz r24,92(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r23,88(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// b 0x82716978
	goto loc_82716978;
loc_82716920:
	// lhz r11,0(r17)
	r11.u64 = PPC_LOAD_U16(r17.u32 + 0);
	// li r6,8
	ctx.r6.s64 = 8;
	// lwz r31,1312(r25)
	r31.u64 = PPC_LOAD_U32(r25.u32 + 1312);
	// mr r4,r19
	ctx.r4.u64 = r19.u64;
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// lhz r30,76(r25)
	r30.u64 = PPC_LOAD_U16(r25.u32 + 76);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82716950
	if (!cr6.eq) goto loc_82716950;
	// lhz r7,74(r25)
	ctx.r7.u64 = PPC_LOAD_U16(r25.u32 + 74);
	// rotlwi r11,r7,3
	r11.u64 = __builtin_rotateleft32(ctx.r7.u32, 3);
	// b 0x82716958
	goto loc_82716958;
loc_82716950:
	// lhz r11,74(r25)
	r11.u64 = PPC_LOAD_U16(r25.u32 + 74);
	// rotlwi r7,r11,1
	ctx.r7.u64 = __builtin_rotateleft32(r11.u32, 1);
loc_82716958:
	// add r5,r11,r19
	ctx.r5.u64 = r11.u64 + r19.u64;
	// bl 0x8261c528
	sub_8261C528(ctx, base);
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// li r6,8
	ctx.r6.s64 = 8;
	// add r5,r16,r21
	ctx.r5.u64 = r16.u64 + r21.u64;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// addi r3,r31,512
	ctx.r3.s64 = r31.s64 + 512;
	// bl 0x8261c378
	sub_8261C378(ctx, base);
loc_82716978:
	// lwz r9,120(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// lwz r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// lwz r11,0(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// clrlwi r8,r11,16
	ctx.r8.u64 = r11.u32 & 0xFFFF;
	// stw r10,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r10.u32);
	// stw r9,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r9.u32);
	// rlwinm r9,r11,16,20,31
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFF;
	// ble cr6,0x827169d4
	if (!cr6.gt) goto loc_827169D4;
loc_827169A4:
	// addi r14,r14,1
	r14.s64 = r14.s64 + 1;
	// addi r27,r27,32
	r27.s64 = r27.s64 + 32;
	// addi r28,r28,16
	r28.s64 = r28.s64 + 16;
	// addi r19,r19,16
	r19.s64 = r19.s64 + 16;
	// addi r21,r21,8
	r21.s64 = r21.s64 + 8;
	// stw r14,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r14.u32);
	// addi r17,r17,20
	r17.s64 = r17.s64 + 20;
	// stw r27,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r27.u32);
	// cmpw cr6,r14,r22
	cr6.compare<int32_t>(r14.s32, r22.s32, xer);
	// stw r28,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r28.u32);
	// blt cr6,0x82716288
	if (cr6.lt) goto loc_82716288;
	// b 0x827169dc
	goto loc_827169DC;
loc_827169D4:
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// addi r23,r11,1
	r23.s64 = r11.s64 + 1;
loc_827169DC:
	// lwz r10,228(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 228);
	// addi r23,r23,1
	r23.s64 = r23.s64 + 1;
	// lwz r7,124(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// lwz r11,232(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 232);
	// add r19,r10,r7
	r19.u64 = ctx.r10.u64 + ctx.r7.u64;
	// lwz r10,100(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// add r24,r11,r24
	r24.u64 = r11.u64 + r24.u64;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lwz r10,108(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// stw r23,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r23.u32);
	// cmpw cr6,r23,r10
	cr6.compare<int32_t>(r23.s32, ctx.r10.s32, xer);
	// stw r19,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r19.u32);
	// stw r24,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r24.u32);
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// blt cr6,0x82716260
	if (cr6.lt) goto loc_82716260;
	// lwz r31,132(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
loc_82716A1C:
	// lis r11,-32126
	r11.s64 = -2105409536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// lwz r31,3360(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 3360);
	// bl 0x8271d940
	sub_8271D940(ctx, base);
	// li r8,0
	ctx.r8.s64 = 0;
	// addi r10,r31,8
	ctx.r10.s64 = r31.s64 + 8;
	// addi r11,r1,1156
	r11.s64 = ctx.r1.s64 + 1156;
	// lis r7,-32126
	ctx.r7.s64 = -2105409536;
loc_82716A40:
	// lwz r9,-8(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + -8);
	// lwz r6,-4(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -4);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x82716a80
	if (!cr6.eq) goto loc_82716A80;
	// lwz r9,-4(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + -4);
	// lwz r6,0(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x82716a80
	if (!cr6.eq) goto loc_82716A80;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// lwz r6,4(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x82716a80
	if (!cr6.eq) goto loc_82716A80;
	// lwz r9,4(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// lwz r6,8(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// beq cr6,0x82716a84
	if (cr6.eq) goto loc_82716A84;
loc_82716A80:
	// stw r8,-25028(r7)
	PPC_STORE_U32(ctx.r7.u32 + -25028, ctx.r8.u32);
loc_82716A84:
	// lwz r9,8(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// lwz r6,-20(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -20);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x82716ac4
	if (!cr6.eq) goto loc_82716AC4;
	// lwz r9,12(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	// lwz r6,-16(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -16);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x82716ac4
	if (!cr6.eq) goto loc_82716AC4;
	// lwz r9,16(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	// lwz r6,-12(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -12);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x82716ac4
	if (!cr6.eq) goto loc_82716AC4;
	// lwz r9,20(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 20);
	// lwz r6,-8(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -8);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// beq cr6,0x82716acc
	if (cr6.eq) goto loc_82716ACC;
loc_82716AC4:
	// addi r9,r8,1
	ctx.r9.s64 = ctx.r8.s64 + 1;
	// stw r9,-25028(r7)
	PPC_STORE_U32(ctx.r7.u32 + -25028, ctx.r9.u32);
loc_82716ACC:
	// lwz r9,24(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	// lwz r6,-36(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -36);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x82716b0c
	if (!cr6.eq) goto loc_82716B0C;
	// lwz r9,28(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 28);
	// lwz r6,-32(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -32);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x82716b0c
	if (!cr6.eq) goto loc_82716B0C;
	// lwz r9,32(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 32);
	// lwz r6,-28(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -28);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x82716b0c
	if (!cr6.eq) goto loc_82716B0C;
	// lwz r9,36(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 36);
	// lwz r6,-24(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -24);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// beq cr6,0x82716b14
	if (cr6.eq) goto loc_82716B14;
loc_82716B0C:
	// addi r9,r8,2
	ctx.r9.s64 = ctx.r8.s64 + 2;
	// stw r9,-25028(r7)
	PPC_STORE_U32(ctx.r7.u32 + -25028, ctx.r9.u32);
loc_82716B14:
	// addi r8,r8,3
	ctx.r8.s64 = ctx.r8.s64 + 3;
	// addi r11,r11,-48
	r11.s64 = r11.s64 + -48;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmpwi cr6,r8,9
	cr6.compare<int32_t>(ctx.r8.s32, 9, xer);
	// blt cr6,0x82716a40
	if (cr6.lt) goto loc_82716A40;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,1840
	ctx.r1.s64 = ctx.r1.s64 + 1840;
	// b 0x8239bd10
	return;
}

__attribute__((alias("__imp__sub_82716B34"))) PPC_WEAK_FUNC(sub_82716B34);
PPC_FUNC_IMPL(__imp__sub_82716B34) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_82716B38"))) PPC_WEAK_FUNC(sub_82716B38);
PPC_FUNC_IMPL(__imp__sub_82716B38) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcc0
	// stwu r1,-1888(r1)
	ea = -1888 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// lwz r10,224(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 224);
	// lwz r9,3724(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 3724);
	// mr r20,r5
	r20.u64 = ctx.r5.u64;
	// lwz r29,3720(r3)
	r29.u64 = PPC_LOAD_U32(ctx.r3.u32 + 3720);
	// addi r25,r3,21712
	r25.s64 = ctx.r3.s64 + 21712;
	// add r6,r9,r10
	ctx.r6.u64 = ctx.r9.u64 + ctx.r10.u64;
	// lwz r5,220(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + 220);
	// lwz r7,3728(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 3728);
	// li r26,0
	r26.s64 = 0;
	// lhz r4,50(r31)
	ctx.r4.u64 = PPC_LOAD_U16(r31.u32 + 50);
	// lhz r11,52(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 52);
	// add r7,r7,r10
	ctx.r7.u64 = ctx.r7.u64 + ctx.r10.u64;
	// rlwinm r9,r4,31,1,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 31) & 0x7FFFFFFF;
	// lhz r28,74(r31)
	r28.u64 = PPC_LOAD_U16(r31.u32 + 74);
	// rlwinm r27,r11,31,1,31
	r27.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFF;
	// lwz r11,1248(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1248);
	// rlwinm r23,r28,31,1,31
	r23.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 31) & 0x7FFFFFFF;
	// lhz r4,76(r31)
	ctx.r4.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// lwz r8,21556(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + 21556);
	// rlwinm r24,r4,31,1,31
	r24.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 31) & 0x7FFFFFFF;
	// lwz r30,1304(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 1304);
	// stw r9,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r9.u32);
	// mullw r9,r27,r9
	ctx.r9.s64 = int64_t(r27.s32) * int64_t(ctx.r9.s32);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// stw r11,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r11.u32);
	// lwz r11,1516(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1516);
	// stw r27,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, r27.u32);
	// stw r25,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, r25.u32);
	// stw r26,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, r26.u32);
	// rlwinm r28,r9,1,0,30
	r28.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// mullw r10,r24,r11
	ctx.r10.s64 = int64_t(r24.s32) * int64_t(r11.s32);
	// add r28,r9,r28
	r28.u64 = ctx.r9.u64 + r28.u64;
	// mullw r9,r23,r11
	ctx.r9.s64 = int64_t(r23.s32) * int64_t(r11.s32);
	// add r9,r9,r29
	ctx.r9.u64 = ctx.r9.u64 + r29.u64;
	// addi r24,r11,1
	r24.s64 = r11.s64 + 1;
	// add r9,r9,r5
	ctx.r9.u64 = ctx.r9.u64 + ctx.r5.u64;
	// rlwinm r11,r28,1,0,30
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 1) & 0xFFFFFFFE;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// stw r9,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r9.u32);
	// add r9,r6,r10
	ctx.r9.u64 = ctx.r6.u64 + ctx.r10.u64;
	// add r10,r7,r10
	ctx.r10.u64 = ctx.r7.u64 + ctx.r10.u64;
	// stw r9,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r9.u32);
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// mullw r10,r24,r11
	ctx.r10.s64 = int64_t(r24.s32) * int64_t(r11.s32);
	// rlwinm r10,r10,7,0,24
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 7) & 0xFFFFFF80;
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// stw r10,28(r20)
	PPC_STORE_U32(r20.u32 + 28, ctx.r10.u32);
	// lwz r9,1516(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1516);
	// lwz r10,21572(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 21572);
	// mullw r11,r9,r11
	r11.s64 = int64_t(ctx.r9.s32) * int64_t(r11.s32);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r11,32(r20)
	PPC_STORE_U32(r20.u32 + 32, r11.u32);
	// lis r11,-32126
	r11.s64 = -2105409536;
	// lwz r3,3360(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 3360);
	// bl 0x8271d5f8
	sub_8271D5F8(ctx, base);
	// lwz r10,32(r20)
	ctx.r10.u64 = PPC_LOAD_U32(r20.u32 + 32);
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// stw r26,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r26.u32);
	// stw r26,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, r26.u32);
	// stw r26,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r26.u32);
	// stw r26,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r26.u32);
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// stw r26,0(r20)
	PPC_STORE_U32(r20.u32 + 0, r26.u32);
	// stw r26,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r26.u32);
	// stw r26,4(r20)
	PPC_STORE_U32(r20.u32 + 4, r26.u32);
	// sth r26,16(r20)
	PPC_STORE_U16(r20.u32 + 16, r26.u16);
	// stw r10,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r10.u32);
	// clrlwi r10,r11,16
	ctx.r10.u64 = r11.u32 & 0xFFFF;
	// stw r10,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r10.u32);
	// rlwinm r10,r11,16,20,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFF;
	// rlwinm r11,r11,4,29,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0x7;
	// stw r10,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r10.u32);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// addi r11,r30,-1
	r11.s64 = r30.s64 + -1;
	// stw r11,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r11.u32);
	// beq cr6,0x827175ec
	if (cr6.eq) goto loc_827175EC;
loc_82716C80:
	// lwz r9,100(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// li r11,0
	r11.s64 = 0;
	// lwz r6,120(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// mr r23,r11
	r23.u64 = r11.u64;
	// lwz r30,80(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r4,148(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// mr r10,r6
	ctx.r10.u64 = ctx.r6.u64;
	// stw r9,8(r20)
	PPC_STORE_U32(r20.u32 + 8, ctx.r9.u32);
	// cmplw cr6,r30,r4
	cr6.compare<uint32_t>(r30.u32, ctx.r4.u32, xer);
	// lwz r9,108(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// stw r23,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, r23.u32);
	// sth r11,18(r20)
	PPC_STORE_U16(r20.u32 + 18, r11.u16);
	// stw r9,12(r20)
	PPC_STORE_U32(r20.u32 + 12, ctx.r9.u32);
	// bne cr6,0x82716fc0
	if (!cr6.eq) goto loc_82716FC0;
	// lwz r3,104(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// stw r10,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r10.u32);
	// beq cr6,0x82716fc0
	if (cr6.eq) goto loc_82716FC0;
	// lwz r5,96(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
loc_82716CD4:
	// lwz r7,84(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
loc_82716CD8:
	// cmplw cr6,r11,r3
	cr6.compare<uint32_t>(r11.u32, ctx.r3.u32, xer);
	// bne cr6,0x82716f5c
	if (!cr6.eq) goto loc_82716F5C;
	// addi r9,r5,98
	ctx.r9.s64 = ctx.r5.s64 + 98;
	// lwz r10,28(r20)
	ctx.r10.u64 = PPC_LOAD_U32(r20.u32 + 28);
	// srawi r11,r5,2
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x3) != 0);
	r11.s64 = ctx.r5.s32 >> 2;
	// rlwinm r8,r9,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r9,r10,-128
	ctx.r9.s64 = ctx.r10.s64 + -128;
	// lbz r10,0(r7)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r7.u32 + 0);
	// addi r7,r11,2
	ctx.r7.s64 = r11.s64 + 2;
	// clrlwi r10,r10,26
	ctx.r10.u64 = ctx.r10.u32 & 0x3F;
	// stw r11,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, r11.u32);
	// rlwinm r11,r7,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r8,r8,r31
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + r31.u32);
	// li r6,-128
	ctx.r6.s64 = -128;
	// stw r9,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, ctx.r9.u32);
	// stw r10,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, ctx.r10.u32);
	// lwzx r11,r11,r20
	r11.u64 = PPC_LOAD_U32(r11.u32 + r20.u32);
	// lwz r10,260(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// stw r10,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r10.u32);
	// stw r11,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, r11.u32);
	// dcbt r6,r9
	// dcbzl r0,r10
	memset(base + ((ctx.r10.u32) & ~127), 0, 128);
	// lwz r30,96(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r3,176(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// srawi r11,r30,2
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x3) != 0);
	r11.s64 = r30.s32 >> 2;
	// lwz r10,156(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// lwz r7,168(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// addi r9,r11,45
	ctx.r9.s64 = r11.s64 + 45;
	// rlwinm r11,r10,6,18,25
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 6) & 0x3FC0;
	// stw r3,28(r20)
	PPC_STORE_U32(r20.u32 + 28, ctx.r3.u32);
	// rlwinm r8,r9,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r10,224(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 224);
	// lis r9,-32126
	ctx.r9.s64 = -2105409536;
	// lwz r4,260(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// add r5,r11,r10
	ctx.r5.u64 = r11.u64 + ctx.r10.u64;
	// lis r11,-32126
	r11.s64 = -2105409536;
	// lhzx r8,r8,r31
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r8.u32 + r31.u32);
	// lwz r9,3364(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 3364);
	// lwz r6,3352(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 3352);
	// bl 0x8266b9b8
	sub_8266B9B8(ctx, base);
	// lbz r11,33(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 33);
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82716f0c
	if (cr6.eq) goto loc_82716F0C;
	// lwz r10,104(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// lhz r6,54(r31)
	ctx.r6.u64 = PPC_LOAD_U16(r31.u32 + 54);
	// li r8,8
	ctx.r8.s64 = 8;
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r10,184(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// clrlwi r5,r10,16
	ctx.r5.u64 = ctx.r10.u32 & 0xFFFF;
	// rlwinm r4,r11,3,0,28
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// lwz r11,160(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// addi r9,r30,104
	ctx.r9.s64 = r30.s64 + 104;
	// mr r7,r11
	ctx.r7.u64 = r11.u64;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r9,r31
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + r31.u32);
	// srw r6,r6,r5
	ctx.r6.u64 = ctx.r5.u8 & 0x20 ? 0 : (ctx.r6.u32 >> (ctx.r5.u8 & 0x3F));
	// sraw r10,r4,r10
	temp.u32 = ctx.r10.u32 & 0x3F;
	if (temp.u32 > 0x1F) temp.u32 = 0x1F;
	xer.ca = (ctx.r4.s32 < 0) & (((ctx.r4.s32 >> temp.u32) << temp.u32) != ctx.r4.s32);
	ctx.r10.s64 = ctx.r4.s32 >> temp.u32;
	// rlwinm r10,r10,1,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFF0;
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// mr r10,r9
	ctx.r10.u64 = ctx.r9.u64;
	// mtctr r8
	ctr.u64 = ctx.r8.u64;
loc_82716DDC:
	// lhz r8,0(r7)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r7.u32 + 0);
	// addi r7,r7,2
	ctx.r7.s64 = ctx.r7.s64 + 2;
	// sth r8,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r8.u16);
	// addi r10,r10,2
	ctx.r10.s64 = ctx.r10.s64 + 2;
	// bdnz 0x82716ddc
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82716DDC;
	// rlwinm r10,r6,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r8,r11,16
	ctx.r8.s64 = r11.s64 + 16;
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// li r6,8
	ctx.r6.s64 = 8;
	// mr r7,r9
	ctx.r7.u64 = ctx.r9.u64;
	// mtctr r6
	ctr.u64 = ctx.r6.u64;
loc_82716E08:
	// lhz r6,0(r8)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// sth r6,0(r7)
	PPC_STORE_U16(ctx.r7.u32 + 0, ctx.r6.u16);
	// addi r7,r7,2
	ctx.r7.s64 = ctx.r7.s64 + 2;
	// bdnz 0x82716e08
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82716E08;
	// addi r8,r11,32
	ctx.r8.s64 = r11.s64 + 32;
	// add r7,r10,r9
	ctx.r7.u64 = ctx.r10.u64 + ctx.r9.u64;
	// mr r9,r8
	ctx.r9.u64 = ctx.r8.u64;
	// mr r8,r7
	ctx.r8.u64 = ctx.r7.u64;
	// li r6,8
	ctx.r6.s64 = 8;
	// mtctr r6
	ctr.u64 = ctx.r6.u64;
loc_82716E34:
	// lhz r6,0(r9)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// addi r9,r9,2
	ctx.r9.s64 = ctx.r9.s64 + 2;
	// sth r6,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r6.u16);
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// bdnz 0x82716e34
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82716E34;
	// add r7,r10,r7
	ctx.r7.u64 = ctx.r10.u64 + ctx.r7.u64;
	// addi r9,r11,48
	ctx.r9.s64 = r11.s64 + 48;
	// mr r8,r7
	ctx.r8.u64 = ctx.r7.u64;
	// li r6,8
	ctx.r6.s64 = 8;
	// mtctr r6
	ctr.u64 = ctx.r6.u64;
loc_82716E5C:
	// lhz r6,0(r9)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// addi r9,r9,2
	ctx.r9.s64 = ctx.r9.s64 + 2;
	// sth r6,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r6.u16);
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// bdnz 0x82716e5c
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82716E5C;
	// add r7,r10,r7
	ctx.r7.u64 = ctx.r10.u64 + ctx.r7.u64;
	// addi r9,r11,64
	ctx.r9.s64 = r11.s64 + 64;
	// mr r8,r7
	ctx.r8.u64 = ctx.r7.u64;
	// li r6,8
	ctx.r6.s64 = 8;
	// mtctr r6
	ctr.u64 = ctx.r6.u64;
loc_82716E84:
	// lhz r6,0(r9)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// addi r9,r9,2
	ctx.r9.s64 = ctx.r9.s64 + 2;
	// sth r6,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r6.u16);
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// bdnz 0x82716e84
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82716E84;
	// add r7,r10,r7
	ctx.r7.u64 = ctx.r10.u64 + ctx.r7.u64;
	// addi r9,r11,80
	ctx.r9.s64 = r11.s64 + 80;
	// mr r8,r7
	ctx.r8.u64 = ctx.r7.u64;
	// li r6,8
	ctx.r6.s64 = 8;
	// mtctr r6
	ctr.u64 = ctx.r6.u64;
loc_82716EAC:
	// lhz r6,0(r9)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// addi r9,r9,2
	ctx.r9.s64 = ctx.r9.s64 + 2;
	// sth r6,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r6.u16);
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// bdnz 0x82716eac
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82716EAC;
	// add r7,r10,r7
	ctx.r7.u64 = ctx.r10.u64 + ctx.r7.u64;
	// addi r9,r11,96
	ctx.r9.s64 = r11.s64 + 96;
	// mr r8,r7
	ctx.r8.u64 = ctx.r7.u64;
	// li r6,8
	ctx.r6.s64 = 8;
	// mtctr r6
	ctr.u64 = ctx.r6.u64;
loc_82716ED4:
	// lhz r6,0(r9)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// addi r9,r9,2
	ctx.r9.s64 = ctx.r9.s64 + 2;
	// sth r6,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r6.u16);
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// bdnz 0x82716ed4
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82716ED4;
	// add r10,r10,r7
	ctx.r10.u64 = ctx.r10.u64 + ctx.r7.u64;
	// addi r11,r11,112
	r11.s64 = r11.s64 + 112;
	// li r9,8
	ctx.r9.s64 = 8;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_82716EF8:
	// lhz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// sth r9,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r9.u16);
	// addi r10,r10,2
	ctx.r10.s64 = ctx.r10.s64 + 2;
	// bdnz 0x82716ef8
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82716EF8;
loc_82716F0C:
	// lwz r10,128(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// lwz r30,80(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r6,120(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// rlwinm r4,r11,16,20,31
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFF;
	// clrlwi r3,r11,16
	ctx.r3.u64 = r11.u32 & 0xFFFF;
	// rlwinm r5,r11,4,29,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0x7;
	// lwz r11,140(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// stw r10,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r10.u32);
	// cmplw cr6,r30,r4
	cr6.compare<uint32_t>(r30.u32, ctx.r4.u32, xer);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r4,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r4.u32);
	// stw r3,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r3.u32);
	// stw r5,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r5.u32);
	// stw r11,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r11.u32);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// beq cr6,0x82716cd4
	if (cr6.eq) goto loc_82716CD4;
loc_82716F54:
	// addi r23,r11,1
	r23.s64 = r11.s64 + 1;
	// b 0x82716fbc
	goto loc_82716FBC;
loc_82716F5C:
	// cmplw cr6,r30,r4
	cr6.compare<uint32_t>(r30.u32, ctx.r4.u32, xer);
	// bne cr6,0x82716f54
	if (!cr6.eq) goto loc_82716F54;
	// lhz r9,18(r20)
	ctx.r9.u64 = PPC_LOAD_U16(r20.u32 + 18);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r10,0(r20)
	ctx.r10.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// addi r7,r7,8
	ctx.r7.s64 = ctx.r7.s64 + 8;
	// addi r29,r9,2
	r29.s64 = ctx.r9.s64 + 2;
	// lwz r8,4(r20)
	ctx.r8.u64 = PPC_LOAD_U32(r20.u32 + 4);
	// addi r28,r10,2
	r28.s64 = ctx.r10.s64 + 2;
	// lwz r9,8(r20)
	ctx.r9.u64 = PPC_LOAD_U32(r20.u32 + 8);
	// lwz r10,12(r20)
	ctx.r10.u64 = PPC_LOAD_U32(r20.u32 + 12);
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// addi r9,r9,16
	ctx.r9.s64 = ctx.r9.s64 + 16;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// stw r7,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r7.u32);
	// cmplw cr6,r11,r6
	cr6.compare<uint32_t>(r11.u32, ctx.r6.u32, xer);
	// sth r29,18(r20)
	PPC_STORE_U16(r20.u32 + 18, r29.u16);
	// stw r28,0(r20)
	PPC_STORE_U32(r20.u32 + 0, r28.u32);
	// stw r8,4(r20)
	PPC_STORE_U32(r20.u32 + 4, ctx.r8.u32);
	// stw r9,8(r20)
	PPC_STORE_U32(r20.u32 + 8, ctx.r9.u32);
	// stw r10,12(r20)
	PPC_STORE_U32(r20.u32 + 12, ctx.r10.u32);
	// blt cr6,0x82716cd8
	if (cr6.lt) goto loc_82716CD8;
	// lwz r23,164(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
loc_82716FBC:
	// lwz r10,132(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
loc_82716FC0:
	// lhz r9,16(r20)
	ctx.r9.u64 = PPC_LOAD_U16(r20.u32 + 16);
	// rlwinm r11,r6,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r8,136(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// addi r7,r9,2
	ctx.r7.s64 = ctx.r9.s64 + 2;
	// lwz r9,116(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// add r8,r8,r6
	ctx.r8.u64 = ctx.r8.u64 + ctx.r6.u64;
	// add r9,r11,r9
	ctx.r9.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r11,r6,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// sth r7,16(r20)
	PPC_STORE_U16(r20.u32 + 16, ctx.r7.u16);
	// stw r8,4(r20)
	PPC_STORE_U32(r20.u32 + 4, ctx.r8.u32);
	// stw r9,0(r20)
	PPC_STORE_U32(r20.u32 + 0, ctx.r9.u32);
	// stw r9,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r9.u32);
	// lwz r9,144(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// lhz r19,74(r31)
	r19.u64 = PPC_LOAD_U16(r31.u32 + 74);
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// stw r8,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r8.u32);
	// lwz r8,100(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// rotlwi r9,r19,4
	ctx.r9.u64 = __builtin_rotateleft32(r19.u32, 4);
	// lhz r15,76(r31)
	r15.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// stw r11,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r11.u32);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// lbz r11,33(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 33);
	// stw r9,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r9.u32);
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// lwz r9,108(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// rotlwi r11,r15,3
	r11.u64 = __builtin_rotateleft32(r15.u32, 3);
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// stw r11,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r11.u32);
	// beq cr6,0x827173cc
	if (cr6.eq) goto loc_827173CC;
	// lhz r29,50(r31)
	r29.u64 = PPC_LOAD_U16(r31.u32 + 50);
	// mr r24,r10
	r24.u64 = ctx.r10.u64;
	// lwz r4,116(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// rotlwi r11,r29,1
	r11.u64 = __builtin_rotateleft32(r29.u32, 1);
	// lwz r8,80(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r6,1240(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 1240);
	// rotlwi r17,r29,2
	r17.u64 = __builtin_rotateleft32(r29.u32, 2);
	// subf r11,r11,r4
	r11.s64 = ctx.r4.s64 - r11.s64;
	// lwz r9,192(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 192);
	// rlwinm r4,r8,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r7,188(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// neg r5,r8
	ctx.r5.s64 = -ctx.r8.s64;
	// rotlwi r21,r29,3
	r21.u64 = __builtin_rotateleft32(r29.u32, 3);
	// srawi r8,r5,31
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x7FFFFFFF) != 0);
	ctx.r8.s64 = ctx.r5.s32 >> 31;
	// srawi r16,r29,1
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x1) != 0);
	r16.s64 = r29.s32 >> 1;
	// lwzx r6,r4,r6
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r4.u32 + ctx.r6.u32);
	// srawi r5,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	ctx.r5.s64 = r11.s32 >> 2;
	// addi r4,r8,1
	ctx.r4.s64 = ctx.r8.s64 + 1;
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r11,r5,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// or r14,r4,r6
	r14.u64 = ctx.r4.u64 | ctx.r6.u64;
	// add r18,r11,r9
	r18.u64 = r11.u64 + ctx.r9.u64;
	// add r27,r8,r7
	r27.u64 = ctx.r8.u64 + ctx.r7.u64;
	// rlwinm r11,r10,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// bne cr6,0x827170ac
	if (!cr6.eq) goto loc_827170AC;
	// li r11,1
	r11.s64 = 1;
	// li r24,1
	r24.s64 = 1;
loc_827170AC:
	// rlwinm r8,r23,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 1) & 0xFFFFFFFE;
	// cmpw cr6,r11,r8
	cr6.compare<int32_t>(r11.s32, ctx.r8.s32, xer);
	// bge cr6,0x8271713c
	if (!cr6.lt) goto loc_8271713C;
	// add r10,r11,r29
	ctx.r10.u64 = r11.u64 + r29.u64;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r30,r11,4,0,27
	r30.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// add r26,r9,r27
	r26.u64 = ctx.r9.u64 + r27.u64;
	// add r25,r10,r27
	r25.u64 = ctx.r10.u64 + r27.u64;
	// subf r28,r11,r8
	r28.s64 = ctx.r8.s64 - r11.s64;
loc_827170D4:
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// bne cr6,0x827170fc
	if (!cr6.eq) goto loc_827170FC;
	// lwz r11,-4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -4);
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// bne cr6,0x827170fc
	if (!cr6.eq) goto loc_827170FC;
	// lwz r11,1264(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1264);
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// add r3,r30,r11
	ctx.r3.u64 = r30.u64 + r11.u64;
	// bl 0x826112d8
	sub_826112D8(ctx, base);
loc_827170FC:
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// bne cr6,0x82717124
	if (!cr6.eq) goto loc_82717124;
	// lwz r11,-4(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + -4);
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// bne cr6,0x82717124
	if (!cr6.eq) goto loc_82717124;
	// lwz r11,1272(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1272);
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x826112d8
	sub_826112D8(ctx, base);
loc_82717124:
	// addi r28,r28,-1
	r28.s64 = r28.s64 + -1;
	// addi r26,r26,4
	r26.s64 = r26.s64 + 4;
	// addi r25,r25,4
	r25.s64 = r25.s64 + 4;
	// addi r30,r30,16
	r30.s64 = r30.s64 + 16;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x827170d4
	if (!cr6.eq) goto loc_827170D4;
loc_8271713C:
	// cmpw cr6,r24,r23
	cr6.compare<int32_t>(r24.s32, r23.s32, xer);
	// bge cr6,0x827171a0
	if (!cr6.lt) goto loc_827171A0;
	// rlwinm r11,r24,2,0,29
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r30,r24,4,0,27
	r30.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 4) & 0xFFFFFFF0;
	// add r28,r11,r18
	r28.u64 = r11.u64 + r18.u64;
	// subf r26,r24,r23
	r26.s64 = r23.s64 - r24.s64;
loc_82717154:
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// bne cr6,0x8271718c
	if (!cr6.eq) goto loc_8271718C;
	// lwz r11,-4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -4);
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// bne cr6,0x8271718c
	if (!cr6.eq) goto loc_8271718C;
	// lwz r11,1276(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1276);
	// mr r4,r17
	ctx.r4.u64 = r17.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x826112d8
	sub_826112D8(ctx, base);
	// lwz r11,1284(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1284);
	// mr r4,r17
	ctx.r4.u64 = r17.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x826112d8
	sub_826112D8(ctx, base);
loc_8271718C:
	// addi r26,r26,-1
	r26.s64 = r26.s64 + -1;
	// addi r28,r28,4
	r28.s64 = r28.s64 + 4;
	// addi r30,r30,16
	r30.s64 = r30.s64 + 16;
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// bne cr6,0x82717154
	if (!cr6.eq) goto loc_82717154;
loc_827171A0:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// ble cr6,0x8271729c
	if (!cr6.gt) goto loc_8271729C;
	// lwz r26,124(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// rlwinm r11,r29,2,0,29
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r10,r19,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r19.u32 | (r19.u64 << 32), 3) & 0xFFFFFFF8;
	// li r30,0
	r30.s64 = 0;
	// add r25,r10,r26
	r25.u64 = ctx.r10.u64 + r26.u64;
	// mr r23,r29
	r23.u64 = r29.u64;
	// add r24,r27,r11
	r24.u64 = r27.u64 + r11.u64;
	// subf r22,r11,r27
	r22.s64 = r27.s64 - r11.s64;
loc_827171C8:
	// cmpwi cr6,r14,0
	cr6.compare<int32_t>(r14.s32, 0, xer);
	// bne cr6,0x827171e0
	if (!cr6.eq) goto loc_827171E0;
	// lwz r11,0(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// li r8,1
	ctx.r8.s64 = 1;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x827171e4
	if (cr6.eq) goto loc_827171E4;
loc_827171E0:
	// li r8,0
	ctx.r8.s64 = 0;
loc_827171E4:
	// lwz r10,0(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// lwz r11,0(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// addi r10,r10,-16384
	ctx.r10.s64 = ctx.r10.s64 + -16384;
	// addi r11,r11,-16384
	r11.s64 = r11.s64 + -16384;
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r29,r10,27,31,31
	r29.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// rlwinm r28,r11,27,31,31
	r28.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bne cr6,0x82717214
	if (!cr6.eq) goto loc_82717214;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// beq cr6,0x82717244
	if (cr6.eq) goto loc_82717244;
loc_82717214:
	// lwz r4,1264(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 1264);
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r11,1268(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1268);
	// mr r9,r29
	ctx.r9.u64 = r29.u64;
	// mr r7,r19
	ctx.r7.u64 = r19.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// add r4,r4,r30
	ctx.r4.u64 = ctx.r4.u64 + r30.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x82611550
	sub_82611550(ctx, base);
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// bne cr6,0x8271724c
	if (!cr6.eq) goto loc_8271724C;
loc_82717244:
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// beq cr6,0x82717278
	if (cr6.eq) goto loc_82717278;
loc_8271724C:
	// lwz r4,1272(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 1272);
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r11,1264(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1264);
	// mr r9,r28
	ctx.r9.u64 = r28.u64;
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
	// mr r7,r19
	ctx.r7.u64 = r19.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// add r4,r4,r30
	ctx.r4.u64 = ctx.r4.u64 + r30.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x82611550
	sub_82611550(ctx, base);
loc_82717278:
	// addi r23,r23,-1
	r23.s64 = r23.s64 + -1;
	// addi r22,r22,4
	r22.s64 = r22.s64 + 4;
	// addi r27,r27,4
	r27.s64 = r27.s64 + 4;
	// addi r24,r24,4
	r24.s64 = r24.s64 + 4;
	// addi r26,r26,8
	r26.s64 = r26.s64 + 8;
	// addi r25,r25,8
	r25.s64 = r25.s64 + 8;
	// addi r30,r30,16
	r30.s64 = r30.s64 + 16;
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// bne cr6,0x827171c8
	if (!cr6.eq) goto loc_827171C8;
loc_8271729C:
	// cmpwi cr6,r16,0
	cr6.compare<int32_t>(r16.s32, 0, xer);
	// ble cr6,0x82717374
	if (!cr6.gt) goto loc_82717374;
	// rlwinm r11,r16,2,0,29
	r11.u64 = __builtin_rotateleft64(r16.u32 | (r16.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r27,88(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// li r30,0
	r30.s64 = 0;
	// subf r23,r11,r18
	r23.s64 = r18.s64 - r11.s64;
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// mr r25,r18
	r25.u64 = r18.u64;
	// subf r26,r27,r11
	r26.s64 = r11.s64 - r27.s64;
	// mr r24,r16
	r24.u64 = r16.u64;
loc_827172C4:
	// cmpwi cr6,r14,0
	cr6.compare<int32_t>(r14.s32, 0, xer);
	// bne cr6,0x827172dc
	if (!cr6.eq) goto loc_827172DC;
	// lwz r11,0(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 0);
	// li r29,1
	r29.s64 = 1;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x827172e0
	if (cr6.eq) goto loc_827172E0;
loc_827172DC:
	// li r29,0
	r29.s64 = 0;
loc_827172E0:
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// addi r11,r11,-16384
	r11.s64 = r11.s64 + -16384;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r28,r11,27,31,31
	r28.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bne cr6,0x82717300
	if (!cr6.eq) goto loc_82717300;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// beq cr6,0x82717358
	if (cr6.eq) goto loc_82717358;
loc_82717300:
	// lwz r4,1276(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 1276);
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r11,1280(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1280);
	// mr r9,r28
	ctx.r9.u64 = r28.u64;
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
	// mr r7,r15
	ctx.r7.u64 = r15.u64;
	// add r6,r26,r27
	ctx.r6.u64 = r26.u64 + r27.u64;
	// mr r5,r17
	ctx.r5.u64 = r17.u64;
	// add r4,r4,r30
	ctx.r4.u64 = ctx.r4.u64 + r30.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x82611550
	sub_82611550(ctx, base);
	// lwz r4,1284(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 1284);
	// lwz r11,1288(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1288);
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r9,r28
	ctx.r9.u64 = r28.u64;
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
	// mr r7,r15
	ctx.r7.u64 = r15.u64;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r5,r17
	ctx.r5.u64 = r17.u64;
	// add r4,r4,r30
	ctx.r4.u64 = ctx.r4.u64 + r30.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x82611550
	sub_82611550(ctx, base);
loc_82717358:
	// addi r24,r24,-1
	r24.s64 = r24.s64 + -1;
	// addi r23,r23,4
	r23.s64 = r23.s64 + 4;
	// addi r25,r25,4
	r25.s64 = r25.s64 + 4;
	// addi r27,r27,8
	r27.s64 = r27.s64 + 8;
	// addi r30,r30,16
	r30.s64 = r30.s64 + 16;
	// cmplwi cr6,r24,0
	cr6.compare<uint32_t>(r24.u32, 0, xer);
	// bne cr6,0x827172c4
	if (!cr6.eq) goto loc_827172C4;
loc_82717374:
	// lwz r9,1268(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1268);
	// lwz r7,1280(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1280);
	// lwz r6,1288(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 1288);
	// rotlwi r10,r9,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// lwz r8,1272(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1272);
	// lwz r5,1276(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 1276);
	// stw r9,1272(r31)
	PPC_STORE_U32(r31.u32 + 1272, ctx.r9.u32);
	// lwz r9,1284(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1284);
	// stw r7,1276(r31)
	PPC_STORE_U32(r31.u32 + 1276, ctx.r7.u32);
	// rotlwi r7,r7,0
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r7.u32, 0);
	// stw r6,1284(r31)
	PPC_STORE_U32(r31.u32 + 1284, ctx.r6.u32);
	// rotlwi r6,r6,0
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 0);
	// lwz r11,1264(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1264);
	// stw r8,1268(r31)
	PPC_STORE_U32(r31.u32 + 1268, ctx.r8.u32);
	// stw r5,1280(r31)
	PPC_STORE_U32(r31.u32 + 1280, ctx.r5.u32);
	// stw r9,1288(r31)
	PPC_STORE_U32(r31.u32 + 1288, ctx.r9.u32);
	// stw r7,432(r31)
	PPC_STORE_U32(r31.u32 + 432, ctx.r7.u32);
	// stw r11,420(r31)
	PPC_STORE_U32(r31.u32 + 420, r11.u32);
	// stw r11,416(r31)
	PPC_STORE_U32(r31.u32 + 416, r11.u32);
	// stw r6,436(r31)
	PPC_STORE_U32(r31.u32 + 436, ctx.r6.u32);
	// stw r10,428(r31)
	PPC_STORE_U32(r31.u32 + 428, ctx.r10.u32);
	// stw r10,424(r31)
	PPC_STORE_U32(r31.u32 + 424, ctx.r10.u32);
loc_827173CC:
	// lwz r9,80(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r11,152(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// addi r10,r9,1
	ctx.r10.s64 = ctx.r9.s64 + 1;
	// lwz r8,1240(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1240);
	// subf r11,r11,r9
	r11.s64 = ctx.r9.s64 - r11.s64;
	// lhz r24,74(r31)
	r24.u64 = PPC_LOAD_U16(r31.u32 + 74);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r7,33(r31)
	ctx.r7.u64 = PPC_LOAD_U8(r31.u32 + 33);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lhz r22,76(r31)
	r22.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// rlwinm r11,r11,1,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// lwzx r10,r10,r8
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r8.u32);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r8,124(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rotlwi r10,r24,4
	ctx.r10.u64 = __builtin_rotateleft32(r24.u32, 4);
	// and r11,r11,r7
	r11.u64 = r11.u64 & ctx.r7.u64;
	// add r29,r10,r8
	r29.u64 = ctx.r10.u64 + ctx.r8.u64;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// rotlwi r11,r22,3
	r11.u64 = __builtin_rotateleft32(r22.u32, 3);
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// stw r29,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r29.u32);
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// add r6,r11,r10
	ctx.r6.u64 = r11.u64 + ctx.r10.u64;
	// stw r6,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r6.u32);
	// beq cr6,0x827175d0
	if (cr6.eq) goto loc_827175D0;
	// lhz r11,50(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 50);
	// lwz r10,0(r20)
	ctx.r10.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// srawi r27,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r27.s64 = r11.s32 >> 1;
	// lwz r7,188(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// srawi r5,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r5.s64 = ctx.r10.s32 >> 2;
	// lwz r9,192(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 192);
	// rlwinm r8,r10,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r10,r5,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// rotlwi r23,r11,2
	r23.u64 = __builtin_rotateleft32(r11.u32, 2);
	// rotlwi r25,r11,3
	r25.u64 = __builtin_rotateleft32(r11.u32, 3);
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// add r21,r10,r9
	r21.u64 = ctx.r10.u64 + ctx.r9.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x827174d8
	if (!cr6.gt) goto loc_827174D8;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// li r30,0
	r30.s64 = 0;
	// subf r26,r10,r8
	r26.s64 = ctx.r8.s64 - ctx.r10.s64;
	// mr r28,r11
	r28.u64 = r11.u64;
loc_82717484:
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// bne cr6,0x827174bc
	if (!cr6.eq) goto loc_827174BC;
	// lwz r4,1264(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 1264);
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r11,1268(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1268);
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,1
	ctx.r8.s64 = 1;
	// mr r7,r24
	ctx.r7.u64 = r24.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// add r4,r30,r4
	ctx.r4.u64 = r30.u64 + ctx.r4.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x82611550
	sub_82611550(ctx, base);
loc_827174BC:
	// addi r28,r28,-1
	r28.s64 = r28.s64 + -1;
	// addi r26,r26,4
	r26.s64 = r26.s64 + 4;
	// addi r29,r29,8
	r29.s64 = r29.s64 + 8;
	// addi r30,r30,16
	r30.s64 = r30.s64 + 16;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x82717484
	if (!cr6.eq) goto loc_82717484;
	// lwz r6,88(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
loc_827174D8:
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// ble cr6,0x82717574
	if (!cr6.gt) goto loc_82717574;
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// li r30,0
	r30.s64 = 0;
	// subf r26,r11,r21
	r26.s64 = r21.s64 - r11.s64;
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// subf r28,r6,r11
	r28.s64 = r11.s64 - ctx.r6.s64;
loc_827174F8:
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// bne cr6,0x8271755c
	if (!cr6.eq) goto loc_8271755C;
	// lwz r4,1276(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 1276);
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r11,1280(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1280);
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,1
	ctx.r8.s64 = 1;
	// mr r7,r22
	ctx.r7.u64 = r22.u64;
	// add r6,r29,r28
	ctx.r6.u64 = r29.u64 + r28.u64;
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// add r4,r4,r30
	ctx.r4.u64 = ctx.r4.u64 + r30.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x82611550
	sub_82611550(ctx, base);
	// lwz r4,1284(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 1284);
	// lwz r11,1288(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1288);
	// li r10,0
	ctx.r10.s64 = 0;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,1
	ctx.r8.s64 = 1;
	// mr r7,r22
	ctx.r7.u64 = r22.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// add r4,r4,r30
	ctx.r4.u64 = ctx.r4.u64 + r30.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x82611550
	sub_82611550(ctx, base);
loc_8271755C:
	// addi r27,r27,-1
	r27.s64 = r27.s64 + -1;
	// addi r26,r26,4
	r26.s64 = r26.s64 + 4;
	// addi r29,r29,8
	r29.s64 = r29.s64 + 8;
	// addi r30,r30,16
	r30.s64 = r30.s64 + 16;
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// bne cr6,0x827174f8
	if (!cr6.eq) goto loc_827174F8;
loc_82717574:
	// lwz r9,1268(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1268);
	// lwz r7,1280(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1280);
	// lwz r6,1288(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 1288);
	// rotlwi r10,r9,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// lwz r8,1272(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1272);
	// lwz r5,1276(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 1276);
	// stw r9,1272(r31)
	PPC_STORE_U32(r31.u32 + 1272, ctx.r9.u32);
	// lwz r9,1284(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1284);
	// stw r7,1276(r31)
	PPC_STORE_U32(r31.u32 + 1276, ctx.r7.u32);
	// rotlwi r7,r7,0
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r7.u32, 0);
	// stw r6,1284(r31)
	PPC_STORE_U32(r31.u32 + 1284, ctx.r6.u32);
	// rotlwi r6,r6,0
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 0);
	// lwz r11,1264(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1264);
	// stw r8,1268(r31)
	PPC_STORE_U32(r31.u32 + 1268, ctx.r8.u32);
	// stw r9,1288(r31)
	PPC_STORE_U32(r31.u32 + 1288, ctx.r9.u32);
	// lwz r9,80(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r5,1280(r31)
	PPC_STORE_U32(r31.u32 + 1280, ctx.r5.u32);
	// stw r11,420(r31)
	PPC_STORE_U32(r31.u32 + 420, r11.u32);
	// stw r11,416(r31)
	PPC_STORE_U32(r31.u32 + 416, r11.u32);
	// stw r7,432(r31)
	PPC_STORE_U32(r31.u32 + 432, ctx.r7.u32);
	// stw r6,436(r31)
	PPC_STORE_U32(r31.u32 + 436, ctx.r6.u32);
	// stw r10,428(r31)
	PPC_STORE_U32(r31.u32 + 428, ctx.r10.u32);
	// stw r10,424(r31)
	PPC_STORE_U32(r31.u32 + 424, ctx.r10.u32);
loc_827175D0:
	// addi r11,r9,1
	r11.s64 = ctx.r9.s64 + 1;
	// lwz r10,152(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// blt cr6,0x82716c80
	if (cr6.lt) goto loc_82716C80;
	// lwz r25,172(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// li r26,0
	r26.s64 = 0;
loc_827175EC:
	// lis r11,-32126
	r11.s64 = -2105409536;
	// addi r4,r1,192
	ctx.r4.s64 = ctx.r1.s64 + 192;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// lwz r31,3360(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 3360);
	// bl 0x8271d940
	sub_8271D940(ctx, base);
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// addi r10,r31,8
	ctx.r10.s64 = r31.s64 + 8;
	// addi r11,r1,1204
	r11.s64 = ctx.r1.s64 + 1204;
	// lis r7,-32126
	ctx.r7.s64 = -2105409536;
loc_82717610:
	// lwz r9,-8(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + -8);
	// lwz r6,-4(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -4);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x82717650
	if (!cr6.eq) goto loc_82717650;
	// lwz r9,-4(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + -4);
	// lwz r6,0(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x82717650
	if (!cr6.eq) goto loc_82717650;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// lwz r6,4(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x82717650
	if (!cr6.eq) goto loc_82717650;
	// lwz r9,4(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// lwz r6,8(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// beq cr6,0x82717654
	if (cr6.eq) goto loc_82717654;
loc_82717650:
	// stw r8,-25024(r7)
	PPC_STORE_U32(ctx.r7.u32 + -25024, ctx.r8.u32);
loc_82717654:
	// lwz r9,8(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// lwz r6,-20(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -20);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x82717694
	if (!cr6.eq) goto loc_82717694;
	// lwz r9,12(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	// lwz r6,-16(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -16);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x82717694
	if (!cr6.eq) goto loc_82717694;
	// lwz r9,16(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	// lwz r6,-12(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -12);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x82717694
	if (!cr6.eq) goto loc_82717694;
	// lwz r9,20(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 20);
	// lwz r6,-8(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -8);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// beq cr6,0x8271769c
	if (cr6.eq) goto loc_8271769C;
loc_82717694:
	// addi r9,r8,1
	ctx.r9.s64 = ctx.r8.s64 + 1;
	// stw r9,-25024(r7)
	PPC_STORE_U32(ctx.r7.u32 + -25024, ctx.r9.u32);
loc_8271769C:
	// lwz r9,24(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	// lwz r6,-36(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -36);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x827176dc
	if (!cr6.eq) goto loc_827176DC;
	// lwz r9,28(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 28);
	// lwz r6,-32(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -32);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x827176dc
	if (!cr6.eq) goto loc_827176DC;
	// lwz r9,32(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 32);
	// lwz r6,-28(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -28);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x827176dc
	if (!cr6.eq) goto loc_827176DC;
	// lwz r9,36(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 36);
	// lwz r6,-24(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -24);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// beq cr6,0x827176e4
	if (cr6.eq) goto loc_827176E4;
loc_827176DC:
	// addi r9,r8,2
	ctx.r9.s64 = ctx.r8.s64 + 2;
	// stw r9,-25024(r7)
	PPC_STORE_U32(ctx.r7.u32 + -25024, ctx.r9.u32);
loc_827176E4:
	// addi r8,r8,3
	ctx.r8.s64 = ctx.r8.s64 + 3;
	// addi r11,r11,-48
	r11.s64 = r11.s64 + -48;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmpwi cr6,r8,9
	cr6.compare<int32_t>(ctx.r8.s32, 9, xer);
	// blt cr6,0x82717610
	if (cr6.lt) goto loc_82717610;
	// lwz r3,180(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// addi r1,r1,1888
	ctx.r1.s64 = ctx.r1.s64 + 1888;
	// b 0x8239bd10
	return;
}

__attribute__((alias("__imp__sub_82717800"))) PPC_WEAK_FUNC(sub_82717800);
PPC_FUNC_IMPL(__imp__sub_82717800) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcc0
	// stwu r1,-368(r1)
	ea = -368 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r14,r3
	r14.u64 = ctx.r3.u64;
	// mr r15,r5
	r15.u64 = ctx.r5.u64;
	// li r16,0
	r16.s64 = 0;
	// li r9,16384
	ctx.r9.s64 = 16384;
	// lbz r11,33(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 33);
	// mr r24,r16
	r24.u64 = r16.u64;
	// stw r14,388(r1)
	PPC_STORE_U32(ctx.r1.u32 + 388, r14.u32);
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// stw r15,404(r1)
	PPC_STORE_U32(ctx.r1.u32 + 404, r15.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x827178a4
	if (cr6.eq) goto loc_827178A4;
	// lwz r11,144(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 144);
	// mr r10,r16
	ctx.r10.u64 = r16.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x82717874
	if (!cr6.gt) goto loc_82717874;
	// mr r11,r16
	r11.u64 = r16.u64;
loc_82717854:
	// lwz r8,376(r14)
	ctx.r8.u64 = PPC_LOAD_U32(r14.u32 + 376);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stwx r9,r8,r11
	PPC_STORE_U32(ctx.r8.u32 + r11.u32, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// lwz r8,144(r14)
	ctx.r8.u64 = PPC_LOAD_U32(r14.u32 + 144);
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpw cr6,r10,r8
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r8.s32, xer);
	// blt cr6,0x82717854
	if (cr6.lt) goto loc_82717854;
loc_82717874:
	// lwz r11,144(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 144);
	// mr r10,r16
	ctx.r10.u64 = r16.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x827178a4
	if (!cr6.gt) goto loc_827178A4;
	// mr r11,r16
	r11.u64 = r16.u64;
loc_82717888:
	// lwz r8,380(r14)
	ctx.r8.u64 = PPC_LOAD_U32(r14.u32 + 380);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stwx r9,r8,r11
	PPC_STORE_U32(ctx.r8.u32 + r11.u32, ctx.r9.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// lwz r8,144(r14)
	ctx.r8.u64 = PPC_LOAD_U32(r14.u32 + 144);
	// cmpw cr6,r10,r8
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r8.s32, xer);
	// blt cr6,0x82717888
	if (cr6.lt) goto loc_82717888;
loc_827178A4:
	// lhz r11,50(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 50);
	// mr r27,r16
	r27.u64 = r16.u64;
	// lhz r10,52(r30)
	ctx.r10.u64 = PPC_LOAD_U16(r30.u32 + 52);
	// mr r25,r16
	r25.u64 = r16.u64;
	// rlwinm r20,r11,31,1,31
	r20.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFF;
	// lwz r8,1516(r30)
	ctx.r8.u64 = PPC_LOAD_U32(r30.u32 + 1516);
	// rlwinm r19,r10,31,1,31
	r19.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// lwz r9,21556(r14)
	ctx.r9.u64 = PPC_LOAD_U32(r14.u32 + 21556);
	// mullw r11,r19,r20
	r11.s64 = int64_t(r19.s32) * int64_t(r20.s32);
	// stw r27,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r27.u32);
	// stw r25,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, r25.u32);
	// stw r20,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, r20.u32);
	// stw r19,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, r19.u32);
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// mullw r10,r8,r11
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(r11.s32);
	// rlwinm r10,r10,7,0,24
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 7) & 0xFFFFFF80;
	// rlwinm r8,r11,7,0,24
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 7) & 0xFFFFFF80;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r10,20(r15)
	PPC_STORE_U32(r15.u32 + 20, ctx.r10.u32);
	// lwz r10,1516(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 1516);
	// lwz r9,21568(r14)
	ctx.r9.u64 = PPC_LOAD_U32(r14.u32 + 21568);
	// mullw r10,r10,r11
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(r11.s32);
	// lwz r7,20(r15)
	ctx.r7.u64 = PPC_LOAD_U32(r15.u32 + 20);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r8,28(r15)
	PPC_STORE_U32(r15.u32 + 28, ctx.r8.u32);
	// stw r10,24(r15)
	PPC_STORE_U32(r15.u32 + 24, ctx.r10.u32);
	// lwz r9,1516(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 1516);
	// lwz r10,21572(r14)
	ctx.r10.u64 = PPC_LOAD_U32(r14.u32 + 21572);
	// mullw r11,r9,r11
	r11.s64 = int64_t(ctx.r9.s32) * int64_t(r11.s32);
	// stw r16,0(r15)
	PPC_STORE_U32(r15.u32 + 0, r16.u32);
	// stw r16,4(r15)
	PPC_STORE_U32(r15.u32 + 4, r16.u32);
	// sth r16,16(r15)
	PPC_STORE_U16(r15.u32 + 16, r16.u16);
	// sth r16,18(r15)
	PPC_STORE_U16(r15.u32 + 18, r16.u16);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r11,32(r15)
	PPC_STORE_U32(r15.u32 + 32, r11.u32);
	// lhz r10,52(r30)
	ctx.r10.u64 = PPC_LOAD_U16(r30.u32 + 52);
	// lhz r9,50(r30)
	ctx.r9.u64 = PPC_LOAD_U16(r30.u32 + 50);
	// lwz r11,1516(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 1516);
	// mullw r7,r10,r9
	ctx.r7.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r9.s32);
	// lwz r10,21236(r14)
	ctx.r10.u64 = PPC_LOAD_U32(r14.u32 + 21236);
	// lwz r8,216(r30)
	ctx.r8.u64 = PPC_LOAD_U32(r30.u32 + 216);
	// lwz r9,268(r14)
	ctx.r9.u64 = PPC_LOAD_U32(r14.u32 + 268);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// mullw r10,r11,r19
	ctx.r10.s64 = int64_t(r11.s32) * int64_t(r19.s32);
	// mullw r11,r7,r11
	r11.s64 = int64_t(ctx.r7.s32) * int64_t(r11.s32);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mullw r10,r10,r20
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(r20.s32);
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// stw r11,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, r11.u32);
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r29,r11,r9
	r29.u64 = r11.u64 + ctx.r9.u64;
	// stw r29,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r29.u32);
	// beq cr6,0x827179ac
	if (cr6.eq) goto loc_827179AC;
	// lwz r11,1520(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 1520);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x827179ac
	if (!cr6.eq) goto loc_827179AC;
	// lwz r11,21272(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 21272);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,21272(r14)
	PPC_STORE_U32(r14.u32 + 21272, r11.u32);
loc_827179AC:
	// mr r23,r16
	r23.u64 = r16.u64;
	// cmplwi cr6,r19,0
	cr6.compare<uint32_t>(r19.u32, 0, xer);
	// stw r23,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r23.u32);
	// beq cr6,0x82719978
	if (cr6.eq) goto loc_82719978;
	// lis r11,-32244
	r11.s64 = -2113142784;
	// lis r26,2
	r26.s64 = 131072;
	// addi r21,r11,29840
	r21.s64 = r11.s64 + 29840;
loc_827179C8:
	// stw r27,8(r15)
	PPC_STORE_U32(r15.u32 + 8, r27.u32);
	// li r22,1
	r22.s64 = 1;
	// stw r25,12(r15)
	PPC_STORE_U32(r15.u32 + 12, r25.u32);
	// sth r16,18(r15)
	PPC_STORE_U16(r15.u32 + 18, r16.u16);
	// lwz r11,21236(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 21236);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82717cb8
	if (cr6.eq) goto loc_82717CB8;
	// lwz r11,1240(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 1240);
	// rlwinm r10,r23,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r10
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82717cb8
	if (cr6.eq) goto loc_82717CB8;
	// lwz r11,16(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 16);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lwz r11,21272(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 21272);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,21272(r14)
	PPC_STORE_U32(r14.u32 + 21272, r11.u32);
	// beq cr6,0x82717adc
	if (cr6.eq) goto loc_82717ADC;
	// lis r11,1
	r11.s64 = 65536;
	// ori r11,r11,33712
	r11.u64 = r11.u64 | 33712;
	// lwzx r11,r14,r11
	r11.u64 = PPC_LOAD_U32(r14.u32 + r11.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82717adc
	if (!cr6.eq) goto loc_82717ADC;
	// lwz r11,1528(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 1528);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x82717adc
	if (!cr6.eq) goto loc_82717ADC;
	// lwz r31,0(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82717abc
	if (cr6.eq) goto loc_82717ABC;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r28,r22
	r28.u64 = r22.u64;
	// addi r11,r10,16
	r11.s64 = ctx.r10.s64 + 16;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bge cr6,0x82717a94
	if (!cr6.lt) goto loc_82717A94;
loc_82717A54:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82717a94
	if (cr6.eq) goto loc_82717A94;
	// ld r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r8,r11,32
	ctx.r8.u64 = r11.u64 & 0xFFFFFFFF;
	// subf. r10,r11,r10
	ctx.r10.s64 = ctx.r10.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// subf r28,r11,r28
	r28.s64 = r28.s64 - r11.s64;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r11,r9,r8
	r11.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r9.u64 << (ctx.r8.u8 & 0x7F));
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// bge 0x82717a84
	if (!cr0.lt) goto loc_82717A84;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82717A84:
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r10,16
	r11.s64 = ctx.r10.s64 + 16;
	// cmplw cr6,r28,r11
	cr6.compare<uint32_t>(r28.u32, r11.u32, xer);
	// bgt cr6,0x82717a54
	if (cr6.gt) goto loc_82717A54;
loc_82717A94:
	// ld r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r10,r28,32
	ctx.r10.u64 = r28.u64 & 0xFFFFFFFF;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// subf. r11,r28,r11
	r11.s64 = r11.s64 - r28.s64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// sld r10,r9,r10
	ctx.r10.u64 = ctx.r10.u8 & 0x40 ? 0 : (ctx.r9.u64 << (ctx.r10.u8 & 0x7F));
	// std r10,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r10.u64);
	// bge 0x82717abc
	if (!cr0.lt) goto loc_82717ABC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82717ABC:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// clrlwi r4,r11,29
	ctx.r4.u64 = r11.u32 & 0x7;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x826f25e0
	sub_826F25E0(ctx, base);
	// b 0x82717ca8
	goto loc_82717CA8;
loc_82717ADC:
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// ld r10,104(r30)
	ctx.r10.u64 = PPC_LOAD_U64(r30.u32 + 104);
	// std r10,0(r11)
	PPC_STORE_U64(r11.u32 + 0, ctx.r10.u64);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,112(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 112);
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,116(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 116);
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,120(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 120);
	// stw r10,16(r11)
	PPC_STORE_U32(r11.u32 + 16, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,124(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 124);
	// stw r10,20(r11)
	PPC_STORE_U32(r11.u32 + 20, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,128(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 128);
	// stw r10,24(r11)
	PPC_STORE_U32(r11.u32 + 24, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,132(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 132);
	// stw r10,28(r11)
	PPC_STORE_U32(r11.u32 + 28, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,136(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 136);
	// stw r10,32(r11)
	PPC_STORE_U32(r11.u32 + 32, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,140(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 140);
	// stw r10,36(r11)
	PPC_STORE_U32(r11.u32 + 36, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,144(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 144);
	// stw r10,40(r11)
	PPC_STORE_U32(r11.u32 + 40, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,148(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 148);
	// stw r10,44(r11)
	PPC_STORE_U32(r11.u32 + 44, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,152(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 152);
	// stw r10,48(r11)
	PPC_STORE_U32(r11.u32 + 48, ctx.r10.u32);
	// lwz r31,84(r14)
	r31.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82717bf8
	if (cr6.eq) goto loc_82717BF8;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r28,r22
	r28.u64 = r22.u64;
	// addi r11,r10,16
	r11.s64 = ctx.r10.s64 + 16;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bge cr6,0x82717bd0
	if (!cr6.lt) goto loc_82717BD0;
loc_82717B90:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82717bd0
	if (cr6.eq) goto loc_82717BD0;
	// ld r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r8,r11,32
	ctx.r8.u64 = r11.u64 & 0xFFFFFFFF;
	// subf. r10,r11,r10
	ctx.r10.s64 = ctx.r10.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// subf r28,r11,r28
	r28.s64 = r28.s64 - r11.s64;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r11,r9,r8
	r11.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r9.u64 << (ctx.r8.u8 & 0x7F));
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// bge 0x82717bc0
	if (!cr0.lt) goto loc_82717BC0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82717BC0:
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r10,16
	r11.s64 = ctx.r10.s64 + 16;
	// cmplw cr6,r28,r11
	cr6.compare<uint32_t>(r28.u32, r11.u32, xer);
	// bgt cr6,0x82717b90
	if (cr6.gt) goto loc_82717B90;
loc_82717BD0:
	// ld r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r10,r28,32
	ctx.r10.u64 = r28.u64 & 0xFFFFFFFF;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// subf. r11,r28,r11
	r11.s64 = r11.s64 - r28.s64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// sld r10,r9,r10
	ctx.r10.u64 = ctx.r10.u8 & 0x40 ? 0 : (ctx.r9.u64 << (ctx.r10.u8 & 0x7F));
	// std r10,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r10.u64);
	// bge 0x82717bf8
	if (!cr0.lt) goto loc_82717BF8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82717BF8:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// clrlwi r4,r11,29
	ctx.r4.u64 = r11.u32 & 0x7;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// mr r3,r14
	ctx.r3.u64 = r14.u64;
	// bl 0x82639b10
	sub_82639B10(ctx, base);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// mr r24,r3
	r24.u64 = ctx.r3.u64;
	// ld r11,0(r11)
	r11.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// std r11,104(r30)
	PPC_STORE_U64(r30.u32 + 104, r11.u64);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// stw r11,112(r30)
	PPC_STORE_U32(r30.u32 + 112, r11.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// stw r11,116(r30)
	PPC_STORE_U32(r30.u32 + 116, r11.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// stw r11,120(r30)
	PPC_STORE_U32(r30.u32 + 120, r11.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// stw r11,124(r30)
	PPC_STORE_U32(r30.u32 + 124, r11.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// stw r11,128(r30)
	PPC_STORE_U32(r30.u32 + 128, r11.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r11,28(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// stw r11,132(r30)
	PPC_STORE_U32(r30.u32 + 132, r11.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r11,32(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// stw r11,136(r30)
	PPC_STORE_U32(r30.u32 + 136, r11.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// stw r11,140(r30)
	PPC_STORE_U32(r30.u32 + 140, r11.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r11,40(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// stw r11,144(r30)
	PPC_STORE_U32(r30.u32 + 144, r11.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r11,44(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 44);
	// stw r11,148(r30)
	PPC_STORE_U32(r30.u32 + 148, r11.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r11,48(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 48);
	// stw r11,152(r30)
	PPC_STORE_U32(r30.u32 + 152, r11.u32);
loc_82717CA8:
	// stw r22,1944(r14)
	PPC_STORE_U32(r14.u32 + 1944, r22.u32);
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// stb r22,1187(r30)
	PPC_STORE_U8(r30.u32 + 1187, r22.u8);
	// bne cr6,0x82719960
	if (!cr6.eq) goto loc_82719960;
loc_82717CB8:
	// lwz r11,3932(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 3932);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82717e08
	if (cr6.eq) goto loc_82717E08;
	// lwz r11,284(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 284);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x82717e08
	if (cr6.eq) goto loc_82717E08;
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// ld r10,104(r30)
	ctx.r10.u64 = PPC_LOAD_U64(r30.u32 + 104);
	// mr r3,r14
	ctx.r3.u64 = r14.u64;
	// std r10,0(r11)
	PPC_STORE_U64(r11.u32 + 0, ctx.r10.u64);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,112(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 112);
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,116(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 116);
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,120(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 120);
	// stw r10,16(r11)
	PPC_STORE_U32(r11.u32 + 16, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,124(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 124);
	// stw r10,20(r11)
	PPC_STORE_U32(r11.u32 + 20, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,128(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 128);
	// stw r10,24(r11)
	PPC_STORE_U32(r11.u32 + 24, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,132(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 132);
	// stw r10,28(r11)
	PPC_STORE_U32(r11.u32 + 28, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,136(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 136);
	// stw r10,32(r11)
	PPC_STORE_U32(r11.u32 + 32, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,140(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 140);
	// stw r10,36(r11)
	PPC_STORE_U32(r11.u32 + 36, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,144(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 144);
	// stw r10,40(r11)
	PPC_STORE_U32(r11.u32 + 40, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,148(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 148);
	// stw r10,44(r11)
	PPC_STORE_U32(r11.u32 + 44, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,152(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 152);
	// stw r10,48(r11)
	PPC_STORE_U32(r11.u32 + 48, ctx.r10.u32);
	// bl 0x82639ef0
	sub_82639EF0(ctx, base);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// mr r24,r3
	r24.u64 = ctx.r3.u64;
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// ld r11,0(r11)
	r11.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// std r11,104(r30)
	PPC_STORE_U64(r30.u32 + 104, r11.u64);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// stw r11,112(r30)
	PPC_STORE_U32(r30.u32 + 112, r11.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// stw r11,116(r30)
	PPC_STORE_U32(r30.u32 + 116, r11.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// stw r11,120(r30)
	PPC_STORE_U32(r30.u32 + 120, r11.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// stw r11,124(r30)
	PPC_STORE_U32(r30.u32 + 124, r11.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// stw r11,128(r30)
	PPC_STORE_U32(r30.u32 + 128, r11.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r11,28(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// stw r11,132(r30)
	PPC_STORE_U32(r30.u32 + 132, r11.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r11,32(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// stw r11,136(r30)
	PPC_STORE_U32(r30.u32 + 136, r11.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// stw r11,140(r30)
	PPC_STORE_U32(r30.u32 + 140, r11.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r11,40(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// stw r11,144(r30)
	PPC_STORE_U32(r30.u32 + 144, r11.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r11,44(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 44);
	// stw r11,148(r30)
	PPC_STORE_U32(r30.u32 + 148, r11.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r11,48(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 48);
	// stw r11,152(r30)
	PPC_STORE_U32(r30.u32 + 152, r11.u32);
	// bne cr6,0x82719960
	if (!cr6.eq) goto loc_82719960;
loc_82717E08:
	// lwz r9,1240(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 1240);
	// rlwinm r8,r23,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 2) & 0xFFFFFFFC;
	// neg r11,r23
	r11.s64 = -r23.s64;
	// lhz r7,50(r30)
	ctx.r7.u64 = PPC_LOAD_U16(r30.u32 + 50);
	// clrlwi r10,r23,31
	ctx.r10.u64 = r23.u32 & 0x1;
	// stw r16,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r16.u32);
	// srawi r11,r11,31
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7FFFFFFF) != 0);
	r11.s64 = r11.s32 >> 31;
	// cmplwi cr6,r20,0
	cr6.compare<uint32_t>(r20.u32, 0, xer);
	// lwzx r9,r9,r8
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r8.u32);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// or r11,r9,r11
	r11.u64 = ctx.r9.u64 | r11.u64;
	// addi r18,r11,-1
	r18.s64 = r11.s64 + -1;
	// neg r11,r10
	r11.s64 = -ctx.r10.s64;
	// and r22,r7,r11
	r22.u64 = ctx.r7.u64 & r11.u64;
	// stw r18,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r18.u32);
	// stw r22,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r22.u32);
	// beq cr6,0x8271990c
	if (cr6.eq) goto loc_8271990C;
	// b 0x82717e58
	goto loc_82717E58;
loc_82717E50:
	// lwz r18,140(r1)
	r18.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// lwz r22,88(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
loc_82717E58:
	// lwz r31,0(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// li r10,128
	ctx.r10.s64 = 128;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// dcbt r10,r11
	// li r10,256
	ctx.r10.s64 = 256;
	// dcbt r10,r11
	// lwz r11,1168(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 1168);
	// ld r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// lbz r4,8(r11)
	ctx.r4.u64 = PPC_LOAD_U8(r11.u32 + 8);
	// lwz r27,0(r11)
	r27.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// subfic r11,r4,64
	xer.ca = ctx.r4.u32 <= 64;
	r11.s64 = 64 - ctx.r4.s64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// srd r11,r10,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 >> (r11.u8 & 0x7F));
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r11,r27
	r11.u64 = PPC_LOAD_U16(r11.u32 + r27.u32);
	// extsh r28,r11
	r28.s64 = r11.s16;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// blt cr6,0x82717f60
	if (cr6.lt) goto loc_82717F60;
	// clrlwi r11,r28,28
	r11.u64 = r28.u32 & 0xF;
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpw cr6,r9,r11
	cr6.compare<int32_t>(ctx.r9.s32, r11.s32, xer);
	// sld r10,r10,r11
	ctx.r10.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 << (r11.u8 & 0x7F));
	// std r10,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r10.u64);
	// subf r10,r11,r9
	ctx.r10.s64 = ctx.r9.s64 - r11.s64;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// bge cr6,0x82717f58
	if (!cr6.lt) goto loc_82717F58;
loc_82717EC0:
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// addi r10,r10,-4
	ctx.r10.s64 = ctx.r10.s64 + -4;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x82717eec
	if (cr6.lt) goto loc_82717EEC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb840
	sub_825EB840(ctx, base);
	// cmplwi cr6,r3,1
	cr6.compare<uint32_t>(ctx.r3.u32, 1, xer);
	// beq cr6,0x82717ec0
	if (cr6.eq) goto loc_82717EC0;
	// srawi r28,r28,4
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0xF) != 0);
	r28.s64 = r28.s32 >> 4;
	// b 0x82717fa4
	goto loc_82717FA4;
loc_82717EEC:
	// lbz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r4,r11,6
	ctx.r4.s64 = r11.s64 + 6;
	// lbz r9,1(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 1);
	// rldicr r8,r8,8,63
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u64, 8) & 0xFFFFFFFFFFFFFFFF;
	// lbz r5,2(r11)
	ctx.r5.u64 = PPC_LOAD_U8(r11.u32 + 2);
	// lbz r6,3(r11)
	ctx.r6.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// lbz r8,5(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 5);
	// lbz r7,4(r11)
	ctx.r7.u64 = PPC_LOAD_U8(r11.u32 + 4);
	// rldicr r11,r9,8,55
	r11.u64 = __builtin_rotateleft64(ctx.r9.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// ld r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// stw r4,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r4.u32);
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// neg r8,r10
	ctx.r8.s64 = -ctx.r10.s64;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// extsw r8,r8
	ctx.r8.s64 = ctx.r8.s32;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r11,r11,r8
	r11.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
loc_82717F58:
	// srawi r28,r28,4
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0xF) != 0);
	r28.s64 = r28.s32 >> 4;
	// b 0x82717fa4
	goto loc_82717FA4;
loc_82717F60:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
	// lis r11,0
	r11.s64 = 0;
	// ori r25,r11,32768
	r25.u64 = r11.u64 | 32768;
loc_82717F70:
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rldicl r11,r11,1,63
	r11.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// add r28,r11,r28
	r28.u64 = r11.u64 + r28.u64;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
	// add r11,r28,r25
	r11.u64 = r28.u64 + r25.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r11,r27
	r11.u64 = PPC_LOAD_U16(r11.u32 + r27.u32);
	// extsh r28,r11
	r28.s64 = r11.s16;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// blt cr6,0x82717f70
	if (cr6.lt) goto loc_82717F70;
loc_82717FA4:
	// cmplwi cr6,r28,63
	cr6.compare<uint32_t>(r28.u32, 63, xer);
	// bgt cr6,0x8271996c
	if (cr6.gt) goto loc_8271996C;
	// lhz r11,50(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 50);
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r9,1200(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 1200);
	// li r10,0
	ctx.r10.s64 = 0;
	// rlwinm r11,r11,31,1,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFF;
	// cmpwi cr6,r16,0
	cr6.compare<int32_t>(r16.s32, 0, xer);
	// and r11,r11,r18
	r11.u64 = r11.u64 & r18.u64;
	// lbzx r7,r9,r28
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r9.u32 + r28.u32);
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r11,r11,r29
	r11.s64 = r29.s64 - r11.s64;
	// lbz r9,5(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 5);
	// and r9,r9,r18
	ctx.r9.u64 = ctx.r9.u64 & r18.u64;
	// beq cr6,0x82717ff4
	if (cr6.eq) goto loc_82717FF4;
	// lbz r11,-15(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + -15);
	// lbz r10,-15(r29)
	ctx.r10.u64 = PPC_LOAD_U8(r29.u32 + -15);
	// and r8,r11,r18
	ctx.r8.u64 = r11.u64 & r18.u64;
loc_82717FF4:
	// mr r11,r9
	r11.u64 = ctx.r9.u64;
	// lwz r6,1196(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 1196);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// rlwimi r11,r10,0,30,30
	r11.u64 = (__builtin_rotateleft32(ctx.r10.u32, 0) & 0x2) | (r11.u64 & 0xFFFFFFFFFFFFFFFD);
	// rlwinm r10,r8,0,28,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x8;
	// rlwimi r5,r11,3,26,27
	ctx.r5.u64 = (__builtin_rotateleft32(r11.u32, 3) & 0x30) | (ctx.r5.u64 & 0xFFFFFFFFFFFFFFCF);
	// rlwinm r11,r9,0,28,28
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x8;
	// clrlwi r8,r7,28
	ctx.r8.u64 = ctx.r7.u32 & 0xF;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// rlwinm r11,r5,1,25,27
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 1) & 0x70;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// or r11,r11,r8
	r11.u64 = r11.u64 | ctx.r8.u64;
	// lbzx r11,r11,r6
	r11.u64 = PPC_LOAD_U8(r11.u32 + ctx.r6.u32);
	// beq cr6,0x82718034
	if (cr6.eq) goto loc_82718034;
	// rlwinm r11,r11,28,4,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 28) & 0xFFFFFFF;
loc_82718034:
	// rlwimi r11,r7,0,24,27
	r11.u64 = (__builtin_rotateleft32(ctx.r7.u32, 0) & 0xF0) | (r11.u64 & 0xFFFFFFFFFFFFFF0F);
	// clrlwi r28,r11,24
	r28.u64 = r11.u32 & 0xFF;
	// lwz r11,1104(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 1104);
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// bne cr6,0x82718054
	if (!cr6.eq) goto loc_82718054;
	// lbz r11,1190(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 1190);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82718090
	if (!cr6.eq) goto loc_82718090;
loc_82718054:
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// ld r11,0(r3)
	r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// lwz r10,8(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// rldicl r8,r11,1,63
	ctx.r8.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// addic. r11,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	r11.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// rotlwi r31,r8,0
	r31.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r9,0(r3)
	PPC_STORE_U64(ctx.r3.u32 + 0, ctx.r9.u64);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// bge 0x82718080
	if (!cr0.lt) goto loc_82718080;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82718080:
	// lwz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// rlwimi r10,r11,3,27,28
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 3) & 0x18) | (ctx.r10.u64 & 0xFFFFFFFFFFFFFFE7);
	// stw r10,0(r29)
	PPC_STORE_U32(r29.u32 + 0, ctx.r10.u32);
loc_82718090:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8271996c
	if (!cr6.eq) goto loc_8271996C;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// stb r28,5(r29)
	PPC_STORE_U8(r29.u32 + 5, r28.u8);
	// rlwinm r11,r11,0,10,7
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFF3FFFFF;
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
	// lbz r11,28(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82718138
	if (cr6.eq) goto loc_82718138;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x82718138
	if (cr6.eq) goto loc_82718138;
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// ld r11,0(r3)
	r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// lwz r10,8(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// rldicl r8,r11,1,63
	ctx.r8.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// addic. r11,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	r11.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// rotlwi r28,r8,0
	r28.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r9,0(r3)
	PPC_STORE_U64(ctx.r3.u32 + 0, ctx.r9.u64);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// bge 0x827180f0
	if (!cr0.lt) goto loc_827180F0;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_827180F0:
	// mr r11,r28
	r11.u64 = r28.u64;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// beq cr6,0x8271812c
	if (cr6.eq) goto loc_8271812C;
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// ld r11,0(r3)
	r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// lwz r10,8(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// rldicl r8,r11,1,63
	ctx.r8.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// addic. r11,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	r11.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// rotlwi r31,r8,0
	r31.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r9,0(r3)
	PPC_STORE_U64(ctx.r3.u32 + 0, ctx.r9.u64);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// bge 0x82718128
	if (!cr0.lt) goto loc_82718128;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82718128:
	// add r11,r31,r28
	r11.u64 = r31.u64 + r28.u64;
loc_8271812C:
	// lwz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// rlwimi r10,r11,22,8,9
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 22) & 0xC00000) | (ctx.r10.u64 & 0xFFFFFFFFFF3FFFFF);
	// stw r10,0(r29)
	PPC_STORE_U32(r29.u32 + 0, ctx.r10.u32);
loc_82718138:
	// lbz r11,33(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 33);
	// rlwinm r11,r11,0,29,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271818c
	if (cr6.eq) goto loc_8271818C;
	// lbz r11,1191(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 1191);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8271818c
	if (!cr6.eq) goto loc_8271818C;
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// ld r11,0(r3)
	r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// lwz r10,8(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// rldicl r8,r11,1,63
	ctx.r8.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// addic. r11,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	r11.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// rotlwi r31,r8,0
	r31.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r9,0(r3)
	PPC_STORE_U64(ctx.r3.u32 + 0, ctx.r9.u64);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// bge 0x82718180
	if (!cr0.lt) goto loc_82718180;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82718180:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// rlwimi r11,r31,11,20,20
	r11.u64 = (__builtin_rotateleft32(r31.u32, 11) & 0x800) | (r11.u64 & 0xFFFFFFFFFFFFF7FF);
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
loc_8271818C:
	// lbz r11,24(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 24);
	// stb r11,4(r29)
	PPC_STORE_U8(r29.u32 + 4, r11.u8);
	// lbz r11,27(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 27);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82718458
	if (cr6.eq) goto loc_82718458;
	// lbz r11,1181(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 1181);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x827181e4
	if (cr6.eq) goto loc_827181E4;
	// lwz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// rlwinm r10,r10,20,12,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 20) & 0xFFFFF;
	// and r11,r10,r11
	r11.u64 = ctx.r10.u64 & r11.u64;
	// clrlwi r11,r11,28
	r11.u64 = r11.u32 & 0xF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x827181d0
	if (cr6.eq) goto loc_827181D0;
	// lbz r11,1182(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 1182);
	// rotlwi r11,r11,1
	r11.u64 = __builtin_rotateleft32(r11.u32, 1);
	// b 0x8271843c
	goto loc_8271843C;
loc_827181D0:
	// lbz r11,1180(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 1180);
	// lbz r10,1185(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + 1185);
	// rotlwi r11,r11,1
	r11.u64 = __builtin_rotateleft32(r11.u32, 1);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// b 0x8271843c
	goto loc_8271843C;
loc_827181E4:
	// lwz r31,0(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// li r27,0
	r27.s64 = 0;
	// lbz r11,1186(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 1186);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// beq cr6,0x827182d0
	if (cr6.eq) goto loc_827182D0;
	// li r28,1
	r28.s64 = 1;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bge cr6,0x82718264
	if (!cr6.lt) goto loc_82718264;
loc_8271820C:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82718264
	if (cr6.eq) goto loc_82718264;
	// subfic r8,r11,64
	xer.ca = r11.u32 <= 64;
	ctx.r8.s64 = 64 - r11.s64;
	// ld r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// subf. r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrldi r8,r8,32
	ctx.r8.u64 = ctx.r8.u64 & 0xFFFFFFFF;
	// subf r28,r11,r28
	r28.s64 = r28.s64 - r11.s64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// srd r8,r10,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r10.u64 >> (ctx.r8.u8 & 0x7F));
	// sld r11,r10,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 << (r11.u8 & 0x7F));
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// slw r11,r10,r28
	r11.u64 = r28.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r28.u8 & 0x3F));
	// add r27,r11,r27
	r27.u64 = r11.u64 + r27.u64;
	// bge 0x82718254
	if (!cr0.lt) goto loc_82718254;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82718254:
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplw cr6,r28,r11
	cr6.compare<uint32_t>(r28.u32, r11.u32, xer);
	// bgt cr6,0x8271820c
	if (cr6.gt) goto loc_8271820C;
loc_82718264:
	// subfic r9,r28,64
	xer.ca = r28.u32 <= 64;
	ctx.r9.s64 = 64 - r28.s64;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r8,r28,32
	ctx.r8.u64 = r28.u64 & 0xFFFFFFFF;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// clrldi r9,r9,32
	ctx.r9.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// subf. r10,r28,r10
	ctx.r10.s64 = ctx.r10.s64 - r28.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r8,r11,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// srd r9,r11,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r9.u8 & 0x7F));
	// rotlwi r11,r9,0
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// add r28,r11,r27
	r28.u64 = r11.u64 + r27.u64;
	// std r8,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r8.u64);
	// bge 0x827182a0
	if (!cr0.lt) goto loc_827182A0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_827182A0:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x827182b8
	if (cr6.eq) goto loc_827182B8;
	// lbz r11,1182(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 1182);
	// rotlwi r11,r11,1
	r11.u64 = __builtin_rotateleft32(r11.u32, 1);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// b 0x82718440
	goto loc_82718440;
loc_827182B8:
	// lbz r11,1180(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 1180);
	// lbz r10,1185(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + 1185);
	// rotlwi r11,r11,1
	r11.u64 = __builtin_rotateleft32(r11.u32, 1);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// b 0x82718440
	goto loc_82718440;
loc_827182D0:
	// li r28,3
	r28.s64 = 3;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bge cr6,0x82718334
	if (!cr6.lt) goto loc_82718334;
loc_827182DC:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82718334
	if (cr6.eq) goto loc_82718334;
	// subfic r8,r11,64
	xer.ca = r11.u32 <= 64;
	ctx.r8.s64 = 64 - r11.s64;
	// ld r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// subf. r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrldi r8,r8,32
	ctx.r8.u64 = ctx.r8.u64 & 0xFFFFFFFF;
	// subf r28,r11,r28
	r28.s64 = r28.s64 - r11.s64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// srd r8,r10,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r10.u64 >> (ctx.r8.u8 & 0x7F));
	// sld r11,r10,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 << (r11.u8 & 0x7F));
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// slw r11,r10,r28
	r11.u64 = r28.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r28.u8 & 0x3F));
	// add r27,r11,r27
	r27.u64 = r11.u64 + r27.u64;
	// bge 0x82718324
	if (!cr0.lt) goto loc_82718324;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82718324:
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplw cr6,r28,r11
	cr6.compare<uint32_t>(r28.u32, r11.u32, xer);
	// bgt cr6,0x827182dc
	if (cr6.gt) goto loc_827182DC;
loc_82718334:
	// subfic r9,r28,64
	xer.ca = r28.u32 <= 64;
	ctx.r9.s64 = 64 - r28.s64;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r8,r28,32
	ctx.r8.u64 = r28.u64 & 0xFFFFFFFF;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// clrldi r9,r9,32
	ctx.r9.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// subf. r10,r28,r10
	ctx.r10.s64 = ctx.r10.s64 - r28.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r8,r11,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// srd r9,r11,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r9.u8 & 0x7F));
	// rotlwi r11,r9,0
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// add r28,r11,r27
	r28.u64 = r11.u64 + r27.u64;
	// std r8,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r8.u64);
	// bge 0x82718370
	if (!cr0.lt) goto loc_82718370;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82718370:
	// cmpwi cr6,r28,7
	cr6.compare<int32_t>(r28.s32, 7, xer);
	// bne cr6,0x82718430
	if (!cr6.eq) goto loc_82718430;
	// lwz r31,0(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// li r28,5
	r28.s64 = 5;
	// li r27,0
	r27.s64 = 0;
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplwi cr6,r11,5
	cr6.compare<uint32_t>(r11.u32, 5, xer);
	// bge cr6,0x827183ec
	if (!cr6.lt) goto loc_827183EC;
loc_82718394:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x827183ec
	if (cr6.eq) goto loc_827183EC;
	// subfic r8,r11,64
	xer.ca = r11.u32 <= 64;
	ctx.r8.s64 = 64 - r11.s64;
	// ld r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// subf. r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrldi r8,r8,32
	ctx.r8.u64 = ctx.r8.u64 & 0xFFFFFFFF;
	// subf r28,r11,r28
	r28.s64 = r28.s64 - r11.s64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// srd r8,r10,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r10.u64 >> (ctx.r8.u8 & 0x7F));
	// sld r11,r10,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 << (r11.u8 & 0x7F));
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// slw r11,r10,r28
	r11.u64 = r28.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r28.u8 & 0x3F));
	// add r27,r11,r27
	r27.u64 = r11.u64 + r27.u64;
	// bge 0x827183dc
	if (!cr0.lt) goto loc_827183DC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_827183DC:
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplw cr6,r28,r11
	cr6.compare<uint32_t>(r28.u32, r11.u32, xer);
	// bgt cr6,0x82718394
	if (cr6.gt) goto loc_82718394;
loc_827183EC:
	// subfic r9,r28,64
	xer.ca = r28.u32 <= 64;
	ctx.r9.s64 = 64 - r28.s64;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r8,r28,32
	ctx.r8.u64 = r28.u64 & 0xFFFFFFFF;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// clrldi r9,r9,32
	ctx.r9.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// subf. r10,r28,r10
	ctx.r10.s64 = ctx.r10.s64 - r28.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r8,r11,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// srd r9,r11,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r9.u8 & 0x7F));
	// rotlwi r11,r9,0
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// add r28,r11,r27
	r28.u64 = r11.u64 + r27.u64;
	// std r8,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r8.u64);
	// bge 0x82718428
	if (!cr0.lt) goto loc_82718428;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82718428:
	// mr r11,r28
	r11.u64 = r28.u64;
	// b 0x82718438
	goto loc_82718438;
loc_82718430:
	// lbz r11,1180(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 1180);
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
loc_82718438:
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
loc_8271843C:
	// addi r11,r11,255
	r11.s64 = r11.s64 + 255;
loc_82718440:
	// stb r11,4(r29)
	PPC_STORE_U8(r29.u32 + 4, r11.u8);
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// blt cr6,0x8271996c
	if (cr6.lt) goto loc_8271996C;
	// cmplwi cr6,r11,62
	cr6.compare<uint32_t>(r11.u32, 62, xer);
	// bgt cr6,0x8271996c
	if (cr6.gt) goto loc_8271996C;
loc_82718458:
	// lbz r11,4(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 4);
	// neg r20,r18
	r20.s64 = -r18.s64;
	// lbz r10,28(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + 28);
	// rotlwi r9,r11,2
	ctx.r9.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lbz r17,5(r29)
	r17.u64 = PPC_LOAD_U8(r29.u32 + 5);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// lwz r10,220(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 220);
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stw r17,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r17.u32);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r11,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r11.u32);
	// beq cr6,0x827184b0
	if (cr6.eq) goto loc_827184B0;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// li r24,0
	r24.s64 = 0;
	// lwz r9,228(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 228);
	// lwz r10,232(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 232);
	// rlwinm r11,r11,12,28,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 12) & 0xC;
	// add r18,r9,r11
	r18.u64 = ctx.r9.u64 + r11.u64;
	// add r19,r10,r11
	r19.u64 = ctx.r10.u64 + r11.u64;
	// stw r24,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r24.u32);
	// b 0x827184c8
	goto loc_827184C8;
loc_827184B0:
	// li r24,0
	r24.s64 = 0;
	// addi r18,r30,236
	r18.s64 = r30.s64 + 236;
	// addi r19,r30,248
	r19.s64 = r30.s64 + 248;
	// stw r24,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r24.u32);
	// b 0x827184c8
	goto loc_827184C8;
loc_827184C4:
	// lwz r22,88(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
loc_827184C8:
	// clrlwi r10,r17,31
	ctx.r10.u64 = r17.u32 & 0x1;
	// rlwinm r11,r24,0,0,29
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 0) & 0xFFFFFFFC;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// stw r10,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, ctx.r10.u32);
	// bne cr6,0x82718540
	if (!cr6.eq) goto loc_82718540;
	// lwz r10,1160(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 1160);
	// addi r8,r24,18
	ctx.r8.s64 = r24.s64 + 18;
	// clrlwi r7,r24,31
	ctx.r7.u64 = r24.u32 & 0x1;
	// lwz r9,264(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 264);
	// srawi r11,r24,1
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x1) != 0);
	r11.s64 = r24.s32 >> 1;
	// stw r19,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r19.u32);
	// add r5,r7,r16
	ctx.r5.u64 = ctx.r7.u64 + r16.u64;
	// li r7,119
	ctx.r7.s64 = 119;
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// rlwinm r10,r8,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// add r8,r16,r22
	ctx.r8.u64 = r16.u64 + r22.u64;
	// rlwinm r6,r23,1,30,30
	ctx.r6.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 1) & 0x2;
	// rlwinm r8,r8,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// stw r7,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r7.u32);
	// add r7,r11,r20
	ctx.r7.u64 = r11.u64 + r20.u64;
	// lhzx r10,r10,r30
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + r30.u32);
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// rlwinm r10,r10,5,0,26
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 5) & 0xFFFFFFE0;
	// add r8,r10,r9
	ctx.r8.u64 = ctx.r10.u64 + ctx.r9.u64;
	// or r10,r6,r11
	ctx.r10.u64 = ctx.r6.u64 | r11.u64;
	// addi r11,r10,104
	r11.s64 = ctx.r10.s64 + 104;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r11,r30
	r11.u64 = PPC_LOAD_U16(r11.u32 + r30.u32);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// b 0x8271858c
	goto loc_8271858C;
loc_82718540:
	// lwz r11,1164(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 1164);
	// addi r10,r24,63
	ctx.r10.s64 = r24.s64 + 63;
	// mr r5,r16
	ctx.r5.u64 = r16.u64;
	// stw r18,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r18.u32);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r7,r20
	ctx.r7.u64 = r20.u64;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// clrlwi r11,r23,31
	r11.u64 = r23.u32 & 0x1;
	// addi r9,r11,102
	ctx.r9.s64 = r11.s64 + 102;
	// srawi r11,r22,1
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x1) != 0);
	r11.s64 = r22.s32 >> 1;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// add r8,r11,r16
	ctx.r8.u64 = r11.u64 + r16.u64;
	// lwzx r11,r10,r30
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r30.u32);
	// rlwinm r10,r8,5,0,26
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 5) & 0xFFFFFFE0;
	// li r8,119
	ctx.r8.s64 = 119;
	// lhzx r9,r9,r30
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r9.u32 + r30.u32);
	// stw r8,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r8.u32);
	// add r8,r11,r10
	ctx.r8.u64 = r11.u64 + ctx.r10.u64;
	// extsh r11,r9
	r11.s64 = ctx.r9.s16;
loc_8271858C:
	// lwz r6,144(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// li r9,0
	ctx.r9.s64 = 0;
	// lwz r10,1104(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 1104);
	// stw r8,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r8.u32);
	// cmpwi cr6,r10,7
	cr6.compare<int32_t>(ctx.r10.s32, 7, xer);
	// lwz r6,16(r6)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r6.u32 + 16);
	// stw r9,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r9.u32);
	// stw r6,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r6.u32);
	// bne cr6,0x82718b58
	if (!cr6.eq) goto loc_82718B58;
	// li r25,1
	r25.s64 = 1;
	// mr r28,r9
	r28.u64 = ctx.r9.u64;
	// mr r27,r9
	r27.u64 = ctx.r9.u64;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// beq cr6,0x827185d4
	if (cr6.eq) goto loc_827185D4;
	// rlwinm r11,r11,5,0,26
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 5) & 0xFFFFFFE0;
	// li r25,8
	r25.s64 = 8;
	// subf r28,r11,r8
	r28.s64 = ctx.r8.s64 - r11.s64;
	// mr r9,r28
	ctx.r9.u64 = r28.u64;
loc_827185D4:
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq cr6,0x82718800
	if (cr6.eq) goto loc_82718800;
	// addi r27,r8,-32
	r27.s64 = ctx.r8.s64 + -32;
	// li r25,1
	r25.s64 = 1;
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x82718b50
	if (cr6.eq) goto loc_82718B50;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x82718800
	if (cr6.eq) goto loc_82718800;
	// lhz r11,-16(r28)
	r11.u64 = PPC_LOAD_U16(r28.u32 + -16);
	// lhz r10,16(r28)
	ctx.r10.u64 = PPC_LOAD_U16(r28.u32 + 16);
	// extsh r8,r11
	ctx.r8.s64 = r11.s16;
	// lhz r7,0(r27)
	ctx.r7.u64 = PPC_LOAD_U16(r27.u32 + 0);
	// lbz r11,27(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 27);
	// extsh r5,r10
	ctx.r5.s64 = ctx.r10.s16;
	// extsh r4,r7
	ctx.r4.s64 = ctx.r7.s16;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x827187d0
	if (cr6.eq) goto loc_827187D0;
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// beq cr6,0x82718714
	if (cr6.eq) goto loc_82718714;
	// cmpwi cr6,r24,4
	cr6.compare<int32_t>(r24.s32, 4, xer);
	// beq cr6,0x82718714
	if (cr6.eq) goto loc_82718714;
	// cmpwi cr6,r24,5
	cr6.compare<int32_t>(r24.s32, 5, xer);
	// beq cr6,0x82718714
	if (cr6.eq) goto loc_82718714;
	// cmpwi cr6,r24,1
	cr6.compare<int32_t>(r24.s32, 1, xer);
	// bne cr6,0x827186b0
	if (!cr6.eq) goto loc_827186B0;
	// lhz r10,50(r30)
	ctx.r10.u64 = PPC_LOAD_U16(r30.u32 + 50);
	// lbz r11,4(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 4);
	// rlwinm r10,r10,31,1,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// lwz r7,220(r30)
	ctx.r7.u64 = PPC_LOAD_U32(r30.u32 + 220);
	// rotlwi r6,r11,2
	ctx.r6.u64 = __builtin_rotateleft32(r11.u32, 2);
	// rlwinm r3,r10,2,0,29
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// add r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 + ctx.r3.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r6,r11,r7
	ctx.r6.u64 = r11.u64 + ctx.r7.u64;
	// subf r10,r10,r29
	ctx.r10.s64 = r29.s64 - ctx.r10.s64;
	// lbz r11,4(r10)
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + 4);
	// lwz r10,16(r6)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r6.u32 + 16);
	// rotlwi r6,r11,2
	ctx.r6.u64 = __builtin_rotateleft32(r11.u32, 2);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// lwzx r10,r10,r21
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r21.u32);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mullw r11,r11,r10
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r10.s32);
	// mullw r10,r8,r11
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(r11.s32);
	// mullw r11,r5,r11
	r11.s64 = int64_t(ctx.r5.s32) * int64_t(r11.s32);
	// add r10,r10,r26
	ctx.r10.u64 = ctx.r10.u64 + r26.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// srawi r8,r10,18
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3FFFF) != 0);
	ctx.r8.s64 = ctx.r10.s32 >> 18;
	// srawi r5,r11,18
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3FFFF) != 0);
	ctx.r5.s64 = r11.s32 >> 18;
	// b 0x827187d0
	goto loc_827187D0;
loc_827186B0:
	// cmpwi cr6,r24,2
	cr6.compare<int32_t>(r24.s32, 2, xer);
	// bne cr6,0x827187d0
	if (!cr6.eq) goto loc_827187D0;
	// lbz r11,4(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 4);
	// lbz r7,-16(r29)
	ctx.r7.u64 = PPC_LOAD_U8(r29.u32 + -16);
	// rotlwi r6,r11,2
	ctx.r6.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwz r10,220(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 220);
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// rotlwi r6,r7,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r7.u32, 2);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r7,r7,r6
	ctx.r7.u64 = ctx.r7.u64 + ctx.r6.u64;
	// add r6,r11,r10
	ctx.r6.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r7,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// lwz r11,16(r6)
	r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + 16);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r10,16(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	// lwzx r11,r11,r21
	r11.u64 = PPC_LOAD_U32(r11.u32 + r21.u32);
	// mullw r11,r10,r11
	r11.s64 = int64_t(ctx.r10.s32) * int64_t(r11.s32);
	// mullw r10,r8,r11
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(r11.s32);
	// mullw r11,r4,r11
	r11.s64 = int64_t(ctx.r4.s32) * int64_t(r11.s32);
	// add r10,r10,r26
	ctx.r10.u64 = ctx.r10.u64 + r26.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// srawi r8,r10,18
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3FFFF) != 0);
	ctx.r8.s64 = ctx.r10.s32 >> 18;
	// srawi r4,r11,18
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3FFFF) != 0);
	ctx.r4.s64 = r11.s32 >> 18;
	// b 0x827187d0
	goto loc_827187D0;
loc_82718714:
	// lhz r11,50(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 50);
	// lbz r10,4(r29)
	ctx.r10.u64 = PPC_LOAD_U8(r29.u32 + 4);
	// rlwinm r7,r11,31,1,31
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFF;
	// lwz r11,220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 220);
	// rotlwi r3,r10,2
	ctx.r3.u64 = __builtin_rotateleft32(ctx.r10.u32, 2);
	// lbz r6,-16(r29)
	ctx.r6.u64 = PPC_LOAD_U8(r29.u32 + -16);
	// rlwinm r31,r7,2,0,29
	r31.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r23,80(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// add r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 + ctx.r3.u64;
	// lwz r14,388(r1)
	r14.u64 = PPC_LOAD_U32(ctx.r1.u32 + 388);
	// add r7,r7,r31
	ctx.r7.u64 = ctx.r7.u64 + r31.u64;
	// rlwinm r3,r7,2,0,29
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r7,r10,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r10,r3,r29
	ctx.r10.s64 = r29.s64 - ctx.r3.s64;
	// add r3,r7,r11
	ctx.r3.u64 = ctx.r7.u64 + r11.u64;
	// rotlwi r7,r6,2
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// add r7,r6,r7
	ctx.r7.u64 = ctx.r6.u64 + ctx.r7.u64;
	// lbz r6,4(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + 4);
	// rlwinm r7,r7,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r3,16(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// add r7,r7,r11
	ctx.r7.u64 = ctx.r7.u64 + r11.u64;
	// lwz r7,16(r7)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r7.u32 + 16);
	// mullw r31,r7,r4
	r31.s64 = int64_t(ctx.r7.s32) * int64_t(ctx.r4.s32);
	// lbz r7,-16(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + -16);
	// rlwinm r10,r3,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// rotlwi r3,r7,2
	ctx.r3.u64 = __builtin_rotateleft32(ctx.r7.u32, 2);
	// rotlwi r4,r6,2
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// add r7,r7,r3
	ctx.r7.u64 = ctx.r7.u64 + ctx.r3.u64;
	// add r4,r6,r4
	ctx.r4.u64 = ctx.r6.u64 + ctx.r4.u64;
	// rlwinm r6,r7,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r7,r4,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r10,r21
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r21.u32);
	// add r6,r6,r11
	ctx.r6.u64 = ctx.r6.u64 + r11.u64;
	// add r11,r7,r11
	r11.u64 = ctx.r7.u64 + r11.u64;
	// mullw r7,r31,r10
	ctx.r7.s64 = int64_t(r31.s32) * int64_t(ctx.r10.s32);
	// lwz r6,16(r6)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r6.u32 + 16);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mullw r8,r6,r8
	ctx.r8.s64 = int64_t(ctx.r6.s32) * int64_t(ctx.r8.s32);
	// mullw r11,r11,r5
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r5.s32);
	// mullw r8,r8,r10
	ctx.r8.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// mullw r11,r11,r10
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r10.s32);
	// add r10,r8,r26
	ctx.r10.u64 = ctx.r8.u64 + r26.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// add r7,r7,r26
	ctx.r7.u64 = ctx.r7.u64 + r26.u64;
	// srawi r8,r10,18
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3FFFF) != 0);
	ctx.r8.s64 = ctx.r10.s32 >> 18;
	// srawi r5,r11,18
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3FFFF) != 0);
	ctx.r5.s64 = r11.s32 >> 18;
	// srawi r4,r7,18
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x3FFFF) != 0);
	ctx.r4.s64 = ctx.r7.s32 >> 18;
loc_827187D0:
	// subf r11,r4,r8
	r11.s64 = ctx.r8.s64 - ctx.r4.s64;
	// subf r10,r5,r8
	ctx.r10.s64 = ctx.r8.s64 - ctx.r5.s64;
	// srawi r8,r11,31
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7FFFFFFF) != 0);
	ctx.r8.s64 = r11.s32 >> 31;
	// srawi r7,r10,31
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7FFFFFFF) != 0);
	ctx.r7.s64 = ctx.r10.s32 >> 31;
	// xor r11,r11,r8
	r11.u64 = r11.u64 ^ ctx.r8.u64;
	// xor r10,r10,r7
	ctx.r10.u64 = ctx.r10.u64 ^ ctx.r7.u64;
	// subf r11,r8,r11
	r11.s64 = r11.s64 - ctx.r8.s64;
	// subf r10,r7,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r7.s64;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bge cr6,0x82718800
	if (!cr6.lt) goto loc_82718800;
	// mr r9,r28
	ctx.r9.u64 = r28.u64;
	// li r25,8
	r25.s64 = 8;
loc_82718800:
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82718b50
	if (cr6.eq) goto loc_82718B50;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// rlwinm r11,r11,0,27,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x18;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8271881c
	if (!cr6.eq) goto loc_8271881C;
	// li r25,0
	r25.s64 = 0;
loc_8271881C:
	// lbz r11,27(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 27);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82718b44
	if (cr6.eq) goto loc_82718B44;
	// cmplw cr6,r9,r27
	cr6.compare<uint32_t>(ctx.r9.u32, r27.u32, xer);
	// bne cr6,0x827189b8
	if (!cr6.eq) goto loc_827189B8;
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// beq cr6,0x8271887c
	if (cr6.eq) goto loc_8271887C;
	// cmpwi cr6,r24,2
	cr6.compare<int32_t>(r24.s32, 2, xer);
	// beq cr6,0x8271887c
	if (cr6.eq) goto loc_8271887C;
	// cmpwi cr6,r24,4
	cr6.compare<int32_t>(r24.s32, 4, xer);
	// beq cr6,0x8271887c
	if (cr6.eq) goto loc_8271887C;
	// cmpwi cr6,r24,5
	cr6.compare<int32_t>(r24.s32, 5, xer);
	// beq cr6,0x8271887c
	if (cr6.eq) goto loc_8271887C;
	// addi r11,r1,176
	r11.s64 = ctx.r1.s64 + 176;
	// li r10,16
	ctx.r10.s64 = 16;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_8271885C:
	// lhz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// addi r9,r9,2
	ctx.r9.s64 = ctx.r9.s64 + 2;
	// sth r10,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r10.u16);
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// bdnz 0x8271885c
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8271885C;
	// addi r9,r1,176
	ctx.r9.s64 = ctx.r1.s64 + 176;
	// stw r25,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r25.u32);
	// b 0x827191cc
	goto loc_827191CC;
loc_8271887C:
	// lhz r11,0(r9)
	r11.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// addi r6,r1,176
	ctx.r6.s64 = ctx.r1.s64 + 176;
	// lbz r7,4(r29)
	ctx.r7.u64 = PPC_LOAD_U8(r29.u32 + 4);
	// addi r4,r1,178
	ctx.r4.s64 = ctx.r1.s64 + 178;
	// lbz r10,-16(r29)
	ctx.r10.u64 = PPC_LOAD_U8(r29.u32 + -16);
	// addi r29,r1,180
	r29.s64 = ctx.r1.s64 + 180;
	// extsh r28,r11
	r28.s64 = r11.s16;
	// lwz r5,220(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 220);
	// subf r31,r9,r4
	r31.s64 = ctx.r4.s64 - ctx.r9.s64;
	// subf r3,r9,r6
	ctx.r3.s64 = ctx.r6.s64 - ctx.r9.s64;
	// addi r11,r9,6
	r11.s64 = ctx.r9.s64 + 6;
	// subf r29,r9,r29
	r29.s64 = r29.s64 - ctx.r9.s64;
	// rotlwi r9,r7,2
	ctx.r9.u64 = __builtin_rotateleft32(ctx.r7.u32, 2);
	// rotlwi r4,r10,2
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 2);
	// add r9,r7,r9
	ctx.r9.u64 = ctx.r7.u64 + ctx.r9.u64;
	// add r4,r10,r4
	ctx.r4.u64 = ctx.r10.u64 + ctx.r4.u64;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// rotlwi r7,r7,2
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r7.u32, 2);
	// add r27,r9,r5
	r27.u64 = ctx.r9.u64 + ctx.r5.u64;
	// rlwinm r9,r4,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r1,180
	ctx.r8.s64 = ctx.r1.s64 + 180;
	// add r5,r9,r5
	ctx.r5.u64 = ctx.r9.u64 + ctx.r5.u64;
	// li r6,3
	ctx.r6.s64 = 3;
	// lwz r9,16(r27)
	ctx.r9.u64 = PPC_LOAD_U32(r27.u32 + 16);
	// rlwinm r4,r9,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r7,r21
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + r21.u32);
	// lwz r7,16(r5)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r5.u32 + 16);
	// lwzx r5,r4,r21
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r4.u32 + r21.u32);
	// mullw r7,r5,r7
	ctx.r7.s64 = int64_t(ctx.r5.s32) * int64_t(ctx.r7.s32);
	// mullw r7,r7,r28
	ctx.r7.s64 = int64_t(ctx.r7.s32) * int64_t(r28.s32);
	// add r7,r7,r26
	ctx.r7.u64 = ctx.r7.u64 + r26.u64;
	// srawi r7,r7,18
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x3FFFF) != 0);
	ctx.r7.s64 = ctx.r7.s32 >> 18;
	// sth r7,176(r1)
	PPC_STORE_U16(ctx.r1.u32 + 176, ctx.r7.u16);
loc_82718900:
	// lhz r7,-4(r11)
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + -4);
	// addi r6,r6,-1
	ctx.r6.s64 = ctx.r6.s64 + -1;
	// lhz r5,-2(r11)
	ctx.r5.u64 = PPC_LOAD_U16(r11.u32 + -2);
	// lhz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// lhz r28,2(r11)
	r28.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// extsh r5,r5
	ctx.r5.s64 = ctx.r5.s16;
	// lhz r27,4(r11)
	r27.u64 = PPC_LOAD_U16(r11.u32 + 4);
	// extsh r4,r4
	ctx.r4.s64 = ctx.r4.s16;
	// extsh r28,r28
	r28.s64 = r28.s16;
	// mullw r7,r7,r9
	ctx.r7.s64 = int64_t(ctx.r7.s32) * int64_t(ctx.r9.s32);
	// extsh r27,r27
	r27.s64 = r27.s16;
	// mullw r5,r5,r9
	ctx.r5.s64 = int64_t(ctx.r5.s32) * int64_t(ctx.r9.s32);
	// mullw r4,r4,r9
	ctx.r4.s64 = int64_t(ctx.r4.s32) * int64_t(ctx.r9.s32);
	// mullw r28,r28,r9
	r28.s64 = int64_t(r28.s32) * int64_t(ctx.r9.s32);
	// mullw r7,r7,r10
	ctx.r7.s64 = int64_t(ctx.r7.s32) * int64_t(ctx.r10.s32);
	// mullw r27,r27,r9
	r27.s64 = int64_t(r27.s32) * int64_t(ctx.r9.s32);
	// mullw r5,r5,r10
	ctx.r5.s64 = int64_t(ctx.r5.s32) * int64_t(ctx.r10.s32);
	// mullw r4,r4,r10
	ctx.r4.s64 = int64_t(ctx.r4.s32) * int64_t(ctx.r10.s32);
	// mullw r28,r28,r10
	r28.s64 = int64_t(r28.s32) * int64_t(ctx.r10.s32);
	// add r7,r7,r26
	ctx.r7.u64 = ctx.r7.u64 + r26.u64;
	// mullw r27,r27,r10
	r27.s64 = int64_t(r27.s32) * int64_t(ctx.r10.s32);
	// add r5,r5,r26
	ctx.r5.u64 = ctx.r5.u64 + r26.u64;
	// add r4,r4,r26
	ctx.r4.u64 = ctx.r4.u64 + r26.u64;
	// srawi r7,r7,18
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x3FFFF) != 0);
	ctx.r7.s64 = ctx.r7.s32 >> 18;
	// add r28,r28,r26
	r28.u64 = r28.u64 + r26.u64;
	// srawi r5,r5,18
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x3FFFF) != 0);
	ctx.r5.s64 = ctx.r5.s32 >> 18;
	// add r27,r27,r26
	r27.u64 = r27.u64 + r26.u64;
	// srawi r4,r4,18
	xer.ca = (ctx.r4.s32 < 0) & ((ctx.r4.u32 & 0x3FFFF) != 0);
	ctx.r4.s64 = ctx.r4.s32 >> 18;
	// srawi r28,r28,18
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x3FFFF) != 0);
	r28.s64 = r28.s32 >> 18;
	// srawi r27,r27,18
	xer.ca = (r27.s32 < 0) & ((r27.u32 & 0x3FFFF) != 0);
	r27.s64 = r27.s32 >> 18;
	// sth r7,-2(r8)
	PPC_STORE_U16(ctx.r8.u32 + -2, ctx.r7.u16);
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// sth r5,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r5.u16);
	// addi r8,r8,10
	ctx.r8.s64 = ctx.r8.s64 + 10;
	// sthx r4,r3,r11
	PPC_STORE_U16(ctx.r3.u32 + r11.u32, ctx.r4.u16);
	// sthx r28,r31,r11
	PPC_STORE_U16(r31.u32 + r11.u32, r28.u16);
	// sthx r27,r29,r11
	PPC_STORE_U16(r29.u32 + r11.u32, r27.u16);
	// addi r11,r11,10
	r11.s64 = r11.s64 + 10;
	// bne cr6,0x82718900
	if (!cr6.eq) goto loc_82718900;
	// lhz r11,176(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 176);
	// addi r9,r1,176
	ctx.r9.s64 = ctx.r1.s64 + 176;
	// lwz r23,80(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r25,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r25.u32);
	// sth r11,192(r1)
	PPC_STORE_U16(ctx.r1.u32 + 192, r11.u16);
	// b 0x827191cc
	goto loc_827191CC;
loc_827189B8:
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// beq cr6,0x82718a04
	if (cr6.eq) goto loc_82718A04;
	// cmpwi cr6,r24,1
	cr6.compare<int32_t>(r24.s32, 1, xer);
	// beq cr6,0x82718a04
	if (cr6.eq) goto loc_82718A04;
	// cmpwi cr6,r24,4
	cr6.compare<int32_t>(r24.s32, 4, xer);
	// beq cr6,0x82718a04
	if (cr6.eq) goto loc_82718A04;
	// cmpwi cr6,r24,5
	cr6.compare<int32_t>(r24.s32, 5, xer);
	// beq cr6,0x82718a04
	if (cr6.eq) goto loc_82718A04;
	// addi r11,r1,176
	r11.s64 = ctx.r1.s64 + 176;
	// li r10,16
	ctx.r10.s64 = 16;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_827189E4:
	// lhz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// addi r9,r9,2
	ctx.r9.s64 = ctx.r9.s64 + 2;
	// sth r10,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r10.u16);
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// bdnz 0x827189e4
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_827189E4;
	// addi r9,r1,192
	ctx.r9.s64 = ctx.r1.s64 + 192;
	// stw r25,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r25.u32);
	// b 0x827191cc
	goto loc_827191CC;
loc_82718A04:
	// lhz r11,50(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 50);
	// addi r4,r1,178
	ctx.r4.s64 = ctx.r1.s64 + 178;
	// addi r7,r1,176
	ctx.r7.s64 = ctx.r1.s64 + 176;
	// lbz r10,4(r29)
	ctx.r10.u64 = PPC_LOAD_U8(r29.u32 + 4);
	// rlwinm r6,r11,31,1,31
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFF;
	// lhz r11,0(r9)
	r11.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// addi r28,r1,180
	r28.s64 = ctx.r1.s64 + 180;
	// lwz r5,220(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 220);
	// subf r31,r9,r4
	r31.s64 = ctx.r4.s64 - ctx.r9.s64;
	// extsh r27,r11
	r27.s64 = r11.s16;
	// subf r3,r9,r7
	ctx.r3.s64 = ctx.r7.s64 - ctx.r9.s64;
	// addi r11,r9,6
	r11.s64 = ctx.r9.s64 + 6;
	// subf r28,r9,r28
	r28.s64 = r28.s64 - ctx.r9.s64;
	// rlwinm r4,r6,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// rotlwi r9,r10,2
	ctx.r9.u64 = __builtin_rotateleft32(ctx.r10.u32, 2);
	// add r6,r6,r4
	ctx.r6.u64 = ctx.r6.u64 + ctx.r4.u64;
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r6,r6,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r6,r6,r29
	ctx.r6.s64 = r29.s64 - ctx.r6.s64;
	// add r4,r9,r5
	ctx.r4.u64 = ctx.r9.u64 + ctx.r5.u64;
	// rotlwi r10,r10,2
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 2);
	// addi r8,r1,180
	ctx.r8.s64 = ctx.r1.s64 + 180;
	// li r7,3
	ctx.r7.s64 = 3;
	// lbz r9,4(r6)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r6.u32 + 4);
	// lwz r6,16(r4)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r4.u32 + 16);
	// lwzx r10,r10,r21
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r21.u32);
	// rlwinm r6,r6,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// mullw r10,r10,r9
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r9.s32);
	// lwzx r4,r6,r21
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r6.u32 + r21.u32);
	// rotlwi r6,r9,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r9.u32, 2);
	// add r9,r9,r6
	ctx.r9.u64 = ctx.r9.u64 + ctx.r6.u64;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r9,r5
	ctx.r9.u64 = ctx.r9.u64 + ctx.r5.u64;
	// lwz r9,16(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 16);
	// mullw r9,r4,r9
	ctx.r9.s64 = int64_t(ctx.r4.s32) * int64_t(ctx.r9.s32);
	// mullw r9,r9,r27
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(r27.s32);
	// add r9,r9,r26
	ctx.r9.u64 = ctx.r9.u64 + r26.u64;
	// srawi r9,r9,18
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3FFFF) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 18;
	// sth r9,176(r1)
	PPC_STORE_U16(ctx.r1.u32 + 176, ctx.r9.u16);
loc_82718AA4:
	// lhz r9,-4(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + -4);
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// lhz r6,-2(r11)
	ctx.r6.u64 = PPC_LOAD_U16(r11.u32 + -2);
	// lhz r5,0(r11)
	ctx.r5.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// lhz r4,2(r11)
	ctx.r4.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// lhz r29,4(r11)
	r29.u64 = PPC_LOAD_U16(r11.u32 + 4);
	// extsh r5,r5
	ctx.r5.s64 = ctx.r5.s16;
	// extsh r4,r4
	ctx.r4.s64 = ctx.r4.s16;
	// mullw r9,r9,r10
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r10.s32);
	// extsh r29,r29
	r29.s64 = r29.s16;
	// mullw r6,r6,r10
	ctx.r6.s64 = int64_t(ctx.r6.s32) * int64_t(ctx.r10.s32);
	// mullw r5,r5,r10
	ctx.r5.s64 = int64_t(ctx.r5.s32) * int64_t(ctx.r10.s32);
	// mullw r4,r4,r10
	ctx.r4.s64 = int64_t(ctx.r4.s32) * int64_t(ctx.r10.s32);
	// add r9,r9,r26
	ctx.r9.u64 = ctx.r9.u64 + r26.u64;
	// mullw r29,r29,r10
	r29.s64 = int64_t(r29.s32) * int64_t(ctx.r10.s32);
	// add r6,r6,r26
	ctx.r6.u64 = ctx.r6.u64 + r26.u64;
	// add r5,r5,r26
	ctx.r5.u64 = ctx.r5.u64 + r26.u64;
	// srawi r9,r9,18
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3FFFF) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 18;
	// add r4,r4,r26
	ctx.r4.u64 = ctx.r4.u64 + r26.u64;
	// srawi r6,r6,18
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x3FFFF) != 0);
	ctx.r6.s64 = ctx.r6.s32 >> 18;
	// add r29,r29,r26
	r29.u64 = r29.u64 + r26.u64;
	// srawi r5,r5,18
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x3FFFF) != 0);
	ctx.r5.s64 = ctx.r5.s32 >> 18;
	// srawi r4,r4,18
	xer.ca = (ctx.r4.s32 < 0) & ((ctx.r4.u32 & 0x3FFFF) != 0);
	ctx.r4.s64 = ctx.r4.s32 >> 18;
	// srawi r29,r29,18
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x3FFFF) != 0);
	r29.s64 = r29.s32 >> 18;
	// sth r9,-2(r8)
	PPC_STORE_U16(ctx.r8.u32 + -2, ctx.r9.u16);
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// sth r6,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r6.u16);
	// addi r8,r8,10
	ctx.r8.s64 = ctx.r8.s64 + 10;
	// sthx r5,r11,r3
	PPC_STORE_U16(r11.u32 + ctx.r3.u32, ctx.r5.u16);
	// sthx r4,r11,r31
	PPC_STORE_U16(r11.u32 + r31.u32, ctx.r4.u16);
	// sthx r29,r11,r28
	PPC_STORE_U16(r11.u32 + r28.u32, r29.u16);
	// addi r11,r11,10
	r11.s64 = r11.s64 + 10;
	// bne cr6,0x82718aa4
	if (!cr6.eq) goto loc_82718AA4;
	// lhz r11,176(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 176);
	// addi r9,r1,192
	ctx.r9.s64 = ctx.r1.s64 + 192;
	// stw r25,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r25.u32);
	// sth r11,192(r1)
	PPC_STORE_U16(ctx.r1.u32 + 192, r11.u16);
	// b 0x827191cc
	goto loc_827191CC;
loc_82718B44:
	// cmplw cr6,r9,r28
	cr6.compare<uint32_t>(ctx.r9.u32, r28.u32, xer);
	// bne cr6,0x82718b50
	if (!cr6.eq) goto loc_82718B50;
	// addi r9,r9,16
	ctx.r9.s64 = ctx.r9.s64 + 16;
loc_82718B50:
	// stw r25,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r25.u32);
	// b 0x827191cc
	goto loc_827191CC;
loc_82718B58:
	// lbz r10,33(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + 33);
	// li r22,0
	r22.s64 = 0;
	// li r23,0
	r23.s64 = 0;
	// clrlwi r10,r10,31
	ctx.r10.u64 = ctx.r10.u32 & 0x1;
	// li r25,0
	r25.s64 = 0;
	// li r28,0
	r28.s64 = 0;
	// li r27,0
	r27.s64 = 0;
	// li r9,0
	ctx.r9.s64 = 0;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82718b8c
	if (cr6.eq) goto loc_82718B8C;
	// lbz r10,1180(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + 1180);
	// cmplwi cr6,r10,9
	cr6.compare<uint32_t>(ctx.r10.u32, 9, xer);
	// bge cr6,0x82718bac
	if (!cr6.lt) goto loc_82718BAC;
loc_82718B8C:
	// srawi r10,r6,1
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r6.s32 >> 1;
	// twllei r6,0
	// addi r4,r10,1024
	ctx.r4.s64 = ctx.r10.s64 + 1024;
	// rotlwi r10,r4,1
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r4.u32, 1);
	// divw r25,r4,r6
	r25.s32 = ctx.r4.s32 / ctx.r6.s32;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// andc r10,r6,r10
	ctx.r10.u64 = ctx.r6.u64 & ~ctx.r10.u64;
	// twlgei r10,-1
loc_82718BAC:
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// beq cr6,0x82718bf4
	if (cr6.eq) goto loc_82718BF4;
	// rlwinm r11,r11,5,0,26
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 5) & 0xFFFFFFE0;
	// lbz r10,1189(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + 1189);
	// li r23,1
	r23.s64 = 1;
	// subf r28,r11,r8
	r28.s64 = ctx.r8.s64 - r11.s64;
	// li r22,8
	r22.s64 = 8;
	// mr r9,r28
	ctx.r9.u64 = r28.u64;
	// lhz r11,0(r28)
	r11.u64 = PPC_LOAD_U16(r28.u32 + 0);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// subf r11,r25,r11
	r11.s64 = r11.s64 - r25.s64;
	// srawi r7,r11,31
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7FFFFFFF) != 0);
	ctx.r7.s64 = r11.s32 >> 31;
	// xor r11,r11,r7
	r11.u64 = r11.u64 ^ ctx.r7.u64;
	// subf r11,r7,r11
	r11.s64 = r11.s64 - ctx.r7.s64;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bge cr6,0x82718bf4
	if (!cr6.lt) goto loc_82718BF4;
	// li r23,0
	r23.s64 = 0;
	// li r22,0
	r22.s64 = 0;
loc_82718BF4:
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq cr6,0x82718e30
	if (cr6.eq) goto loc_82718E30;
	// addi r27,r8,-32
	r27.s64 = ctx.r8.s64 + -32;
	// li r23,0
	r23.s64 = 0;
	// li r22,1
	r22.s64 = 1;
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x82719168
	if (cr6.eq) goto loc_82719168;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x82718e30
	if (cr6.eq) goto loc_82718E30;
	// lhz r11,-16(r28)
	r11.u64 = PPC_LOAD_U16(r28.u32 + -16);
	// lhz r10,16(r28)
	ctx.r10.u64 = PPC_LOAD_U16(r28.u32 + 16);
	// extsh r8,r11
	ctx.r8.s64 = r11.s16;
	// lhz r7,0(r27)
	ctx.r7.u64 = PPC_LOAD_U16(r27.u32 + 0);
	// lbz r11,27(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 27);
	// extsh r5,r10
	ctx.r5.s64 = ctx.r10.s16;
	// extsh r4,r7
	ctx.r4.s64 = ctx.r7.s16;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82718dfc
	if (cr6.eq) goto loc_82718DFC;
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// beq cr6,0x82718d38
	if (cr6.eq) goto loc_82718D38;
	// cmpwi cr6,r24,4
	cr6.compare<int32_t>(r24.s32, 4, xer);
	// beq cr6,0x82718d38
	if (cr6.eq) goto loc_82718D38;
	// cmpwi cr6,r24,5
	cr6.compare<int32_t>(r24.s32, 5, xer);
	// beq cr6,0x82718d38
	if (cr6.eq) goto loc_82718D38;
	// cmpwi cr6,r24,1
	cr6.compare<int32_t>(r24.s32, 1, xer);
	// bne cr6,0x82718cd4
	if (!cr6.eq) goto loc_82718CD4;
	// lhz r10,50(r30)
	ctx.r10.u64 = PPC_LOAD_U16(r30.u32 + 50);
	// lbz r11,4(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 4);
	// rlwinm r10,r10,31,1,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// lwz r7,220(r30)
	ctx.r7.u64 = PPC_LOAD_U32(r30.u32 + 220);
	// rotlwi r6,r11,2
	ctx.r6.u64 = __builtin_rotateleft32(r11.u32, 2);
	// rlwinm r3,r10,2,0,29
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// add r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 + ctx.r3.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r6,r11,r7
	ctx.r6.u64 = r11.u64 + ctx.r7.u64;
	// subf r10,r10,r29
	ctx.r10.s64 = r29.s64 - ctx.r10.s64;
	// lbz r11,4(r10)
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + 4);
	// lwz r10,16(r6)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r6.u32 + 16);
	// rotlwi r6,r11,2
	ctx.r6.u64 = __builtin_rotateleft32(r11.u32, 2);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// lwzx r10,r10,r21
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r21.u32);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mullw r11,r11,r10
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r10.s32);
	// mullw r10,r11,r8
	ctx.r10.s64 = int64_t(r11.s32) * int64_t(ctx.r8.s32);
	// mullw r11,r11,r5
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r5.s32);
	// add r10,r10,r26
	ctx.r10.u64 = ctx.r10.u64 + r26.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// srawi r8,r10,18
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3FFFF) != 0);
	ctx.r8.s64 = ctx.r10.s32 >> 18;
	// srawi r5,r11,18
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3FFFF) != 0);
	ctx.r5.s64 = r11.s32 >> 18;
	// b 0x82718df8
	goto loc_82718DF8;
loc_82718CD4:
	// cmpwi cr6,r24,2
	cr6.compare<int32_t>(r24.s32, 2, xer);
	// bne cr6,0x82718dfc
	if (!cr6.eq) goto loc_82718DFC;
	// lbz r11,4(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 4);
	// lbz r7,-16(r29)
	ctx.r7.u64 = PPC_LOAD_U8(r29.u32 + -16);
	// rotlwi r6,r11,2
	ctx.r6.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwz r10,220(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 220);
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// rotlwi r6,r7,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r7.u32, 2);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r7,r7,r6
	ctx.r7.u64 = ctx.r7.u64 + ctx.r6.u64;
	// add r6,r11,r10
	ctx.r6.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r7,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// lwz r11,16(r6)
	r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + 16);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r10,16(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	// lwzx r11,r11,r21
	r11.u64 = PPC_LOAD_U32(r11.u32 + r21.u32);
	// mullw r11,r10,r11
	r11.s64 = int64_t(ctx.r10.s32) * int64_t(r11.s32);
	// mullw r10,r11,r8
	ctx.r10.s64 = int64_t(r11.s32) * int64_t(ctx.r8.s32);
	// mullw r11,r11,r4
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r4.s32);
	// add r10,r10,r26
	ctx.r10.u64 = ctx.r10.u64 + r26.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// srawi r8,r10,18
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3FFFF) != 0);
	ctx.r8.s64 = ctx.r10.s32 >> 18;
	// srawi r4,r11,18
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3FFFF) != 0);
	ctx.r4.s64 = r11.s32 >> 18;
	// b 0x82718dfc
	goto loc_82718DFC;
loc_82718D38:
	// lhz r11,50(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 50);
	// lbz r10,4(r29)
	ctx.r10.u64 = PPC_LOAD_U8(r29.u32 + 4);
	// rlwinm r7,r11,31,1,31
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFF;
	// lwz r11,220(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 220);
	// rotlwi r3,r10,2
	ctx.r3.u64 = __builtin_rotateleft32(ctx.r10.u32, 2);
	// lbz r6,-16(r29)
	ctx.r6.u64 = PPC_LOAD_U8(r29.u32 + -16);
	// rlwinm r31,r7,2,0,29
	r31.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r16,124(r1)
	r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// add r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 + ctx.r3.u64;
	// lwz r15,404(r1)
	r15.u64 = PPC_LOAD_U32(ctx.r1.u32 + 404);
	// add r7,r7,r31
	ctx.r7.u64 = ctx.r7.u64 + r31.u64;
	// rlwinm r3,r7,2,0,29
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r7,r10,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r10,r3,r29
	ctx.r10.s64 = r29.s64 - ctx.r3.s64;
	// add r3,r7,r11
	ctx.r3.u64 = ctx.r7.u64 + r11.u64;
	// rotlwi r7,r6,2
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// add r7,r6,r7
	ctx.r7.u64 = ctx.r6.u64 + ctx.r7.u64;
	// lbz r6,4(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + 4);
	// rlwinm r7,r7,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r3,16(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// add r7,r7,r11
	ctx.r7.u64 = ctx.r7.u64 + r11.u64;
	// lwz r17,16(r7)
	r17.u64 = PPC_LOAD_U32(ctx.r7.u32 + 16);
	// lbz r7,-16(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + -16);
	// rlwinm r10,r3,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// rotlwi r3,r6,2
	ctx.r3.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// rotlwi r31,r7,2
	r31.u64 = __builtin_rotateleft32(ctx.r7.u32, 2);
	// add r3,r6,r3
	ctx.r3.u64 = ctx.r6.u64 + ctx.r3.u64;
	// add r7,r7,r31
	ctx.r7.u64 = ctx.r7.u64 + r31.u64;
	// lwzx r10,r10,r21
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r21.u32);
	// rlwinm r6,r7,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r7,r3,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// add r6,r6,r11
	ctx.r6.u64 = ctx.r6.u64 + r11.u64;
	// add r11,r7,r11
	r11.u64 = ctx.r7.u64 + r11.u64;
	// mullw r7,r17,r10
	ctx.r7.s64 = int64_t(r17.s32) * int64_t(ctx.r10.s32);
	// lwz r17,116(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r6,16(r6)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r6.u32 + 16);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mullw r6,r6,r10
	ctx.r6.s64 = int64_t(ctx.r6.s32) * int64_t(ctx.r10.s32);
	// mullw r11,r11,r10
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r10.s32);
	// mullw r10,r6,r8
	ctx.r10.s64 = int64_t(ctx.r6.s32) * int64_t(ctx.r8.s32);
	// mullw r11,r11,r5
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r5.s32);
	// mullw r8,r7,r4
	ctx.r8.s64 = int64_t(ctx.r7.s32) * int64_t(ctx.r4.s32);
	// add r10,r10,r26
	ctx.r10.u64 = ctx.r10.u64 + r26.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// add r7,r8,r26
	ctx.r7.u64 = ctx.r8.u64 + r26.u64;
	// srawi r8,r10,18
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3FFFF) != 0);
	ctx.r8.s64 = ctx.r10.s32 >> 18;
	// srawi r5,r11,18
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3FFFF) != 0);
	ctx.r5.s64 = r11.s32 >> 18;
	// srawi r4,r7,18
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x3FFFF) != 0);
	ctx.r4.s64 = ctx.r7.s32 >> 18;
loc_82718DF8:
	// lwz r14,388(r1)
	r14.u64 = PPC_LOAD_U32(ctx.r1.u32 + 388);
loc_82718DFC:
	// subf r11,r4,r8
	r11.s64 = ctx.r8.s64 - ctx.r4.s64;
	// subf r10,r5,r8
	ctx.r10.s64 = ctx.r8.s64 - ctx.r5.s64;
	// srawi r8,r11,31
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7FFFFFFF) != 0);
	ctx.r8.s64 = r11.s32 >> 31;
	// srawi r7,r10,31
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7FFFFFFF) != 0);
	ctx.r7.s64 = ctx.r10.s32 >> 31;
	// xor r11,r11,r8
	r11.u64 = r11.u64 ^ ctx.r8.u64;
	// xor r10,r10,r7
	ctx.r10.u64 = ctx.r10.u64 ^ ctx.r7.u64;
	// subf r11,r8,r11
	r11.s64 = r11.s64 - ctx.r8.s64;
	// subf r10,r7,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r7.s64;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bge cr6,0x82718e30
	if (!cr6.lt) goto loc_82718E30;
	// mr r9,r28
	ctx.r9.u64 = r28.u64;
	// li r23,1
	r23.s64 = 1;
	// li r22,8
	r22.s64 = 8;
loc_82718E30:
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82719168
	if (cr6.eq) goto loc_82719168;
	// lbz r11,27(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 27);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82719158
	if (cr6.eq) goto loc_82719158;
	// cmplw cr6,r9,r27
	cr6.compare<uint32_t>(ctx.r9.u32, r27.u32, xer);
	// bne cr6,0x82718fd0
	if (!cr6.eq) goto loc_82718FD0;
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// beq cr6,0x82718e94
	if (cr6.eq) goto loc_82718E94;
	// cmpwi cr6,r24,2
	cr6.compare<int32_t>(r24.s32, 2, xer);
	// beq cr6,0x82718e94
	if (cr6.eq) goto loc_82718E94;
	// cmpwi cr6,r24,4
	cr6.compare<int32_t>(r24.s32, 4, xer);
	// beq cr6,0x82718e94
	if (cr6.eq) goto loc_82718E94;
	// cmpwi cr6,r24,5
	cr6.compare<int32_t>(r24.s32, 5, xer);
	// beq cr6,0x82718e94
	if (cr6.eq) goto loc_82718E94;
	// addi r11,r1,176
	r11.s64 = ctx.r1.s64 + 176;
	// li r10,16
	ctx.r10.s64 = 16;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_82718E78:
	// lhz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// addi r9,r9,2
	ctx.r9.s64 = ctx.r9.s64 + 2;
	// sth r10,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r10.u16);
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// bdnz 0x82718e78
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82718E78;
	// addi r9,r1,176
	ctx.r9.s64 = ctx.r1.s64 + 176;
	// b 0x82719170
	goto loc_82719170;
loc_82718E94:
	// lhz r11,0(r9)
	r11.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// addi r6,r1,176
	ctx.r6.s64 = ctx.r1.s64 + 176;
	// addi r4,r1,178
	ctx.r4.s64 = ctx.r1.s64 + 178;
	// lbz r7,4(r29)
	ctx.r7.u64 = PPC_LOAD_U8(r29.u32 + 4);
	// addi r28,r1,180
	r28.s64 = ctx.r1.s64 + 180;
	// lbz r10,-16(r29)
	ctx.r10.u64 = PPC_LOAD_U8(r29.u32 + -16);
	// extsh r27,r11
	r27.s64 = r11.s16;
	// lwz r5,220(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 220);
	// subf r31,r9,r4
	r31.s64 = ctx.r4.s64 - ctx.r9.s64;
	// subf r3,r9,r6
	ctx.r3.s64 = ctx.r6.s64 - ctx.r9.s64;
	// addi r11,r9,6
	r11.s64 = ctx.r9.s64 + 6;
	// subf r28,r9,r28
	r28.s64 = r28.s64 - ctx.r9.s64;
	// rotlwi r9,r7,2
	ctx.r9.u64 = __builtin_rotateleft32(ctx.r7.u32, 2);
	// rotlwi r4,r10,2
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 2);
	// add r9,r7,r9
	ctx.r9.u64 = ctx.r7.u64 + ctx.r9.u64;
	// add r4,r10,r4
	ctx.r4.u64 = ctx.r10.u64 + ctx.r4.u64;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// rotlwi r7,r7,2
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r7.u32, 2);
	// add r25,r9,r5
	r25.u64 = ctx.r9.u64 + ctx.r5.u64;
	// rlwinm r9,r4,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r1,180
	ctx.r8.s64 = ctx.r1.s64 + 180;
	// add r5,r9,r5
	ctx.r5.u64 = ctx.r9.u64 + ctx.r5.u64;
	// li r6,3
	ctx.r6.s64 = 3;
	// lwz r9,16(r25)
	ctx.r9.u64 = PPC_LOAD_U32(r25.u32 + 16);
	// rlwinm r4,r9,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r7,r21
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + r21.u32);
	// lwz r7,16(r5)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r5.u32 + 16);
	// lwzx r5,r4,r21
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r4.u32 + r21.u32);
	// mullw r7,r5,r7
	ctx.r7.s64 = int64_t(ctx.r5.s32) * int64_t(ctx.r7.s32);
	// mullw r7,r7,r27
	ctx.r7.s64 = int64_t(ctx.r7.s32) * int64_t(r27.s32);
	// add r7,r7,r26
	ctx.r7.u64 = ctx.r7.u64 + r26.u64;
	// srawi r7,r7,18
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x3FFFF) != 0);
	ctx.r7.s64 = ctx.r7.s32 >> 18;
	// sth r7,176(r1)
	PPC_STORE_U16(ctx.r1.u32 + 176, ctx.r7.u16);
loc_82718F18:
	// lhz r7,-4(r11)
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + -4);
	// addi r6,r6,-1
	ctx.r6.s64 = ctx.r6.s64 + -1;
	// lhz r5,-2(r11)
	ctx.r5.u64 = PPC_LOAD_U16(r11.u32 + -2);
	// lhz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// lhz r27,2(r11)
	r27.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// extsh r5,r5
	ctx.r5.s64 = ctx.r5.s16;
	// lhz r25,4(r11)
	r25.u64 = PPC_LOAD_U16(r11.u32 + 4);
	// extsh r4,r4
	ctx.r4.s64 = ctx.r4.s16;
	// extsh r27,r27
	r27.s64 = r27.s16;
	// mullw r7,r7,r9
	ctx.r7.s64 = int64_t(ctx.r7.s32) * int64_t(ctx.r9.s32);
	// extsh r25,r25
	r25.s64 = r25.s16;
	// mullw r5,r5,r9
	ctx.r5.s64 = int64_t(ctx.r5.s32) * int64_t(ctx.r9.s32);
	// mullw r4,r4,r9
	ctx.r4.s64 = int64_t(ctx.r4.s32) * int64_t(ctx.r9.s32);
	// mullw r27,r27,r9
	r27.s64 = int64_t(r27.s32) * int64_t(ctx.r9.s32);
	// mullw r7,r7,r10
	ctx.r7.s64 = int64_t(ctx.r7.s32) * int64_t(ctx.r10.s32);
	// mullw r25,r25,r9
	r25.s64 = int64_t(r25.s32) * int64_t(ctx.r9.s32);
	// mullw r5,r5,r10
	ctx.r5.s64 = int64_t(ctx.r5.s32) * int64_t(ctx.r10.s32);
	// mullw r4,r4,r10
	ctx.r4.s64 = int64_t(ctx.r4.s32) * int64_t(ctx.r10.s32);
	// mullw r27,r27,r10
	r27.s64 = int64_t(r27.s32) * int64_t(ctx.r10.s32);
	// add r7,r7,r26
	ctx.r7.u64 = ctx.r7.u64 + r26.u64;
	// mullw r25,r25,r10
	r25.s64 = int64_t(r25.s32) * int64_t(ctx.r10.s32);
	// add r5,r5,r26
	ctx.r5.u64 = ctx.r5.u64 + r26.u64;
	// add r4,r4,r26
	ctx.r4.u64 = ctx.r4.u64 + r26.u64;
	// srawi r7,r7,18
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x3FFFF) != 0);
	ctx.r7.s64 = ctx.r7.s32 >> 18;
	// add r27,r27,r26
	r27.u64 = r27.u64 + r26.u64;
	// srawi r5,r5,18
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x3FFFF) != 0);
	ctx.r5.s64 = ctx.r5.s32 >> 18;
	// add r25,r25,r26
	r25.u64 = r25.u64 + r26.u64;
	// srawi r4,r4,18
	xer.ca = (ctx.r4.s32 < 0) & ((ctx.r4.u32 & 0x3FFFF) != 0);
	ctx.r4.s64 = ctx.r4.s32 >> 18;
	// srawi r27,r27,18
	xer.ca = (r27.s32 < 0) & ((r27.u32 & 0x3FFFF) != 0);
	r27.s64 = r27.s32 >> 18;
	// srawi r25,r25,18
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x3FFFF) != 0);
	r25.s64 = r25.s32 >> 18;
	// sth r7,-2(r8)
	PPC_STORE_U16(ctx.r8.u32 + -2, ctx.r7.u16);
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// sth r5,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r5.u16);
	// addi r8,r8,10
	ctx.r8.s64 = ctx.r8.s64 + 10;
	// sthx r4,r3,r11
	PPC_STORE_U16(ctx.r3.u32 + r11.u32, ctx.r4.u16);
	// sthx r27,r31,r11
	PPC_STORE_U16(r31.u32 + r11.u32, r27.u16);
	// sthx r25,r28,r11
	PPC_STORE_U16(r28.u32 + r11.u32, r25.u16);
	// addi r11,r11,10
	r11.s64 = r11.s64 + 10;
	// bne cr6,0x82718f18
	if (!cr6.eq) goto loc_82718F18;
	// lhz r11,176(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 176);
	// addi r9,r1,176
	ctx.r9.s64 = ctx.r1.s64 + 176;
	// lwz r15,404(r1)
	r15.u64 = PPC_LOAD_U32(ctx.r1.u32 + 404);
	// lwz r14,388(r1)
	r14.u64 = PPC_LOAD_U32(ctx.r1.u32 + 388);
	// sth r11,192(r1)
	PPC_STORE_U16(ctx.r1.u32 + 192, r11.u16);
	// b 0x82719170
	goto loc_82719170;
loc_82718FD0:
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// beq cr6,0x82719018
	if (cr6.eq) goto loc_82719018;
	// cmpwi cr6,r24,1
	cr6.compare<int32_t>(r24.s32, 1, xer);
	// beq cr6,0x82719018
	if (cr6.eq) goto loc_82719018;
	// cmpwi cr6,r24,4
	cr6.compare<int32_t>(r24.s32, 4, xer);
	// beq cr6,0x82719018
	if (cr6.eq) goto loc_82719018;
	// cmpwi cr6,r24,5
	cr6.compare<int32_t>(r24.s32, 5, xer);
	// beq cr6,0x82719018
	if (cr6.eq) goto loc_82719018;
	// addi r11,r1,176
	r11.s64 = ctx.r1.s64 + 176;
	// li r10,16
	ctx.r10.s64 = 16;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
loc_82718FFC:
	// lhz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// addi r9,r9,2
	ctx.r9.s64 = ctx.r9.s64 + 2;
	// sth r10,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r10.u16);
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// bdnz 0x82718ffc
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82718FFC;
	// addi r9,r1,192
	ctx.r9.s64 = ctx.r1.s64 + 192;
	// b 0x82719170
	goto loc_82719170;
loc_82719018:
	// lhz r11,50(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 50);
	// addi r4,r1,178
	ctx.r4.s64 = ctx.r1.s64 + 178;
	// addi r7,r1,176
	ctx.r7.s64 = ctx.r1.s64 + 176;
	// lbz r10,4(r29)
	ctx.r10.u64 = PPC_LOAD_U8(r29.u32 + 4);
	// rlwinm r6,r11,31,1,31
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFF;
	// lhz r11,0(r9)
	r11.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// addi r28,r1,180
	r28.s64 = ctx.r1.s64 + 180;
	// lwz r5,220(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 220);
	// subf r31,r9,r4
	r31.s64 = ctx.r4.s64 - ctx.r9.s64;
	// extsh r27,r11
	r27.s64 = r11.s16;
	// subf r3,r9,r7
	ctx.r3.s64 = ctx.r7.s64 - ctx.r9.s64;
	// addi r11,r9,6
	r11.s64 = ctx.r9.s64 + 6;
	// subf r28,r9,r28
	r28.s64 = r28.s64 - ctx.r9.s64;
	// rlwinm r4,r6,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// rotlwi r9,r10,2
	ctx.r9.u64 = __builtin_rotateleft32(ctx.r10.u32, 2);
	// add r6,r6,r4
	ctx.r6.u64 = ctx.r6.u64 + ctx.r4.u64;
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r6,r6,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r6,r6,r29
	ctx.r6.s64 = r29.s64 - ctx.r6.s64;
	// add r4,r9,r5
	ctx.r4.u64 = ctx.r9.u64 + ctx.r5.u64;
	// rotlwi r10,r10,2
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 2);
	// addi r8,r1,180
	ctx.r8.s64 = ctx.r1.s64 + 180;
	// li r7,3
	ctx.r7.s64 = 3;
	// lbz r9,4(r6)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r6.u32 + 4);
	// lwz r6,16(r4)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r4.u32 + 16);
	// lwzx r10,r10,r21
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r21.u32);
	// rlwinm r6,r6,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// mullw r10,r10,r9
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r9.s32);
	// lwzx r4,r6,r21
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r6.u32 + r21.u32);
	// rotlwi r6,r9,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r9.u32, 2);
	// add r9,r9,r6
	ctx.r9.u64 = ctx.r9.u64 + ctx.r6.u64;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r9,r5
	ctx.r9.u64 = ctx.r9.u64 + ctx.r5.u64;
	// lwz r9,16(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 16);
	// mullw r9,r4,r9
	ctx.r9.s64 = int64_t(ctx.r4.s32) * int64_t(ctx.r9.s32);
	// mullw r9,r9,r27
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(r27.s32);
	// add r9,r9,r26
	ctx.r9.u64 = ctx.r9.u64 + r26.u64;
	// srawi r9,r9,18
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3FFFF) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 18;
	// sth r9,176(r1)
	PPC_STORE_U16(ctx.r1.u32 + 176, ctx.r9.u16);
loc_827190B8:
	// lhz r9,-4(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + -4);
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// lhz r6,-2(r11)
	ctx.r6.u64 = PPC_LOAD_U16(r11.u32 + -2);
	// lhz r5,0(r11)
	ctx.r5.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// lhz r4,2(r11)
	ctx.r4.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// lhz r27,4(r11)
	r27.u64 = PPC_LOAD_U16(r11.u32 + 4);
	// extsh r5,r5
	ctx.r5.s64 = ctx.r5.s16;
	// extsh r4,r4
	ctx.r4.s64 = ctx.r4.s16;
	// mullw r9,r9,r10
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r10.s32);
	// extsh r27,r27
	r27.s64 = r27.s16;
	// mullw r6,r6,r10
	ctx.r6.s64 = int64_t(ctx.r6.s32) * int64_t(ctx.r10.s32);
	// mullw r5,r5,r10
	ctx.r5.s64 = int64_t(ctx.r5.s32) * int64_t(ctx.r10.s32);
	// mullw r4,r4,r10
	ctx.r4.s64 = int64_t(ctx.r4.s32) * int64_t(ctx.r10.s32);
	// add r9,r9,r26
	ctx.r9.u64 = ctx.r9.u64 + r26.u64;
	// mullw r27,r27,r10
	r27.s64 = int64_t(r27.s32) * int64_t(ctx.r10.s32);
	// add r6,r6,r26
	ctx.r6.u64 = ctx.r6.u64 + r26.u64;
	// add r5,r5,r26
	ctx.r5.u64 = ctx.r5.u64 + r26.u64;
	// srawi r9,r9,18
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3FFFF) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 18;
	// add r4,r4,r26
	ctx.r4.u64 = ctx.r4.u64 + r26.u64;
	// srawi r6,r6,18
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x3FFFF) != 0);
	ctx.r6.s64 = ctx.r6.s32 >> 18;
	// add r27,r27,r26
	r27.u64 = r27.u64 + r26.u64;
	// srawi r5,r5,18
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x3FFFF) != 0);
	ctx.r5.s64 = ctx.r5.s32 >> 18;
	// srawi r4,r4,18
	xer.ca = (ctx.r4.s32 < 0) & ((ctx.r4.u32 & 0x3FFFF) != 0);
	ctx.r4.s64 = ctx.r4.s32 >> 18;
	// srawi r27,r27,18
	xer.ca = (r27.s32 < 0) & ((r27.u32 & 0x3FFFF) != 0);
	r27.s64 = r27.s32 >> 18;
	// sth r9,-2(r8)
	PPC_STORE_U16(ctx.r8.u32 + -2, ctx.r9.u16);
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// sth r6,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r6.u16);
	// addi r8,r8,10
	ctx.r8.s64 = ctx.r8.s64 + 10;
	// sthx r5,r11,r3
	PPC_STORE_U16(r11.u32 + ctx.r3.u32, ctx.r5.u16);
	// sthx r4,r11,r31
	PPC_STORE_U16(r11.u32 + r31.u32, ctx.r4.u16);
	// sthx r27,r11,r28
	PPC_STORE_U16(r11.u32 + r28.u32, r27.u16);
	// addi r11,r11,10
	r11.s64 = r11.s64 + 10;
	// bne cr6,0x827190b8
	if (!cr6.eq) goto loc_827190B8;
	// lhz r11,176(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 176);
	// addi r9,r1,192
	ctx.r9.s64 = ctx.r1.s64 + 192;
	// lwz r14,388(r1)
	r14.u64 = PPC_LOAD_U32(ctx.r1.u32 + 388);
	// sth r11,192(r1)
	PPC_STORE_U16(ctx.r1.u32 + 192, r11.u16);
	// b 0x82719170
	goto loc_82719170;
loc_82719158:
	// cmplw cr6,r9,r28
	cr6.compare<uint32_t>(ctx.r9.u32, r28.u32, xer);
	// bne cr6,0x82719170
	if (!cr6.eq) goto loc_82719170;
	// addi r9,r9,16
	ctx.r9.s64 = ctx.r9.s64 + 16;
	// b 0x82719170
	goto loc_82719170;
loc_82719168:
	// addi r9,r30,1192
	ctx.r9.s64 = r30.s64 + 1192;
	// sth r25,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, r25.u16);
loc_82719170:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// rlwinm r11,r11,0,27,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x18;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lbz r11,1188(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 1188);
	// beq cr6,0x827191ac
	if (cr6.eq) goto loc_827191AC;
	// cmpw cr6,r23,r11
	cr6.compare<int32_t>(r23.s32, r11.s32, xer);
	// beq cr6,0x8271919c
	if (cr6.eq) goto loc_8271919C;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// b 0x827191c0
	goto loc_827191C0;
loc_8271919C:
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r11,r11,30
	r11.u64 = r11.u32 & 0x3;
	// b 0x827191c0
	goto loc_827191C0;
loc_827191AC:
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// li r22,0
	r22.s64 = 0;
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
loc_827191C0:
	// lwz r23,80(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r22,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r22.u32);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
loc_827191CC:
	// lwz r11,28(r15)
	r11.u64 = PPC_LOAD_U32(r15.u32 + 28);
	// stw r9,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r9.u32);
	// addi r11,r11,-128
	r11.s64 = r11.s64 + -128;
	// stw r11,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, r11.u32);
	// stw r11,28(r15)
	PPC_STORE_U32(r15.u32 + 28, r11.u32);
	// dcbzl r0,r11
	memset(base + ((r11.u32) & ~127), 0, 128);
	// li r27,0
	r27.s64 = 0;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r31,0(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lbz r4,8(r10)
	ctx.r4.u64 = PPC_LOAD_U8(ctx.r10.u32 + 8);
	// lwz r28,0(r10)
	r28.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// subfic r10,r4,64
	xer.ca = ctx.r4.u32 <= 64;
	ctx.r10.s64 = 64 - ctx.r4.s64;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r10,r10,32
	ctx.r10.u64 = ctx.r10.u64 & 0xFFFFFFFF;
	// srd r10,r11,r10
	ctx.r10.u64 = ctx.r10.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r10.u8 & 0x7F));
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r10,r28
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + r28.u32);
	// extsh r29,r10
	r29.s64 = ctx.r10.s16;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// blt cr6,0x827192dc
	if (cr6.lt) goto loc_827192DC;
	// clrlwi r10,r29,28
	ctx.r10.u64 = r29.u32 & 0xF;
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpw cr6,r9,r10
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r10.s32, xer);
	// sld r11,r11,r10
	r11.u64 = ctx.r10.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r10.u8 & 0x7F));
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// subf r11,r10,r9
	r11.s64 = ctx.r9.s64 - ctx.r10.s64;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// bge cr6,0x827192d4
	if (!cr6.lt) goto loc_827192D4;
loc_8271923C:
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// addi r10,r10,-4
	ctx.r10.s64 = ctx.r10.s64 + -4;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x82719268
	if (cr6.lt) goto loc_82719268;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb840
	sub_825EB840(ctx, base);
	// cmplwi cr6,r3,1
	cr6.compare<uint32_t>(ctx.r3.u32, 1, xer);
	// beq cr6,0x8271923c
	if (cr6.eq) goto loc_8271923C;
	// srawi r29,r29,4
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0xF) != 0);
	r29.s64 = r29.s32 >> 4;
	// b 0x8271931c
	goto loc_8271931C;
loc_82719268:
	// lbz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r4,r11,6
	ctx.r4.s64 = r11.s64 + 6;
	// lbz r9,1(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 1);
	// rldicr r8,r8,8,63
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u64, 8) & 0xFFFFFFFFFFFFFFFF;
	// lbz r5,2(r11)
	ctx.r5.u64 = PPC_LOAD_U8(r11.u32 + 2);
	// lbz r6,3(r11)
	ctx.r6.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// lbz r8,5(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 5);
	// lbz r7,4(r11)
	ctx.r7.u64 = PPC_LOAD_U8(r11.u32 + 4);
	// rldicr r11,r9,8,55
	r11.u64 = __builtin_rotateleft64(ctx.r9.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// ld r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// stw r4,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r4.u32);
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// neg r8,r10
	ctx.r8.s64 = -ctx.r10.s64;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// extsw r8,r8
	ctx.r8.s64 = ctx.r8.s32;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r11,r11,r8
	r11.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
loc_827192D4:
	// srawi r29,r29,4
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0xF) != 0);
	r29.s64 = r29.s32 >> 4;
	// b 0x8271931c
	goto loc_8271931C;
loc_827192DC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
loc_827192E4:
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rldicl r11,r11,1,63
	r11.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// add r29,r11,r29
	r29.u64 = r11.u64 + r29.u64;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
	// addis r11,r29,1
	r11.s64 = r29.s64 + 65536;
	// addi r11,r11,-32768
	r11.s64 = r11.s64 + -32768;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r11,r28
	r11.u64 = PPC_LOAD_U16(r11.u32 + r28.u32);
	// extsh r29,r11
	r29.s64 = r11.s16;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// blt cr6,0x827192e4
	if (cr6.lt) goto loc_827192E4;
loc_8271931C:
	// clrlwi r29,r29,16
	r29.u64 = r29.u32 & 0xFFFF;
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// mr r25,r29
	r25.u64 = r29.u64;
	// cmpw cr6,r25,r11
	cr6.compare<int32_t>(r25.s32, r11.s32, xer);
	// beq cr6,0x8271946c
	if (cr6.eq) goto loc_8271946C;
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x8271958c
	if (cr6.eq) goto loc_8271958C;
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// bne cr6,0x82719384
	if (!cr6.eq) goto loc_82719384;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// addic. r10,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	ctx.r10.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// rldicl r11,r11,1,63
	r11.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// rotlwi r29,r11,0
	r29.u64 = __builtin_rotateleft32(r11.u32, 0);
	// std r9,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r9.u64);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// bge 0x82719370
	if (!cr0.lt) goto loc_82719370;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82719370:
	// rlwinm r11,r25,1,0,30
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// addis r11,r11,1
	r11.s64 = r11.s64 + 65536;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// b 0x82719448
	goto loc_82719448;
loc_82719384:
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x8271944c
	if (!cr6.eq) goto loc_8271944C;
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// li r29,2
	r29.s64 = 2;
	// li r28,0
	r28.s64 = 0;
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// bge cr6,0x827193fc
	if (!cr6.lt) goto loc_827193FC;
loc_827193A4:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x827193fc
	if (cr6.eq) goto loc_827193FC;
	// subfic r8,r11,64
	xer.ca = r11.u32 <= 64;
	ctx.r8.s64 = 64 - r11.s64;
	// ld r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// subf. r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrldi r8,r8,32
	ctx.r8.u64 = ctx.r8.u64 & 0xFFFFFFFF;
	// subf r29,r11,r29
	r29.s64 = r29.s64 - r11.s64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// srd r8,r10,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r10.u64 >> (ctx.r8.u8 & 0x7F));
	// sld r11,r10,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 << (r11.u8 & 0x7F));
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// slw r11,r10,r29
	r11.u64 = r29.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r29.u8 & 0x3F));
	// add r28,r11,r28
	r28.u64 = r11.u64 + r28.u64;
	// bge 0x827193ec
	if (!cr0.lt) goto loc_827193EC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_827193EC:
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplw cr6,r29,r11
	cr6.compare<uint32_t>(r29.u32, r11.u32, xer);
	// bgt cr6,0x827193a4
	if (cr6.gt) goto loc_827193A4;
loc_827193FC:
	// subfic r9,r29,64
	xer.ca = r29.u32 <= 64;
	ctx.r9.s64 = 64 - r29.s64;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r8,r29,32
	ctx.r8.u64 = r29.u64 & 0xFFFFFFFF;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// clrldi r9,r9,32
	ctx.r9.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// subf. r10,r29,r10
	ctx.r10.s64 = ctx.r10.s64 - r29.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r8,r11,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// srd r9,r11,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r9.u8 & 0x7F));
	// rotlwi r11,r9,0
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// add r29,r11,r28
	r29.u64 = r11.u64 + r28.u64;
	// std r8,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r8.u64);
	// bge 0x82719438
	if (!cr0.lt) goto loc_82719438;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82719438:
	// rlwinm r11,r25,2,0,29
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// addis r11,r11,1
	r11.s64 = r11.s64 + 65536;
	// addi r11,r11,-3
	r11.s64 = r11.s64 + -3;
loc_82719448:
	// clrlwi r29,r11,16
	r29.u64 = r11.u32 & 0xFFFF;
loc_8271944C:
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rldicl r8,r11,1,63
	ctx.r8.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// addic. r11,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	r11.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// rotlwi r28,r8,0
	r28.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// b 0x82719568
	goto loc_82719568;
loc_8271946C:
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// bgt cr6,0x82719484
	if (cr6.gt) goto loc_82719484;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// subfic r11,r11,3
	xer.ca = r11.u32 <= 3;
	r11.s64 = 3 - r11.s64;
	// b 0x82719488
	goto loc_82719488;
loc_82719484:
	// li r11,0
	r11.s64 = 0;
loc_82719488:
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r29,r11,8
	r29.s64 = r11.s64 + 8;
	// li r28,0
	r28.s64 = 0;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// bne cr6,0x827194a8
	if (!cr6.eq) goto loc_827194A8;
	// li r11,0
	r11.s64 = 0;
	// b 0x82719548
	goto loc_82719548;
loc_827194A8:
	// cmplw cr6,r29,r11
	cr6.compare<uint32_t>(r29.u32, r11.u32, xer);
	// ble cr6,0x82719508
	if (!cr6.gt) goto loc_82719508;
loc_827194B0:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82719508
	if (cr6.eq) goto loc_82719508;
	// subfic r8,r11,64
	xer.ca = r11.u32 <= 64;
	ctx.r8.s64 = 64 - r11.s64;
	// ld r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// subf. r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrldi r8,r8,32
	ctx.r8.u64 = ctx.r8.u64 & 0xFFFFFFFF;
	// subf r29,r11,r29
	r29.s64 = r29.s64 - r11.s64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// srd r8,r10,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r10.u64 >> (ctx.r8.u8 & 0x7F));
	// sld r11,r10,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 << (r11.u8 & 0x7F));
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// slw r11,r10,r29
	r11.u64 = r29.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r29.u8 & 0x3F));
	// add r28,r11,r28
	r28.u64 = r11.u64 + r28.u64;
	// bge 0x827194f8
	if (!cr0.lt) goto loc_827194F8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_827194F8:
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplw cr6,r29,r11
	cr6.compare<uint32_t>(r29.u32, r11.u32, xer);
	// bgt cr6,0x827194b0
	if (cr6.gt) goto loc_827194B0;
loc_82719508:
	// subfic r9,r29,64
	xer.ca = r29.u32 <= 64;
	ctx.r9.s64 = 64 - r29.s64;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r8,r29,32
	ctx.r8.u64 = r29.u64 & 0xFFFFFFFF;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// clrldi r9,r9,32
	ctx.r9.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// subf. r10,r29,r10
	ctx.r10.s64 = ctx.r10.s64 - r29.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r8,r11,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// srd r9,r11,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r9.u8 & 0x7F));
	// rotlwi r11,r9,0
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// add r29,r11,r28
	r29.u64 = r11.u64 + r28.u64;
	// std r8,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r8.u64);
	// bge 0x82719544
	if (!cr0.lt) goto loc_82719544;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82719544:
	// mr r11,r29
	r11.u64 = r29.u64;
loc_82719548:
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// clrlwi r29,r11,16
	r29.u64 = r11.u32 & 0xFFFF;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// addic. r10,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	ctx.r10.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// rldicl r11,r11,1,63
	r11.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// rotlwi r28,r11,0
	r28.u64 = __builtin_rotateleft32(r11.u32, 0);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
loc_82719568:
	// std r9,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r9.u64);
	// bge 0x82719578
	if (!cr0.lt) goto loc_82719578;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82719578:
	// rlwinm r11,r28,1,0,30
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 1) & 0xFFFFFFFE;
	// extsh r10,r29
	ctx.r10.s64 = r29.s16;
	// subfic r11,r11,1
	xer.ca = r11.u32 <= 1;
	r11.s64 = 1 - r11.s64;
	// mullw r11,r11,r10
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r10.s32);
	// extsh r27,r11
	r27.s64 = r11.s16;
loc_8271958C:
	// lwz r31,148(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// sth r27,0(r31)
	PPC_STORE_U16(r31.u32 + 0, r27.u16);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8271996c
	if (!cr6.eq) goto loc_8271996C;
	// lwz r11,152(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// lwz r29,128(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// lwz r28,104(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82719604
	if (cr6.eq) goto loc_82719604;
	// lwz r10,108(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r11,1104(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 1104);
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// lwz r4,0(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// bne cr6,0x827195e0
	if (!cr6.eq) goto loc_827195E0;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// srawi r10,r28,3
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x7) != 0);
	ctx.r10.s64 = r28.s32 >> 3;
	// rlwinm r11,r11,30,29,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 30) & 0x6;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// b 0x827195e4
	goto loc_827195E4;
loc_827195E0:
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
loc_827195E4:
	// addi r11,r11,301
	r11.s64 = r11.s64 + 301;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwzx r6,r11,r30
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// bl 0x826fcd00
	sub_826FCD00(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x8271996c
	if (cr6.lt) goto loc_8271996C;
loc_82719604:
	// lwz r10,116(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x827197ac
	if (cr6.eq) goto loc_827197AC;
	// lhz r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// cmpwi cr6,r28,1
	cr6.compare<int32_t>(r28.s32, 1, xer);
	// lhz r11,0(r10)
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// extsh r9,r11
	ctx.r9.s64 = r11.s16;
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// sth r9,0(r31)
	PPC_STORE_U16(r31.u32 + 0, ctx.r9.u16);
	// sth r9,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r9.u16);
	// sth r9,16(r11)
	PPC_STORE_U16(r11.u32 + 16, ctx.r9.u16);
	// bne cr6,0x827196e4
	if (!cr6.eq) goto loc_827196E4;
	// lhz r9,2(r10)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + 2);
	// lhz r8,2(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 2);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// sth r9,2(r31)
	PPC_STORE_U16(r31.u32 + 2, ctx.r9.u16);
	// sth r9,2(r11)
	PPC_STORE_U16(r11.u32 + 2, ctx.r9.u16);
	// lhz r9,4(r10)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + 4);
	// lhz r8,4(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 4);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// sth r9,4(r31)
	PPC_STORE_U16(r31.u32 + 4, ctx.r9.u16);
	// sth r9,4(r11)
	PPC_STORE_U16(r11.u32 + 4, ctx.r9.u16);
	// lhz r9,6(r10)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + 6);
	// lhz r8,6(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 6);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// sth r9,6(r31)
	PPC_STORE_U16(r31.u32 + 6, ctx.r9.u16);
	// sth r9,6(r11)
	PPC_STORE_U16(r11.u32 + 6, ctx.r9.u16);
	// lhz r9,8(r10)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + 8);
	// lhz r8,8(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 8);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// sth r9,8(r31)
	PPC_STORE_U16(r31.u32 + 8, ctx.r9.u16);
	// sth r9,8(r11)
	PPC_STORE_U16(r11.u32 + 8, ctx.r9.u16);
	// lhz r9,10(r10)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + 10);
	// lhz r8,10(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 10);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// sth r9,10(r31)
	PPC_STORE_U16(r31.u32 + 10, ctx.r9.u16);
	// sth r9,10(r11)
	PPC_STORE_U16(r11.u32 + 10, ctx.r9.u16);
	// lhz r9,12(r10)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + 12);
	// lhz r8,12(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 12);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// sth r9,12(r31)
	PPC_STORE_U16(r31.u32 + 12, ctx.r9.u16);
	// sth r9,12(r11)
	PPC_STORE_U16(r11.u32 + 12, ctx.r9.u16);
	// lhz r10,14(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 14);
	// lhz r9,14(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 14);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// sth r10,14(r31)
	PPC_STORE_U16(r31.u32 + 14, ctx.r10.u16);
	// sth r10,14(r11)
	PPC_STORE_U16(r11.u32 + 14, ctx.r10.u16);
	// b 0x827197d4
	goto loc_827197D4;
loc_827196E4:
	// cmpwi cr6,r28,8
	cr6.compare<int32_t>(r28.s32, 8, xer);
	// bne cr6,0x827197bc
	if (!cr6.eq) goto loc_827197BC;
	// lhz r9,2(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 2);
	// sth r9,2(r11)
	PPC_STORE_U16(r11.u32 + 2, ctx.r9.u16);
	// lwz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// stw r9,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r9.u32);
	// ld r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U64(r31.u32 + 8);
	// std r9,8(r11)
	PPC_STORE_U64(r11.u32 + 8, ctx.r9.u64);
	// lhz r9,2(r10)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + 2);
	// lhz r8,16(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 16);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// sth r9,16(r31)
	PPC_STORE_U16(r31.u32 + 16, ctx.r9.u16);
	// sth r9,18(r11)
	PPC_STORE_U16(r11.u32 + 18, ctx.r9.u16);
	// lhz r9,4(r10)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + 4);
	// lhz r8,32(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 32);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// sth r9,32(r31)
	PPC_STORE_U16(r31.u32 + 32, ctx.r9.u16);
	// sth r9,20(r11)
	PPC_STORE_U16(r11.u32 + 20, ctx.r9.u16);
	// lhz r9,6(r10)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + 6);
	// lhz r8,48(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 48);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// sth r9,48(r31)
	PPC_STORE_U16(r31.u32 + 48, ctx.r9.u16);
	// sth r9,22(r11)
	PPC_STORE_U16(r11.u32 + 22, ctx.r9.u16);
	// lhz r9,8(r10)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + 8);
	// lhz r8,64(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 64);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// sth r9,64(r31)
	PPC_STORE_U16(r31.u32 + 64, ctx.r9.u16);
	// sth r9,24(r11)
	PPC_STORE_U16(r11.u32 + 24, ctx.r9.u16);
	// lhz r9,10(r10)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + 10);
	// lhz r8,80(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 80);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// sth r9,80(r31)
	PPC_STORE_U16(r31.u32 + 80, ctx.r9.u16);
	// sth r9,26(r11)
	PPC_STORE_U16(r11.u32 + 26, ctx.r9.u16);
	// lhz r9,12(r10)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + 12);
	// lhz r8,96(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 96);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// sth r9,96(r31)
	PPC_STORE_U16(r31.u32 + 96, ctx.r9.u16);
	// sth r9,28(r11)
	PPC_STORE_U16(r11.u32 + 28, ctx.r9.u16);
	// lhz r10,14(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 14);
	// lhz r9,112(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 112);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// sth r10,112(r31)
	PPC_STORE_U16(r31.u32 + 112, ctx.r10.u16);
	// b 0x82719808
	goto loc_82719808;
loc_827197AC:
	// lhz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// sth r10,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r10.u16);
	// sth r10,16(r11)
	PPC_STORE_U16(r11.u32 + 16, ctx.r10.u16);
loc_827197BC:
	// lhz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 2);
	// sth r10,2(r11)
	PPC_STORE_U16(r11.u32 + 2, ctx.r10.u16);
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// ld r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U64(r31.u32 + 8);
	// std r10,8(r11)
	PPC_STORE_U64(r11.u32 + 8, ctx.r10.u64);
loc_827197D4:
	// lhz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 16);
	// sth r10,18(r11)
	PPC_STORE_U16(r11.u32 + 18, ctx.r10.u16);
	// lhz r10,32(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 32);
	// sth r10,20(r11)
	PPC_STORE_U16(r11.u32 + 20, ctx.r10.u16);
	// lhz r10,48(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 48);
	// sth r10,22(r11)
	PPC_STORE_U16(r11.u32 + 22, ctx.r10.u16);
	// lhz r10,64(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 64);
	// sth r10,24(r11)
	PPC_STORE_U16(r11.u32 + 24, ctx.r10.u16);
	// lhz r10,80(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 80);
	// sth r10,26(r11)
	PPC_STORE_U16(r11.u32 + 26, ctx.r10.u16);
	// lhz r10,96(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 96);
	// sth r10,28(r11)
	PPC_STORE_U16(r11.u32 + 28, ctx.r10.u16);
	// lhz r10,112(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 112);
loc_82719808:
	// sth r10,30(r11)
	PPC_STORE_U16(r11.u32 + 30, ctx.r10.u16);
	// srawi r17,r17,1
	xer.ca = (r17.s32 < 0) & ((r17.u32 & 0x1) != 0);
	r17.s64 = r17.s32 >> 1;
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// addi r24,r11,1
	r24.s64 = r11.s64 + 1;
	// add r10,r11,r29
	ctx.r10.u64 = r11.u64 + r29.u64;
	// li r11,0
	r11.s64 = 0;
	// stw r17,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r17.u32);
	// cmpwi cr6,r24,6
	cr6.compare<int32_t>(r24.s32, 6, xer);
	// stw r24,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r24.u32);
	// stb r11,6(r10)
	PPC_STORE_U8(ctx.r10.u32 + 6, r11.u8);
	// blt cr6,0x827184c4
	if (cr6.lt) goto loc_827184C4;
	// lbz r11,32(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 32);
	// li r24,0
	r24.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x827198a8
	if (cr6.eq) goto loc_827198A8;
	// lwz r11,1244(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 1244);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x827198a8
	if (cr6.eq) goto loc_827198A8;
	// lwz r10,0(r15)
	ctx.r10.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// li r8,16384
	ctx.r8.s64 = 16384;
	// lhz r11,36(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 36);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r11,156(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// stwx r8,r10,r11
	PPC_STORE_U32(ctx.r10.u32 + r11.u32, ctx.r8.u32);
	// lwz r9,0(r15)
	ctx.r9.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// lhz r10,38(r30)
	ctx.r10.u64 = PPC_LOAD_U16(r30.u32 + 38);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r8,r10,r11
	PPC_STORE_U32(ctx.r10.u32 + r11.u32, ctx.r8.u32);
	// lwz r9,0(r15)
	ctx.r9.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// lhz r10,40(r30)
	ctx.r10.u64 = PPC_LOAD_U16(r30.u32 + 40);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r8,r10,r11
	PPC_STORE_U32(ctx.r10.u32 + r11.u32, ctx.r8.u32);
	// lhz r10,42(r30)
	ctx.r10.u64 = PPC_LOAD_U16(r30.u32 + 42);
	// lwz r9,0(r15)
	ctx.r9.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r8,r10,r11
	PPC_STORE_U32(ctx.r10.u32 + r11.u32, ctx.r8.u32);
loc_827198A8:
	// lhz r10,18(r15)
	ctx.r10.u64 = PPC_LOAD_U16(r15.u32 + 18);
	// addi r16,r16,1
	r16.s64 = r16.s64 + 1;
	// lwz r11,0(r15)
	r11.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// addi r29,r29,20
	r29.s64 = r29.s64 + 20;
	// addi r8,r10,2
	ctx.r8.s64 = ctx.r10.s64 + 2;
	// lwz r9,4(r15)
	ctx.r9.u64 = PPC_LOAD_U32(r15.u32 + 4);
	// addi r7,r11,2
	ctx.r7.s64 = r11.s64 + 2;
	// lwz r10,8(r15)
	ctx.r10.u64 = PPC_LOAD_U32(r15.u32 + 8);
	// lwz r11,12(r15)
	r11.u64 = PPC_LOAD_U32(r15.u32 + 12);
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// addi r10,r10,16
	ctx.r10.s64 = ctx.r10.s64 + 16;
	// lwz r20,160(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r16,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r16.u32);
	// stw r29,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r29.u32);
	// cmplw cr6,r16,r20
	cr6.compare<uint32_t>(r16.u32, r20.u32, xer);
	// stw r7,0(r15)
	PPC_STORE_U32(r15.u32 + 0, ctx.r7.u32);
	// stw r9,4(r15)
	PPC_STORE_U32(r15.u32 + 4, ctx.r9.u32);
	// sth r8,18(r15)
	PPC_STORE_U16(r15.u32 + 18, ctx.r8.u16);
	// stw r10,8(r15)
	PPC_STORE_U32(r15.u32 + 8, ctx.r10.u32);
	// stw r11,12(r15)
	PPC_STORE_U32(r15.u32 + 12, r11.u32);
	// blt cr6,0x82717e50
	if (cr6.lt) goto loc_82717E50;
	// lwz r27,132(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lwz r25,136(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// lwz r19,164(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
loc_8271990C:
	// lhz r11,16(r15)
	r11.u64 = PPC_LOAD_U16(r15.u32 + 16);
	// addi r23,r23,1
	r23.s64 = r23.s64 + 1;
	// lwz r10,0(r15)
	ctx.r10.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// cmplw cr6,r23,r19
	cr6.compare<uint32_t>(r23.u32, r19.u32, xer);
	// stw r23,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r23.u32);
	// sth r11,16(r15)
	PPC_STORE_U16(r15.u32 + 16, r11.u16);
	// lhz r11,50(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 50);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r11,0(r15)
	PPC_STORE_U32(r15.u32 + 0, r11.u32);
	// lhz r11,74(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 74);
	// lhz r9,76(r30)
	ctx.r9.u64 = PPC_LOAD_U16(r30.u32 + 76);
	// rotlwi r10,r11,4
	ctx.r10.u64 = __builtin_rotateleft32(r11.u32, 4);
	// rotlwi r11,r9,3
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 3);
	// add r27,r10,r27
	r27.u64 = ctx.r10.u64 + r27.u64;
	// add r25,r11,r25
	r25.u64 = r11.u64 + r25.u64;
	// stw r27,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r27.u32);
	// stw r25,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, r25.u32);
	// bge cr6,0x82719978
	if (!cr6.lt) goto loc_82719978;
	// li r16,0
	r16.s64 = 0;
	// b 0x827179c8
	goto loc_827179C8;
loc_82719960:
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// addi r1,r1,368
	ctx.r1.s64 = ctx.r1.s64 + 368;
	// b 0x8239bd10
	return;
loc_8271996C:
	// li r3,4
	ctx.r3.s64 = 4;
	// addi r1,r1,368
	ctx.r1.s64 = ctx.r1.s64 + 368;
	// b 0x8239bd10
	return;
loc_82719978:
	// ld r11,104(r30)
	r11.u64 = PPC_LOAD_U64(r30.u32 + 104);
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// lwz r10,84(r14)
	ctx.r10.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// std r11,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, r11.u64);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,112(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 112);
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,116(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 116);
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,120(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 120);
	// stw r10,16(r11)
	PPC_STORE_U32(r11.u32 + 16, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,124(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 124);
	// stw r10,20(r11)
	PPC_STORE_U32(r11.u32 + 20, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,128(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 128);
	// stw r10,24(r11)
	PPC_STORE_U32(r11.u32 + 24, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,132(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 132);
	// stw r10,28(r11)
	PPC_STORE_U32(r11.u32 + 28, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,136(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 136);
	// stw r10,32(r11)
	PPC_STORE_U32(r11.u32 + 32, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,140(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 140);
	// stw r10,36(r11)
	PPC_STORE_U32(r11.u32 + 36, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,144(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 144);
	// stw r10,40(r11)
	PPC_STORE_U32(r11.u32 + 40, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,148(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 148);
	// stw r10,44(r11)
	PPC_STORE_U32(r11.u32 + 44, ctx.r10.u32);
	// lwz r11,84(r14)
	r11.u64 = PPC_LOAD_U32(r14.u32 + 84);
	// lwz r10,152(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 152);
	// stw r10,48(r11)
	PPC_STORE_U32(r11.u32 + 48, ctx.r10.u32);
	// addi r1,r1,368
	ctx.r1.s64 = ctx.r1.s64 + 368;
	// b 0x8239bd10
	return;
}

__attribute__((alias("__imp__sub_82719A14"))) PPC_WEAK_FUNC(sub_82719A14);
PPC_FUNC_IMPL(__imp__sub_82719A14) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_82719A18"))) PPC_WEAK_FUNC(sub_82719A18);
PPC_FUNC_IMPL(__imp__sub_82719A18) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcc0
	// stwu r1,-1840(r1)
	ea = -1840 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r25,r3
	r25.u64 = ctx.r3.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// addi r4,r25,21712
	ctx.r4.s64 = r25.s64 + 21712;
	// lhz r11,52(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 52);
	// lhz r9,50(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 50);
	// rlwinm r30,r11,31,1,31
	r30.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFF;
	// lwz r11,1516(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1516);
	// rlwinm r22,r9,31,1,31
	r22.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 31) & 0x7FFFFFFF;
	// lwz r10,21556(r25)
	ctx.r10.u64 = PPC_LOAD_U32(r25.u32 + 21556);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r25,1860(r1)
	PPC_STORE_U32(ctx.r1.u32 + 1860, r25.u32);
	// mullw r11,r11,r30
	r11.s64 = int64_t(r11.s32) * int64_t(r30.s32);
	// stw r30,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r30.u32);
	// stw r22,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r22.u32);
	// mullw r11,r11,r22
	r11.s64 = int64_t(r11.s32) * int64_t(r22.s32);
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r11,r11,8,0,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r11,28(r29)
	PPC_STORE_U32(r29.u32 + 28, r11.u32);
	// lis r11,-32126
	r11.s64 = -2105409536;
	// lwz r3,3360(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 3360);
	// bl 0x8271d5f8
	sub_8271D5F8(ctx, base);
	// lhz r7,76(r31)
	ctx.r7.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// li r26,0
	r26.s64 = 0;
	// lhz r24,74(r31)
	r24.u64 = PPC_LOAD_U16(r31.u32 + 74);
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// lwz r10,224(r25)
	ctx.r10.u64 = PPC_LOAD_U32(r25.u32 + 224);
	// rlwinm r23,r7,31,1,31
	r23.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 31) & 0x7FFFFFFF;
	// lwz r8,3724(r25)
	ctx.r8.u64 = PPC_LOAD_U32(r25.u32 + 3724);
	// rlwinm r24,r24,31,1,31
	r24.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 31) & 0x7FFFFFFF;
	// lwz r11,1516(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1516);
	// mr r27,r26
	r27.u64 = r26.u64;
	// add r7,r8,r10
	ctx.r7.u64 = ctx.r8.u64 + ctx.r10.u64;
	// lwz r5,3720(r25)
	ctx.r5.u64 = PPC_LOAD_U32(r25.u32 + 3720);
	// mullw r9,r11,r30
	ctx.r9.s64 = int64_t(r11.s32) * int64_t(r30.s32);
	// lwz r3,3728(r25)
	ctx.r3.u64 = PPC_LOAD_U32(r25.u32 + 3728);
	// lwz r4,220(r25)
	ctx.r4.u64 = PPC_LOAD_U32(r25.u32 + 220);
	// lwz r6,268(r25)
	ctx.r6.u64 = PPC_LOAD_U32(r25.u32 + 268);
	// stw r26,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r26.u32);
	// stw r26,4(r29)
	PPC_STORE_U32(r29.u32 + 4, r26.u32);
	// sth r26,16(r29)
	PPC_STORE_U16(r29.u32 + 16, r26.u16);
	// lbz r28,33(r31)
	r28.u64 = PPC_LOAD_U8(r31.u32 + 33);
	// stw r26,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r26.u32);
	// stw r26,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r26.u32);
	// mullw r8,r23,r11
	ctx.r8.s64 = int64_t(r23.s32) * int64_t(r11.s32);
	// stw r27,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r27.u32);
	// stb r28,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r28.u8);
	// mullw r11,r24,r11
	r11.s64 = int64_t(r24.s32) * int64_t(r11.s32);
	// add r5,r11,r5
	ctx.r5.u64 = r11.u64 + ctx.r5.u64;
	// add r11,r3,r10
	r11.u64 = ctx.r3.u64 + ctx.r10.u64;
	// add r10,r5,r4
	ctx.r10.u64 = ctx.r5.u64 + ctx.r4.u64;
	// mullw r9,r9,r22
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(r22.s32);
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// rlwinm r10,r9,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r6,r10,r6
	ctx.r6.u64 = ctx.r10.u64 + ctx.r6.u64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// add r10,r7,r8
	ctx.r10.u64 = ctx.r7.u64 + ctx.r8.u64;
	// stw r6,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r6.u32);
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// ble cr6,0x8271a3c8
	if (!cr6.gt) goto loc_8271A3C8;
	// b 0x82719b30
	goto loc_82719B30;
loc_82719B2C:
	// lwz r6,104(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
loc_82719B30:
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// stw r26,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r26.u32);
	// sth r26,18(r29)
	PPC_STORE_U16(r29.u32 + 18, r26.u16);
	// stw r11,8(r29)
	PPC_STORE_U32(r29.u32 + 8, r11.u32);
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// stw r11,12(r29)
	PPC_STORE_U32(r29.u32 + 12, r11.u32);
	// ble cr6,0x82719dd4
	if (!cr6.gt) goto loc_82719DD4;
loc_82719B50:
	// clrlwi r10,r28,24
	ctx.r10.u64 = r28.u32 & 0xFF;
	// rlwinm r11,r10,0,29,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82719bd0
	if (cr6.eq) goto loc_82719BD0;
	// lwz r11,0(r6)
	r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + 0);
	// rlwinm r11,r11,0,20,20
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x800;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82719bd0
	if (!cr6.eq) goto loc_82719BD0;
	// lwz r9,4(r29)
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// rlwinm r10,r10,0,24,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFE;
	// lwz r8,192(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 192);
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// stb r10,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r10.u8);
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r26,r9,r8
	PPC_STORE_U32(ctx.r9.u32 + ctx.r8.u32, r26.u32);
	// lhz r9,50(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 50);
	// lwz r8,188(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r26,r9,r8
	PPC_STORE_U32(ctx.r9.u32 + ctx.r8.u32, r26.u32);
	// lhz r9,50(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 50);
	// lwz r8,188(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// add r11,r9,r11
	r11.u64 = ctx.r9.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r26,r11,r8
	PPC_STORE_U32(r11.u32 + ctx.r8.u32, r26.u32);
	// lwz r11,188(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r26,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r26.u32);
	// lwz r11,188(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// stwx r26,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, r26.u32);
loc_82719BD0:
	// mr r11,r26
	r11.u64 = r26.u64;
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
loc_82719BD8:
	// addi r9,r11,98
	ctx.r9.s64 = r11.s64 + 98;
	// lwz r10,28(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 28);
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,2
	ctx.r8.s64 = r11.s64 + 2;
	// addi r11,r10,-128
	r11.s64 = ctx.r10.s64 + -128;
	// rlwinm r10,r8,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// li r8,-128
	ctx.r8.s64 = -128;
	// lwzx r9,r9,r31
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + r31.u32);
	// stw r11,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r11.u32);
	// lwzx r10,r10,r29
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r29.u32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r10,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r10.u32);
	// dcbt r8,r11
	// lwz r11,260(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// dcbzl r0,r11
	memset(base + ((r11.u32) & ~127), 0, 128);
	// lis r11,-32126
	r11.s64 = -2105409536;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// lwz r27,104(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lwz r28,120(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// lwz r7,132(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// srawi r30,r28,2
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x3) != 0);
	r30.s64 = r28.s32 >> 2;
	// stw r3,28(r29)
	PPC_STORE_U32(r29.u32 + 28, ctx.r3.u32);
	// lwz r6,3352(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 3352);
	// lbz r11,4(r27)
	r11.u64 = PPC_LOAD_U8(r27.u32 + 4);
	// lwz r10,224(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 224);
	// rotlwi r11,r11,6
	r11.u64 = __builtin_rotateleft32(r11.u32, 6);
	// lwz r9,1300(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1300);
	// lwz r4,260(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// add r5,r11,r10
	ctx.r5.u64 = r11.u64 + ctx.r10.u64;
	// addi r11,r30,45
	r11.s64 = r30.s64 + 45;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r8,r11,r31
	ctx.r8.u64 = PPC_LOAD_U16(r11.u32 + r31.u32);
	// bl 0x8266b9b8
	sub_8266B9B8(ctx, base);
	// lbz r11,33(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 33);
	// lwz r7,124(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82719d4c
	if (cr6.eq) goto loc_82719D4C;
	// rlwinm r9,r7,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0xFFFFFFFE;
	// lhz r6,54(r31)
	ctx.r6.u64 = PPC_LOAD_U16(r31.u32 + 54);
	// clrlwi r10,r28,31
	ctx.r10.u64 = r28.u32 & 0x1;
	// lwz r11,260(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// addi r8,r28,104
	ctx.r8.s64 = r28.s64 + 104;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r9,r8,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r3,r10,3,0,28
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// clrlwi r5,r30,16
	ctx.r5.u64 = r30.u32 & 0xFFFF;
	// ld r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// lwzx r8,r9,r31
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + r31.u32);
	// sraw r9,r3,r30
	temp.u32 = r30.u32 & 0x3F;
	if (temp.u32 > 0x1F) temp.u32 = 0x1F;
	xer.ca = (ctx.r3.s32 < 0) & (((ctx.r3.s32 >> temp.u32) << temp.u32) != ctx.r3.s32);
	ctx.r9.s64 = ctx.r3.s32 >> temp.u32;
	// srw r10,r6,r5
	ctx.r10.u64 = ctx.r5.u8 & 0x20 ? 0 : (ctx.r6.u32 >> (ctx.r5.u8 & 0x3F));
	// rlwinm r9,r9,1,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFF0;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// std r4,0(r9)
	PPC_STORE_U64(ctx.r9.u32 + 0, ctx.r4.u64);
	// ld r8,8(r11)
	ctx.r8.u64 = PPC_LOAD_U64(r11.u32 + 8);
	// std r8,8(r9)
	PPC_STORE_U64(ctx.r9.u32 + 8, ctx.r8.u64);
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// ld r8,16(r11)
	ctx.r8.u64 = PPC_LOAD_U64(r11.u32 + 16);
	// std r8,0(r9)
	PPC_STORE_U64(ctx.r9.u32 + 0, ctx.r8.u64);
	// ld r8,24(r11)
	ctx.r8.u64 = PPC_LOAD_U64(r11.u32 + 24);
	// std r8,8(r9)
	PPC_STORE_U64(ctx.r9.u32 + 8, ctx.r8.u64);
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// ld r8,32(r11)
	ctx.r8.u64 = PPC_LOAD_U64(r11.u32 + 32);
	// std r8,0(r9)
	PPC_STORE_U64(ctx.r9.u32 + 0, ctx.r8.u64);
	// ld r8,40(r11)
	ctx.r8.u64 = PPC_LOAD_U64(r11.u32 + 40);
	// std r8,8(r9)
	PPC_STORE_U64(ctx.r9.u32 + 8, ctx.r8.u64);
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// ld r8,48(r11)
	ctx.r8.u64 = PPC_LOAD_U64(r11.u32 + 48);
	// std r8,0(r9)
	PPC_STORE_U64(ctx.r9.u32 + 0, ctx.r8.u64);
	// ld r8,56(r11)
	ctx.r8.u64 = PPC_LOAD_U64(r11.u32 + 56);
	// std r8,8(r9)
	PPC_STORE_U64(ctx.r9.u32 + 8, ctx.r8.u64);
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// ld r8,64(r11)
	ctx.r8.u64 = PPC_LOAD_U64(r11.u32 + 64);
	// std r8,0(r9)
	PPC_STORE_U64(ctx.r9.u32 + 0, ctx.r8.u64);
	// ld r8,72(r11)
	ctx.r8.u64 = PPC_LOAD_U64(r11.u32 + 72);
	// std r8,8(r9)
	PPC_STORE_U64(ctx.r9.u32 + 8, ctx.r8.u64);
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// ld r8,80(r11)
	ctx.r8.u64 = PPC_LOAD_U64(r11.u32 + 80);
	// std r8,0(r9)
	PPC_STORE_U64(ctx.r9.u32 + 0, ctx.r8.u64);
	// ld r8,88(r11)
	ctx.r8.u64 = PPC_LOAD_U64(r11.u32 + 88);
	// std r8,8(r9)
	PPC_STORE_U64(ctx.r9.u32 + 8, ctx.r8.u64);
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// ld r8,96(r11)
	ctx.r8.u64 = PPC_LOAD_U64(r11.u32 + 96);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// std r8,0(r9)
	PPC_STORE_U64(ctx.r9.u32 + 0, ctx.r8.u64);
	// ld r8,104(r11)
	ctx.r8.u64 = PPC_LOAD_U64(r11.u32 + 104);
	// std r8,8(r9)
	PPC_STORE_U64(ctx.r9.u32 + 8, ctx.r8.u64);
	// ld r9,112(r11)
	ctx.r9.u64 = PPC_LOAD_U64(r11.u32 + 112);
	// std r9,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, ctx.r9.u64);
	// ld r11,120(r11)
	r11.u64 = PPC_LOAD_U64(r11.u32 + 120);
	// std r11,8(r10)
	PPC_STORE_U64(ctx.r10.u32 + 8, r11.u64);
loc_82719D4C:
	// addi r11,r28,1
	r11.s64 = r28.s64 + 1;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// blt cr6,0x82719bd8
	if (cr6.lt) goto loc_82719BD8;
	// lbz r28,80(r1)
	r28.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// rlwinm r11,r28,0,29,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82719d74
	if (cr6.eq) goto loc_82719D74;
	// li r28,7
	r28.s64 = 7;
	// stb r28,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r28.u8);
loc_82719D74:
	// lhz r9,18(r29)
	ctx.r9.u64 = PPC_LOAD_U16(r29.u32 + 18);
	// addi r11,r7,1
	r11.s64 = ctx.r7.s64 + 1;
	// lwz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// addi r6,r27,20
	ctx.r6.s64 = r27.s64 + 20;
	// addi r7,r9,2
	ctx.r7.s64 = ctx.r9.s64 + 2;
	// lwz r8,4(r29)
	ctx.r8.u64 = PPC_LOAD_U32(r29.u32 + 4);
	// addi r5,r10,2
	ctx.r5.s64 = ctx.r10.s64 + 2;
	// lwz r9,8(r29)
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + 8);
	// lwz r10,12(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 12);
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// addi r9,r9,16
	ctx.r9.s64 = ctx.r9.s64 + 16;
	// lwz r22,116(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// stw r6,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r6.u32);
	// cmpw cr6,r11,r22
	cr6.compare<int32_t>(r11.s32, r22.s32, xer);
	// stw r5,0(r29)
	PPC_STORE_U32(r29.u32 + 0, ctx.r5.u32);
	// stw r8,4(r29)
	PPC_STORE_U32(r29.u32 + 4, ctx.r8.u32);
	// sth r7,18(r29)
	PPC_STORE_U16(r29.u32 + 18, ctx.r7.u16);
	// stw r9,8(r29)
	PPC_STORE_U32(r29.u32 + 8, ctx.r9.u32);
	// stw r10,12(r29)
	PPC_STORE_U32(r29.u32 + 12, ctx.r10.u32);
	// blt cr6,0x82719b50
	if (cr6.lt) goto loc_82719B50;
	// lwz r30,108(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r27,96(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
loc_82719DD4:
	// lhz r11,16(r29)
	r11.u64 = PPC_LOAD_U16(r29.u32 + 16);
	// lwz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// lwz r9,112(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// sth r11,16(r29)
	PPC_STORE_U16(r29.u32 + 16, r11.u16);
	// lhz r11,50(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 50);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
	// clrlwi r11,r28,31
	r11.u64 = r28.u32 & 0x1;
	// lhz r19,74(r31)
	r19.u64 = PPC_LOAD_U16(r31.u32 + 74);
	// lhz r15,76(r31)
	r15.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// rotlwi r10,r19,4
	ctx.r10.u64 = __builtin_rotateleft32(r19.u32, 4);
	// rotlwi r11,r15,3
	r11.u64 = __builtin_rotateleft32(r15.u32, 3);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r10,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r10.u32);
	// lwz r10,100(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// beq cr6,0x8271a1a8
	if (cr6.eq) goto loc_8271A1A8;
	// lhz r28,50(r31)
	r28.u64 = PPC_LOAD_U16(r31.u32 + 50);
	// rlwinm r4,r27,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// neg r5,r27
	ctx.r5.s64 = -r27.s64;
	// lwz r6,1240(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 1240);
	// rotlwi r8,r28,1
	ctx.r8.u64 = __builtin_rotateleft32(r28.u32, 1);
	// lwz r7,188(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// rlwinm r10,r22,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r11,r8,r11
	r11.s64 = r11.s64 - ctx.r8.s64;
	// lwz r9,192(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 192);
	// srawi r8,r5,31
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x7FFFFFFF) != 0);
	ctx.r8.s64 = ctx.r5.s32 >> 31;
	// srawi r16,r28,1
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x1) != 0);
	r16.s64 = r28.s32 >> 1;
	// lwzx r6,r4,r6
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r4.u32 + ctx.r6.u32);
	// srawi r5,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	ctx.r5.s64 = r11.s32 >> 2;
	// addi r4,r8,1
	ctx.r4.s64 = ctx.r8.s64 + 1;
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r11,r5,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// or r14,r6,r4
	r14.u64 = ctx.r6.u64 | ctx.r4.u64;
	// rotlwi r18,r28,2
	r18.u64 = __builtin_rotateleft32(r28.u32, 2);
	// rotlwi r20,r28,3
	r20.u64 = __builtin_rotateleft32(r28.u32, 3);
	// add r27,r8,r7
	r27.u64 = ctx.r8.u64 + ctx.r7.u64;
	// add r17,r11,r9
	r17.u64 = r11.u64 + ctx.r9.u64;
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// ble cr6,0x82719f04
	if (!cr6.gt) goto loc_82719F04;
	// addi r11,r28,1
	r11.s64 = r28.s64 + 1;
	// li r30,16
	r30.s64 = 16;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r25,r27,4
	r25.s64 = r27.s64 + 4;
	// add r24,r11,r27
	r24.u64 = r11.u64 + r27.u64;
	// addi r26,r10,-1
	r26.s64 = ctx.r10.s64 + -1;
loc_82719E9C:
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// bne cr6,0x82719ec4
	if (!cr6.eq) goto loc_82719EC4;
	// lwz r11,-4(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + -4);
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// bne cr6,0x82719ec4
	if (!cr6.eq) goto loc_82719EC4;
	// lwz r11,1264(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1264);
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// add r3,r30,r11
	ctx.r3.u64 = r30.u64 + r11.u64;
	// bl 0x826112d8
	sub_826112D8(ctx, base);
loc_82719EC4:
	// lwz r11,0(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// bne cr6,0x82719eec
	if (!cr6.eq) goto loc_82719EEC;
	// lwz r11,-4(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + -4);
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// bne cr6,0x82719eec
	if (!cr6.eq) goto loc_82719EEC;
	// lwz r11,1272(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1272);
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x826112d8
	sub_826112D8(ctx, base);
loc_82719EEC:
	// addi r26,r26,-1
	r26.s64 = r26.s64 + -1;
	// addi r25,r25,4
	r25.s64 = r25.s64 + 4;
	// addi r24,r24,4
	r24.s64 = r24.s64 + 4;
	// addi r30,r30,16
	r30.s64 = r30.s64 + 16;
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// bne cr6,0x82719e9c
	if (!cr6.eq) goto loc_82719E9C;
loc_82719F04:
	// cmpwi cr6,r22,1
	cr6.compare<int32_t>(r22.s32, 1, xer);
	// ble cr6,0x82719f64
	if (!cr6.gt) goto loc_82719F64;
	// li r30,16
	r30.s64 = 16;
	// addi r26,r17,4
	r26.s64 = r17.s64 + 4;
	// addi r25,r22,-1
	r25.s64 = r22.s64 + -1;
loc_82719F18:
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// bne cr6,0x82719f50
	if (!cr6.eq) goto loc_82719F50;
	// lwz r11,-4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -4);
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// bne cr6,0x82719f50
	if (!cr6.eq) goto loc_82719F50;
	// lwz r11,1276(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1276);
	// mr r4,r18
	ctx.r4.u64 = r18.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x826112d8
	sub_826112D8(ctx, base);
	// lwz r11,1284(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1284);
	// mr r4,r18
	ctx.r4.u64 = r18.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x826112d8
	sub_826112D8(ctx, base);
loc_82719F50:
	// addi r25,r25,-1
	r25.s64 = r25.s64 + -1;
	// addi r26,r26,4
	r26.s64 = r26.s64 + 4;
	// addi r30,r30,16
	r30.s64 = r30.s64 + 16;
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// bne cr6,0x82719f18
	if (!cr6.eq) goto loc_82719F18;
loc_82719F64:
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// ble cr6,0x8271a060
	if (!cr6.gt) goto loc_8271A060;
	// lwz r25,92(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r10,r19,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r19.u32 | (r19.u64 << 32), 3) & 0xFFFFFFF8;
	// li r30,0
	r30.s64 = 0;
	// mr r23,r27
	r23.u64 = r27.u64;
	// add r24,r10,r25
	r24.u64 = ctx.r10.u64 + r25.u64;
	// add r22,r27,r11
	r22.u64 = r27.u64 + r11.u64;
	// subf r21,r11,r27
	r21.s64 = r27.s64 - r11.s64;
loc_82719F8C:
	// cmpwi cr6,r14,0
	cr6.compare<int32_t>(r14.s32, 0, xer);
	// bne cr6,0x82719fa4
	if (!cr6.eq) goto loc_82719FA4;
	// lwz r11,0(r21)
	r11.u64 = PPC_LOAD_U32(r21.u32 + 0);
	// li r8,1
	ctx.r8.s64 = 1;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x82719fa8
	if (cr6.eq) goto loc_82719FA8;
loc_82719FA4:
	// li r8,0
	ctx.r8.s64 = 0;
loc_82719FA8:
	// lwz r10,0(r23)
	ctx.r10.u64 = PPC_LOAD_U32(r23.u32 + 0);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// lwz r11,0(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// addi r10,r10,-16384
	ctx.r10.s64 = ctx.r10.s64 + -16384;
	// addi r11,r11,-16384
	r11.s64 = r11.s64 + -16384;
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r27,r10,27,31,31
	r27.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// rlwinm r26,r11,27,31,31
	r26.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bne cr6,0x82719fd8
	if (!cr6.eq) goto loc_82719FD8;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// beq cr6,0x8271a008
	if (cr6.eq) goto loc_8271A008;
loc_82719FD8:
	// lwz r4,1264(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 1264);
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r11,1268(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1268);
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// mr r7,r19
	ctx.r7.u64 = r19.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r20
	ctx.r5.u64 = r20.u64;
	// add r4,r4,r30
	ctx.r4.u64 = ctx.r4.u64 + r30.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x82611550
	sub_82611550(ctx, base);
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// bne cr6,0x8271a010
	if (!cr6.eq) goto loc_8271A010;
loc_8271A008:
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// beq cr6,0x8271a03c
	if (cr6.eq) goto loc_8271A03C;
loc_8271A010:
	// lwz r4,1272(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 1272);
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r11,1264(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1264);
	// mr r9,r26
	ctx.r9.u64 = r26.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// mr r7,r19
	ctx.r7.u64 = r19.u64;
	// mr r6,r24
	ctx.r6.u64 = r24.u64;
	// mr r5,r20
	ctx.r5.u64 = r20.u64;
	// add r4,r4,r30
	ctx.r4.u64 = ctx.r4.u64 + r30.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x82611550
	sub_82611550(ctx, base);
loc_8271A03C:
	// addi r28,r28,-1
	r28.s64 = r28.s64 + -1;
	// addi r21,r21,4
	r21.s64 = r21.s64 + 4;
	// addi r23,r23,4
	r23.s64 = r23.s64 + 4;
	// addi r22,r22,4
	r22.s64 = r22.s64 + 4;
	// addi r25,r25,8
	r25.s64 = r25.s64 + 8;
	// addi r24,r24,8
	r24.s64 = r24.s64 + 8;
	// addi r30,r30,16
	r30.s64 = r30.s64 + 16;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x82719f8c
	if (!cr6.eq) goto loc_82719F8C;
loc_8271A060:
	// cmpwi cr6,r16,0
	cr6.compare<int32_t>(r16.s32, 0, xer);
	// ble cr6,0x8271a138
	if (!cr6.gt) goto loc_8271A138;
	// rlwinm r11,r16,2,0,29
	r11.u64 = __builtin_rotateleft64(r16.u32 | (r16.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r26,84(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r30,0
	r30.s64 = 0;
	// subf r22,r11,r17
	r22.s64 = r17.s64 - r11.s64;
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// mr r24,r17
	r24.u64 = r17.u64;
	// subf r25,r26,r11
	r25.s64 = r11.s64 - r26.s64;
	// mr r23,r16
	r23.u64 = r16.u64;
loc_8271A088:
	// cmpwi cr6,r14,0
	cr6.compare<int32_t>(r14.s32, 0, xer);
	// bne cr6,0x8271a0a0
	if (!cr6.eq) goto loc_8271A0A0;
	// lwz r11,0(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// li r28,1
	r28.s64 = 1;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x8271a0a4
	if (cr6.eq) goto loc_8271A0A4;
loc_8271A0A0:
	// li r28,0
	r28.s64 = 0;
loc_8271A0A4:
	// lwz r11,0(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// addi r11,r11,-16384
	r11.s64 = r11.s64 + -16384;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r27,r11,27,31,31
	r27.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bne cr6,0x8271a0c4
	if (!cr6.eq) goto loc_8271A0C4;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// beq cr6,0x8271a11c
	if (cr6.eq) goto loc_8271A11C;
loc_8271A0C4:
	// lwz r4,1276(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 1276);
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r11,1280(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1280);
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// mr r7,r15
	ctx.r7.u64 = r15.u64;
	// add r6,r25,r26
	ctx.r6.u64 = r25.u64 + r26.u64;
	// mr r5,r18
	ctx.r5.u64 = r18.u64;
	// add r4,r4,r30
	ctx.r4.u64 = ctx.r4.u64 + r30.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x82611550
	sub_82611550(ctx, base);
	// lwz r4,1284(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 1284);
	// lwz r11,1288(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1288);
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// mr r7,r15
	ctx.r7.u64 = r15.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r18
	ctx.r5.u64 = r18.u64;
	// add r4,r4,r30
	ctx.r4.u64 = ctx.r4.u64 + r30.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x82611550
	sub_82611550(ctx, base);
loc_8271A11C:
	// addi r23,r23,-1
	r23.s64 = r23.s64 + -1;
	// addi r22,r22,4
	r22.s64 = r22.s64 + 4;
	// addi r24,r24,4
	r24.s64 = r24.s64 + 4;
	// addi r26,r26,8
	r26.s64 = r26.s64 + 8;
	// addi r30,r30,16
	r30.s64 = r30.s64 + 16;
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// bne cr6,0x8271a088
	if (!cr6.eq) goto loc_8271A088;
loc_8271A138:
	// lwz r9,1268(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1268);
	// li r26,0
	r26.s64 = 0;
	// lwz r7,1280(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1280);
	// lwz r6,1288(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 1288);
	// rotlwi r10,r9,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// lwz r8,1272(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1272);
	// lwz r5,1276(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 1276);
	// stw r9,1272(r31)
	PPC_STORE_U32(r31.u32 + 1272, ctx.r9.u32);
	// lwz r9,1284(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1284);
	// stw r7,1276(r31)
	PPC_STORE_U32(r31.u32 + 1276, ctx.r7.u32);
	// rotlwi r7,r7,0
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r7.u32, 0);
	// stw r6,1284(r31)
	PPC_STORE_U32(r31.u32 + 1284, ctx.r6.u32);
	// rotlwi r6,r6,0
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 0);
	// lwz r11,1264(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1264);
	// lwz r27,96(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lbz r28,80(r1)
	r28.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// lwz r30,108(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r22,116(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r25,1860(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1860);
	// stw r8,1268(r31)
	PPC_STORE_U32(r31.u32 + 1268, ctx.r8.u32);
	// stw r5,1280(r31)
	PPC_STORE_U32(r31.u32 + 1280, ctx.r5.u32);
	// stw r9,1288(r31)
	PPC_STORE_U32(r31.u32 + 1288, ctx.r9.u32);
	// stw r11,420(r31)
	PPC_STORE_U32(r31.u32 + 420, r11.u32);
	// stw r11,416(r31)
	PPC_STORE_U32(r31.u32 + 416, r11.u32);
	// stw r7,432(r31)
	PPC_STORE_U32(r31.u32 + 432, ctx.r7.u32);
	// stw r6,436(r31)
	PPC_STORE_U32(r31.u32 + 436, ctx.r6.u32);
	// stw r10,428(r31)
	PPC_STORE_U32(r31.u32 + 428, ctx.r10.u32);
	// stw r10,424(r31)
	PPC_STORE_U32(r31.u32 + 424, ctx.r10.u32);
loc_8271A1A8:
	// subf r11,r30,r27
	r11.s64 = r27.s64 - r30.s64;
	// lwz r9,1240(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1240);
	// addi r10,r27,1
	ctx.r10.s64 = r27.s64 + 1;
	// lhz r23,74(r31)
	r23.u64 = PPC_LOAD_U16(r31.u32 + 74);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lhz r21,76(r31)
	r21.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// srawi r11,r11,31
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7FFFFFFF) != 0);
	r11.s64 = r11.s32 >> 31;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwzx r10,r10,r9
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// lwz r9,92(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// or r10,r11,r10
	ctx.r10.u64 = r11.u64 | ctx.r10.u64;
	// clrlwi r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	// and r11,r10,r11
	r11.u64 = ctx.r10.u64 & r11.u64;
	// rotlwi r10,r23,4
	ctx.r10.u64 = __builtin_rotateleft32(r23.u32, 4);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rotlwi r11,r21,3
	r11.u64 = __builtin_rotateleft32(r21.u32, 3);
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// beq cr6,0x8271a3b8
	if (cr6.eq) goto loc_8271A3B8;
	// lhz r11,50(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 50);
	// lwz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// srawi r26,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r26.s64 = r11.s32 >> 1;
	// lwz r7,188(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// srawi r6,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r6.s64 = ctx.r10.s32 >> 2;
	// lwz r9,192(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 192);
	// rlwinm r8,r10,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r10,r6,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// rotlwi r22,r11,2
	r22.u64 = __builtin_rotateleft32(r11.u32, 2);
	// rotlwi r24,r11,3
	r24.u64 = __builtin_rotateleft32(r11.u32, 3);
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// add r20,r10,r9
	r20.u64 = ctx.r10.u64 + ctx.r9.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x8271a2ac
	if (!cr6.gt) goto loc_8271A2AC;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r28,92(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r30,0
	r30.s64 = 0;
	// subf r25,r10,r8
	r25.s64 = ctx.r8.s64 - ctx.r10.s64;
	// mr r27,r11
	r27.u64 = r11.u64;
loc_8271A25C:
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// bne cr6,0x8271a294
	if (!cr6.eq) goto loc_8271A294;
	// lwz r4,1264(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 1264);
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r11,1268(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1268);
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,1
	ctx.r8.s64 = 1;
	// mr r7,r23
	ctx.r7.u64 = r23.u64;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// add r4,r30,r4
	ctx.r4.u64 = r30.u64 + ctx.r4.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x82611550
	sub_82611550(ctx, base);
loc_8271A294:
	// addi r27,r27,-1
	r27.s64 = r27.s64 + -1;
	// addi r25,r25,4
	r25.s64 = r25.s64 + 4;
	// addi r28,r28,8
	r28.s64 = r28.s64 + 8;
	// addi r30,r30,16
	r30.s64 = r30.s64 + 16;
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// bne cr6,0x8271a25c
	if (!cr6.eq) goto loc_8271A25C;
loc_8271A2AC:
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// ble cr6,0x8271a348
	if (!cr6.gt) goto loc_8271A348;
	// rlwinm r11,r26,2,0,29
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r28,84(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r30,0
	r30.s64 = 0;
	// subf r25,r11,r20
	r25.s64 = r20.s64 - r11.s64;
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// subf r27,r28,r11
	r27.s64 = r11.s64 - r28.s64;
loc_8271A2CC:
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// bne cr6,0x8271a330
	if (!cr6.eq) goto loc_8271A330;
	// lwz r4,1276(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 1276);
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r11,1280(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1280);
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,1
	ctx.r8.s64 = 1;
	// mr r7,r21
	ctx.r7.u64 = r21.u64;
	// add r6,r28,r27
	ctx.r6.u64 = r28.u64 + r27.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// add r4,r30,r4
	ctx.r4.u64 = r30.u64 + ctx.r4.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x82611550
	sub_82611550(ctx, base);
	// lwz r4,1284(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 1284);
	// lwz r11,1288(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1288);
	// li r10,0
	ctx.r10.s64 = 0;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,1
	ctx.r8.s64 = 1;
	// mr r7,r21
	ctx.r7.u64 = r21.u64;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// add r4,r4,r30
	ctx.r4.u64 = ctx.r4.u64 + r30.u64;
	// add r3,r11,r30
	ctx.r3.u64 = r11.u64 + r30.u64;
	// bl 0x82611550
	sub_82611550(ctx, base);
loc_8271A330:
	// addi r26,r26,-1
	r26.s64 = r26.s64 + -1;
	// addi r25,r25,4
	r25.s64 = r25.s64 + 4;
	// addi r28,r28,8
	r28.s64 = r28.s64 + 8;
	// addi r30,r30,16
	r30.s64 = r30.s64 + 16;
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// bne cr6,0x8271a2cc
	if (!cr6.eq) goto loc_8271A2CC;
loc_8271A348:
	// lwz r9,1268(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1268);
	// li r26,0
	r26.s64 = 0;
	// lwz r7,1280(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1280);
	// lwz r6,1288(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 1288);
	// rotlwi r10,r9,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// lwz r8,1272(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1272);
	// lwz r5,1276(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 1276);
	// stw r9,1272(r31)
	PPC_STORE_U32(r31.u32 + 1272, ctx.r9.u32);
	// lwz r9,1284(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1284);
	// stw r7,1276(r31)
	PPC_STORE_U32(r31.u32 + 1276, ctx.r7.u32);
	// rotlwi r7,r7,0
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r7.u32, 0);
	// stw r6,1284(r31)
	PPC_STORE_U32(r31.u32 + 1284, ctx.r6.u32);
	// rotlwi r6,r6,0
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r6.u32, 0);
	// lwz r11,1264(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1264);
	// lwz r27,96(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lbz r28,80(r1)
	r28.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// lwz r30,108(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r22,116(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r25,1860(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1860);
	// stw r8,1268(r31)
	PPC_STORE_U32(r31.u32 + 1268, ctx.r8.u32);
	// stw r5,1280(r31)
	PPC_STORE_U32(r31.u32 + 1280, ctx.r5.u32);
	// stw r9,1288(r31)
	PPC_STORE_U32(r31.u32 + 1288, ctx.r9.u32);
	// stw r11,420(r31)
	PPC_STORE_U32(r31.u32 + 420, r11.u32);
	// stw r11,416(r31)
	PPC_STORE_U32(r31.u32 + 416, r11.u32);
	// stw r7,432(r31)
	PPC_STORE_U32(r31.u32 + 432, ctx.r7.u32);
	// stw r6,436(r31)
	PPC_STORE_U32(r31.u32 + 436, ctx.r6.u32);
	// stw r10,428(r31)
	PPC_STORE_U32(r31.u32 + 428, ctx.r10.u32);
	// stw r10,424(r31)
	PPC_STORE_U32(r31.u32 + 424, ctx.r10.u32);
loc_8271A3B8:
	// addi r27,r27,1
	r27.s64 = r27.s64 + 1;
	// cmpw cr6,r27,r30
	cr6.compare<int32_t>(r27.s32, r30.s32, xer);
	// stw r27,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r27.u32);
	// blt cr6,0x82719b2c
	if (cr6.lt) goto loc_82719B2C;
loc_8271A3C8:
	// lis r11,-32126
	r11.s64 = -2105409536;
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// addi r3,r25,21712
	ctx.r3.s64 = r25.s64 + 21712;
	// lwz r31,3360(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 3360);
	// bl 0x8271d940
	sub_8271D940(ctx, base);
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// addi r10,r31,8
	ctx.r10.s64 = r31.s64 + 8;
	// addi r11,r1,1156
	r11.s64 = ctx.r1.s64 + 1156;
	// lis r7,-32126
	ctx.r7.s64 = -2105409536;
loc_8271A3EC:
	// lwz r9,-8(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + -8);
	// lwz r6,-4(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -4);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271a42c
	if (!cr6.eq) goto loc_8271A42C;
	// lwz r9,-4(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + -4);
	// lwz r6,0(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271a42c
	if (!cr6.eq) goto loc_8271A42C;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// lwz r6,4(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271a42c
	if (!cr6.eq) goto loc_8271A42C;
	// lwz r9,4(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// lwz r6,8(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// beq cr6,0x8271a430
	if (cr6.eq) goto loc_8271A430;
loc_8271A42C:
	// stw r8,-25048(r7)
	PPC_STORE_U32(ctx.r7.u32 + -25048, ctx.r8.u32);
loc_8271A430:
	// lwz r9,8(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// lwz r6,-20(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -20);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271a470
	if (!cr6.eq) goto loc_8271A470;
	// lwz r9,12(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	// lwz r6,-16(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -16);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271a470
	if (!cr6.eq) goto loc_8271A470;
	// lwz r9,16(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	// lwz r6,-12(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -12);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271a470
	if (!cr6.eq) goto loc_8271A470;
	// lwz r9,20(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 20);
	// lwz r6,-8(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -8);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// beq cr6,0x8271a478
	if (cr6.eq) goto loc_8271A478;
loc_8271A470:
	// addi r9,r8,1
	ctx.r9.s64 = ctx.r8.s64 + 1;
	// stw r9,-25048(r7)
	PPC_STORE_U32(ctx.r7.u32 + -25048, ctx.r9.u32);
loc_8271A478:
	// lwz r9,24(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	// lwz r6,-36(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -36);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271a4b8
	if (!cr6.eq) goto loc_8271A4B8;
	// lwz r9,28(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 28);
	// lwz r6,-32(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -32);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271a4b8
	if (!cr6.eq) goto loc_8271A4B8;
	// lwz r9,32(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 32);
	// lwz r6,-28(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -28);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271a4b8
	if (!cr6.eq) goto loc_8271A4B8;
	// lwz r9,36(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 36);
	// lwz r6,-24(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -24);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// beq cr6,0x8271a4c0
	if (cr6.eq) goto loc_8271A4C0;
loc_8271A4B8:
	// addi r9,r8,2
	ctx.r9.s64 = ctx.r8.s64 + 2;
	// stw r9,-25048(r7)
	PPC_STORE_U32(ctx.r7.u32 + -25048, ctx.r9.u32);
loc_8271A4C0:
	// addi r8,r8,3
	ctx.r8.s64 = ctx.r8.s64 + 3;
	// addi r11,r11,-48
	r11.s64 = r11.s64 + -48;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmpwi cr6,r8,9
	cr6.compare<int32_t>(ctx.r8.s32, 9, xer);
	// blt cr6,0x8271a3ec
	if (cr6.lt) goto loc_8271A3EC;
	// clrlwi r11,r28,24
	r11.u64 = r28.u32 & 0xFF;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,2968(r25)
	PPC_STORE_U32(r25.u32 + 2968, r11.u32);
	// addi r1,r1,1840
	ctx.r1.s64 = ctx.r1.s64 + 1840;
	// b 0x8239bd10
	return;
}

__attribute__((alias("__imp__sub_8271A4E8"))) PPC_WEAK_FUNC(sub_8271A4E8);
PPC_FUNC_IMPL(__imp__sub_8271A4E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r11,19976(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 19976);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8271a53c
	if (cr6.eq) goto loc_8271A53C;
	// lwz r11,19980(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 19980);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8271a53c
	if (cr6.eq) goto loc_8271A53C;
	// lwz r11,21000(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 21000);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x8271a53c
	if (!cr6.eq) goto loc_8271A53C;
	// lwz r11,140(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 140);
	// lwz r10,21268(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 21268);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// b 0x8271a540
	goto loc_8271A540;
loc_8271A53C:
	// lwz r11,21268(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 21268);
loc_8271A540:
	// stw r11,21264(r31)
	PPC_STORE_U32(r31.u32 + 21264, r11.u32);
	// lwz r11,2928(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 2928);
	// lwz r8,2940(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 2940);
	// addi r9,r11,726
	ctx.r9.s64 = r11.s64 + 726;
	// lwz r11,2944(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 2944);
	// addi r8,r8,729
	ctx.r8.s64 = ctx.r8.s64 + 729;
	// lwz r10,2088(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 2088);
	// rlwinm r7,r9,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r9,2948(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 2948);
	// addi r11,r11,729
	r11.s64 = r11.s64 + 729;
	// lwz r5,3960(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 3960);
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r6,r11,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r9,r9,729
	ctx.r9.s64 = ctx.r9.s64 + 729;
	// lwzx r11,r7,r31
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + r31.u32);
	// cmpwi cr6,r5,3
	cr6.compare<int32_t>(ctx.r5.s32, 3, xer);
	// rlwinm r7,r9,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r9,r10,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r10,263
	ctx.r10.s64 = ctx.r10.s64 + 263;
	// add r9,r9,r31
	ctx.r9.u64 = ctx.r9.u64 + r31.u64;
	// stw r11,2888(r31)
	PPC_STORE_U32(r31.u32 + 2888, r11.u32);
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// stw r11,2884(r31)
	PPC_STORE_U32(r31.u32 + 2884, r11.u32);
	// stw r11,2880(r31)
	PPC_STORE_U32(r31.u32 + 2880, r11.u32);
	// lwzx r11,r8,r31
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + r31.u32);
	// stw r11,2892(r31)
	PPC_STORE_U32(r31.u32 + 2892, r11.u32);
	// lwzx r11,r6,r31
	r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + r31.u32);
	// stw r11,2896(r31)
	PPC_STORE_U32(r31.u32 + 2896, r11.u32);
	// lwzx r11,r7,r31
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + r31.u32);
	// stw r11,2900(r31)
	PPC_STORE_U32(r31.u32 + 2900, r11.u32);
	// lwz r11,2100(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 2100);
	// stw r11,2092(r31)
	PPC_STORE_U32(r31.u32 + 2092, r11.u32);
	// lwzx r11,r10,r31
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r31.u32);
	// stw r11,2096(r31)
	PPC_STORE_U32(r31.u32 + 2096, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// beq cr6,0x8271a5d4
	if (cr6.eq) goto loc_8271A5D4;
	// li r11,1
	r11.s64 = 1;
loc_8271A5D4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,248(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 248);
	// stw r11,456(r31)
	PPC_STORE_U32(r31.u32 + 456, r11.u32);
	// bl 0x825ebc08
	sub_825EBC08(ctx, base);
	// lwz r11,3960(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 3960);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x8271a5fc
	if (cr6.eq) goto loc_8271A5FC;
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// li r11,0
	r11.s64 = 0;
	// bne cr6,0x8271a600
	if (!cr6.eq) goto loc_8271A600;
loc_8271A5FC:
	// li r11,1
	r11.s64 = 1;
loc_8271A600:
	// lwz r10,1972(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1972);
	// li r5,1
	ctx.r5.s64 = 1;
	// stw r11,76(r10)
	PPC_STORE_U32(ctx.r10.u32 + 76, r11.u32);
	// lwz r4,248(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 248);
	// lwz r3,1972(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 1972);
	// bl 0x8265b9d0
	sub_8265B9D0(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,248(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 248);
	// bl 0x82628f88
	sub_82628F88(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82612140
	sub_82612140(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82615470
	sub_82615470(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8271A650"))) PPC_WEAK_FUNC(sub_8271A650);
PPC_FUNC_IMPL(__imp__sub_8271A650) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcfc
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r30,r31,15920
	r30.s64 = r31.s64 + 15920;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x8271a4e8
	sub_8271A4E8(ctx, base);
	// addi r29,r31,17248
	r29.s64 = r31.s64 + 17248;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// bl 0x82717800
	sub_82717800(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8271a70c
	if (!cr6.eq) goto loc_8271A70C;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82719a18
	sub_82719A18(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8271a70c
	if (!cr6.eq) goto loc_8271A70C;
	// lwz r11,3892(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 3892);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8271a700
	if (cr6.eq) goto loc_8271A700;
	// lwz r9,208(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 208);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r7,204(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 204);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// srawi r9,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 1;
	// lwz r11,17436(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 17436);
	// srawi r6,r7,1
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x1) != 0);
	ctx.r6.s64 = ctx.r7.s32 >> 1;
	// lwz r10,224(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 224);
	// lwz r8,3728(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 3728);
	// mullw r9,r9,r11
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(r11.s32);
	// lwz r30,3724(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 3724);
	// lwz r5,3720(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 3720);
	// lwz r7,220(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 220);
	// mullw r6,r6,r11
	ctx.r6.s64 = int64_t(ctx.r6.s32) * int64_t(r11.s32);
	// add r8,r8,r10
	ctx.r8.u64 = ctx.r8.u64 + ctx.r10.u64;
	// add r11,r30,r10
	r11.u64 = r30.u64 + ctx.r10.u64;
	// add r10,r6,r5
	ctx.r10.u64 = ctx.r6.u64 + ctx.r5.u64;
	// add r6,r11,r9
	ctx.r6.u64 = r11.u64 + ctx.r9.u64;
	// add r5,r10,r7
	ctx.r5.u64 = ctx.r10.u64 + ctx.r7.u64;
	// add r7,r8,r9
	ctx.r7.u64 = ctx.r8.u64 + ctx.r9.u64;
	// bl 0x826124f0
	sub_826124F0(ctx, base);
loc_8271A700:
	// li r11,0
	r11.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,15564(r31)
	PPC_STORE_U32(r31.u32 + 15564, r11.u32);
loc_8271A70C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x8239bd4c
	return;
}

__attribute__((alias("__imp__sub_8271A714"))) PPC_WEAK_FUNC(sub_8271A714);
PPC_FUNC_IMPL(__imp__sub_8271A714) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8271A718"))) PPC_WEAK_FUNC(sub_8271A718);
PPC_FUNC_IMPL(__imp__sub_8271A718) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcc0
	// stwu r1,-416(r1)
	ea = -416 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r17,r3
	r17.u64 = ctx.r3.u64;
	// li r18,0
	r18.s64 = 0;
	// mr r24,r4
	r24.u64 = ctx.r4.u64;
	// mr r16,r5
	r16.u64 = ctx.r5.u64;
	// mr r30,r18
	r30.u64 = r18.u64;
	// lwz r10,2940(r17)
	ctx.r10.u64 = PPC_LOAD_U32(r17.u32 + 2940);
	// lwz r11,2944(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 2944);
	// addi r10,r10,729
	ctx.r10.s64 = ctx.r10.s64 + 729;
	// lwz r9,2948(r17)
	ctx.r9.u64 = PPC_LOAD_U32(r17.u32 + 2948);
	// addi r8,r11,729
	ctx.r8.s64 = r11.s64 + 729;
	// lwz r11,2928(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 2928);
	// rlwinm r7,r10,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r10,2088(r17)
	ctx.r10.u64 = PPC_LOAD_U32(r17.u32 + 2088);
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r31,268(r17)
	r31.u64 = PPC_LOAD_U32(r17.u32 + 268);
	// addi r9,r9,729
	ctx.r9.s64 = ctx.r9.s64 + 729;
	// addi r11,r11,726
	r11.s64 = r11.s64 + 726;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r7,r7,r17
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r7.u32 + r17.u32);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stw r31,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r31.u32);
	// stw r7,2892(r17)
	PPC_STORE_U32(r17.u32 + 2892, ctx.r7.u32);
	// lwzx r8,r8,r17
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + r17.u32);
	// stw r8,2896(r17)
	PPC_STORE_U32(r17.u32 + 2896, ctx.r8.u32);
	// lwzx r9,r9,r17
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + r17.u32);
	// stw r9,2900(r17)
	PPC_STORE_U32(r17.u32 + 2900, ctx.r9.u32);
	// rlwinm r9,r10,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// lwzx r11,r11,r17
	r11.u64 = PPC_LOAD_U32(r11.u32 + r17.u32);
	// addi r10,r10,263
	ctx.r10.s64 = ctx.r10.s64 + 263;
	// add r9,r9,r17
	ctx.r9.u64 = ctx.r9.u64 + r17.u64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// stw r11,2888(r17)
	PPC_STORE_U32(r17.u32 + 2888, r11.u32);
	// stw r11,2884(r17)
	PPC_STORE_U32(r17.u32 + 2884, r11.u32);
	// stw r11,2880(r17)
	PPC_STORE_U32(r17.u32 + 2880, r11.u32);
	// lwz r11,2100(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 2100);
	// stw r11,2092(r17)
	PPC_STORE_U32(r17.u32 + 2092, r11.u32);
	// lwzx r11,r10,r17
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r17.u32);
	// stw r11,2096(r17)
	PPC_STORE_U32(r17.u32 + 2096, r11.u32);
	// bl 0x82615470
	sub_82615470(ctx, base);
	// lwz r11,21556(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 21556);
	// mr r25,r18
	r25.u64 = r18.u64;
	// stw r11,20(r16)
	PPC_STORE_U32(r16.u32 + 20, r11.u32);
	// lwz r11,21568(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 21568);
	// stw r25,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r25.u32);
	// stw r11,24(r16)
	PPC_STORE_U32(r16.u32 + 24, r11.u32);
	// lwz r11,21560(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 21560);
	// stw r11,28(r16)
	PPC_STORE_U32(r16.u32 + 28, r11.u32);
	// lwz r11,21572(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 21572);
	// stw r11,32(r16)
	PPC_STORE_U32(r16.u32 + 32, r11.u32);
	// lhz r11,50(r24)
	r11.u64 = PPC_LOAD_U16(r24.u32 + 50);
	// lwz r10,140(r17)
	ctx.r10.u64 = PPC_LOAD_U32(r17.u32 + 140);
	// rlwinm r11,r11,31,1,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// ble cr6,0x8271c76c
	if (!cr6.gt) goto loc_8271C76C;
	// lis r11,-32244
	r11.s64 = -2113142784;
	// li r15,119
	r15.s64 = 119;
	// addi r20,r11,29840
	r20.s64 = r11.s64 + 29840;
	// lis r11,0
	r11.s64 = 0;
	// lis r21,2
	r21.s64 = 131072;
	// ori r14,r11,32768
	r14.u64 = r11.u64 | 32768;
loc_8271A818:
	// lwz r11,21236(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 21236);
	// li r28,1
	r28.s64 = 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8271aa24
	if (cr6.eq) goto loc_8271AA24;
	// lwz r11,21264(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 21264);
	// rlwinm r10,r25,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r10
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8271aa24
	if (cr6.eq) goto loc_8271AA24;
	// lwz r11,21272(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 21272);
	// lwz r10,84(r17)
	ctx.r10.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,21272(r17)
	PPC_STORE_U32(r17.u32 + 21272, r11.u32);
	// ld r11,104(r24)
	r11.u64 = PPC_LOAD_U64(r24.u32 + 104);
	// std r11,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, r11.u64);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,112(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 112);
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,116(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 116);
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,120(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 120);
	// stw r10,16(r11)
	PPC_STORE_U32(r11.u32 + 16, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,124(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 124);
	// stw r10,20(r11)
	PPC_STORE_U32(r11.u32 + 20, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,128(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 128);
	// stw r10,24(r11)
	PPC_STORE_U32(r11.u32 + 24, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,132(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 132);
	// stw r10,28(r11)
	PPC_STORE_U32(r11.u32 + 28, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,136(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 136);
	// stw r10,32(r11)
	PPC_STORE_U32(r11.u32 + 32, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,140(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 140);
	// stw r10,36(r11)
	PPC_STORE_U32(r11.u32 + 36, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,144(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 144);
	// stw r10,40(r11)
	PPC_STORE_U32(r11.u32 + 40, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,148(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 148);
	// stw r10,44(r11)
	PPC_STORE_U32(r11.u32 + 44, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,152(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 152);
	// stw r10,48(r11)
	PPC_STORE_U32(r11.u32 + 48, ctx.r10.u32);
	// lwz r30,84(r17)
	r30.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r11,28(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 28);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8271a964
	if (cr6.eq) goto loc_8271A964;
	// lwz r10,8(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// mr r29,r28
	r29.u64 = r28.u64;
	// addi r11,r10,16
	r11.s64 = ctx.r10.s64 + 16;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bge cr6,0x8271a93c
	if (!cr6.lt) goto loc_8271A93C;
loc_8271A8FC:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271a93c
	if (cr6.eq) goto loc_8271A93C;
	// ld r9,0(r30)
	ctx.r9.u64 = PPC_LOAD_U64(r30.u32 + 0);
	// clrldi r8,r11,32
	ctx.r8.u64 = r11.u64 & 0xFFFFFFFF;
	// subf. r10,r11,r10
	ctx.r10.s64 = ctx.r10.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// subf r29,r11,r29
	r29.s64 = r29.s64 - r11.s64;
	// stw r10,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r10.u32);
	// sld r11,r9,r8
	r11.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r9.u64 << (ctx.r8.u8 & 0x7F));
	// std r11,0(r30)
	PPC_STORE_U64(r30.u32 + 0, r11.u64);
	// bge 0x8271a92c
	if (!cr0.lt) goto loc_8271A92C;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271A92C:
	// lwz r10,8(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// addi r11,r10,16
	r11.s64 = ctx.r10.s64 + 16;
	// cmplw cr6,r29,r11
	cr6.compare<uint32_t>(r29.u32, r11.u32, xer);
	// bgt cr6,0x8271a8fc
	if (cr6.gt) goto loc_8271A8FC;
loc_8271A93C:
	// ld r9,0(r30)
	ctx.r9.u64 = PPC_LOAD_U64(r30.u32 + 0);
	// clrldi r10,r29,32
	ctx.r10.u64 = r29.u64 & 0xFFFFFFFF;
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// subf. r11,r29,r11
	r11.s64 = r11.s64 - r29.s64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,8(r30)
	PPC_STORE_U32(r30.u32 + 8, r11.u32);
	// sld r10,r9,r10
	ctx.r10.u64 = ctx.r10.u8 & 0x40 ? 0 : (ctx.r9.u64 << (ctx.r10.u8 & 0x7F));
	// std r10,0(r30)
	PPC_STORE_U64(r30.u32 + 0, ctx.r10.u64);
	// bge 0x8271a964
	if (!cr0.lt) goto loc_8271A964;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271A964:
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// clrlwi r4,r11,29
	ctx.r4.u64 = r11.u32 & 0x7;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// mr r3,r17
	ctx.r3.u64 = r17.u64;
	// bl 0x82639b10
	sub_82639B10(ctx, base);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// ld r11,0(r11)
	r11.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// std r11,104(r24)
	PPC_STORE_U64(r24.u32 + 104, r11.u64);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// stw r11,112(r24)
	PPC_STORE_U32(r24.u32 + 112, r11.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// stw r11,116(r24)
	PPC_STORE_U32(r24.u32 + 116, r11.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// stw r11,120(r24)
	PPC_STORE_U32(r24.u32 + 120, r11.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// stw r11,124(r24)
	PPC_STORE_U32(r24.u32 + 124, r11.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// stw r11,128(r24)
	PPC_STORE_U32(r24.u32 + 128, r11.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r11,28(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// stw r11,132(r24)
	PPC_STORE_U32(r24.u32 + 132, r11.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r11,32(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// stw r11,136(r24)
	PPC_STORE_U32(r24.u32 + 136, r11.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// stw r11,140(r24)
	PPC_STORE_U32(r24.u32 + 140, r11.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r11,40(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// stw r11,144(r24)
	PPC_STORE_U32(r24.u32 + 144, r11.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r11,44(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 44);
	// stw r11,148(r24)
	PPC_STORE_U32(r24.u32 + 148, r11.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r11,48(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 48);
	// stw r11,152(r24)
	PPC_STORE_U32(r24.u32 + 152, r11.u32);
	// stw r28,1944(r17)
	PPC_STORE_U32(r17.u32 + 1944, r28.u32);
	// stb r28,1187(r24)
	PPC_STORE_U8(r24.u32 + 1187, r28.u8);
	// bne cr6,0x8271c808
	if (!cr6.eq) goto loc_8271C808;
loc_8271AA24:
	// lwz r11,3932(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 3932);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8271ab74
	if (cr6.eq) goto loc_8271AB74;
	// lwz r11,284(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 284);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x8271ab74
	if (cr6.eq) goto loc_8271AB74;
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// ld r10,104(r24)
	ctx.r10.u64 = PPC_LOAD_U64(r24.u32 + 104);
	// mr r3,r17
	ctx.r3.u64 = r17.u64;
	// std r10,0(r11)
	PPC_STORE_U64(r11.u32 + 0, ctx.r10.u64);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,112(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 112);
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,116(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 116);
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,120(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 120);
	// stw r10,16(r11)
	PPC_STORE_U32(r11.u32 + 16, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,124(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 124);
	// stw r10,20(r11)
	PPC_STORE_U32(r11.u32 + 20, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,128(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 128);
	// stw r10,24(r11)
	PPC_STORE_U32(r11.u32 + 24, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,132(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 132);
	// stw r10,28(r11)
	PPC_STORE_U32(r11.u32 + 28, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,136(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 136);
	// stw r10,32(r11)
	PPC_STORE_U32(r11.u32 + 32, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,140(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 140);
	// stw r10,36(r11)
	PPC_STORE_U32(r11.u32 + 36, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,144(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 144);
	// stw r10,40(r11)
	PPC_STORE_U32(r11.u32 + 40, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,148(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 148);
	// stw r10,44(r11)
	PPC_STORE_U32(r11.u32 + 44, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,152(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 152);
	// stw r10,48(r11)
	PPC_STORE_U32(r11.u32 + 48, ctx.r10.u32);
	// bl 0x82639ef0
	sub_82639EF0(ctx, base);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// ld r11,0(r11)
	r11.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// std r11,104(r24)
	PPC_STORE_U64(r24.u32 + 104, r11.u64);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// stw r11,112(r24)
	PPC_STORE_U32(r24.u32 + 112, r11.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// stw r11,116(r24)
	PPC_STORE_U32(r24.u32 + 116, r11.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// stw r11,120(r24)
	PPC_STORE_U32(r24.u32 + 120, r11.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// stw r11,124(r24)
	PPC_STORE_U32(r24.u32 + 124, r11.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// stw r11,128(r24)
	PPC_STORE_U32(r24.u32 + 128, r11.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r11,28(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// stw r11,132(r24)
	PPC_STORE_U32(r24.u32 + 132, r11.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r11,32(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// stw r11,136(r24)
	PPC_STORE_U32(r24.u32 + 136, r11.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// stw r11,140(r24)
	PPC_STORE_U32(r24.u32 + 140, r11.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r11,40(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// stw r11,144(r24)
	PPC_STORE_U32(r24.u32 + 144, r11.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r11,44(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 44);
	// stw r11,148(r24)
	PPC_STORE_U32(r24.u32 + 148, r11.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r11,48(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 48);
	// stw r11,152(r24)
	PPC_STORE_U32(r24.u32 + 152, r11.u32);
	// bne cr6,0x8271c808
	if (!cr6.eq) goto loc_8271C808;
loc_8271AB74:
	// lwz r10,1240(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 1240);
	// rlwinm r9,r25,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 2) & 0xFFFFFFFC;
	// neg r11,r25
	r11.s64 = -r25.s64;
	// lwz r8,112(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// mr r26,r18
	r26.u64 = r18.u64;
	// srawi r11,r11,31
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7FFFFFFF) != 0);
	r11.s64 = r11.s32 >> 31;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// lwzx r10,r10,r9
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// stw r26,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r26.u32);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, r11.u32);
	// beq cr6,0x8271c758
	if (cr6.eq) goto loc_8271C758;
loc_8271ABAC:
	// lwz r11,0(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// li r10,128
	ctx.r10.s64 = 128;
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// dcbt r10,r11
	// li r10,256
	ctx.r10.s64 = 256;
	// dcbt r10,r11
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm r11,r11,0,15,13
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFDFFFF;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// lwz r11,1308(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 1308);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8271aca4
	if (!cr6.eq) goto loc_8271ACA4;
	// lwz r30,0(r24)
	r30.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// li r29,1
	r29.s64 = 1;
	// mr r28,r18
	r28.u64 = r18.u64;
	// lwz r9,8(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bge cr6,0x8271ac50
	if (!cr6.lt) goto loc_8271AC50;
loc_8271ABF8:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271ac50
	if (cr6.eq) goto loc_8271AC50;
	// subfic r8,r11,64
	xer.ca = r11.u32 <= 64;
	ctx.r8.s64 = 64 - r11.s64;
	// ld r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U64(r30.u32 + 0);
	// subf. r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrldi r8,r8,32
	ctx.r8.u64 = ctx.r8.u64 & 0xFFFFFFFF;
	// subf r29,r11,r29
	r29.s64 = r29.s64 - r11.s64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// stw r9,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r9.u32);
	// srd r8,r10,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r10.u64 >> (ctx.r8.u8 & 0x7F));
	// sld r11,r10,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 << (r11.u8 & 0x7F));
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r11,0(r30)
	PPC_STORE_U64(r30.u32 + 0, r11.u64);
	// slw r11,r10,r29
	r11.u64 = r29.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r29.u8 & 0x3F));
	// add r28,r11,r28
	r28.u64 = r11.u64 + r28.u64;
	// bge 0x8271ac40
	if (!cr0.lt) goto loc_8271AC40;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271AC40:
	// lwz r9,8(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplw cr6,r29,r11
	cr6.compare<uint32_t>(r29.u32, r11.u32, xer);
	// bgt cr6,0x8271abf8
	if (cr6.gt) goto loc_8271ABF8;
loc_8271AC50:
	// subfic r9,r29,64
	xer.ca = r29.u32 <= 64;
	ctx.r9.s64 = 64 - r29.s64;
	// ld r11,0(r30)
	r11.u64 = PPC_LOAD_U64(r30.u32 + 0);
	// clrldi r8,r29,32
	ctx.r8.u64 = r29.u64 & 0xFFFFFFFF;
	// lwz r10,8(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// clrldi r9,r9,32
	ctx.r9.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// subf. r10,r29,r10
	ctx.r10.s64 = ctx.r10.s64 - r29.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r10.u32);
	// sld r8,r11,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// srd r9,r11,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r9.u8 & 0x7F));
	// rotlwi r11,r9,0
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// add r29,r11,r28
	r29.u64 = r11.u64 + r28.u64;
	// std r8,0(r30)
	PPC_STORE_U64(r30.u32 + 0, ctx.r8.u64);
	// bge 0x8271ac8c
	if (!cr0.lt) goto loc_8271AC8C;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271AC8C:
	// cntlzw r11,r29
	r11.u64 = r29.u32 == 0 ? 32 : __builtin_clz(r29.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm r11,r11,27,31,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// rlwimi r10,r11,16,15,15
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 16) & 0x10000) | (ctx.r10.u64 & 0xFFFFFFFFFFFEFFFF);
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
loc_8271ACA4:
	// lwz r11,1168(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 1168);
	// lwz r30,0(r24)
	r30.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// lbz r4,8(r11)
	ctx.r4.u64 = PPC_LOAD_U8(r11.u32 + 8);
	// lwz r28,0(r11)
	r28.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// subfic r11,r4,64
	xer.ca = ctx.r4.u32 <= 64;
	r11.s64 = 64 - ctx.r4.s64;
	// ld r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U64(r30.u32 + 0);
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// srd r11,r10,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 >> (r11.u8 & 0x7F));
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r11,r28
	r11.u64 = PPC_LOAD_U16(r11.u32 + r28.u32);
	// extsh r29,r11
	r29.s64 = r11.s16;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// blt cr6,0x8271ad98
	if (cr6.lt) goto loc_8271AD98;
	// clrlwi r11,r29,28
	r11.u64 = r29.u32 & 0xF;
	// lwz r9,8(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// cmpw cr6,r9,r11
	cr6.compare<int32_t>(ctx.r9.s32, r11.s32, xer);
	// sld r10,r10,r11
	ctx.r10.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 << (r11.u8 & 0x7F));
	// std r10,0(r30)
	PPC_STORE_U64(r30.u32 + 0, ctx.r10.u64);
	// subf r10,r11,r9
	ctx.r10.s64 = ctx.r9.s64 - r11.s64;
	// stw r10,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r10.u32);
	// bge cr6,0x8271ad90
	if (!cr6.lt) goto loc_8271AD90;
loc_8271ACF8:
	// lwz r10,16(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 16);
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// addi r10,r10,-4
	ctx.r10.s64 = ctx.r10.s64 + -4;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x8271ad24
	if (cr6.lt) goto loc_8271AD24;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x825eb840
	sub_825EB840(ctx, base);
	// cmplwi cr6,r3,1
	cr6.compare<uint32_t>(ctx.r3.u32, 1, xer);
	// beq cr6,0x8271acf8
	if (cr6.eq) goto loc_8271ACF8;
	// srawi r29,r29,4
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0xF) != 0);
	r29.s64 = r29.s32 >> 4;
	// b 0x8271add4
	goto loc_8271ADD4;
loc_8271AD24:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r4,r11,6
	ctx.r4.s64 = r11.s64 + 6;
	// lbz r8,1(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 1);
	// rldicr r9,r9,8,63
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u64, 8) & 0xFFFFFFFFFFFFFFFF;
	// lbz r5,2(r11)
	ctx.r5.u64 = PPC_LOAD_U8(r11.u32 + 2);
	// lbz r6,3(r11)
	ctx.r6.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// lbz r8,5(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 5);
	// lbz r7,4(r11)
	ctx.r7.u64 = PPC_LOAD_U8(r11.u32 + 4);
	// rldicr r11,r9,8,55
	r11.u64 = __builtin_rotateleft64(ctx.r9.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// lwz r10,8(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// ld r9,0(r30)
	ctx.r9.u64 = PPC_LOAD_U64(r30.u32 + 0);
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// stw r4,12(r30)
	PPC_STORE_U32(r30.u32 + 12, ctx.r4.u32);
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// neg r8,r10
	ctx.r8.s64 = -ctx.r10.s64;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// extsw r8,r8
	ctx.r8.s64 = ctx.r8.s32;
	// stw r10,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r10.u32);
	// sld r11,r11,r8
	r11.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// std r11,0(r30)
	PPC_STORE_U64(r30.u32 + 0, r11.u64);
loc_8271AD90:
	// srawi r29,r29,4
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0xF) != 0);
	r29.s64 = r29.s32 >> 4;
	// b 0x8271add4
	goto loc_8271ADD4;
loc_8271AD98:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
loc_8271ADA0:
	// ld r11,0(r30)
	r11.u64 = PPC_LOAD_U64(r30.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rldicl r11,r11,1,63
	r11.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// add r29,r11,r29
	r29.u64 = r11.u64 + r29.u64;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
	// add r11,r29,r14
	r11.u64 = r29.u64 + r14.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r11,r28
	r11.u64 = PPC_LOAD_U16(r11.u32 + r28.u32);
	// extsh r29,r11
	r29.s64 = r11.s16;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// blt cr6,0x8271ada0
	if (cr6.lt) goto loc_8271ADA0;
loc_8271ADD4:
	// cmplwi cr6,r29,63
	cr6.compare<uint32_t>(r29.u32, 63, xer);
	// bgt cr6,0x8271c814
	if (cr6.gt) goto loc_8271C814;
	// lwz r3,0(r24)
	ctx.r3.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// lwz r11,20(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8271c814
	if (!cr6.eq) goto loc_8271C814;
	// lhz r11,50(r24)
	r11.u64 = PPC_LOAD_U16(r24.u32 + 50);
	// mr r8,r18
	ctx.r8.u64 = r18.u64;
	// lwz r9,1200(r24)
	ctx.r9.u64 = PPC_LOAD_U32(r24.u32 + 1200);
	// mr r10,r18
	ctx.r10.u64 = r18.u64;
	// lwz r27,168(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// rlwinm r11,r11,31,1,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFF;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// and r11,r11,r27
	r11.u64 = r11.u64 & r27.u64;
	// lbzx r7,r9,r29
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r9.u32 + r29.u32);
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r11,r11,r31
	r11.s64 = r31.s64 - r11.s64;
	// lbz r9,5(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 5);
	// and r9,r9,r27
	ctx.r9.u64 = ctx.r9.u64 & r27.u64;
	// beq cr6,0x8271ae38
	if (cr6.eq) goto loc_8271AE38;
	// lbz r11,-15(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + -15);
	// lbz r10,-15(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + -15);
	// and r8,r11,r27
	ctx.r8.u64 = r11.u64 & r27.u64;
loc_8271AE38:
	// mr r11,r9
	r11.u64 = ctx.r9.u64;
	// lwz r6,1196(r24)
	ctx.r6.u64 = PPC_LOAD_U32(r24.u32 + 1196);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// rlwimi r11,r10,0,30,30
	r11.u64 = (__builtin_rotateleft32(ctx.r10.u32, 0) & 0x2) | (r11.u64 & 0xFFFFFFFFFFFFFFFD);
	// rlwinm r10,r8,0,28,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x8;
	// rlwimi r5,r11,3,26,27
	ctx.r5.u64 = (__builtin_rotateleft32(r11.u32, 3) & 0x30) | (ctx.r5.u64 & 0xFFFFFFFFFFFFFFCF);
	// rlwinm r11,r9,0,28,28
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x8;
	// clrlwi r8,r7,28
	ctx.r8.u64 = ctx.r7.u32 & 0xF;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// rlwinm r11,r5,1,25,27
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 1) & 0x70;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// or r11,r11,r8
	r11.u64 = r11.u64 | ctx.r8.u64;
	// lbzx r11,r11,r6
	r11.u64 = PPC_LOAD_U8(r11.u32 + ctx.r6.u32);
	// beq cr6,0x8271ae78
	if (cr6.eq) goto loc_8271AE78;
	// rlwinm r11,r11,28,4,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 28) & 0xFFFFFFF;
loc_8271AE78:
	// lbz r10,1190(r24)
	ctx.r10.u64 = PPC_LOAD_U8(r24.u32 + 1190);
	// rlwimi r11,r7,0,24,27
	r11.u64 = (__builtin_rotateleft32(ctx.r7.u32, 0) & 0xF0) | (r11.u64 & 0xFFFFFFFFFFFFFF0F);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// clrlwi r29,r11,24
	r29.u64 = r11.u32 & 0xFF;
	// bne cr6,0x8271aec4
	if (!cr6.eq) goto loc_8271AEC4;
	// ld r11,0(r3)
	r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// lwz r10,8(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// rldicl r8,r11,1,63
	ctx.r8.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// addic. r11,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	r11.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// rotlwi r30,r8,0
	r30.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r9,0(r3)
	PPC_STORE_U64(ctx.r3.u32 + 0, ctx.r9.u64);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// bge 0x8271aeb4
	if (!cr0.lt) goto loc_8271AEB4;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271AEB4:
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// clrlwi r11,r30,24
	r11.u64 = r30.u32 & 0xFF;
	// rlwimi r10,r11,3,27,28
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 3) & 0x18) | (ctx.r10.u64 & 0xFFFFFFFFFFFFFFE7);
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
loc_8271AEC4:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// stb r29,5(r31)
	PPC_STORE_U8(r31.u32 + 5, r29.u8);
	// rlwinm r11,r11,0,10,7
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFF3FFFFF;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// lbz r11,28(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271af5c
	if (cr6.eq) goto loc_8271AF5C;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x8271af5c
	if (cr6.eq) goto loc_8271AF5C;
	// lwz r3,0(r24)
	ctx.r3.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// ld r11,0(r3)
	r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// lwz r10,8(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// rldicl r8,r11,1,63
	ctx.r8.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// addic. r11,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	r11.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// rotlwi r29,r8,0
	r29.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r9,0(r3)
	PPC_STORE_U64(ctx.r3.u32 + 0, ctx.r9.u64);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// bge 0x8271af14
	if (!cr0.lt) goto loc_8271AF14;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271AF14:
	// mr r11,r29
	r11.u64 = r29.u64;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// beq cr6,0x8271af50
	if (cr6.eq) goto loc_8271AF50;
	// lwz r3,0(r24)
	ctx.r3.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// ld r11,0(r3)
	r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// lwz r10,8(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// rldicl r8,r11,1,63
	ctx.r8.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// addic. r11,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	r11.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// rotlwi r30,r8,0
	r30.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r9,0(r3)
	PPC_STORE_U64(ctx.r3.u32 + 0, ctx.r9.u64);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// bge 0x8271af4c
	if (!cr0.lt) goto loc_8271AF4C;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271AF4C:
	// add r11,r30,r29
	r11.u64 = r30.u64 + r29.u64;
loc_8271AF50:
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwimi r10,r11,22,8,9
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 22) & 0xC00000) | (ctx.r10.u64 & 0xFFFFFFFFFF3FFFFF);
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
loc_8271AF5C:
	// lbz r11,33(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 33);
	// rlwinm r11,r11,0,29,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271afb0
	if (cr6.eq) goto loc_8271AFB0;
	// lbz r11,1191(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 1191);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8271afb0
	if (!cr6.eq) goto loc_8271AFB0;
	// lwz r3,0(r24)
	ctx.r3.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// ld r11,0(r3)
	r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// lwz r10,8(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// rldicl r8,r11,1,63
	ctx.r8.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// addic. r11,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	r11.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// rotlwi r30,r8,0
	r30.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r9,0(r3)
	PPC_STORE_U64(ctx.r3.u32 + 0, ctx.r9.u64);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// bge 0x8271afa4
	if (!cr0.lt) goto loc_8271AFA4;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271AFA4:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwimi r11,r30,11,20,20
	r11.u64 = (__builtin_rotateleft32(r30.u32, 11) & 0x800) | (r11.u64 & 0xFFFFFFFFFFFFF7FF);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
loc_8271AFB0:
	// lbz r11,24(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 24);
	// stb r11,4(r31)
	PPC_STORE_U8(r31.u32 + 4, r11.u8);
	// lbz r11,27(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 27);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271b27c
	if (cr6.eq) goto loc_8271B27C;
	// lbz r11,1181(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 1181);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271b008
	if (cr6.eq) goto loc_8271B008;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm r10,r10,20,12,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 20) & 0xFFFFF;
	// and r11,r10,r11
	r11.u64 = ctx.r10.u64 & r11.u64;
	// clrlwi r11,r11,28
	r11.u64 = r11.u32 & 0xF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271aff4
	if (cr6.eq) goto loc_8271AFF4;
	// lbz r11,1182(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 1182);
	// rotlwi r11,r11,1
	r11.u64 = __builtin_rotateleft32(r11.u32, 1);
	// b 0x8271b260
	goto loc_8271B260;
loc_8271AFF4:
	// lbz r11,1180(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 1180);
	// lbz r10,1185(r24)
	ctx.r10.u64 = PPC_LOAD_U8(r24.u32 + 1185);
	// rotlwi r11,r11,1
	r11.u64 = __builtin_rotateleft32(r11.u32, 1);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// b 0x8271b260
	goto loc_8271B260;
loc_8271B008:
	// lwz r30,0(r24)
	r30.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// mr r28,r18
	r28.u64 = r18.u64;
	// lbz r11,1186(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 1186);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r9,8(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// beq cr6,0x8271b0f4
	if (cr6.eq) goto loc_8271B0F4;
	// li r29,1
	r29.s64 = 1;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bge cr6,0x8271b088
	if (!cr6.lt) goto loc_8271B088;
loc_8271B030:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271b088
	if (cr6.eq) goto loc_8271B088;
	// subfic r8,r11,64
	xer.ca = r11.u32 <= 64;
	ctx.r8.s64 = 64 - r11.s64;
	// ld r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U64(r30.u32 + 0);
	// subf. r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrldi r8,r8,32
	ctx.r8.u64 = ctx.r8.u64 & 0xFFFFFFFF;
	// subf r29,r11,r29
	r29.s64 = r29.s64 - r11.s64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// stw r9,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r9.u32);
	// srd r8,r10,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r10.u64 >> (ctx.r8.u8 & 0x7F));
	// sld r11,r10,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 << (r11.u8 & 0x7F));
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r11,0(r30)
	PPC_STORE_U64(r30.u32 + 0, r11.u64);
	// slw r11,r10,r29
	r11.u64 = r29.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r29.u8 & 0x3F));
	// add r28,r11,r28
	r28.u64 = r11.u64 + r28.u64;
	// bge 0x8271b078
	if (!cr0.lt) goto loc_8271B078;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271B078:
	// lwz r9,8(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplw cr6,r29,r11
	cr6.compare<uint32_t>(r29.u32, r11.u32, xer);
	// bgt cr6,0x8271b030
	if (cr6.gt) goto loc_8271B030;
loc_8271B088:
	// subfic r9,r29,64
	xer.ca = r29.u32 <= 64;
	ctx.r9.s64 = 64 - r29.s64;
	// ld r11,0(r30)
	r11.u64 = PPC_LOAD_U64(r30.u32 + 0);
	// clrldi r8,r29,32
	ctx.r8.u64 = r29.u64 & 0xFFFFFFFF;
	// lwz r10,8(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// clrldi r9,r9,32
	ctx.r9.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// subf. r10,r29,r10
	ctx.r10.s64 = ctx.r10.s64 - r29.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r10.u32);
	// sld r8,r11,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// srd r9,r11,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r9.u8 & 0x7F));
	// rotlwi r11,r9,0
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// add r29,r11,r28
	r29.u64 = r11.u64 + r28.u64;
	// std r8,0(r30)
	PPC_STORE_U64(r30.u32 + 0, ctx.r8.u64);
	// bge 0x8271b0c4
	if (!cr0.lt) goto loc_8271B0C4;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271B0C4:
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x8271b0dc
	if (cr6.eq) goto loc_8271B0DC;
	// lbz r11,1182(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 1182);
	// rotlwi r11,r11,1
	r11.u64 = __builtin_rotateleft32(r11.u32, 1);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// b 0x8271b264
	goto loc_8271B264;
loc_8271B0DC:
	// lbz r11,1180(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 1180);
	// lbz r10,1185(r24)
	ctx.r10.u64 = PPC_LOAD_U8(r24.u32 + 1185);
	// rotlwi r11,r11,1
	r11.u64 = __builtin_rotateleft32(r11.u32, 1);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// b 0x8271b264
	goto loc_8271B264;
loc_8271B0F4:
	// li r29,3
	r29.s64 = 3;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bge cr6,0x8271b158
	if (!cr6.lt) goto loc_8271B158;
loc_8271B100:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271b158
	if (cr6.eq) goto loc_8271B158;
	// subfic r8,r11,64
	xer.ca = r11.u32 <= 64;
	ctx.r8.s64 = 64 - r11.s64;
	// ld r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U64(r30.u32 + 0);
	// subf. r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrldi r8,r8,32
	ctx.r8.u64 = ctx.r8.u64 & 0xFFFFFFFF;
	// subf r29,r11,r29
	r29.s64 = r29.s64 - r11.s64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// stw r9,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r9.u32);
	// srd r8,r10,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r10.u64 >> (ctx.r8.u8 & 0x7F));
	// sld r11,r10,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 << (r11.u8 & 0x7F));
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r11,0(r30)
	PPC_STORE_U64(r30.u32 + 0, r11.u64);
	// slw r11,r10,r29
	r11.u64 = r29.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r29.u8 & 0x3F));
	// add r28,r11,r28
	r28.u64 = r11.u64 + r28.u64;
	// bge 0x8271b148
	if (!cr0.lt) goto loc_8271B148;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271B148:
	// lwz r9,8(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplw cr6,r29,r11
	cr6.compare<uint32_t>(r29.u32, r11.u32, xer);
	// bgt cr6,0x8271b100
	if (cr6.gt) goto loc_8271B100;
loc_8271B158:
	// subfic r9,r29,64
	xer.ca = r29.u32 <= 64;
	ctx.r9.s64 = 64 - r29.s64;
	// ld r11,0(r30)
	r11.u64 = PPC_LOAD_U64(r30.u32 + 0);
	// clrldi r8,r29,32
	ctx.r8.u64 = r29.u64 & 0xFFFFFFFF;
	// lwz r10,8(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// clrldi r9,r9,32
	ctx.r9.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// subf. r10,r29,r10
	ctx.r10.s64 = ctx.r10.s64 - r29.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r10.u32);
	// sld r8,r11,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// srd r9,r11,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r9.u8 & 0x7F));
	// rotlwi r11,r9,0
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// add r29,r11,r28
	r29.u64 = r11.u64 + r28.u64;
	// std r8,0(r30)
	PPC_STORE_U64(r30.u32 + 0, ctx.r8.u64);
	// bge 0x8271b194
	if (!cr0.lt) goto loc_8271B194;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271B194:
	// cmpwi cr6,r29,7
	cr6.compare<int32_t>(r29.s32, 7, xer);
	// bne cr6,0x8271b254
	if (!cr6.eq) goto loc_8271B254;
	// lwz r30,0(r24)
	r30.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// li r29,5
	r29.s64 = 5;
	// mr r28,r18
	r28.u64 = r18.u64;
	// lwz r9,8(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplwi cr6,r11,5
	cr6.compare<uint32_t>(r11.u32, 5, xer);
	// bge cr6,0x8271b210
	if (!cr6.lt) goto loc_8271B210;
loc_8271B1B8:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271b210
	if (cr6.eq) goto loc_8271B210;
	// subfic r8,r11,64
	xer.ca = r11.u32 <= 64;
	ctx.r8.s64 = 64 - r11.s64;
	// ld r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U64(r30.u32 + 0);
	// subf. r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrldi r8,r8,32
	ctx.r8.u64 = ctx.r8.u64 & 0xFFFFFFFF;
	// subf r29,r11,r29
	r29.s64 = r29.s64 - r11.s64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// stw r9,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r9.u32);
	// srd r8,r10,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r10.u64 >> (ctx.r8.u8 & 0x7F));
	// sld r11,r10,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 << (r11.u8 & 0x7F));
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r11,0(r30)
	PPC_STORE_U64(r30.u32 + 0, r11.u64);
	// slw r11,r10,r29
	r11.u64 = r29.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r29.u8 & 0x3F));
	// add r28,r11,r28
	r28.u64 = r11.u64 + r28.u64;
	// bge 0x8271b200
	if (!cr0.lt) goto loc_8271B200;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271B200:
	// lwz r9,8(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplw cr6,r29,r11
	cr6.compare<uint32_t>(r29.u32, r11.u32, xer);
	// bgt cr6,0x8271b1b8
	if (cr6.gt) goto loc_8271B1B8;
loc_8271B210:
	// subfic r9,r29,64
	xer.ca = r29.u32 <= 64;
	ctx.r9.s64 = 64 - r29.s64;
	// ld r11,0(r30)
	r11.u64 = PPC_LOAD_U64(r30.u32 + 0);
	// clrldi r8,r29,32
	ctx.r8.u64 = r29.u64 & 0xFFFFFFFF;
	// lwz r10,8(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 8);
	// clrldi r9,r9,32
	ctx.r9.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// subf. r10,r29,r10
	ctx.r10.s64 = ctx.r10.s64 - r29.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r10.u32);
	// sld r8,r11,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// srd r9,r11,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r9.u8 & 0x7F));
	// rotlwi r11,r9,0
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// add r29,r11,r28
	r29.u64 = r11.u64 + r28.u64;
	// std r8,0(r30)
	PPC_STORE_U64(r30.u32 + 0, ctx.r8.u64);
	// bge 0x8271b24c
	if (!cr0.lt) goto loc_8271B24C;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271B24C:
	// mr r11,r29
	r11.u64 = r29.u64;
	// b 0x8271b25c
	goto loc_8271B25C;
loc_8271B254:
	// lbz r11,1180(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 1180);
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
loc_8271B25C:
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
loc_8271B260:
	// addi r11,r11,255
	r11.s64 = r11.s64 + 255;
loc_8271B264:
	// stb r11,4(r31)
	PPC_STORE_U8(r31.u32 + 4, r11.u8);
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// blt cr6,0x8271c814
	if (cr6.lt) goto loc_8271C814;
	// cmplwi cr6,r11,62
	cr6.compare<uint32_t>(r11.u32, 62, xer);
	// bgt cr6,0x8271c814
	if (cr6.gt) goto loc_8271C814;
loc_8271B27C:
	// lbz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// neg r19,r27
	r19.s64 = -r27.s64;
	// lwz r9,220(r24)
	ctx.r9.u64 = PPC_LOAD_U32(r24.u32 + 220);
	// mr r27,r18
	r27.u64 = r18.u64;
	// rotlwi r8,r10,2
	ctx.r8.u64 = __builtin_rotateleft32(ctx.r10.u32, 2);
	// lbz r11,5(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// addi r22,r24,248
	r22.s64 = r24.s64 + 248;
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// stw r27,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r27.u32);
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r11.u32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r10,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r10.u32);
	// b 0x8271b2bc
	goto loc_8271B2BC;
loc_8271B2B4:
	// lwz r25,80(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r26,92(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
loc_8271B2BC:
	// srawi r9,r27,1
	xer.ca = (r27.s32 < 0) & ((r27.u32 & 0x1) != 0);
	ctx.r9.s64 = r27.s32 >> 1;
	// lhz r6,50(r24)
	ctx.r6.u64 = PPC_LOAD_U16(r24.u32 + 50);
	// rlwinm r5,r25,1,0,30
	ctx.r5.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r3,1160(r24)
	ctx.r3.u64 = PPC_LOAD_U32(r24.u32 + 1160);
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// lwz r8,0(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// add r5,r5,r9
	ctx.r5.u64 = ctx.r5.u64 + ctx.r9.u64;
	// lwz r7,264(r24)
	ctx.r7.u64 = PPC_LOAD_U32(r24.u32 + 264);
	// rlwinm r4,r26,1,0,30
	ctx.r4.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 1) & 0xFFFFFFFE;
	// stw r22,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, r22.u32);
	// mullw r5,r5,r6
	ctx.r5.s64 = int64_t(ctx.r5.s32) * int64_t(ctx.r6.s32);
	// stw r15,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r15.u32);
	// stw r3,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r3.u32);
	// stw r11,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, r11.u32);
	// lwz r3,100(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r3,16(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// clrlwi r10,r27,31
	ctx.r10.u64 = r27.u32 & 0x1;
	// add r5,r5,r4
	ctx.r5.u64 = ctx.r5.u64 + ctx.r4.u64;
	// rlwinm r11,r8,29,30,31
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 29) & 0x3;
	// add r8,r10,r26
	ctx.r8.u64 = ctx.r10.u64 + r26.u64;
	// add r10,r5,r10
	ctx.r10.u64 = ctx.r5.u64 + ctx.r10.u64;
	// stw r3,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r3.u32);
	// rotlwi r30,r6,5
	r30.u64 = __builtin_rotateleft32(ctx.r6.u32, 5);
	// rlwinm r10,r10,5,0,26
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 5) & 0xFFFFFFE0;
	// mr r3,r18
	ctx.r3.u64 = r18.u64;
	// stw r11,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r11.u32);
	// add r9,r9,r19
	ctx.r9.u64 = ctx.r9.u64 + r19.u64;
	// add r10,r10,r7
	ctx.r10.u64 = ctx.r10.u64 + ctx.r7.u64;
	// mr r11,r18
	r11.u64 = r18.u64;
	// addi r29,r10,-16
	r29.s64 = ctx.r10.s64 + -16;
	// subf r30,r30,r10
	r30.s64 = ctx.r10.s64 - r30.s64;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// stw r10,188(r1)
	PPC_STORE_U32(ctx.r1.u32 + 188, ctx.r10.u32);
	// beq cr6,0x8271b548
	if (cr6.eq) goto loc_8271B548;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x8271b53c
	if (cr6.eq) goto loc_8271B53C;
	// lhz r11,-32(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + -32);
	// lhz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U16(r30.u32 + 0);
	// extsh r9,r11
	ctx.r9.s64 = r11.s16;
	// lhz r8,0(r29)
	ctx.r8.u64 = PPC_LOAD_U16(r29.u32 + 0);
	// lbz r11,27(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 27);
	// extsh r5,r10
	ctx.r5.s64 = ctx.r10.s16;
	// extsh r4,r8
	ctx.r4.s64 = ctx.r8.s16;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271b514
	if (cr6.eq) goto loc_8271B514;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// beq cr6,0x8271b464
	if (cr6.eq) goto loc_8271B464;
	// cmpwi cr6,r27,4
	cr6.compare<int32_t>(r27.s32, 4, xer);
	// beq cr6,0x8271b464
	if (cr6.eq) goto loc_8271B464;
	// cmpwi cr6,r27,5
	cr6.compare<int32_t>(r27.s32, 5, xer);
	// beq cr6,0x8271b464
	if (cr6.eq) goto loc_8271B464;
	// cmpwi cr6,r27,1
	cr6.compare<int32_t>(r27.s32, 1, xer);
	// bne cr6,0x8271b400
	if (!cr6.eq) goto loc_8271B400;
	// rlwinm r11,r6,31,1,31
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 31) & 0x7FFFFFFF;
	// lbz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// lwz r8,220(r24)
	ctx.r8.u64 = PPC_LOAD_U32(r24.u32 + 220);
	// rlwinm r7,r11,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r7,r11,r7
	ctx.r7.u64 = r11.u64 + ctx.r7.u64;
	// rotlwi r11,r10,2
	r11.u64 = __builtin_rotateleft32(ctx.r10.u32, 2);
	// rlwinm r7,r7,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// subf r10,r7,r31
	ctx.r10.s64 = r31.s64 - ctx.r7.s64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r7,r11,r8
	ctx.r7.u64 = r11.u64 + ctx.r8.u64;
	// lbz r11,4(r10)
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + 4);
	// lwz r10,16(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + 16);
	// rotlwi r7,r11,2
	ctx.r7.u64 = __builtin_rotateleft32(r11.u32, 2);
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// lwzx r10,r10,r20
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r20.u32);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mullw r11,r11,r10
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r10.s32);
	// mullw r10,r9,r11
	ctx.r10.s64 = int64_t(ctx.r9.s32) * int64_t(r11.s32);
	// mullw r11,r5,r11
	r11.s64 = int64_t(ctx.r5.s32) * int64_t(r11.s32);
	// add r10,r10,r21
	ctx.r10.u64 = ctx.r10.u64 + r21.u64;
	// add r11,r11,r21
	r11.u64 = r11.u64 + r21.u64;
	// srawi r9,r10,18
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3FFFF) != 0);
	ctx.r9.s64 = ctx.r10.s32 >> 18;
	// srawi r5,r11,18
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3FFFF) != 0);
	ctx.r5.s64 = r11.s32 >> 18;
	// b 0x8271b514
	goto loc_8271B514;
loc_8271B400:
	// cmpwi cr6,r27,2
	cr6.compare<int32_t>(r27.s32, 2, xer);
	// bne cr6,0x8271b514
	if (!cr6.eq) goto loc_8271B514;
	// lbz r11,4(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// lbz r8,-16(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + -16);
	// rotlwi r7,r11,2
	ctx.r7.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwz r10,220(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 220);
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// rotlwi r7,r8,2
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r8.u32, 2);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// add r7,r11,r10
	ctx.r7.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r8,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// lwz r11,16(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 16);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r10,16(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	// lwzx r11,r11,r20
	r11.u64 = PPC_LOAD_U32(r11.u32 + r20.u32);
	// mullw r11,r10,r11
	r11.s64 = int64_t(ctx.r10.s32) * int64_t(r11.s32);
	// mullw r10,r9,r11
	ctx.r10.s64 = int64_t(ctx.r9.s32) * int64_t(r11.s32);
	// mullw r11,r4,r11
	r11.s64 = int64_t(ctx.r4.s32) * int64_t(r11.s32);
	// add r10,r10,r21
	ctx.r10.u64 = ctx.r10.u64 + r21.u64;
	// add r11,r11,r21
	r11.u64 = r11.u64 + r21.u64;
	// srawi r9,r10,18
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3FFFF) != 0);
	ctx.r9.s64 = ctx.r10.s32 >> 18;
	// srawi r4,r11,18
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3FFFF) != 0);
	ctx.r4.s64 = r11.s32 >> 18;
	// b 0x8271b514
	goto loc_8271B514;
loc_8271B464:
	// rlwinm r10,r6,31,1,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 31) & 0x7FFFFFFF;
	// lbz r8,4(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// lwz r11,220(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 220);
	// rlwinm r3,r10,2,0,29
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r7,-16(r31)
	ctx.r7.u64 = PPC_LOAD_U8(r31.u32 + -16);
	// add r3,r10,r3
	ctx.r3.u64 = ctx.r10.u64 + ctx.r3.u64;
	// rotlwi r10,r8,2
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 2);
	// rlwinm r3,r3,2,0,29
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// add r8,r8,r10
	ctx.r8.u64 = ctx.r8.u64 + ctx.r10.u64;
	// subf r10,r3,r31
	ctx.r10.s64 = r31.s64 - ctx.r3.s64;
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r8,r11
	ctx.r3.u64 = ctx.r8.u64 + r11.u64;
	// rotlwi r8,r7,2
	ctx.r8.u64 = __builtin_rotateleft32(ctx.r7.u32, 2);
	// add r8,r7,r8
	ctx.r8.u64 = ctx.r7.u64 + ctx.r8.u64;
	// lbz r7,4(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + 4);
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r3,16(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// add r8,r8,r11
	ctx.r8.u64 = ctx.r8.u64 + r11.u64;
	// lwz r8,16(r8)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + 16);
	// mullw r28,r8,r4
	r28.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r4.s32);
	// lbz r8,-16(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + -16);
	// rlwinm r10,r3,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// rotlwi r3,r8,2
	ctx.r3.u64 = __builtin_rotateleft32(ctx.r8.u32, 2);
	// rotlwi r4,r7,2
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r7.u32, 2);
	// add r8,r8,r3
	ctx.r8.u64 = ctx.r8.u64 + ctx.r3.u64;
	// add r4,r7,r4
	ctx.r4.u64 = ctx.r7.u64 + ctx.r4.u64;
	// rlwinm r7,r8,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r8,r4,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r10,r20
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r20.u32);
	// add r7,r7,r11
	ctx.r7.u64 = ctx.r7.u64 + r11.u64;
	// add r11,r8,r11
	r11.u64 = ctx.r8.u64 + r11.u64;
	// lwz r8,16(r7)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r7.u32 + 16);
	// mullw r7,r28,r10
	ctx.r7.s64 = int64_t(r28.s32) * int64_t(ctx.r10.s32);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mullw r9,r8,r9
	ctx.r9.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r9.s32);
	// mullw r11,r11,r5
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r5.s32);
	// mullw r9,r9,r10
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r10.s32);
	// mullw r11,r11,r10
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r10.s32);
	// add r10,r9,r21
	ctx.r10.u64 = ctx.r9.u64 + r21.u64;
	// add r11,r11,r21
	r11.u64 = r11.u64 + r21.u64;
	// add r8,r7,r21
	ctx.r8.u64 = ctx.r7.u64 + r21.u64;
	// srawi r9,r10,18
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3FFFF) != 0);
	ctx.r9.s64 = ctx.r10.s32 >> 18;
	// srawi r5,r11,18
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3FFFF) != 0);
	ctx.r5.s64 = r11.s32 >> 18;
	// srawi r4,r8,18
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x3FFFF) != 0);
	ctx.r4.s64 = ctx.r8.s32 >> 18;
loc_8271B514:
	// subf r11,r4,r9
	r11.s64 = ctx.r9.s64 - ctx.r4.s64;
	// subf r10,r5,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r5.s64;
	// srawi r9,r11,31
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7FFFFFFF) != 0);
	ctx.r9.s64 = r11.s32 >> 31;
	// srawi r8,r10,31
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7FFFFFFF) != 0);
	ctx.r8.s64 = ctx.r10.s32 >> 31;
	// xor r11,r11,r9
	r11.u64 = r11.u64 ^ ctx.r9.u64;
	// xor r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 ^ ctx.r8.u64;
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// subf r10,r8,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r8.s64;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// blt cr6,0x8271b550
	if (cr6.lt) goto loc_8271B550;
loc_8271B53C:
	// mr r11,r29
	r11.u64 = r29.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// b 0x8271b558
	goto loc_8271B558;
loc_8271B548:
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x8271b758
	if (cr6.eq) goto loc_8271B758;
loc_8271B550:
	// li r3,1
	ctx.r3.s64 = 1;
	// mr r11,r30
	r11.u64 = r30.u64;
loc_8271B558:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271b758
	if (cr6.eq) goto loc_8271B758;
	// lbz r10,27(r24)
	ctx.r10.u64 = PPC_LOAD_U8(r24.u32 + 27);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8271b758
	if (cr6.eq) goto loc_8271B758;
	// cmplw cr6,r11,r29
	cr6.compare<uint32_t>(r11.u32, r29.u32, xer);
	// bne cr6,0x8271b658
	if (!cr6.eq) goto loc_8271B658;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// beq cr6,0x8271b5b8
	if (cr6.eq) goto loc_8271B5B8;
	// cmpwi cr6,r27,2
	cr6.compare<int32_t>(r27.s32, 2, xer);
	// beq cr6,0x8271b5b8
	if (cr6.eq) goto loc_8271B5B8;
	// cmpwi cr6,r27,4
	cr6.compare<int32_t>(r27.s32, 4, xer);
	// beq cr6,0x8271b5b8
	if (cr6.eq) goto loc_8271B5B8;
	// cmpwi cr6,r27,5
	cr6.compare<int32_t>(r27.s32, 5, xer);
	// beq cr6,0x8271b5b8
	if (cr6.eq) goto loc_8271B5B8;
	// addi r10,r1,192
	ctx.r10.s64 = ctx.r1.s64 + 192;
	// li r9,16
	ctx.r9.s64 = 16;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_8271B5A0:
	// lhz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// sth r9,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r9.u16);
	// addi r10,r10,2
	ctx.r10.s64 = ctx.r10.s64 + 2;
	// bdnz 0x8271b5a0
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8271B5A0;
	// b 0x8271b754
	goto loc_8271B754;
loc_8271B5B8:
	// lbz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// addi r7,r1,194
	ctx.r7.s64 = ctx.r1.s64 + 194;
	// lbz r9,-16(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + -16);
	// rotlwi r5,r10,2
	ctx.r5.u64 = __builtin_rotateleft32(ctx.r10.u32, 2);
	// lwz r6,220(r24)
	ctx.r6.u64 = PPC_LOAD_U32(r24.u32 + 220);
	// rotlwi r4,r9,2
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r9.u32, 2);
	// lhz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// add r5,r10,r5
	ctx.r5.u64 = ctx.r10.u64 + ctx.r5.u64;
	// add r4,r9,r4
	ctx.r4.u64 = ctx.r9.u64 + ctx.r4.u64;
	// rlwinm r5,r5,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// extsh r31,r8
	r31.s64 = ctx.r8.s16;
	// add r30,r5,r6
	r30.u64 = ctx.r5.u64 + ctx.r6.u64;
	// rlwinm r5,r4,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// rotlwi r10,r10,2
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 2);
	// add r6,r5,r6
	ctx.r6.u64 = ctx.r5.u64 + ctx.r6.u64;
	// addi r8,r11,2
	ctx.r8.s64 = r11.s64 + 2;
	// lwz r5,16(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + 16);
	// li r11,15
	r11.s64 = 15;
	// rlwinm r5,r5,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r10,r20
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r20.u32);
	// lwz r6,16(r6)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r6.u32 + 16);
	// lwzx r5,r5,r20
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r5.u32 + r20.u32);
	// mullw r6,r5,r6
	ctx.r6.s64 = int64_t(ctx.r5.s32) * int64_t(ctx.r6.s32);
	// mullw r6,r6,r31
	ctx.r6.s64 = int64_t(ctx.r6.s32) * int64_t(r31.s32);
	// add r6,r6,r21
	ctx.r6.u64 = ctx.r6.u64 + r21.u64;
	// srawi r6,r6,18
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x3FFFF) != 0);
	ctx.r6.s64 = ctx.r6.s32 >> 18;
	// sth r6,192(r1)
	PPC_STORE_U16(ctx.r1.u32 + 192, ctx.r6.u16);
loc_8271B624:
	// lhz r6,0(r8)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// mullw r6,r6,r10
	ctx.r6.s64 = int64_t(ctx.r6.s32) * int64_t(ctx.r10.s32);
	// mullw r6,r6,r9
	ctx.r6.s64 = int64_t(ctx.r6.s32) * int64_t(ctx.r9.s32);
	// add r6,r6,r21
	ctx.r6.u64 = ctx.r6.u64 + r21.u64;
	// srawi r6,r6,18
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x3FFFF) != 0);
	ctx.r6.s64 = ctx.r6.s32 >> 18;
	// sth r6,0(r7)
	PPC_STORE_U16(ctx.r7.u32 + 0, ctx.r6.u16);
	// addi r7,r7,2
	ctx.r7.s64 = ctx.r7.s64 + 2;
	// bne cr6,0x8271b624
	if (!cr6.eq) goto loc_8271B624;
	// b 0x8271b74c
	goto loc_8271B74C;
loc_8271B658:
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// beq cr6,0x8271b69c
	if (cr6.eq) goto loc_8271B69C;
	// cmpwi cr6,r27,1
	cr6.compare<int32_t>(r27.s32, 1, xer);
	// beq cr6,0x8271b69c
	if (cr6.eq) goto loc_8271B69C;
	// cmpwi cr6,r27,4
	cr6.compare<int32_t>(r27.s32, 4, xer);
	// beq cr6,0x8271b69c
	if (cr6.eq) goto loc_8271B69C;
	// cmpwi cr6,r27,5
	cr6.compare<int32_t>(r27.s32, 5, xer);
	// beq cr6,0x8271b69c
	if (cr6.eq) goto loc_8271B69C;
	// addi r10,r1,192
	ctx.r10.s64 = ctx.r1.s64 + 192;
	// li r9,16
	ctx.r9.s64 = 16;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_8271B684:
	// lhz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// sth r9,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r9.u16);
	// addi r10,r10,2
	ctx.r10.s64 = ctx.r10.s64 + 2;
	// bdnz 0x8271b684
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8271B684;
	// b 0x8271b754
	goto loc_8271B754;
loc_8271B69C:
	// rlwinm r9,r6,31,1,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 31) & 0x7FFFFFFF;
	// lhz r7,0(r11)
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r6,r11,2
	ctx.r6.s64 = r11.s64 + 2;
	// lbz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// rlwinm r11,r9,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r8,220(r24)
	ctx.r8.u64 = PPC_LOAD_U32(r24.u32 + 220);
	// extsh r4,r7
	ctx.r4.s64 = ctx.r7.s16;
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// rotlwi r11,r10,2
	r11.u64 = __builtin_rotateleft32(ctx.r10.u32, 2);
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// subf r9,r9,r31
	ctx.r9.s64 = r31.s64 - ctx.r9.s64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rotlwi r10,r10,2
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 2);
	// add r31,r11,r8
	r31.u64 = r11.u64 + ctx.r8.u64;
	// addi r5,r1,194
	ctx.r5.s64 = ctx.r1.s64 + 194;
	// lbz r11,4(r9)
	r11.u64 = PPC_LOAD_U8(ctx.r9.u32 + 4);
	// li r7,15
	ctx.r7.s64 = 15;
	// lwzx r9,r10,r20
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + r20.u32);
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// mullw r9,r9,r11
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(r11.s32);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r31,r10,r20
	r31.u64 = PPC_LOAD_U32(ctx.r10.u32 + r20.u32);
	// rotlwi r10,r11,2
	ctx.r10.u64 = __builtin_rotateleft32(r11.u32, 2);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// mullw r11,r31,r11
	r11.s64 = int64_t(r31.s32) * int64_t(r11.s32);
	// mullw r11,r11,r4
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r4.s32);
	// add r11,r11,r21
	r11.u64 = r11.u64 + r21.u64;
	// srawi r11,r11,18
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3FFFF) != 0);
	r11.s64 = r11.s32 >> 18;
	// sth r11,192(r1)
	PPC_STORE_U16(ctx.r1.u32 + 192, r11.u16);
loc_8271B720:
	// lhz r11,0(r6)
	r11.u64 = PPC_LOAD_U16(ctx.r6.u32 + 0);
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r6,r6,2
	ctx.r6.s64 = ctx.r6.s64 + 2;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// mullw r11,r11,r9
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r9.s32);
	// add r11,r11,r21
	r11.u64 = r11.u64 + r21.u64;
	// srawi r11,r11,18
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3FFFF) != 0);
	r11.s64 = r11.s32 >> 18;
	// sth r11,0(r5)
	PPC_STORE_U16(ctx.r5.u32 + 0, r11.u16);
	// addi r5,r5,2
	ctx.r5.s64 = ctx.r5.s64 + 2;
	// bne cr6,0x8271b720
	if (!cr6.eq) goto loc_8271B720;
loc_8271B74C:
	// lhz r11,192(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 192);
	// sth r11,208(r1)
	PPC_STORE_U16(ctx.r1.u32 + 208, r11.u16);
loc_8271B754:
	// addi r11,r1,192
	r11.s64 = ctx.r1.s64 + 192;
loc_8271B758:
	// lwz r10,28(r16)
	ctx.r10.u64 = PPC_LOAD_U32(r16.u32 + 28);
	// stw r11,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r11.u32);
	// addi r11,r10,-128
	r11.s64 = ctx.r10.s64 + -128;
	// stw r3,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, ctx.r3.u32);
	// stw r11,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, r11.u32);
	// stw r11,28(r16)
	PPC_STORE_U32(r16.u32 + 28, r11.u32);
	// dcbzl r0,r11
	memset(base + ((r11.u32) & ~127), 0, 128);
	// lwz r26,160(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// dcbt r0,r26
	// lwz r25,128(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// dcbt r0,r25
	// lwz r23,188(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// dcbt r0,r23
	// mr r28,r18
	r28.u64 = r18.u64;
	// lwz r10,136(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// lwz r31,0(r24)
	r31.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// lbz r4,8(r10)
	ctx.r4.u64 = PPC_LOAD_U8(ctx.r10.u32 + 8);
	// lwz r29,0(r10)
	r29.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// subfic r10,r4,64
	xer.ca = ctx.r4.u32 <= 64;
	ctx.r10.s64 = 64 - ctx.r4.s64;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r10,r10,32
	ctx.r10.u64 = ctx.r10.u64 & 0xFFFFFFFF;
	// srd r10,r11,r10
	ctx.r10.u64 = ctx.r10.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r10.u8 & 0x7F));
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r10,r29
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + r29.u32);
	// extsh r30,r10
	r30.s64 = ctx.r10.s16;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// blt cr6,0x8271b884
	if (cr6.lt) goto loc_8271B884;
	// clrlwi r10,r30,28
	ctx.r10.u64 = r30.u32 & 0xF;
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpw cr6,r9,r10
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r10.s32, xer);
	// sld r11,r11,r10
	r11.u64 = ctx.r10.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r10.u8 & 0x7F));
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// subf r11,r10,r9
	r11.s64 = ctx.r9.s64 - ctx.r10.s64;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// bge cr6,0x8271b87c
	if (!cr6.lt) goto loc_8271B87C;
loc_8271B7E4:
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// addi r10,r10,-4
	ctx.r10.s64 = ctx.r10.s64 + -4;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x8271b810
	if (cr6.lt) goto loc_8271B810;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb840
	sub_825EB840(ctx, base);
	// cmplwi cr6,r3,1
	cr6.compare<uint32_t>(ctx.r3.u32, 1, xer);
	// beq cr6,0x8271b7e4
	if (cr6.eq) goto loc_8271B7E4;
	// srawi r30,r30,4
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0xF) != 0);
	r30.s64 = r30.s32 >> 4;
	// b 0x8271b8c0
	goto loc_8271B8C0;
loc_8271B810:
	// lbz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r4,r11,6
	ctx.r4.s64 = r11.s64 + 6;
	// lbz r9,1(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 1);
	// rldicr r8,r8,8,63
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u64, 8) & 0xFFFFFFFFFFFFFFFF;
	// lbz r5,2(r11)
	ctx.r5.u64 = PPC_LOAD_U8(r11.u32 + 2);
	// lbz r6,3(r11)
	ctx.r6.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// lbz r8,5(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 5);
	// lbz r7,4(r11)
	ctx.r7.u64 = PPC_LOAD_U8(r11.u32 + 4);
	// rldicr r11,r9,8,55
	r11.u64 = __builtin_rotateleft64(ctx.r9.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// ld r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// stw r4,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r4.u32);
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// neg r8,r10
	ctx.r8.s64 = -ctx.r10.s64;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// extsw r8,r8
	ctx.r8.s64 = ctx.r8.s32;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r11,r11,r8
	r11.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
loc_8271B87C:
	// srawi r30,r30,4
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0xF) != 0);
	r30.s64 = r30.s32 >> 4;
	// b 0x8271b8c0
	goto loc_8271B8C0;
loc_8271B884:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
loc_8271B88C:
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rldicl r11,r11,1,63
	r11.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// add r30,r11,r30
	r30.u64 = r11.u64 + r30.u64;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
	// add r11,r30,r14
	r11.u64 = r30.u64 + r14.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r11,r29
	r11.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// extsh r30,r11
	r30.s64 = r11.s16;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// blt cr6,0x8271b88c
	if (cr6.lt) goto loc_8271B88C;
loc_8271B8C0:
	// clrlwi r30,r30,16
	r30.u64 = r30.u32 & 0xFFFF;
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// mr r27,r30
	r27.u64 = r30.u64;
	// cmpw cr6,r27,r11
	cr6.compare<int32_t>(r27.s32, r11.s32, xer);
	// beq cr6,0x8271ba10
	if (cr6.eq) goto loc_8271BA10;
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x8271bb30
	if (cr6.eq) goto loc_8271BB30;
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// bne cr6,0x8271b928
	if (!cr6.eq) goto loc_8271B928;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// addic. r10,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	ctx.r10.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// rldicl r11,r11,1,63
	r11.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// rotlwi r30,r11,0
	r30.u64 = __builtin_rotateleft32(r11.u32, 0);
	// std r9,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r9.u64);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// bge 0x8271b914
	if (!cr0.lt) goto loc_8271B914;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271B914:
	// rlwinm r11,r27,1,0,30
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// addis r11,r11,1
	r11.s64 = r11.s64 + 65536;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// b 0x8271b9ec
	goto loc_8271B9EC;
loc_8271B928:
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x8271b9f0
	if (!cr6.eq) goto loc_8271B9F0;
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// li r30,2
	r30.s64 = 2;
	// mr r29,r18
	r29.u64 = r18.u64;
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// bge cr6,0x8271b9a0
	if (!cr6.lt) goto loc_8271B9A0;
loc_8271B948:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271b9a0
	if (cr6.eq) goto loc_8271B9A0;
	// subfic r8,r11,64
	xer.ca = r11.u32 <= 64;
	ctx.r8.s64 = 64 - r11.s64;
	// ld r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// subf. r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrldi r8,r8,32
	ctx.r8.u64 = ctx.r8.u64 & 0xFFFFFFFF;
	// subf r30,r11,r30
	r30.s64 = r30.s64 - r11.s64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// srd r8,r10,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r10.u64 >> (ctx.r8.u8 & 0x7F));
	// sld r11,r10,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 << (r11.u8 & 0x7F));
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// slw r11,r10,r30
	r11.u64 = r30.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r30.u8 & 0x3F));
	// add r29,r11,r29
	r29.u64 = r11.u64 + r29.u64;
	// bge 0x8271b990
	if (!cr0.lt) goto loc_8271B990;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271B990:
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bgt cr6,0x8271b948
	if (cr6.gt) goto loc_8271B948;
loc_8271B9A0:
	// subfic r9,r30,64
	xer.ca = r30.u32 <= 64;
	ctx.r9.s64 = 64 - r30.s64;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r8,r30,32
	ctx.r8.u64 = r30.u64 & 0xFFFFFFFF;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// clrldi r9,r9,32
	ctx.r9.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// subf. r10,r30,r10
	ctx.r10.s64 = ctx.r10.s64 - r30.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r8,r11,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// srd r9,r11,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r9.u8 & 0x7F));
	// rotlwi r11,r9,0
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// add r30,r11,r29
	r30.u64 = r11.u64 + r29.u64;
	// std r8,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r8.u64);
	// bge 0x8271b9dc
	if (!cr0.lt) goto loc_8271B9DC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271B9DC:
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// addis r11,r11,1
	r11.s64 = r11.s64 + 65536;
	// addi r11,r11,-3
	r11.s64 = r11.s64 + -3;
loc_8271B9EC:
	// clrlwi r30,r11,16
	r30.u64 = r11.u32 & 0xFFFF;
loc_8271B9F0:
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rldicl r8,r11,1,63
	ctx.r8.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// addic. r11,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	r11.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// rotlwi r29,r8,0
	r29.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// b 0x8271bb0c
	goto loc_8271BB0C;
loc_8271BA10:
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// bgt cr6,0x8271ba28
	if (cr6.gt) goto loc_8271BA28;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// subfic r11,r11,3
	xer.ca = r11.u32 <= 3;
	r11.s64 = 3 - r11.s64;
	// b 0x8271ba2c
	goto loc_8271BA2C;
loc_8271BA28:
	// mr r11,r18
	r11.u64 = r18.u64;
loc_8271BA2C:
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r30,r11,8
	r30.s64 = r11.s64 + 8;
	// mr r29,r18
	r29.u64 = r18.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// bne cr6,0x8271ba4c
	if (!cr6.eq) goto loc_8271BA4C;
	// mr r11,r18
	r11.u64 = r18.u64;
	// b 0x8271baec
	goto loc_8271BAEC;
loc_8271BA4C:
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// ble cr6,0x8271baac
	if (!cr6.gt) goto loc_8271BAAC;
loc_8271BA54:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271baac
	if (cr6.eq) goto loc_8271BAAC;
	// subfic r8,r11,64
	xer.ca = r11.u32 <= 64;
	ctx.r8.s64 = 64 - r11.s64;
	// ld r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// subf. r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrldi r8,r8,32
	ctx.r8.u64 = ctx.r8.u64 & 0xFFFFFFFF;
	// subf r30,r11,r30
	r30.s64 = r30.s64 - r11.s64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// srd r8,r10,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r10.u64 >> (ctx.r8.u8 & 0x7F));
	// sld r11,r10,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 << (r11.u8 & 0x7F));
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// slw r11,r10,r30
	r11.u64 = r30.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r30.u8 & 0x3F));
	// add r29,r11,r29
	r29.u64 = r11.u64 + r29.u64;
	// bge 0x8271ba9c
	if (!cr0.lt) goto loc_8271BA9C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271BA9C:
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bgt cr6,0x8271ba54
	if (cr6.gt) goto loc_8271BA54;
loc_8271BAAC:
	// subfic r9,r30,64
	xer.ca = r30.u32 <= 64;
	ctx.r9.s64 = 64 - r30.s64;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r8,r30,32
	ctx.r8.u64 = r30.u64 & 0xFFFFFFFF;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// clrldi r9,r9,32
	ctx.r9.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// subf. r10,r30,r10
	ctx.r10.s64 = ctx.r10.s64 - r30.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r8,r11,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// srd r9,r11,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r9.u8 & 0x7F));
	// rotlwi r11,r9,0
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// add r30,r11,r29
	r30.u64 = r11.u64 + r29.u64;
	// std r8,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r8.u64);
	// bge 0x8271bae8
	if (!cr0.lt) goto loc_8271BAE8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271BAE8:
	// mr r11,r30
	r11.u64 = r30.u64;
loc_8271BAEC:
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// clrlwi r30,r11,16
	r30.u64 = r11.u32 & 0xFFFF;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// addic. r10,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	ctx.r10.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// rldicl r11,r11,1,63
	r11.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// rotlwi r29,r11,0
	r29.u64 = __builtin_rotateleft32(r11.u32, 0);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
loc_8271BB0C:
	// std r9,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r9.u64);
	// bge 0x8271bb1c
	if (!cr0.lt) goto loc_8271BB1C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271BB1C:
	// rlwinm r11,r29,1,0,30
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// extsh r10,r30
	ctx.r10.s64 = r30.s16;
	// subfic r11,r11,1
	xer.ca = r11.u32 <= 1;
	r11.s64 = 1 - r11.s64;
	// mullw r11,r11,r10
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r10.s32);
	// extsh r28,r11
	r28.s64 = r11.s16;
loc_8271BB30:
	// sth r28,0(r26)
	PPC_STORE_U16(r26.u32 + 0, r28.u16);
	// lwz r11,0(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8271c814
	if (!cr6.eq) goto loc_8271C814;
	// lwz r11,144(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8271bb5c
	if (!cr6.eq) goto loc_8271BB5C;
	// lwz r6,1204(r24)
	ctx.r6.u64 = PPC_LOAD_U32(r24.u32 + 1204);
	// mr r31,r18
	r31.u64 = r18.u64;
	// b 0x8271bb90
	goto loc_8271BB90;
loc_8271BB5C:
	// lwz r31,184(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// lbz r10,1188(r24)
	ctx.r10.u64 = PPC_LOAD_U8(r24.u32 + 1188);
	// addi r11,r31,301
	r11.s64 = r31.s64 + 301;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r6,r11,r24
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + r24.u32);
	// beq cr6,0x8271bb90
	if (cr6.eq) goto loc_8271BB90;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// beq cr6,0x8271bb90
	if (cr6.eq) goto loc_8271BB90;
	// cmpwi cr6,r31,8
	cr6.compare<int32_t>(r31.s32, 8, xer);
	// li r31,8
	r31.s64 = 8;
	// bne cr6,0x8271bb90
	if (!cr6.eq) goto loc_8271BB90;
	// li r31,1
	r31.s64 = 1;
loc_8271BB90:
	// lwz r11,152(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8271bbb8
	if (cr6.eq) goto loc_8271BBB8;
	// lwz r11,176(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// bl 0x826fcd00
	sub_826FCD00(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x8271c814
	if (cr6.lt) goto loc_8271C814;
loc_8271BBB8:
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x8271bc28
	if (cr6.eq) goto loc_8271BC28;
	// cmpwi cr6,r31,1
	cr6.compare<int32_t>(r31.s32, 1, xer);
	// beq cr6,0x8271bc18
	if (cr6.eq) goto loc_8271BC18;
	// cmpwi cr6,r31,8
	cr6.compare<int32_t>(r31.s32, 8, xer);
	// beq cr6,0x8271bbe4
	if (cr6.eq) goto loc_8271BBE4;
	// lhz r11,0(r25)
	r11.u64 = PPC_LOAD_U16(r25.u32 + 0);
	// lhz r10,0(r26)
	ctx.r10.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// sth r11,0(r26)
	PPC_STORE_U16(r26.u32 + 0, r11.u16);
	// b 0x8271bc28
	goto loc_8271BC28;
loc_8271BBE4:
	// mr r11,r26
	r11.u64 = r26.u64;
	// mr r9,r25
	ctx.r9.u64 = r25.u64;
	// li r10,8
	ctx.r10.s64 = 8;
loc_8271BBF0:
	// lhz r8,0(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// lhz r7,0(r11)
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r9,r9,2
	ctx.r9.s64 = ctx.r9.s64 + 2;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// sth r8,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r8.u16);
	// addi r11,r11,16
	r11.s64 = r11.s64 + 16;
	// bne cr6,0x8271bbf0
	if (!cr6.eq) goto loc_8271BBF0;
	// b 0x8271bc28
	goto loc_8271BC28;
loc_8271BC18:
	// lvx128 v0,r0,r25
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r25.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v13,r0,r26
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r26.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vaddshs v0,v13,v0
	_mm_store_si128((__m128i*)ctx.v0.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v13.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// stvx v0,r0,r26
	_mm_store_si128((__m128i*)(base + ((r26.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
loc_8271BC28:
	// lbz r11,1188(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 1188);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271bc84
	if (cr6.eq) goto loc_8271BC84;
	// lhz r11,0(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// addi r10,r23,16
	ctx.r10.s64 = r23.s64 + 16;
	// sth r11,0(r23)
	PPC_STORE_U16(r23.u32 + 0, r11.u16);
	// lhz r11,16(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 16);
	// sth r11,2(r23)
	PPC_STORE_U16(r23.u32 + 2, r11.u16);
	// lhz r11,32(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 32);
	// sth r11,4(r23)
	PPC_STORE_U16(r23.u32 + 4, r11.u16);
	// lhz r11,48(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 48);
	// sth r11,6(r23)
	PPC_STORE_U16(r23.u32 + 6, r11.u16);
	// lhz r11,64(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 64);
	// sth r11,8(r23)
	PPC_STORE_U16(r23.u32 + 8, r11.u16);
	// lhz r11,80(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 80);
	// sth r11,10(r23)
	PPC_STORE_U16(r23.u32 + 10, r11.u16);
	// lhz r11,96(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 96);
	// sth r11,12(r23)
	PPC_STORE_U16(r23.u32 + 12, r11.u16);
	// lhz r11,112(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 112);
	// sth r11,14(r23)
	PPC_STORE_U16(r23.u32 + 14, r11.u16);
	// lvx128 v0,r0,r26
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r26.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v0,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// b 0x8271bccc
	goto loc_8271BCCC;
loc_8271BC84:
	// lvx128 v0,r0,r26
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r26.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v0,r0,r23
	_mm_store_si128((__m128i*)(base + ((r23.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lhz r11,0(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// sth r11,16(r23)
	PPC_STORE_U16(r23.u32 + 16, r11.u16);
	// lhz r11,16(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 16);
	// sth r11,18(r23)
	PPC_STORE_U16(r23.u32 + 18, r11.u16);
	// lhz r11,32(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 32);
	// sth r11,20(r23)
	PPC_STORE_U16(r23.u32 + 20, r11.u16);
	// lhz r11,48(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 48);
	// sth r11,22(r23)
	PPC_STORE_U16(r23.u32 + 22, r11.u16);
	// lhz r11,64(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 64);
	// sth r11,24(r23)
	PPC_STORE_U16(r23.u32 + 24, r11.u16);
	// lhz r11,80(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 80);
	// sth r11,26(r23)
	PPC_STORE_U16(r23.u32 + 26, r11.u16);
	// lhz r11,96(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 96);
	// sth r11,28(r23)
	PPC_STORE_U16(r23.u32 + 28, r11.u16);
	// lhz r11,112(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 112);
	// sth r11,30(r23)
	PPC_STORE_U16(r23.u32 + 30, r11.u16);
loc_8271BCCC:
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r31,96(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r9,88(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r27,r11,1
	r27.s64 = r11.s64 + 1;
	// add r10,r11,r31
	ctx.r10.u64 = r11.u64 + r31.u64;
	// srawi r11,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	r11.s64 = ctx.r9.s32 >> 1;
	// cmpwi cr6,r27,4
	cr6.compare<int32_t>(r27.s32, 4, xer);
	// stw r27,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r27.u32);
	// stb r18,6(r10)
	PPC_STORE_U8(ctx.r10.u32 + 6, r18.u8);
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r11.u32);
	// blt cr6,0x8271b2b4
	if (cr6.lt) goto loc_8271B2B4;
	// cmpwi cr6,r27,6
	cr6.compare<int32_t>(r27.s32, 6, xer);
	// bge cr6,0x8271c730
	if (!cr6.lt) goto loc_8271C730;
	// addi r22,r24,236
	r22.s64 = r24.s64 + 236;
loc_8271BD04:
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// lwz r8,0(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r9,r27,63
	ctx.r9.s64 = r27.s64 + 63;
	// lhz r10,50(r24)
	ctx.r10.u64 = PPC_LOAD_U16(r24.u32 + 50);
	// lwz r7,80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r3,r18
	ctx.r3.u64 = r18.u64;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// stw r22,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, r22.u32);
	// rlwinm r10,r10,31,1,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// stw r15,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, r15.u32);
	// stw r11,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, r11.u32);
	// lwz r11,1164(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 1164);
	// mullw r7,r10,r7
	ctx.r7.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r7.s32);
	// stw r11,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r11.u32);
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r11.u32);
	// rlwinm r11,r8,29,30,31
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 29) & 0x3;
	// lwzx r8,r9,r24
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + r24.u32);
	// lwz r9,92(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// add r9,r7,r9
	ctx.r9.u64 = ctx.r7.u64 + ctx.r9.u64;
	// stw r11,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, r11.u32);
	// rlwinm r7,r10,5,0,26
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 5) & 0xFFFFFFE0;
	// rlwinm r9,r9,5,0,26
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 5) & 0xFFFFFFE0;
	// mr r11,r18
	r11.u64 = r18.u64;
	// add r9,r8,r9
	ctx.r9.u64 = ctx.r8.u64 + ctx.r9.u64;
	// addi r28,r9,-16
	r28.s64 = ctx.r9.s64 + -16;
	// subf r29,r7,r9
	r29.s64 = ctx.r9.s64 - ctx.r7.s64;
	// stw r9,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r9.u32);
	// beq cr6,0x8271bf84
	if (cr6.eq) goto loc_8271BF84;
	// cmpwi cr6,r19,0
	cr6.compare<int32_t>(r19.s32, 0, xer);
	// beq cr6,0x8271bf78
	if (cr6.eq) goto loc_8271BF78;
	// lhz r11,-32(r29)
	r11.u64 = PPC_LOAD_U16(r29.u32 + -32);
	// lhz r9,0(r29)
	ctx.r9.u64 = PPC_LOAD_U16(r29.u32 + 0);
	// extsh r6,r11
	ctx.r6.s64 = r11.s16;
	// lhz r8,0(r28)
	ctx.r8.u64 = PPC_LOAD_U16(r28.u32 + 0);
	// lbz r11,27(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 27);
	// extsh r5,r9
	ctx.r5.s64 = ctx.r9.s16;
	// extsh r4,r8
	ctx.r4.s64 = ctx.r8.s16;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271bf50
	if (cr6.eq) goto loc_8271BF50;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// beq cr6,0x8271bea4
	if (cr6.eq) goto loc_8271BEA4;
	// cmpwi cr6,r27,4
	cr6.compare<int32_t>(r27.s32, 4, xer);
	// beq cr6,0x8271bea4
	if (cr6.eq) goto loc_8271BEA4;
	// cmpwi cr6,r27,5
	cr6.compare<int32_t>(r27.s32, 5, xer);
	// beq cr6,0x8271bea4
	if (cr6.eq) goto loc_8271BEA4;
	// cmpwi cr6,r27,1
	cr6.compare<int32_t>(r27.s32, 1, xer);
	// bne cr6,0x8271be3c
	if (!cr6.eq) goto loc_8271BE3C;
	// lbz r11,4(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// rlwinm r8,r10,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r9,220(r24)
	ctx.r9.u64 = PPC_LOAD_U32(r24.u32 + 220);
	// rotlwi r7,r11,2
	ctx.r7.u64 = __builtin_rotateleft32(r11.u32, 2);
	// add r8,r10,r8
	ctx.r8.u64 = ctx.r10.u64 + ctx.r8.u64;
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r8,r8,r31
	ctx.r8.s64 = r31.s64 - ctx.r8.s64;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// lbz r8,4(r8)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r8.u32 + 4);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// rotlwi r7,r8,2
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r8.u32, 2);
	// rlwinm r3,r11,2,0,29
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r8,r7
	r11.u64 = ctx.r8.u64 + ctx.r7.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r11,r9
	ctx.r9.u64 = r11.u64 + ctx.r9.u64;
	// lwzx r11,r3,r20
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + r20.u32);
	// lwz r9,16(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 16);
	// mullw r8,r9,r6
	ctx.r8.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r6.s32);
	// mullw r9,r9,r5
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r5.s32);
	// mullw r8,r8,r11
	ctx.r8.s64 = int64_t(ctx.r8.s32) * int64_t(r11.s32);
	// mullw r11,r9,r11
	r11.s64 = int64_t(ctx.r9.s32) * int64_t(r11.s32);
	// add r9,r8,r21
	ctx.r9.u64 = ctx.r8.u64 + r21.u64;
	// add r11,r11,r21
	r11.u64 = r11.u64 + r21.u64;
	// srawi r6,r9,18
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3FFFF) != 0);
	ctx.r6.s64 = ctx.r9.s32 >> 18;
	// srawi r5,r11,18
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3FFFF) != 0);
	ctx.r5.s64 = r11.s32 >> 18;
	// b 0x8271bf50
	goto loc_8271BF50;
loc_8271BE3C:
	// cmpwi cr6,r27,2
	cr6.compare<int32_t>(r27.s32, 2, xer);
	// bne cr6,0x8271bf50
	if (!cr6.eq) goto loc_8271BF50;
	// lbz r11,4(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// lbz r9,-16(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + -16);
	// rotlwi r3,r11,2
	ctx.r3.u64 = __builtin_rotateleft32(r11.u32, 2);
	// lwz r8,220(r24)
	ctx.r8.u64 = PPC_LOAD_U32(r24.u32 + 220);
	// rotlwi r7,r9,2
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r9.u32, 2);
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// add r7,r9,r7
	ctx.r7.u64 = ctx.r9.u64 + ctx.r7.u64;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r11,r7,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// add r8,r11,r8
	ctx.r8.u64 = r11.u64 + ctx.r8.u64;
	// lwz r11,16(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 16);
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r11,16(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 16);
	// mullw r8,r11,r6
	ctx.r8.s64 = int64_t(r11.s32) * int64_t(ctx.r6.s32);
	// lwzx r9,r9,r20
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + r20.u32);
	// mullw r11,r11,r4
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r4.s32);
	// mullw r8,r8,r9
	ctx.r8.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r9.s32);
	// mullw r11,r11,r9
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r9.s32);
	// add r9,r8,r21
	ctx.r9.u64 = ctx.r8.u64 + r21.u64;
	// add r11,r11,r21
	r11.u64 = r11.u64 + r21.u64;
	// srawi r6,r9,18
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3FFFF) != 0);
	ctx.r6.s64 = ctx.r9.s32 >> 18;
	// srawi r4,r11,18
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3FFFF) != 0);
	ctx.r4.s64 = r11.s32 >> 18;
	// b 0x8271bf50
	goto loc_8271BF50;
loc_8271BEA4:
	// lbz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// rlwinm r7,r10,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r8,-16(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + -16);
	// rotlwi r3,r9,2
	ctx.r3.u64 = __builtin_rotateleft32(ctx.r9.u32, 2);
	// lwz r11,220(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 220);
	// add r7,r10,r7
	ctx.r7.u64 = ctx.r10.u64 + ctx.r7.u64;
	// add r9,r9,r3
	ctx.r9.u64 = ctx.r9.u64 + ctx.r3.u64;
	// rotlwi r3,r8,2
	ctx.r3.u64 = __builtin_rotateleft32(ctx.r8.u32, 2);
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r8,r3
	ctx.r3.u64 = ctx.r8.u64 + ctx.r3.u64;
	// add r30,r9,r11
	r30.u64 = ctx.r9.u64 + r11.u64;
	// rlwinm r9,r3,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r7,r7,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r9,r11
	ctx.r3.u64 = ctx.r9.u64 + r11.u64;
	// subf r7,r7,r31
	ctx.r7.s64 = r31.s64 - ctx.r7.s64;
	// lwz r9,16(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 16);
	// rlwinm r30,r9,2,0,29
	r30.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r9,16(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// lbz r8,-16(r7)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r7.u32 + -16);
	// lbz r7,4(r7)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r7.u32 + 4);
	// mullw r4,r9,r4
	ctx.r4.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r4.s32);
	// lwzx r9,r30,r20
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + r20.u32);
	// rotlwi r30,r8,2
	r30.u64 = __builtin_rotateleft32(ctx.r8.u32, 2);
	// rotlwi r3,r7,2
	ctx.r3.u64 = __builtin_rotateleft32(ctx.r7.u32, 2);
	// add r8,r8,r30
	ctx.r8.u64 = ctx.r8.u64 + r30.u64;
	// add r3,r7,r3
	ctx.r3.u64 = ctx.r7.u64 + ctx.r3.u64;
	// rlwinm r7,r8,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r8,r3,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// add r7,r7,r11
	ctx.r7.u64 = ctx.r7.u64 + r11.u64;
	// add r8,r8,r11
	ctx.r8.u64 = ctx.r8.u64 + r11.u64;
	// mullw r4,r4,r9
	ctx.r4.s64 = int64_t(ctx.r4.s32) * int64_t(ctx.r9.s32);
	// lwz r11,16(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 16);
	// lwz r8,16(r8)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + 16);
	// mullw r11,r11,r6
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r6.s32);
	// mullw r8,r8,r5
	ctx.r8.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r5.s32);
	// mullw r11,r11,r9
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r9.s32);
	// mullw r9,r8,r9
	ctx.r9.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r9.s32);
	// add r11,r11,r21
	r11.u64 = r11.u64 + r21.u64;
	// add r9,r9,r21
	ctx.r9.u64 = ctx.r9.u64 + r21.u64;
	// add r8,r4,r21
	ctx.r8.u64 = ctx.r4.u64 + r21.u64;
	// srawi r6,r11,18
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3FFFF) != 0);
	ctx.r6.s64 = r11.s32 >> 18;
	// srawi r5,r9,18
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3FFFF) != 0);
	ctx.r5.s64 = ctx.r9.s32 >> 18;
	// srawi r4,r8,18
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x3FFFF) != 0);
	ctx.r4.s64 = ctx.r8.s32 >> 18;
loc_8271BF50:
	// subf r11,r4,r6
	r11.s64 = ctx.r6.s64 - ctx.r4.s64;
	// subf r9,r5,r6
	ctx.r9.s64 = ctx.r6.s64 - ctx.r5.s64;
	// srawi r8,r11,31
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7FFFFFFF) != 0);
	ctx.r8.s64 = r11.s32 >> 31;
	// srawi r7,r9,31
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x7FFFFFFF) != 0);
	ctx.r7.s64 = ctx.r9.s32 >> 31;
	// xor r11,r11,r8
	r11.u64 = r11.u64 ^ ctx.r8.u64;
	// xor r9,r9,r7
	ctx.r9.u64 = ctx.r9.u64 ^ ctx.r7.u64;
	// subf r11,r8,r11
	r11.s64 = r11.s64 - ctx.r8.s64;
	// subf r9,r7,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r7.s64;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// blt cr6,0x8271bf8c
	if (cr6.lt) goto loc_8271BF8C;
loc_8271BF78:
	// mr r11,r28
	r11.u64 = r28.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// b 0x8271bf94
	goto loc_8271BF94;
loc_8271BF84:
	// cmpwi cr6,r19,0
	cr6.compare<int32_t>(r19.s32, 0, xer);
	// beq cr6,0x8271c190
	if (cr6.eq) goto loc_8271C190;
loc_8271BF8C:
	// li r3,1
	ctx.r3.s64 = 1;
	// mr r11,r29
	r11.u64 = r29.u64;
loc_8271BF94:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271c190
	if (cr6.eq) goto loc_8271C190;
	// lbz r9,27(r24)
	ctx.r9.u64 = PPC_LOAD_U8(r24.u32 + 27);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x8271c190
	if (cr6.eq) goto loc_8271C190;
	// cmplw cr6,r11,r28
	cr6.compare<uint32_t>(r11.u32, r28.u32, xer);
	// bne cr6,0x8271c094
	if (!cr6.eq) goto loc_8271C094;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// beq cr6,0x8271bff4
	if (cr6.eq) goto loc_8271BFF4;
	// cmpwi cr6,r27,2
	cr6.compare<int32_t>(r27.s32, 2, xer);
	// beq cr6,0x8271bff4
	if (cr6.eq) goto loc_8271BFF4;
	// cmpwi cr6,r27,4
	cr6.compare<int32_t>(r27.s32, 4, xer);
	// beq cr6,0x8271bff4
	if (cr6.eq) goto loc_8271BFF4;
	// cmpwi cr6,r27,5
	cr6.compare<int32_t>(r27.s32, 5, xer);
	// beq cr6,0x8271bff4
	if (cr6.eq) goto loc_8271BFF4;
	// addi r10,r1,224
	ctx.r10.s64 = ctx.r1.s64 + 224;
	// li r9,16
	ctx.r9.s64 = 16;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_8271BFDC:
	// lhz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// sth r9,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r9.u16);
	// addi r10,r10,2
	ctx.r10.s64 = ctx.r10.s64 + 2;
	// bdnz 0x8271bfdc
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8271BFDC;
	// b 0x8271c18c
	goto loc_8271C18C;
loc_8271BFF4:
	// lbz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// addi r7,r1,226
	ctx.r7.s64 = ctx.r1.s64 + 226;
	// lbz r9,-16(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + -16);
	// rotlwi r5,r10,2
	ctx.r5.u64 = __builtin_rotateleft32(ctx.r10.u32, 2);
	// lwz r6,220(r24)
	ctx.r6.u64 = PPC_LOAD_U32(r24.u32 + 220);
	// rotlwi r4,r9,2
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r9.u32, 2);
	// lhz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// add r5,r10,r5
	ctx.r5.u64 = ctx.r10.u64 + ctx.r5.u64;
	// add r4,r9,r4
	ctx.r4.u64 = ctx.r9.u64 + ctx.r4.u64;
	// rlwinm r5,r5,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// rotlwi r10,r10,2
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 2);
	// add r30,r5,r6
	r30.u64 = ctx.r5.u64 + ctx.r6.u64;
	// rlwinm r5,r4,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// extsh r31,r8
	r31.s64 = ctx.r8.s16;
	// add r5,r5,r6
	ctx.r5.u64 = ctx.r5.u64 + ctx.r6.u64;
	// addi r8,r11,2
	ctx.r8.s64 = r11.s64 + 2;
	// lwz r6,16(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + 16);
	// li r11,15
	r11.s64 = 15;
	// rlwinm r4,r6,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r6,r10,r20
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r10.u32 + r20.u32);
	// lwz r10,16(r5)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r5.u32 + 16);
	// mullw r10,r10,r31
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(r31.s32);
	// lwzx r5,r4,r20
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r4.u32 + r20.u32);
	// mullw r10,r5,r10
	ctx.r10.s64 = int64_t(ctx.r5.s32) * int64_t(ctx.r10.s32);
	// add r10,r10,r21
	ctx.r10.u64 = ctx.r10.u64 + r21.u64;
	// srawi r10,r10,18
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3FFFF) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 18;
	// sth r10,224(r1)
	PPC_STORE_U16(ctx.r1.u32 + 224, ctx.r10.u16);
loc_8271C060:
	// lhz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// mullw r10,r10,r9
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r9.s32);
	// mullw r10,r10,r6
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r6.s32);
	// add r10,r10,r21
	ctx.r10.u64 = ctx.r10.u64 + r21.u64;
	// srawi r10,r10,18
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3FFFF) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 18;
	// sth r10,0(r7)
	PPC_STORE_U16(ctx.r7.u32 + 0, ctx.r10.u16);
	// addi r7,r7,2
	ctx.r7.s64 = ctx.r7.s64 + 2;
	// bne cr6,0x8271c060
	if (!cr6.eq) goto loc_8271C060;
	// b 0x8271c184
	goto loc_8271C184;
loc_8271C094:
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// beq cr6,0x8271c0d8
	if (cr6.eq) goto loc_8271C0D8;
	// cmpwi cr6,r27,1
	cr6.compare<int32_t>(r27.s32, 1, xer);
	// beq cr6,0x8271c0d8
	if (cr6.eq) goto loc_8271C0D8;
	// cmpwi cr6,r27,4
	cr6.compare<int32_t>(r27.s32, 4, xer);
	// beq cr6,0x8271c0d8
	if (cr6.eq) goto loc_8271C0D8;
	// cmpwi cr6,r27,5
	cr6.compare<int32_t>(r27.s32, 5, xer);
	// beq cr6,0x8271c0d8
	if (cr6.eq) goto loc_8271C0D8;
	// addi r10,r1,224
	ctx.r10.s64 = ctx.r1.s64 + 224;
	// li r9,16
	ctx.r9.s64 = 16;
	// mtctr r9
	ctr.u64 = ctx.r9.u64;
loc_8271C0C0:
	// lhz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// sth r9,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r9.u16);
	// addi r10,r10,2
	ctx.r10.s64 = ctx.r10.s64 + 2;
	// bdnz 0x8271c0c0
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_8271C0C0;
	// b 0x8271c18c
	goto loc_8271C18C;
loc_8271C0D8:
	// rlwinm r8,r10,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// lwz r6,220(r24)
	ctx.r6.u64 = PPC_LOAD_U32(r24.u32 + 220);
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// lhz r7,0(r11)
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rotlwi r5,r9,2
	ctx.r5.u64 = __builtin_rotateleft32(ctx.r9.u32, 2);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// extsh r4,r7
	ctx.r4.s64 = ctx.r7.s16;
	// subf r10,r10,r31
	ctx.r10.s64 = r31.s64 - ctx.r10.s64;
	// rotlwi r31,r9,2
	r31.u64 = __builtin_rotateleft32(ctx.r9.u32, 2);
	// add r9,r9,r5
	ctx.r9.u64 = ctx.r9.u64 + ctx.r5.u64;
	// addi r8,r11,2
	ctx.r8.s64 = r11.s64 + 2;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r10,4(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 4);
	// addi r7,r1,226
	ctx.r7.s64 = ctx.r1.s64 + 226;
	// add r9,r9,r6
	ctx.r9.u64 = ctx.r9.u64 + ctx.r6.u64;
	// lwzx r5,r31,r20
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + r20.u32);
	// li r11,15
	r11.s64 = 15;
	// lwz r31,16(r9)
	r31.u64 = PPC_LOAD_U32(ctx.r9.u32 + 16);
	// rotlwi r9,r10,2
	ctx.r9.u64 = __builtin_rotateleft32(ctx.r10.u32, 2);
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r31,r31,2,0,29
	r31.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r9,r6
	ctx.r9.u64 = ctx.r9.u64 + ctx.r6.u64;
	// lwzx r6,r31,r20
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + r20.u32);
	// lwz r9,16(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 16);
	// mullw r9,r9,r4
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r4.s32);
	// mullw r9,r6,r9
	ctx.r9.s64 = int64_t(ctx.r6.s32) * int64_t(ctx.r9.s32);
	// add r9,r9,r21
	ctx.r9.u64 = ctx.r9.u64 + r21.u64;
	// srawi r9,r9,18
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3FFFF) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 18;
	// sth r9,224(r1)
	PPC_STORE_U16(ctx.r1.u32 + 224, ctx.r9.u16);
loc_8271C154:
	// lhz r9,0(r8)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// mullw r9,r9,r10
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r10.s32);
	// mullw r9,r9,r5
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r5.s32);
	// add r9,r9,r21
	ctx.r9.u64 = ctx.r9.u64 + r21.u64;
	// srawi r9,r9,18
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3FFFF) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 18;
	// sth r9,0(r7)
	PPC_STORE_U16(ctx.r7.u32 + 0, ctx.r9.u16);
	// addi r7,r7,2
	ctx.r7.s64 = ctx.r7.s64 + 2;
	// bne cr6,0x8271c154
	if (!cr6.eq) goto loc_8271C154;
loc_8271C184:
	// lhz r11,224(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 224);
	// sth r11,240(r1)
	PPC_STORE_U16(ctx.r1.u32 + 240, r11.u16);
loc_8271C18C:
	// addi r11,r1,224
	r11.s64 = ctx.r1.s64 + 224;
loc_8271C190:
	// lwz r10,28(r16)
	ctx.r10.u64 = PPC_LOAD_U32(r16.u32 + 28);
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// addi r11,r10,-128
	r11.s64 = ctx.r10.s64 + -128;
	// stw r3,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, ctx.r3.u32);
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// stw r11,28(r16)
	PPC_STORE_U32(r16.u32 + 28, r11.u32);
	// dcbzl r0,r11
	memset(base + ((r11.u32) & ~127), 0, 128);
	// lwz r26,120(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// dcbt r0,r26
	// lwz r25,124(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// dcbt r0,r25
	// lwz r23,132(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// dcbt r0,r23
	// mr r28,r18
	r28.u64 = r18.u64;
	// lwz r10,140(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// lwz r31,0(r24)
	r31.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// lbz r4,8(r10)
	ctx.r4.u64 = PPC_LOAD_U8(ctx.r10.u32 + 8);
	// lwz r29,0(r10)
	r29.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// subfic r10,r4,64
	xer.ca = ctx.r4.u32 <= 64;
	ctx.r10.s64 = 64 - ctx.r4.s64;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r10,r10,32
	ctx.r10.u64 = ctx.r10.u64 & 0xFFFFFFFF;
	// srd r10,r11,r10
	ctx.r10.u64 = ctx.r10.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r10.u8 & 0x7F));
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r10,r29
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + r29.u32);
	// extsh r30,r10
	r30.s64 = ctx.r10.s16;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// blt cr6,0x8271c2bc
	if (cr6.lt) goto loc_8271C2BC;
	// clrlwi r10,r30,28
	ctx.r10.u64 = r30.u32 & 0xF;
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpw cr6,r9,r10
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r10.s32, xer);
	// sld r11,r11,r10
	r11.u64 = ctx.r10.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r10.u8 & 0x7F));
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// subf r11,r10,r9
	r11.s64 = ctx.r9.s64 - ctx.r10.s64;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// bge cr6,0x8271c2b4
	if (!cr6.lt) goto loc_8271C2B4;
loc_8271C21C:
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// addi r10,r10,-4
	ctx.r10.s64 = ctx.r10.s64 + -4;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x8271c248
	if (cr6.lt) goto loc_8271C248;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb840
	sub_825EB840(ctx, base);
	// cmplwi cr6,r3,1
	cr6.compare<uint32_t>(ctx.r3.u32, 1, xer);
	// beq cr6,0x8271c21c
	if (cr6.eq) goto loc_8271C21C;
	// srawi r30,r30,4
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0xF) != 0);
	r30.s64 = r30.s32 >> 4;
	// b 0x8271c2f8
	goto loc_8271C2F8;
loc_8271C248:
	// lbz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r4,r11,6
	ctx.r4.s64 = r11.s64 + 6;
	// lbz r9,1(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 1);
	// rldicr r8,r8,8,63
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u64, 8) & 0xFFFFFFFFFFFFFFFF;
	// lbz r5,2(r11)
	ctx.r5.u64 = PPC_LOAD_U8(r11.u32 + 2);
	// lbz r6,3(r11)
	ctx.r6.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// lbz r8,5(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 5);
	// lbz r7,4(r11)
	ctx.r7.u64 = PPC_LOAD_U8(r11.u32 + 4);
	// rldicr r11,r9,8,55
	r11.u64 = __builtin_rotateleft64(ctx.r9.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// ld r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// stw r4,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r4.u32);
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// neg r8,r10
	ctx.r8.s64 = -ctx.r10.s64;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// extsw r8,r8
	ctx.r8.s64 = ctx.r8.s32;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r11,r11,r8
	r11.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
loc_8271C2B4:
	// srawi r30,r30,4
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0xF) != 0);
	r30.s64 = r30.s32 >> 4;
	// b 0x8271c2f8
	goto loc_8271C2F8;
loc_8271C2BC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
loc_8271C2C4:
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rldicl r11,r11,1,63
	r11.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// add r30,r11,r30
	r30.u64 = r11.u64 + r30.u64;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
	// add r11,r30,r14
	r11.u64 = r30.u64 + r14.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r11,r29
	r11.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// extsh r30,r11
	r30.s64 = r11.s16;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// blt cr6,0x8271c2c4
	if (cr6.lt) goto loc_8271C2C4;
loc_8271C2F8:
	// clrlwi r30,r30,16
	r30.u64 = r30.u32 & 0xFFFF;
	// lwz r11,148(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// mr r27,r30
	r27.u64 = r30.u64;
	// cmpw cr6,r27,r11
	cr6.compare<int32_t>(r27.s32, r11.s32, xer);
	// beq cr6,0x8271c448
	if (cr6.eq) goto loc_8271C448;
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x8271c568
	if (cr6.eq) goto loc_8271C568;
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// bne cr6,0x8271c360
	if (!cr6.eq) goto loc_8271C360;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// addic. r10,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	ctx.r10.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// rldicl r11,r11,1,63
	r11.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// rotlwi r30,r11,0
	r30.u64 = __builtin_rotateleft32(r11.u32, 0);
	// std r9,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r9.u64);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// bge 0x8271c34c
	if (!cr0.lt) goto loc_8271C34C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271C34C:
	// rlwinm r11,r27,1,0,30
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// addis r11,r11,1
	r11.s64 = r11.s64 + 65536;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// b 0x8271c424
	goto loc_8271C424;
loc_8271C360:
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x8271c428
	if (!cr6.eq) goto loc_8271C428;
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// li r30,2
	r30.s64 = 2;
	// mr r29,r18
	r29.u64 = r18.u64;
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// bge cr6,0x8271c3d8
	if (!cr6.lt) goto loc_8271C3D8;
loc_8271C380:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271c3d8
	if (cr6.eq) goto loc_8271C3D8;
	// subfic r8,r11,64
	xer.ca = r11.u32 <= 64;
	ctx.r8.s64 = 64 - r11.s64;
	// ld r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// subf. r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrldi r8,r8,32
	ctx.r8.u64 = ctx.r8.u64 & 0xFFFFFFFF;
	// subf r30,r11,r30
	r30.s64 = r30.s64 - r11.s64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// srd r8,r10,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r10.u64 >> (ctx.r8.u8 & 0x7F));
	// sld r11,r10,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 << (r11.u8 & 0x7F));
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// slw r11,r10,r30
	r11.u64 = r30.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r30.u8 & 0x3F));
	// add r29,r11,r29
	r29.u64 = r11.u64 + r29.u64;
	// bge 0x8271c3c8
	if (!cr0.lt) goto loc_8271C3C8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271C3C8:
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bgt cr6,0x8271c380
	if (cr6.gt) goto loc_8271C380;
loc_8271C3D8:
	// subfic r9,r30,64
	xer.ca = r30.u32 <= 64;
	ctx.r9.s64 = 64 - r30.s64;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r8,r30,32
	ctx.r8.u64 = r30.u64 & 0xFFFFFFFF;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// clrldi r9,r9,32
	ctx.r9.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// subf. r10,r30,r10
	ctx.r10.s64 = ctx.r10.s64 - r30.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r8,r11,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// srd r9,r11,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r9.u8 & 0x7F));
	// rotlwi r11,r9,0
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// add r30,r11,r29
	r30.u64 = r11.u64 + r29.u64;
	// std r8,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r8.u64);
	// bge 0x8271c414
	if (!cr0.lt) goto loc_8271C414;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271C414:
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// addis r11,r11,1
	r11.s64 = r11.s64 + 65536;
	// addi r11,r11,-3
	r11.s64 = r11.s64 + -3;
loc_8271C424:
	// clrlwi r30,r11,16
	r30.u64 = r11.u32 & 0xFFFF;
loc_8271C428:
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rldicl r8,r11,1,63
	ctx.r8.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// addic. r11,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	r11.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// rotlwi r29,r8,0
	r29.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// b 0x8271c544
	goto loc_8271C544;
loc_8271C448:
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// bgt cr6,0x8271c460
	if (cr6.gt) goto loc_8271C460;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// subfic r11,r11,3
	xer.ca = r11.u32 <= 3;
	r11.s64 = 3 - r11.s64;
	// b 0x8271c464
	goto loc_8271C464;
loc_8271C460:
	// mr r11,r18
	r11.u64 = r18.u64;
loc_8271C464:
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r30,r11,8
	r30.s64 = r11.s64 + 8;
	// mr r29,r18
	r29.u64 = r18.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// bne cr6,0x8271c484
	if (!cr6.eq) goto loc_8271C484;
	// mr r11,r18
	r11.u64 = r18.u64;
	// b 0x8271c524
	goto loc_8271C524;
loc_8271C484:
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// ble cr6,0x8271c4e4
	if (!cr6.gt) goto loc_8271C4E4;
loc_8271C48C:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271c4e4
	if (cr6.eq) goto loc_8271C4E4;
	// subfic r8,r11,64
	xer.ca = r11.u32 <= 64;
	ctx.r8.s64 = 64 - r11.s64;
	// ld r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// subf. r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrldi r8,r8,32
	ctx.r8.u64 = ctx.r8.u64 & 0xFFFFFFFF;
	// subf r30,r11,r30
	r30.s64 = r30.s64 - r11.s64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// srd r8,r10,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r10.u64 >> (ctx.r8.u8 & 0x7F));
	// sld r11,r10,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 << (r11.u8 & 0x7F));
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// slw r11,r10,r30
	r11.u64 = r30.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r30.u8 & 0x3F));
	// add r29,r11,r29
	r29.u64 = r11.u64 + r29.u64;
	// bge 0x8271c4d4
	if (!cr0.lt) goto loc_8271C4D4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271C4D4:
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bgt cr6,0x8271c48c
	if (cr6.gt) goto loc_8271C48C;
loc_8271C4E4:
	// subfic r9,r30,64
	xer.ca = r30.u32 <= 64;
	ctx.r9.s64 = 64 - r30.s64;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r8,r30,32
	ctx.r8.u64 = r30.u64 & 0xFFFFFFFF;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// clrldi r9,r9,32
	ctx.r9.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// subf. r10,r30,r10
	ctx.r10.s64 = ctx.r10.s64 - r30.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r8,r11,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// srd r9,r11,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r9.u8 & 0x7F));
	// rotlwi r11,r9,0
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// add r30,r11,r29
	r30.u64 = r11.u64 + r29.u64;
	// std r8,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r8.u64);
	// bge 0x8271c520
	if (!cr0.lt) goto loc_8271C520;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271C520:
	// mr r11,r30
	r11.u64 = r30.u64;
loc_8271C524:
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// clrlwi r30,r11,16
	r30.u64 = r11.u32 & 0xFFFF;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// addic. r10,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	ctx.r10.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// rldicl r11,r11,1,63
	r11.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// rotlwi r29,r11,0
	r29.u64 = __builtin_rotateleft32(r11.u32, 0);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
loc_8271C544:
	// std r9,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r9.u64);
	// bge 0x8271c554
	if (!cr0.lt) goto loc_8271C554;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271C554:
	// rlwinm r11,r29,1,0,30
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// extsh r10,r30
	ctx.r10.s64 = r30.s16;
	// subfic r11,r11,1
	xer.ca = r11.u32 <= 1;
	r11.s64 = 1 - r11.s64;
	// mullw r11,r11,r10
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r10.s32);
	// extsh r28,r11
	r28.s64 = r11.s16;
loc_8271C568:
	// sth r28,0(r26)
	PPC_STORE_U16(r26.u32 + 0, r28.u16);
	// lwz r11,0(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8271c814
	if (!cr6.eq) goto loc_8271C814;
	// lwz r11,156(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8271c594
	if (!cr6.eq) goto loc_8271C594;
	// lwz r6,1204(r24)
	ctx.r6.u64 = PPC_LOAD_U32(r24.u32 + 1204);
	// mr r31,r18
	r31.u64 = r18.u64;
	// b 0x8271c5c8
	goto loc_8271C5C8;
loc_8271C594:
	// lwz r31,164(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// lbz r10,1188(r24)
	ctx.r10.u64 = PPC_LOAD_U8(r24.u32 + 1188);
	// addi r11,r31,301
	r11.s64 = r31.s64 + 301;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r6,r11,r24
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + r24.u32);
	// beq cr6,0x8271c5c8
	if (cr6.eq) goto loc_8271C5C8;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// beq cr6,0x8271c5c8
	if (cr6.eq) goto loc_8271C5C8;
	// cmpwi cr6,r31,8
	cr6.compare<int32_t>(r31.s32, 8, xer);
	// li r31,8
	r31.s64 = 8;
	// bne cr6,0x8271c5c8
	if (!cr6.eq) goto loc_8271C5C8;
	// li r31,1
	r31.s64 = 1;
loc_8271C5C8:
	// lwz r11,172(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8271c5f0
	if (cr6.eq) goto loc_8271C5F0;
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// bl 0x826fcd00
	sub_826FCD00(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x8271c814
	if (cr6.lt) goto loc_8271C814;
loc_8271C5F0:
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x8271c660
	if (cr6.eq) goto loc_8271C660;
	// cmpwi cr6,r31,1
	cr6.compare<int32_t>(r31.s32, 1, xer);
	// beq cr6,0x8271c650
	if (cr6.eq) goto loc_8271C650;
	// cmpwi cr6,r31,8
	cr6.compare<int32_t>(r31.s32, 8, xer);
	// beq cr6,0x8271c61c
	if (cr6.eq) goto loc_8271C61C;
	// lhz r11,0(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// lhz r10,0(r25)
	ctx.r10.u64 = PPC_LOAD_U16(r25.u32 + 0);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// sth r11,0(r26)
	PPC_STORE_U16(r26.u32 + 0, r11.u16);
	// b 0x8271c660
	goto loc_8271C660;
loc_8271C61C:
	// mr r11,r26
	r11.u64 = r26.u64;
	// mr r9,r25
	ctx.r9.u64 = r25.u64;
	// li r10,8
	ctx.r10.s64 = 8;
loc_8271C628:
	// lhz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// lhz r7,0(r9)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// addi r9,r9,2
	ctx.r9.s64 = ctx.r9.s64 + 2;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// sth r8,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r8.u16);
	// addi r11,r11,16
	r11.s64 = r11.s64 + 16;
	// bne cr6,0x8271c628
	if (!cr6.eq) goto loc_8271C628;
	// b 0x8271c660
	goto loc_8271C660;
loc_8271C650:
	// lvx128 v0,r0,r25
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r25.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v13,r0,r26
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r26.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vaddshs v0,v13,v0
	_mm_store_si128((__m128i*)ctx.v0.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v13.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// stvx v0,r0,r26
	_mm_store_si128((__m128i*)(base + ((r26.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
loc_8271C660:
	// lbz r11,1188(r24)
	r11.u64 = PPC_LOAD_U8(r24.u32 + 1188);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271c6bc
	if (cr6.eq) goto loc_8271C6BC;
	// lhz r11,0(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// addi r10,r23,16
	ctx.r10.s64 = r23.s64 + 16;
	// sth r11,0(r23)
	PPC_STORE_U16(r23.u32 + 0, r11.u16);
	// lhz r11,16(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 16);
	// sth r11,2(r23)
	PPC_STORE_U16(r23.u32 + 2, r11.u16);
	// lhz r11,32(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 32);
	// sth r11,4(r23)
	PPC_STORE_U16(r23.u32 + 4, r11.u16);
	// lhz r11,48(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 48);
	// sth r11,6(r23)
	PPC_STORE_U16(r23.u32 + 6, r11.u16);
	// lhz r11,64(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 64);
	// sth r11,8(r23)
	PPC_STORE_U16(r23.u32 + 8, r11.u16);
	// lhz r11,80(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 80);
	// sth r11,10(r23)
	PPC_STORE_U16(r23.u32 + 10, r11.u16);
	// lhz r11,96(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 96);
	// sth r11,12(r23)
	PPC_STORE_U16(r23.u32 + 12, r11.u16);
	// lhz r11,112(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 112);
	// sth r11,14(r23)
	PPC_STORE_U16(r23.u32 + 14, r11.u16);
	// lvx128 v0,r0,r26
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r26.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v0,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// b 0x8271c704
	goto loc_8271C704;
loc_8271C6BC:
	// lvx128 v0,r0,r26
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r26.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v0,r0,r23
	_mm_store_si128((__m128i*)(base + ((r23.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lhz r11,0(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// sth r11,16(r23)
	PPC_STORE_U16(r23.u32 + 16, r11.u16);
	// lhz r11,16(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 16);
	// sth r11,18(r23)
	PPC_STORE_U16(r23.u32 + 18, r11.u16);
	// lhz r11,32(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 32);
	// sth r11,20(r23)
	PPC_STORE_U16(r23.u32 + 20, r11.u16);
	// lhz r11,48(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 48);
	// sth r11,22(r23)
	PPC_STORE_U16(r23.u32 + 22, r11.u16);
	// lhz r11,64(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 64);
	// sth r11,24(r23)
	PPC_STORE_U16(r23.u32 + 24, r11.u16);
	// lhz r11,80(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 80);
	// sth r11,26(r23)
	PPC_STORE_U16(r23.u32 + 26, r11.u16);
	// lhz r11,96(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 96);
	// sth r11,28(r23)
	PPC_STORE_U16(r23.u32 + 28, r11.u16);
	// lhz r11,112(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 112);
	// sth r11,30(r23)
	PPC_STORE_U16(r23.u32 + 30, r11.u16);
loc_8271C704:
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r31,96(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r9,88(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r27,r11,1
	r27.s64 = r11.s64 + 1;
	// add r10,r11,r31
	ctx.r10.u64 = r11.u64 + r31.u64;
	// srawi r11,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	r11.s64 = ctx.r9.s32 >> 1;
	// cmpwi cr6,r27,6
	cr6.compare<int32_t>(r27.s32, 6, xer);
	// stw r27,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r27.u32);
	// stb r18,6(r10)
	PPC_STORE_U8(ctx.r10.u32 + 6, r18.u8);
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r11.u32);
	// blt cr6,0x8271bd04
	if (cr6.lt) goto loc_8271BD04;
loc_8271C730:
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r31,r31,20
	r31.s64 = r31.s64 + 20;
	// lwz r25,80(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r30,r18
	r30.u64 = r18.u64;
	// addi r26,r11,1
	r26.s64 = r11.s64 + 1;
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmplw cr6,r26,r11
	cr6.compare<uint32_t>(r26.u32, r11.u32, xer);
	// stw r31,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r31.u32);
	// stw r26,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r26.u32);
	// blt cr6,0x8271abac
	if (cr6.lt) goto loc_8271ABAC;
loc_8271C758:
	// addi r25,r25,1
	r25.s64 = r25.s64 + 1;
	// lwz r11,140(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 140);
	// cmplw cr6,r25,r11
	cr6.compare<uint32_t>(r25.u32, r11.u32, xer);
	// stw r25,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r25.u32);
	// blt cr6,0x8271a818
	if (cr6.lt) goto loc_8271A818;
loc_8271C76C:
	// ld r11,104(r24)
	r11.u64 = PPC_LOAD_U64(r24.u32 + 104);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r10,84(r17)
	ctx.r10.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// std r11,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, r11.u64);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,112(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 112);
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,116(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 116);
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,120(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 120);
	// stw r10,16(r11)
	PPC_STORE_U32(r11.u32 + 16, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,124(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 124);
	// stw r10,20(r11)
	PPC_STORE_U32(r11.u32 + 20, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,128(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 128);
	// stw r10,24(r11)
	PPC_STORE_U32(r11.u32 + 24, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,132(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 132);
	// stw r10,28(r11)
	PPC_STORE_U32(r11.u32 + 28, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,136(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 136);
	// stw r10,32(r11)
	PPC_STORE_U32(r11.u32 + 32, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,140(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 140);
	// stw r10,36(r11)
	PPC_STORE_U32(r11.u32 + 36, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,144(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 144);
	// stw r10,40(r11)
	PPC_STORE_U32(r11.u32 + 40, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,148(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 148);
	// stw r10,44(r11)
	PPC_STORE_U32(r11.u32 + 44, ctx.r10.u32);
	// lwz r11,84(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 84);
	// lwz r10,152(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 152);
	// stw r10,48(r11)
	PPC_STORE_U32(r11.u32 + 48, ctx.r10.u32);
	// addi r1,r1,416
	ctx.r1.s64 = ctx.r1.s64 + 416;
	// b 0x8239bd10
	return;
loc_8271C808:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r1,r1,416
	ctx.r1.s64 = ctx.r1.s64 + 416;
	// b 0x8239bd10
	return;
loc_8271C814:
	// li r3,4
	ctx.r3.s64 = 4;
	// addi r1,r1,416
	ctx.r1.s64 = ctx.r1.s64 + 416;
	// b 0x8239bd10
	return;
}

__attribute__((alias("__imp__sub_8271C820"))) PPC_WEAK_FUNC(sub_8271C820);
PPC_FUNC_IMPL(__imp__sub_8271C820) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcc0
	// stwu r1,-1824(r1)
	ea = -1824 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r25,r3
	r25.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// addi r28,r25,21712
	r28.s64 = r25.s64 + 21712;
	// lwz r10,21560(r25)
	ctx.r10.u64 = PPC_LOAD_U32(r25.u32 + 21560);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lhz r9,52(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 52);
	// lwz r11,136(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 136);
	// rlwinm r30,r9,31,1,31
	r30.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 31) & 0x7FFFFFFF;
	// lhz r9,50(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 50);
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// stw r28,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r28.u32);
	// stw r10,28(r27)
	PPC_STORE_U32(r27.u32 + 28, ctx.r10.u32);
	// lis r10,-32126
	ctx.r10.s64 = -2105409536;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// lwz r3,3360(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + 3360);
	// rlwinm r10,r9,31,1,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 31) & 0x7FFFFFFF;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// stw r10,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r10.u32);
	// bl 0x8271d5f8
	sub_8271D5F8(ctx, base);
	// lwz r11,224(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 224);
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// lwz r8,3720(r25)
	ctx.r8.u64 = PPC_LOAD_U32(r25.u32 + 3720);
	// li r18,0
	r18.s64 = 0;
	// lwz r7,220(r25)
	ctx.r7.u64 = PPC_LOAD_U32(r25.u32 + 220);
	// lwz r9,3724(r25)
	ctx.r9.u64 = PPC_LOAD_U32(r25.u32 + 3724);
	// lwz r10,3728(r25)
	ctx.r10.u64 = PPC_LOAD_U32(r25.u32 + 3728);
	// add r22,r8,r7
	r22.u64 = ctx.r8.u64 + ctx.r7.u64;
	// add r21,r9,r11
	r21.u64 = ctx.r9.u64 + r11.u64;
	// lwz r26,268(r25)
	r26.u64 = PPC_LOAD_U32(r25.u32 + 268);
	// add r29,r10,r11
	r29.u64 = ctx.r10.u64 + r11.u64;
	// lbz r8,33(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 33);
	// stw r22,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r22.u32);
	// stw r21,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r21.u32);
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r29.u32);
	// ble cr6,0x8271cb98
	if (!cr6.gt) goto loc_8271CB98;
	// clrlwi r11,r8,31
	r11.u64 = ctx.r8.u32 & 0x1;
	// stw r30,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r30.u32);
	// lis r23,-32126
	r23.s64 = -2105409536;
	// lis r24,-32126
	r24.s64 = -2105409536;
	// li r15,1
	r15.s64 = 1;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// b 0x8271c8e8
	goto loc_8271C8E8;
loc_8271C8DC:
	// lwz r29,92(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r21,84(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r22,80(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_8271C8E8:
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r20,19992(r25)
	r20.u64 = PPC_LOAD_U32(r25.u32 + 19992);
	// lwz r17,19996(r25)
	r17.u64 = PPC_LOAD_U32(r25.u32 + 19996);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lwz r16,20000(r25)
	r16.u64 = PPC_LOAD_U32(r25.u32 + 20000);
	// stw r18,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r18.u32);
	// ble cr6,0x8271cb34
	if (!cr6.gt) goto loc_8271CB34;
	// mr r19,r18
	r19.u64 = r18.u64;
	// subf r14,r21,r29
	r14.s64 = r29.s64 - r21.s64;
loc_8271C90C:
	// mr r29,r18
	r29.u64 = r18.u64;
	// mr r30,r18
	r30.u64 = r18.u64;
	// addi r28,r31,392
	r28.s64 = r31.s64 + 392;
loc_8271C918:
	// lwz r10,28(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 28);
	// srawi r11,r29,2
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x3) != 0);
	r11.s64 = r29.s32 >> 2;
	// lwz r9,0(r28)
	ctx.r9.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// li r8,-128
	ctx.r8.s64 = -128;
	// addi r3,r10,-128
	ctx.r3.s64 = ctx.r10.s64 + -128;
	// addi r10,r11,2
	ctx.r10.s64 = r11.s64 + 2;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r10,r27
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r27.u32);
	// add r7,r10,r9
	ctx.r7.u64 = ctx.r10.u64 + ctx.r9.u64;
	// dcbt r8,r3
	// stw r3,28(r27)
	PPC_STORE_U32(r27.u32 + 28, ctx.r3.u32);
	// addi r11,r11,45
	r11.s64 = r11.s64 + 45;
	// lbz r10,4(r26)
	ctx.r10.u64 = PPC_LOAD_U8(r26.u32 + 4);
	// rlwinm r8,r11,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r5,224(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 224);
	// lwz r11,1312(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1312);
	// rotlwi r10,r10,6
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 6);
	// lwz r9,3364(r24)
	ctx.r9.u64 = PPC_LOAD_U32(r24.u32 + 3364);
	// add r5,r10,r5
	ctx.r5.u64 = ctx.r10.u64 + ctx.r5.u64;
	// lwz r6,3352(r23)
	ctx.r6.u64 = PPC_LOAD_U32(r23.u32 + 3352);
	// add r4,r30,r11
	ctx.r4.u64 = r30.u64 + r11.u64;
	// lhzx r8,r8,r31
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r8.u32 + r31.u32);
	// bl 0x8266bff0
	sub_8266BFF0(ctx, base);
	// addi r30,r30,128
	r30.s64 = r30.s64 + 128;
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// addi r28,r28,4
	r28.s64 = r28.s64 + 4;
	// cmpwi cr6,r30,768
	cr6.compare<int32_t>(r30.s32, 768, xer);
	// blt cr6,0x8271c918
	if (cr6.lt) goto loc_8271C918;
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271caa8
	if (cr6.eq) goto loc_8271CAA8;
	// lwz r10,0(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// rlwinm r10,r10,0,20,20
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x800;
	// lwz r9,192(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 192);
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// beq cr6,0x8271c9fc
	if (cr6.eq) goto loc_8271C9FC;
	// stwx r15,r9,r19
	PPC_STORE_U32(ctx.r9.u32 + r19.u32, r15.u32);
	// lhz r9,50(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 50);
	// lwz r8,188(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r15,r9,r8
	PPC_STORE_U32(ctx.r9.u32 + ctx.r8.u32, r15.u32);
	// lhz r9,50(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 50);
	// lwz r8,188(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// add r11,r9,r11
	r11.u64 = ctx.r9.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r15,r11,r8
	PPC_STORE_U32(r11.u32 + ctx.r8.u32, r15.u32);
	// lwz r11,188(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stw r15,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r15.u32);
	// lwz r11,188(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// stwx r15,r10,r11
	PPC_STORE_U32(ctx.r10.u32 + r11.u32, r15.u32);
	// b 0x8271ca40
	goto loc_8271CA40;
loc_8271C9FC:
	// stwx r18,r9,r19
	PPC_STORE_U32(ctx.r9.u32 + r19.u32, r18.u32);
	// lhz r9,50(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 50);
	// lwz r8,188(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r18,r9,r8
	PPC_STORE_U32(ctx.r9.u32 + ctx.r8.u32, r18.u32);
	// lhz r9,50(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 50);
	// lwz r8,188(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// add r11,r9,r11
	r11.u64 = ctx.r9.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r18,r11,r8
	PPC_STORE_U32(r11.u32 + ctx.r8.u32, r18.u32);
	// lwz r11,188(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stw r18,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r18.u32);
	// lwz r11,188(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// stwx r18,r10,r11
	PPC_STORE_U32(ctx.r10.u32 + r11.u32, r18.u32);
loc_8271CA40:
	// lhz r11,0(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// li r6,8
	ctx.r6.s64 = 8;
	// lwz r30,1312(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 1312);
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8271ca70
	if (!cr6.eq) goto loc_8271CA70;
	// lwz r7,112(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// rlwinm r11,r7,4,0,27
	r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 4) & 0xFFFFFFF0;
	// add r5,r11,r20
	ctx.r5.u64 = r11.u64 + r20.u64;
	// b 0x8271ca7c
	goto loc_8271CA7C;
loc_8271CA70:
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// rlwinm r7,r11,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r5,r7,r20
	ctx.r5.u64 = ctx.r7.u64 + r20.u64;
loc_8271CA7C:
	// bl 0x8261c808
	sub_8261C808(ctx, base);
	// li r6,8
	ctx.r6.s64 = 8;
	// mr r5,r16
	ctx.r5.u64 = r16.u64;
	// lwz r7,96(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// mr r4,r17
	ctx.r4.u64 = r17.u64;
	// addi r3,r30,512
	ctx.r3.s64 = r30.s64 + 512;
	// bl 0x8261c6f8
	sub_8261C6F8(ctx, base);
	// addi r20,r20,32
	r20.s64 = r20.s64 + 32;
	// addi r17,r17,16
	r17.s64 = r17.s64 + 16;
	// addi r16,r16,16
	r16.s64 = r16.s64 + 16;
	// b 0x8271cb00
	goto loc_8271CB00;
loc_8271CAA8:
	// lhz r11,0(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// li r6,8
	ctx.r6.s64 = 8;
	// lwz r30,1312(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 1312);
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// lhz r29,76(r31)
	r29.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8271cad8
	if (!cr6.eq) goto loc_8271CAD8;
	// lhz r7,74(r31)
	ctx.r7.u64 = PPC_LOAD_U16(r31.u32 + 74);
	// rotlwi r11,r7,3
	r11.u64 = __builtin_rotateleft32(ctx.r7.u32, 3);
	// b 0x8271cae0
	goto loc_8271CAE0;
loc_8271CAD8:
	// lhz r11,74(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 74);
	// rotlwi r7,r11,1
	ctx.r7.u64 = __builtin_rotateleft32(r11.u32, 1);
loc_8271CAE0:
	// add r5,r11,r22
	ctx.r5.u64 = r11.u64 + r22.u64;
	// bl 0x8261c528
	sub_8261C528(ctx, base);
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// li r6,8
	ctx.r6.s64 = 8;
	// add r5,r14,r21
	ctx.r5.u64 = r14.u64 + r21.u64;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// addi r3,r30,512
	ctx.r3.s64 = r30.s64 + 512;
	// bl 0x8261c378
	sub_8261C378(ctx, base);
loc_8271CB00:
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r22,r22,16
	r22.s64 = r22.s64 + 16;
	// lwz r10,108(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// addi r21,r21,8
	r21.s64 = r21.s64 + 8;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r26,r26,20
	r26.s64 = r26.s64 + 20;
	// addi r19,r19,4
	r19.s64 = r19.s64 + 4;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r11.u32);
	// blt cr6,0x8271c90c
	if (cr6.lt) goto loc_8271C90C;
	// lwz r29,92(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r21,84(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r22,80(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_8271CB34:
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271cb60
	if (cr6.eq) goto loc_8271CB60;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// lwz r9,20000(r25)
	ctx.r9.u64 = PPC_LOAD_U32(r25.u32 + 20000);
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// lwz r8,19996(r25)
	ctx.r8.u64 = PPC_LOAD_U32(r25.u32 + 19996);
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// lwz r7,19992(r25)
	ctx.r7.u64 = PPC_LOAD_U32(r25.u32 + 19992);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8271df40
	sub_8271DF40(ctx, base);
loc_8271CB60:
	// lwz r10,104(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lwz r11,232(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 232);
	// addi r9,r10,-1
	ctx.r9.s64 = ctx.r10.s64 + -1;
	// lwz r10,228(r25)
	ctx.r10.u64 = PPC_LOAD_U32(r25.u32 + 228);
	// add r10,r10,r22
	ctx.r10.u64 = ctx.r10.u64 + r22.u64;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// stw r9,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r9.u32);
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// add r10,r11,r21
	ctx.r10.u64 = r11.u64 + r21.u64;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// bne cr6,0x8271c8dc
	if (!cr6.eq) goto loc_8271C8DC;
	// lwz r28,116(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
loc_8271CB98:
	// lis r11,-32126
	r11.s64 = -2105409536;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lwz r31,3360(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 3360);
	// bl 0x8271d940
	sub_8271D940(ctx, base);
	// mr r8,r18
	ctx.r8.u64 = r18.u64;
	// addi r10,r31,8
	ctx.r10.s64 = r31.s64 + 8;
	// addi r11,r1,1140
	r11.s64 = ctx.r1.s64 + 1140;
	// lis r7,-32126
	ctx.r7.s64 = -2105409536;
loc_8271CBBC:
	// lwz r9,-8(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + -8);
	// lwz r6,-4(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -4);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271cbfc
	if (!cr6.eq) goto loc_8271CBFC;
	// lwz r9,-4(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + -4);
	// lwz r6,0(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271cbfc
	if (!cr6.eq) goto loc_8271CBFC;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// lwz r6,4(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271cbfc
	if (!cr6.eq) goto loc_8271CBFC;
	// lwz r9,4(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// lwz r6,8(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// beq cr6,0x8271cc00
	if (cr6.eq) goto loc_8271CC00;
loc_8271CBFC:
	// stw r8,-25020(r7)
	PPC_STORE_U32(ctx.r7.u32 + -25020, ctx.r8.u32);
loc_8271CC00:
	// lwz r9,8(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// lwz r6,-20(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -20);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271cc40
	if (!cr6.eq) goto loc_8271CC40;
	// lwz r9,12(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	// lwz r6,-16(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -16);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271cc40
	if (!cr6.eq) goto loc_8271CC40;
	// lwz r9,16(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	// lwz r6,-12(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -12);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271cc40
	if (!cr6.eq) goto loc_8271CC40;
	// lwz r9,20(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 20);
	// lwz r6,-8(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -8);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// beq cr6,0x8271cc48
	if (cr6.eq) goto loc_8271CC48;
loc_8271CC40:
	// addi r9,r8,1
	ctx.r9.s64 = ctx.r8.s64 + 1;
	// stw r9,-25020(r7)
	PPC_STORE_U32(ctx.r7.u32 + -25020, ctx.r9.u32);
loc_8271CC48:
	// lwz r9,24(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	// lwz r6,-36(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -36);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271cc88
	if (!cr6.eq) goto loc_8271CC88;
	// lwz r9,28(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 28);
	// lwz r6,-32(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -32);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271cc88
	if (!cr6.eq) goto loc_8271CC88;
	// lwz r9,32(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 32);
	// lwz r6,-28(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -28);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271cc88
	if (!cr6.eq) goto loc_8271CC88;
	// lwz r9,36(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 36);
	// lwz r6,-24(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -24);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// beq cr6,0x8271cc90
	if (cr6.eq) goto loc_8271CC90;
loc_8271CC88:
	// addi r9,r8,2
	ctx.r9.s64 = ctx.r8.s64 + 2;
	// stw r9,-25020(r7)
	PPC_STORE_U32(ctx.r7.u32 + -25020, ctx.r9.u32);
loc_8271CC90:
	// addi r8,r8,3
	ctx.r8.s64 = ctx.r8.s64 + 3;
	// addi r11,r11,-48
	r11.s64 = r11.s64 + -48;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmpwi cr6,r8,9
	cr6.compare<int32_t>(ctx.r8.s32, 9, xer);
	// blt cr6,0x8271cbbc
	if (cr6.lt) goto loc_8271CBBC;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,1824
	ctx.r1.s64 = ctx.r1.s64 + 1824;
	// b 0x8239bd10
	return;
}

__attribute__((alias("__imp__sub_8271CCB0"))) PPC_WEAK_FUNC(sub_8271CCB0);
PPC_FUNC_IMPL(__imp__sub_8271CCB0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcfc
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r29,r31,17248
	r29.s64 = r31.s64 + 17248;
	// addi r30,r31,15920
	r30.s64 = r31.s64 + 15920;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x8271a718
	sub_8271A718(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8271cd78
	if (!cr6.eq) goto loc_8271CD78;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8271c820
	sub_8271C820(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8271cd78
	if (!cr6.eq) goto loc_8271CD78;
	// lwz r11,3892(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 3892);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8271cd64
	if (cr6.eq) goto loc_8271CD64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,268(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 268);
	// bl 0x82722a00
	sub_82722A00(ctx, base);
	// lwz r6,3720(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 3720);
	// lwz r8,220(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 220);
	// li r7,0
	ctx.r7.s64 = 0;
	// lwz r11,224(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 224);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r9,3728(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 3728);
	// add r4,r8,r6
	ctx.r4.u64 = ctx.r8.u64 + ctx.r6.u64;
	// lwz r10,3724(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 3724);
	// add r6,r9,r11
	ctx.r6.u64 = ctx.r9.u64 + r11.u64;
	// add r5,r10,r11
	ctx.r5.u64 = ctx.r10.u64 + r11.u64;
	// bl 0x82722bc8
	sub_82722BC8(ctx, base);
	// lwz r6,3720(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 3720);
	// lwz r8,220(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 220);
	// li r7,1
	ctx.r7.s64 = 1;
	// lwz r11,224(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 224);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r9,3728(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 3728);
	// add r4,r8,r6
	ctx.r4.u64 = ctx.r8.u64 + ctx.r6.u64;
	// lwz r10,3724(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 3724);
	// add r6,r9,r11
	ctx.r6.u64 = ctx.r9.u64 + r11.u64;
	// add r5,r10,r11
	ctx.r5.u64 = ctx.r10.u64 + r11.u64;
	// bl 0x82722bc8
	sub_82722BC8(ctx, base);
loc_8271CD64:
	// li r11,0
	r11.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,15536(r31)
	PPC_STORE_U32(r31.u32 + 15536, r11.u32);
	// stw r11,15528(r31)
	PPC_STORE_U32(r31.u32 + 15528, r11.u32);
	// stw r11,15564(r31)
	PPC_STORE_U32(r31.u32 + 15564, r11.u32);
loc_8271CD78:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x8239bd4c
	return;
}

__attribute__((alias("__imp__sub_8271CD80"))) PPC_WEAK_FUNC(sub_8271CD80);
PPC_FUNC_IMPL(__imp__sub_8271CD80) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcf8
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,21000(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 21000);
	// mulli r11,r11,1888
	r11.s64 = r11.s64 * 1888;
	// add r29,r11,r31
	r29.u64 = r11.u64 + r31.u64;
	// addi r30,r29,15920
	r30.s64 = r29.s64 + 15920;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x8271a4e8
	sub_8271A4E8(ctx, base);
	// addi r28,r29,17248
	r28.s64 = r29.s64 + 17248;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// bl 0x82717800
	sub_82717800(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8271ce48
	if (!cr6.eq) goto loc_8271CE48;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82719a18
	sub_82719A18(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8271ce48
	if (!cr6.eq) goto loc_8271CE48;
	// lwz r11,3892(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 3892);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8271ce3c
	if (cr6.eq) goto loc_8271CE3C;
	// lwz r9,208(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 208);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r7,204(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 204);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// srawi r9,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 1;
	// lwz r11,17436(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 17436);
	// srawi r6,r7,1
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x1) != 0);
	ctx.r6.s64 = ctx.r7.s32 >> 1;
	// lwz r10,224(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 224);
	// lwz r8,3728(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 3728);
	// mullw r9,r9,r11
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(r11.s32);
	// lwz r30,3724(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 3724);
	// lwz r5,3720(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 3720);
	// lwz r7,220(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 220);
	// mullw r6,r6,r11
	ctx.r6.s64 = int64_t(ctx.r6.s32) * int64_t(r11.s32);
	// add r8,r8,r10
	ctx.r8.u64 = ctx.r8.u64 + ctx.r10.u64;
	// add r11,r30,r10
	r11.u64 = r30.u64 + ctx.r10.u64;
	// add r10,r6,r5
	ctx.r10.u64 = ctx.r6.u64 + ctx.r5.u64;
	// add r6,r11,r9
	ctx.r6.u64 = r11.u64 + ctx.r9.u64;
	// add r5,r10,r7
	ctx.r5.u64 = ctx.r10.u64 + ctx.r7.u64;
	// add r7,r8,r9
	ctx.r7.u64 = ctx.r8.u64 + ctx.r9.u64;
	// bl 0x826124f0
	sub_826124F0(ctx, base);
loc_8271CE3C:
	// li r11,0
	r11.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,15564(r31)
	PPC_STORE_U32(r31.u32 + 15564, r11.u32);
loc_8271CE48:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x8239bd48
	return;
}

__attribute__((alias("__imp__sub_8271CE50"))) PPC_WEAK_FUNC(sub_8271CE50);
PPC_FUNC_IMPL(__imp__sub_8271CE50) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcfc
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r29,r31,17248
	r29.s64 = r31.s64 + 17248;
	// addi r30,r31,15920
	r30.s64 = r31.s64 + 15920;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x826ee010
	sub_826EE010(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8271cf4c
	if (!cr6.eq) goto loc_8271CF4C;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82716180
	sub_82716180(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8271cf4c
	if (!cr6.eq) goto loc_8271CF4C;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82726170
	sub_82726170(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8271cf4c
	if (!cr6.eq) goto loc_8271CF4C;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x826fe758
	sub_826FE758(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8271cf4c
	if (!cr6.eq) goto loc_8271CF4C;
	// lwz r11,3892(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 3892);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8271cf34
	if (cr6.eq) goto loc_8271CF34;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,268(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 268);
	// bl 0x82722a98
	sub_82722A98(ctx, base);
	// lwz r6,3720(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 3720);
	// lwz r8,220(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 220);
	// li r7,0
	ctx.r7.s64 = 0;
	// lwz r11,224(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 224);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r9,3728(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 3728);
	// add r4,r8,r6
	ctx.r4.u64 = ctx.r8.u64 + ctx.r6.u64;
	// lwz r10,3724(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 3724);
	// add r6,r9,r11
	ctx.r6.u64 = ctx.r9.u64 + r11.u64;
	// add r5,r10,r11
	ctx.r5.u64 = ctx.r10.u64 + r11.u64;
	// bl 0x82722bc8
	sub_82722BC8(ctx, base);
	// lwz r6,3720(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 3720);
	// lwz r8,220(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 220);
	// li r7,1
	ctx.r7.s64 = 1;
	// lwz r11,224(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 224);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r9,3728(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 3728);
	// add r4,r8,r6
	ctx.r4.u64 = ctx.r8.u64 + ctx.r6.u64;
	// lwz r10,3724(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 3724);
	// add r6,r9,r11
	ctx.r6.u64 = ctx.r9.u64 + r11.u64;
	// add r5,r10,r11
	ctx.r5.u64 = ctx.r10.u64 + r11.u64;
	// bl 0x82722bc8
	sub_82722BC8(ctx, base);
loc_8271CF34:
	// li r11,1
	r11.s64 = 1;
	// li r10,0
	ctx.r10.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,15560(r31)
	PPC_STORE_U32(r31.u32 + 15560, r11.u32);
	// stw r10,15564(r31)
	PPC_STORE_U32(r31.u32 + 15564, ctx.r10.u32);
	// stw r11,15536(r31)
	PPC_STORE_U32(r31.u32 + 15536, r11.u32);
loc_8271CF4C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x8239bd4c
	return;
}

__attribute__((alias("__imp__sub_8271CF54"))) PPC_WEAK_FUNC(sub_8271CF54);
PPC_FUNC_IMPL(__imp__sub_8271CF54) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8271CF58"))) PPC_WEAK_FUNC(sub_8271CF58);
PPC_FUNC_IMPL(__imp__sub_8271CF58) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcfc
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r29,r31,17248
	r29.s64 = r31.s64 + 17248;
	// addi r30,r31,15920
	r30.s64 = r31.s64 + 15920;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x826efba0
	sub_826EFBA0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8271d054
	if (!cr6.eq) goto loc_8271D054;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82716180
	sub_82716180(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8271d054
	if (!cr6.eq) goto loc_8271D054;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x827262d0
	sub_827262D0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8271d054
	if (!cr6.eq) goto loc_8271D054;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x826fed60
	sub_826FED60(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8271d054
	if (!cr6.eq) goto loc_8271D054;
	// lwz r11,3892(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 3892);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8271d03c
	if (cr6.eq) goto loc_8271D03C;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,268(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 268);
	// bl 0x82722a98
	sub_82722A98(ctx, base);
	// lwz r6,3720(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 3720);
	// lwz r8,220(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 220);
	// li r7,0
	ctx.r7.s64 = 0;
	// lwz r11,224(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 224);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r9,3728(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 3728);
	// add r4,r8,r6
	ctx.r4.u64 = ctx.r8.u64 + ctx.r6.u64;
	// lwz r10,3724(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 3724);
	// add r6,r9,r11
	ctx.r6.u64 = ctx.r9.u64 + r11.u64;
	// add r5,r10,r11
	ctx.r5.u64 = ctx.r10.u64 + r11.u64;
	// bl 0x82722bc8
	sub_82722BC8(ctx, base);
	// lwz r6,3720(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 3720);
	// lwz r8,220(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 220);
	// li r7,1
	ctx.r7.s64 = 1;
	// lwz r11,224(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 224);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r9,3728(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 3728);
	// add r4,r8,r6
	ctx.r4.u64 = ctx.r8.u64 + ctx.r6.u64;
	// lwz r10,3724(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 3724);
	// add r6,r9,r11
	ctx.r6.u64 = ctx.r9.u64 + r11.u64;
	// add r5,r10,r11
	ctx.r5.u64 = ctx.r10.u64 + r11.u64;
	// bl 0x82722bc8
	sub_82722BC8(ctx, base);
loc_8271D03C:
	// li r11,1
	r11.s64 = 1;
	// li r10,0
	ctx.r10.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,15560(r31)
	PPC_STORE_U32(r31.u32 + 15560, r11.u32);
	// stw r10,15564(r31)
	PPC_STORE_U32(r31.u32 + 15564, ctx.r10.u32);
	// stw r11,15536(r31)
	PPC_STORE_U32(r31.u32 + 15536, r11.u32);
loc_8271D054:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x8239bd4c
	return;
}

__attribute__((alias("__imp__sub_8271D05C"))) PPC_WEAK_FUNC(sub_8271D05C);
PPC_FUNC_IMPL(__imp__sub_8271D05C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8271D060"))) PPC_WEAK_FUNC(sub_8271D060);
PPC_FUNC_IMPL(__imp__sub_8271D060) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcf8
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,21000(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 21000);
	// mulli r11,r11,1888
	r11.s64 = r11.s64 * 1888;
	// add r28,r11,r31
	r28.u64 = r11.u64 + r31.u64;
	// addi r30,r28,15920
	r30.s64 = r28.s64 + 15920;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x826f24c0
	sub_826F24C0(ctx, base);
	// addi r29,r28,17248
	r29.s64 = r28.s64 + 17248;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// bl 0x826f28e8
	sub_826F28E8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8271d194
	if (!cr6.eq) goto loc_8271D194;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82716b38
	sub_82716B38(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8271d194
	if (!cr6.eq) goto loc_8271D194;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x827327a0
	sub_827327A0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8271d194
	if (!cr6.eq) goto loc_8271D194;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x826ff2f8
	sub_826FF2F8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8271d194
	if (!cr6.eq) goto loc_8271D194;
	// lwz r11,3892(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 3892);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8271d158
	if (cr6.eq) goto loc_8271D158;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82614148
	sub_82614148(ctx, base);
	// lwz r9,208(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 208);
	// lwz r7,204(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 204);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// srawi r9,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 1;
	// lwz r11,17436(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 17436);
	// srawi r6,r7,1
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x1) != 0);
	ctx.r6.s64 = ctx.r7.s32 >> 1;
	// lwz r10,224(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 224);
	// lwz r8,3728(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 3728);
	// mullw r9,r9,r11
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(r11.s32);
	// lwz r30,3724(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 3724);
	// lwz r5,3720(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 3720);
	// lwz r7,220(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 220);
	// mullw r6,r6,r11
	ctx.r6.s64 = int64_t(ctx.r6.s32) * int64_t(r11.s32);
	// add r8,r8,r10
	ctx.r8.u64 = ctx.r8.u64 + ctx.r10.u64;
	// add r11,r30,r10
	r11.u64 = r30.u64 + ctx.r10.u64;
	// add r10,r6,r5
	ctx.r10.u64 = ctx.r6.u64 + ctx.r5.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// add r6,r11,r9
	ctx.r6.u64 = r11.u64 + ctx.r9.u64;
	// add r5,r10,r7
	ctx.r5.u64 = ctx.r10.u64 + ctx.r7.u64;
	// add r7,r8,r9
	ctx.r7.u64 = ctx.r8.u64 + ctx.r9.u64;
	// bl 0x82612ea8
	sub_82612EA8(ctx, base);
loc_8271D158:
	// lwz r11,3892(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 3892);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8271d180
	if (!cr6.eq) goto loc_8271D180;
	// lwz r11,14824(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 14824);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8271d180
	if (!cr6.eq) goto loc_8271D180;
	// lwz r11,15196(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15196);
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// li r11,0
	r11.s64 = 0;
	// beq cr6,0x8271d184
	if (cr6.eq) goto loc_8271D184;
loc_8271D180:
	// li r11,1
	r11.s64 = 1;
loc_8271D184:
	// stw r11,15560(r31)
	PPC_STORE_U32(r31.u32 + 15560, r11.u32);
	// li r11,1
	r11.s64 = 1;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,15536(r31)
	PPC_STORE_U32(r31.u32 + 15536, r11.u32);
loc_8271D194:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x8239bd48
	return;
}

__attribute__((alias("__imp__sub_8271D19C"))) PPC_WEAK_FUNC(sub_8271D19C);
PPC_FUNC_IMPL(__imp__sub_8271D19C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8271D1A0"))) PPC_WEAK_FUNC(sub_8271D1A0);
PPC_FUNC_IMPL(__imp__sub_8271D1A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcf8
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,21000(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 21000);
	// mulli r11,r11,1888
	r11.s64 = r11.s64 * 1888;
	// add r28,r11,r31
	r28.u64 = r11.u64 + r31.u64;
	// addi r30,r28,15920
	r30.s64 = r28.s64 + 15920;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x826f9890
	sub_826F9890(ctx, base);
	// addi r29,r28,17248
	r29.s64 = r28.s64 + 17248;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// bl 0x826fa950
	sub_826FA950(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8271d2dc
	if (!cr6.eq) goto loc_8271D2DC;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82716b38
	sub_82716B38(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8271d2dc
	if (!cr6.eq) goto loc_8271D2DC;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82733c30
	sub_82733C30(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8271d2dc
	if (!cr6.eq) goto loc_8271D2DC;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x826ff2f8
	sub_826FF2F8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8271d2dc
	if (!cr6.eq) goto loc_8271D2DC;
	// lwz r11,3892(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 3892);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8271d298
	if (cr6.eq) goto loc_8271D298;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82614148
	sub_82614148(ctx, base);
	// lwz r9,208(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 208);
	// lwz r7,204(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 204);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// srawi r9,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 1;
	// lwz r11,17436(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 17436);
	// srawi r6,r7,1
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x1) != 0);
	ctx.r6.s64 = ctx.r7.s32 >> 1;
	// lwz r10,224(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 224);
	// lwz r8,3728(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 3728);
	// mullw r9,r9,r11
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(r11.s32);
	// lwz r30,3724(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 3724);
	// lwz r5,3720(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 3720);
	// lwz r7,220(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 220);
	// mullw r6,r6,r11
	ctx.r6.s64 = int64_t(ctx.r6.s32) * int64_t(r11.s32);
	// add r8,r8,r10
	ctx.r8.u64 = ctx.r8.u64 + ctx.r10.u64;
	// add r11,r30,r10
	r11.u64 = r30.u64 + ctx.r10.u64;
	// add r10,r6,r5
	ctx.r10.u64 = ctx.r6.u64 + ctx.r5.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// add r6,r11,r9
	ctx.r6.u64 = r11.u64 + ctx.r9.u64;
	// add r5,r10,r7
	ctx.r5.u64 = ctx.r10.u64 + ctx.r7.u64;
	// add r7,r8,r9
	ctx.r7.u64 = ctx.r8.u64 + ctx.r9.u64;
	// bl 0x82612ea8
	sub_82612EA8(ctx, base);
loc_8271D298:
	// lwz r11,3892(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 3892);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8271d2c0
	if (!cr6.eq) goto loc_8271D2C0;
	// lwz r11,14824(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 14824);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8271d2c0
	if (!cr6.eq) goto loc_8271D2C0;
	// lwz r11,15196(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15196);
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// li r11,0
	r11.s64 = 0;
	// beq cr6,0x8271d2c4
	if (cr6.eq) goto loc_8271D2C4;
loc_8271D2C0:
	// li r11,1
	r11.s64 = 1;
loc_8271D2C4:
	// stw r11,15560(r31)
	PPC_STORE_U32(r31.u32 + 15560, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,15564(r31)
	PPC_STORE_U32(r31.u32 + 15564, r11.u32);
	// li r11,1
	r11.s64 = 1;
	// stw r11,15536(r31)
	PPC_STORE_U32(r31.u32 + 15536, r11.u32);
loc_8271D2DC:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x8239bd48
	return;
}

__attribute__((alias("__imp__sub_8271D2E4"))) PPC_WEAK_FUNC(sub_8271D2E4);
PPC_FUNC_IMPL(__imp__sub_8271D2E4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8271D2E8"))) PPC_WEAK_FUNC(sub_8271D2E8);
PPC_FUNC_IMPL(__imp__sub_8271D2E8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bce0
	// rlwinm r10,r5,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 1) & 0xFFFFFFFE;
	// stw r5,36(r1)
	PPC_STORE_U32(ctx.r1.u32 + 36, ctx.r5.u32);
	// rlwinm r11,r5,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// stw r3,20(r1)
	PPC_STORE_U32(ctx.r1.u32 + 20, ctx.r3.u32);
	// add r9,r10,r5
	ctx.r9.u64 = ctx.r10.u64 + ctx.r5.u64;
	// stw r4,28(r1)
	PPC_STORE_U32(ctx.r1.u32 + 28, ctx.r4.u32);
	// add r6,r11,r10
	ctx.r6.u64 = r11.u64 + ctx.r10.u64;
	// vspltisb v0,0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_set1_epi8(char(0x0)));
	// add r31,r9,r11
	r31.u64 = ctx.r9.u64 + r11.u64;
	// lvx128 v13,r0,r3
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stw r10,-144(r1)
	PPC_STORE_U32(ctx.r1.u32 + -144, ctx.r10.u32);
	// add r7,r11,r5
	ctx.r7.u64 = r11.u64 + ctx.r5.u64;
	// add r10,r10,r4
	ctx.r10.u64 = ctx.r10.u64 + ctx.r4.u64;
	// stw r11,-136(r1)
	PPC_STORE_U32(ctx.r1.u32 + -136, r11.u32);
	// li r29,16
	r29.s64 = 16;
	// stw r9,-140(r1)
	PPC_STORE_U32(ctx.r1.u32 + -140, ctx.r9.u32);
	// add r8,r4,r5
	ctx.r8.u64 = ctx.r4.u64 + ctx.r5.u64;
	// stw r6,-128(r1)
	PPC_STORE_U32(ctx.r1.u32 + -128, ctx.r6.u32);
	// li r30,16
	r30.s64 = 16;
	// stw r31,-124(r1)
	PPC_STORE_U32(ctx.r1.u32 + -124, r31.u32);
	// add r5,r31,r4
	ctx.r5.u64 = r31.u64 + ctx.r4.u64;
	// stw r7,-132(r1)
	PPC_STORE_U32(ctx.r1.u32 + -132, ctx.r7.u32);
	// add r9,r9,r4
	ctx.r9.u64 = ctx.r9.u64 + ctx.r4.u64;
	// lvlx v6,0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// li r31,16
	r31.s64 = 16;
	// lvrx v7,r10,r29
	temp.u32 = ctx.r10.u32 + r29.u32;
	_mm_store_si128((__m128i*)ctx.v7.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// li r28,16
	r28.s64 = 16;
	// lvlx v8,0,r8
	temp.u32 = ctx.r8.u32;
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// add r6,r6,r4
	ctx.r6.u64 = ctx.r6.u64 + ctx.r4.u64;
	// lvrx v9,r8,r30
	temp.u32 = ctx.r8.u32 + r30.u32;
	_mm_store_si128((__m128i*)ctx.v9.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// li r26,16
	r26.s64 = 16;
	// vor v7,v6,v7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// lvlx v4,0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// li r27,16
	r27.s64 = 16;
	// lvlx v11,0,r4
	temp.u32 = ctx.r4.u32;
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v5,r9,r28
	temp.u32 = ctx.r9.u32 + r28.u32;
	_mm_store_si128((__m128i*)ctx.v5.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// vor v9,v8,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v9.u8)));
	// lvrx v12,r4,r31
	temp.u32 = ctx.r4.u32 + r31.u32;
	_mm_store_si128((__m128i*)ctx.v12.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// add r7,r7,r4
	ctx.r7.u64 = ctx.r7.u64 + ctx.r4.u64;
	// lvrx v8,r6,r26
	temp.u32 = ctx.r6.u32 + r26.u32;
	_mm_store_si128((__m128i*)ctx.v8.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// vor v12,v11,v12
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v12.u8)));
	// lvlx v6,0,r6
	temp.u32 = ctx.r6.u32;
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// vor v29,v4,v5
	_mm_store_si128((__m128i*)v29.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// lvrx v3,r11,r27
	temp.u32 = r11.u32 + r27.u32;
	_mm_store_si128((__m128i*)ctx.v3.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// vor v4,v6,v8
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v8.u8)));
	// lvlx v1,0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// vor v8,v7,v7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_load_si128((__m128i*)ctx.v7.u8));
	// vor v1,v1,v3
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// addi r24,r3,16
	r24.s64 = ctx.r3.s64 + 16;
	// li r25,16
	r25.s64 = 16;
	// lvrx v31,r7,r31
	temp.u32 = ctx.r7.u32 + r31.u32;
	_mm_store_si128((__m128i*)v31.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// addi r23,r3,32
	r23.s64 = ctx.r3.s64 + 32;
	// lvlx v30,0,r7
	temp.u32 = ctx.r7.u32;
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// vmrghb v12,v0,v12
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// addi r22,r3,48
	r22.s64 = ctx.r3.s64 + 48;
	// vmrghb v9,v0,v9
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// addi r11,r3,64
	r11.s64 = ctx.r3.s64 + 64;
	// addi r10,r3,80
	ctx.r10.s64 = ctx.r3.s64 + 80;
	// vor v5,v30,v31
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_or_si128(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)v31.u8)));
	// addi r9,r3,96
	ctx.r9.s64 = ctx.r3.s64 + 96;
	// vor v7,v29,v29
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_load_si128((__m128i*)v29.u8));
	// addi r8,r3,112
	ctx.r8.s64 = ctx.r3.s64 + 112;
	// vor v6,v1,v1
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)ctx.v1.u8));
	// vmrghb v8,v0,v8
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v11,r0,r24
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r24.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v10,r0,r23
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r23.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vaddshs v13,v13,v12
	_mm_store_si128((__m128i*)ctx.v13.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v13.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// lvrx v28,r5,r25
	temp.u32 = ctx.r5.u32 + r25.u32;
	_mm_store_si128((__m128i*)v28.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// vaddshs v12,v11,v9
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v9.s16)));
	// lvlx v3,0,r5
	temp.u32 = ctx.r5.u32;
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// vmrghb v7,v0,v7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v2,r0,r22
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r22.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vor v3,v3,v28
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)v28.u8)));
	// lvx128 v1,r0,r11
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v6,v0,v6
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v31,r0,r10
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vaddshs v11,v10,v8
	_mm_store_si128((__m128i*)ctx.v11.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v8.s16)));
	// lvx128 v30,r0,r9
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmrghb v9,v0,v5
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// lvx128 v29,r0,r8
	_mm_store_si128((__m128i*)v29.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vpkshus v13,v13,v13
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v13.s16), _mm_load_si128((__m128i*)ctx.v13.s16)));
	// li r11,4
	r11.s64 = 4;
	// vmrghb v5,v0,v3
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v3.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// li r9,4
	ctx.r9.s64 = 4;
	// vmrghb v8,v0,v4
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_unpackhi_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v0.u8)));
	// vaddshs v0,v2,v7
	_mm_store_si128((__m128i*)ctx.v0.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v2.s16), _mm_load_si128((__m128i*)ctx.v7.s16)));
	// vpkshus v7,v12,v12
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// li r8,4
	ctx.r8.s64 = 4;
	// vpkshus v11,v11,v11
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// vaddshs v10,v1,v6
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v1.s16), _mm_load_si128((__m128i*)ctx.v6.s16)));
	// vaddshs v12,v29,v5
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)v29.s16), _mm_load_si128((__m128i*)ctx.v5.s16)));
	// li r7,4
	ctx.r7.s64 = 4;
	// vpkshus v0,v0,v0
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v0.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// li r6,4
	ctx.r6.s64 = 4;
	// stvewx v13,r0,r4
	ea = (ctx.r4.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v13.u32[3 - ((ea & 0xF) >> 2)]);
	// lwz r10,28(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 28);
	// vpkshus v10,v10,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v10.s16)));
	// vaddshs v9,v31,v9
	_mm_store_si128((__m128i*)ctx.v9.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)v31.s16), _mm_load_si128((__m128i*)ctx.v9.s16)));
	// li r5,4
	ctx.r5.s64 = 4;
	// vaddshs v8,v30,v8
	_mm_store_si128((__m128i*)ctx.v8.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)v30.s16), _mm_load_si128((__m128i*)ctx.v8.s16)));
	// vor v6,v0,v0
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_load_si128((__m128i*)ctx.v0.u8));
	// li r4,4
	ctx.r4.s64 = 4;
	// vor v5,v0,v0
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_load_si128((__m128i*)ctx.v0.u8));
	// vpkshus v12,v12,v12
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v12.s16)));
	// stvewx v13,r10,r11
	ea = (ctx.r10.u32 + r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v13.u32[3 - ((ea & 0xF) >> 2)]);
	// lwz r11,28(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 28);
	// lwz r10,36(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 36);
	// vpkshus v0,v9,v9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v9.s16), _mm_load_si128((__m128i*)ctx.v9.s16)));
	// vpkshus v13,v8,v8
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v8.s16), _mm_load_si128((__m128i*)ctx.v8.s16)));
	// li r3,4
	ctx.r3.s64 = 4;
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// stvewx v7,r0,r10
	ea = (ctx.r10.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v7.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v7,r10,r9
	ea = (ctx.r10.u32 + ctx.r9.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v7.u32[3 - ((ea & 0xF) >> 2)]);
	// lwz r10,-144(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -144);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// stvewx v11,r0,r10
	ea = (ctx.r10.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v11.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v11,r10,r8
	ea = (ctx.r10.u32 + ctx.r8.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v11.u32[3 - ((ea & 0xF) >> 2)]);
	// lwz r10,-140(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -140);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// stvewx v6,r0,r10
	ea = (ctx.r10.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v6.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v5,r10,r7
	ea = (ctx.r10.u32 + ctx.r7.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v5.u32[3 - ((ea & 0xF) >> 2)]);
	// lwz r10,-136(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -136);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// stvewx v10,r0,r10
	ea = (ctx.r10.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v10.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v10,r10,r6
	ea = (ctx.r10.u32 + ctx.r6.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v10.u32[3 - ((ea & 0xF) >> 2)]);
	// lwz r10,-132(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -132);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// stvewx v0,r0,r10
	ea = (ctx.r10.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v0,r10,r5
	ea = (ctx.r10.u32 + ctx.r5.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v0.u32[3 - ((ea & 0xF) >> 2)]);
	// lwz r10,-128(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -128);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// stvewx v13,r0,r10
	ea = (ctx.r10.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v13.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v13,r10,r4
	ea = (ctx.r10.u32 + ctx.r4.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v13.u32[3 - ((ea & 0xF) >> 2)]);
	// lwz r10,-124(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -124);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stvewx v12,r0,r11
	ea = (r11.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v12.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v12,r11,r3
	ea = (r11.u32 + ctx.r3.u32) & ~0x3;
	PPC_STORE_U32(ea, ctx.v12.u32[3 - ((ea & 0xF) >> 2)]);
	// b 0x8239bd30
	return;
}

__attribute__((alias("__imp__sub_8271D51C"))) PPC_WEAK_FUNC(sub_8271D51C);
PPC_FUNC_IMPL(__imp__sub_8271D51C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8271D520"))) PPC_WEAK_FUNC(sub_8271D520);
PPC_FUNC_IMPL(__imp__sub_8271D520) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// vspltish v0,15
	// cmpwi cr6,r4,32
	cr6.compare<int32_t>(ctx.r4.s32, 32, xer);
	// vslb v0,v0,v0
	ctx.v0.u8[0] = ctx.v0.u8[0] << (ctx.v0.u8[0] & 0x7);
	ctx.v0.u8[1] = ctx.v0.u8[1] << (ctx.v0.u8[1] & 0x7);
	ctx.v0.u8[2] = ctx.v0.u8[2] << (ctx.v0.u8[2] & 0x7);
	ctx.v0.u8[3] = ctx.v0.u8[3] << (ctx.v0.u8[3] & 0x7);
	ctx.v0.u8[4] = ctx.v0.u8[4] << (ctx.v0.u8[4] & 0x7);
	ctx.v0.u8[5] = ctx.v0.u8[5] << (ctx.v0.u8[5] & 0x7);
	ctx.v0.u8[6] = ctx.v0.u8[6] << (ctx.v0.u8[6] & 0x7);
	ctx.v0.u8[7] = ctx.v0.u8[7] << (ctx.v0.u8[7] & 0x7);
	ctx.v0.u8[8] = ctx.v0.u8[8] << (ctx.v0.u8[8] & 0x7);
	ctx.v0.u8[9] = ctx.v0.u8[9] << (ctx.v0.u8[9] & 0x7);
	ctx.v0.u8[10] = ctx.v0.u8[10] << (ctx.v0.u8[10] & 0x7);
	ctx.v0.u8[11] = ctx.v0.u8[11] << (ctx.v0.u8[11] & 0x7);
	ctx.v0.u8[12] = ctx.v0.u8[12] << (ctx.v0.u8[12] & 0x7);
	ctx.v0.u8[13] = ctx.v0.u8[13] << (ctx.v0.u8[13] & 0x7);
	ctx.v0.u8[14] = ctx.v0.u8[14] << (ctx.v0.u8[14] & 0x7);
	ctx.v0.u8[15] = ctx.v0.u8[15] << (ctx.v0.u8[15] & 0x7);
	// beq cr6,0x8271d5b8
	if (cr6.eq) goto loc_8271D5B8;
	// cmpwi cr6,r4,64
	cr6.compare<int32_t>(ctx.r4.s32, 64, xer);
	// bnelr cr6
	if (!cr6.eq) return;
	// lvx128 v13,r0,r3
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r3,16
	r11.s64 = ctx.r3.s64 + 16;
	// addi r10,r3,32
	ctx.r10.s64 = ctx.r3.s64 + 32;
	// vaddshs v13,v13,v0
	_mm_store_si128((__m128i*)ctx.v13.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v13.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// addi r9,r3,48
	ctx.r9.s64 = ctx.r3.s64 + 48;
	// addi r8,r3,64
	ctx.r8.s64 = ctx.r3.s64 + 64;
	// addi r7,r3,80
	ctx.r7.s64 = ctx.r3.s64 + 80;
	// addi r6,r3,96
	ctx.r6.s64 = ctx.r3.s64 + 96;
	// lvx128 v12,r0,r11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r5,r3,112
	ctx.r5.s64 = ctx.r3.s64 + 112;
	// lvx128 v11,r0,r10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v13,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vaddshs v13,v12,v0
	_mm_store_si128((__m128i*)ctx.v13.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// lvx128 v10,r0,r9
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vaddshs v12,v11,v0
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// lvx128 v9,r0,r8
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vaddshs v11,v10,v0
	_mm_store_si128((__m128i*)ctx.v11.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// lvx128 v8,r0,r7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vaddshs v10,v9,v0
	_mm_store_si128((__m128i*)ctx.v10.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v9.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// lvx128 v7,r0,r6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vaddshs v9,v8,v0
	_mm_store_si128((__m128i*)ctx.v9.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v8.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// lvx128 v6,r0,r5
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r5.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vaddshs v8,v7,v0
	_mm_store_si128((__m128i*)ctx.v8.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v7.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// vaddshs v0,v6,v0
	_mm_store_si128((__m128i*)ctx.v0.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v6.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// stvx v11,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v10,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v9,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v8,r0,r6
	_mm_store_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v0,r0,r5
	_mm_store_si128((__m128i*)(base + ((ctx.r5.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v12,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v13,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// blr 
	return;
loc_8271D5B8:
	// lvx128 v13,r0,r3
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r3,16
	r11.s64 = ctx.r3.s64 + 16;
	// addi r10,r3,32
	ctx.r10.s64 = ctx.r3.s64 + 32;
	// vaddshs v13,v13,v0
	_mm_store_si128((__m128i*)ctx.v13.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v13.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// addi r9,r3,48
	ctx.r9.s64 = ctx.r3.s64 + 48;
	// lvx128 v12,r0,r11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v11,r0,r10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v13,r0,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vaddshs v13,v12,v0
	_mm_store_si128((__m128i*)ctx.v13.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// lvx128 v10,r0,r9
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vaddshs v12,v11,v0
	_mm_store_si128((__m128i*)ctx.v12.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v11.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// vaddshs v0,v10,v0
	_mm_store_si128((__m128i*)ctx.v0.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v10.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// stvx v13,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v12,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v0,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8271D5F8"))) PPC_WEAK_FUNC(sub_8271D5F8);
PPC_FUNC_IMPL(__imp__sub_8271D5F8) {
	PPC_FUNC_PROLOGUE();
	PPCVRegister v32{};
	PPCVRegister v33{};
	PPCVRegister v34{};
	PPCVRegister v35{};
	PPCVRegister v36{};
	PPCVRegister v37{};
	PPCVRegister v38{};
	PPCVRegister v39{};
	PPCVRegister v40{};
	PPCVRegister v41{};
	PPCVRegister v42{};
	PPCVRegister v43{};
	PPCVRegister v44{};
	PPCVRegister v45{};
	PPCVRegister v46{};
	PPCVRegister v47{};
	PPCVRegister v48{};
	PPCVRegister v49{};
	PPCVRegister v50{};
	PPCVRegister v51{};
	PPCVRegister v52{};
	PPCVRegister v53{};
	PPCVRegister v54{};
	PPCVRegister v55{};
	PPCVRegister v56{};
	PPCVRegister v57{};
	PPCVRegister v58{};
	PPCVRegister v59{};
	PPCVRegister v60{};
	PPCVRegister v61{};
	PPCVRegister v62{};
	PPCVRegister v63{};
	PPCVRegister v64{};
	PPCVRegister v65{};
	PPCVRegister v66{};
	PPCVRegister v67{};
	PPCVRegister v68{};
	PPCVRegister v69{};
	PPCVRegister v70{};
	PPCVRegister v71{};
	PPCVRegister v72{};
	PPCVRegister v73{};
	PPCVRegister v74{};
	PPCVRegister v75{};
	PPCVRegister v76{};
	PPCVRegister v77{};
	PPCVRegister v78{};
	PPCVRegister v79{};
	PPCVRegister v80{};
	PPCVRegister v81{};
	PPCVRegister v82{};
	PPCVRegister v83{};
	PPCVRegister v84{};
	PPCVRegister v85{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// stvx128 v127,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v127.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v126,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v126.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v125,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v125.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v124,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v124.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v123,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v123.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v122,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v122.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v121,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v121.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v120,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v120.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v119,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v119.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v118,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v118.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v117,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v117.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v116,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v116.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v115,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v115.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v114,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v114.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v113,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v113.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v112,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v112.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v111,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v111.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v110,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v110.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v109,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v109.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v108,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v108.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v107,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v107.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v106,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v106.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v105,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v105.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v104,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v104.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v103,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v103.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v102,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v102.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v101,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v101.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v100,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v100.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v99,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v99.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v98,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v98.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v97,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v97.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v96,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v96.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v95,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v95.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v94,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v94.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v93,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v93.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v92,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v92.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v91,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v91.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v90,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v90.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v89,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v89.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v88,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v88.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v87,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v87.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v86,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v86.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v85,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v85.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v84,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v84.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v83,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v83.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v82,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v82.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v81,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v81.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v80,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v80.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v79,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v79.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v78,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v78.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v77,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v77.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v76,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v76.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v75,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v75.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v74,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v74.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v73,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v73.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v72,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v72.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v71,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v71.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v70,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v70.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v69,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v69.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v68,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v68.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v67,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v67.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v66,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v66.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v65,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v65.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v64,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v64.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v63,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v63.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v62,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v62.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v61,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v61.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v60,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v60.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v59,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v59.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v58,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v58.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v57,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v57.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v56,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v56.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v55,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v55.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v54,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v54.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v53,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v53.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v52,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v52.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v51,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v51.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v50,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v50.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v49,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v49.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v48,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v48.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v47,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v47.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v46,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v46.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v45,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v45.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v44,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v44.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v43,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v43.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v42,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v42.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v41,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v41.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v40,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v40.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v39,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v39.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v38,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v38.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v37,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v37.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v36,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v36.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v35,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v35.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v34,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v34.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v33,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v33.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v32,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v32.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v64,r0,r3
	_mm_store_si128((__m128i*)v64.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v65,r0,r3
	_mm_store_si128((__m128i*)v65.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v66,r0,r3
	_mm_store_si128((__m128i*)v66.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v67,r0,r3
	_mm_store_si128((__m128i*)v67.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v68,r0,r3
	_mm_store_si128((__m128i*)v68.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v69,r0,r3
	_mm_store_si128((__m128i*)v69.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v70,r0,r3
	_mm_store_si128((__m128i*)v70.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v71,r0,r3
	_mm_store_si128((__m128i*)v71.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v72,r0,r3
	_mm_store_si128((__m128i*)v72.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8271D93C"))) PPC_WEAK_FUNC(sub_8271D93C);
PPC_FUNC_IMPL(__imp__sub_8271D93C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8271D940"))) PPC_WEAK_FUNC(sub_8271D940);
PPC_FUNC_IMPL(__imp__sub_8271D940) {
	PPC_FUNC_PROLOGUE();
	PPCVRegister v32{};
	PPCVRegister v33{};
	PPCVRegister v34{};
	PPCVRegister v35{};
	PPCVRegister v36{};
	PPCVRegister v37{};
	PPCVRegister v38{};
	PPCVRegister v39{};
	PPCVRegister v40{};
	PPCVRegister v41{};
	PPCVRegister v42{};
	PPCVRegister v43{};
	PPCVRegister v44{};
	PPCVRegister v45{};
	PPCVRegister v46{};
	PPCVRegister v47{};
	PPCVRegister v48{};
	PPCVRegister v49{};
	PPCVRegister v50{};
	PPCVRegister v51{};
	PPCVRegister v52{};
	PPCVRegister v53{};
	PPCVRegister v54{};
	PPCVRegister v55{};
	PPCVRegister v56{};
	PPCVRegister v57{};
	PPCVRegister v58{};
	PPCVRegister v59{};
	PPCVRegister v60{};
	PPCVRegister v61{};
	PPCVRegister v62{};
	PPCVRegister v63{};
	PPCVRegister v64{};
	PPCVRegister v65{};
	PPCVRegister v66{};
	PPCVRegister v67{};
	PPCVRegister v68{};
	PPCVRegister v69{};
	PPCVRegister v70{};
	PPCVRegister v71{};
	PPCVRegister v72{};
	PPCVRegister v73{};
	PPCVRegister v74{};
	PPCVRegister v75{};
	PPCVRegister v76{};
	PPCVRegister v77{};
	PPCVRegister v78{};
	PPCVRegister v79{};
	PPCVRegister v80{};
	PPCVRegister v81{};
	PPCVRegister v82{};
	PPCVRegister v83{};
	PPCVRegister v84{};
	PPCVRegister v85{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// stvx128 v127,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v127.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v126,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v126.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v125,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v125.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v124,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v124.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v123,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v123.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v122,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v122.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v121,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v121.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v120,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v120.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v119,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v119.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v118,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v118.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v117,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v117.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v116,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v116.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v115,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v115.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v114,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v114.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v113,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v113.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v112,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v112.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v111,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v111.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v110,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v110.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v109,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v109.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v108,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v108.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v107,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v107.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v106,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v106.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v105,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v105.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v104,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v104.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v103,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v103.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v102,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v102.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v101,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v101.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v100,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v100.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v99,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v99.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v98,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v98.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v97,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v97.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v96,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v96.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v95,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v95.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v94,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v94.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v93,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v93.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v92,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v92.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v91,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v91.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v90,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v90.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v89,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v89.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v88,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v88.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v87,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v87.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v86,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v86.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v85,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v85.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v84,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v84.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v83,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v83.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v82,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v82.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v81,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v81.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v80,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v80.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v79,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v79.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v78,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v78.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v77,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v77.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v76,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v76.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v75,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v75.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v74,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v74.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v73,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v73.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v72,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v72.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v71,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v71.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v70,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v70.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v69,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v69.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v68,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v68.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v67,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v67.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v66,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v66.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v65,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v65.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v64,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v64.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v63,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v63.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v62,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v62.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v61,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v61.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v60,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v60.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v59,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v59.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v58,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v58.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v57,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v57.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v56,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v56.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v55,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v55.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v54,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v54.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v53,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v53.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v52,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v52.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v51,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v51.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v50,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v50.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v49,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v49.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v48,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v48.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v47,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v47.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v46,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v46.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v45,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v45.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v44,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v44.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v43,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v43.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v42,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v42.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v41,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v41.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v40,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v40.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v39,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v39.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v38,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v38.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v37,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v37.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v36,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v36.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v35,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v35.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v34,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v34.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v33,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v33.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r4,16
	ctx.r4.s64 = ctx.r4.s64 + 16;
	// stvx128 v32,r0,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v32.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v127,r0,r3
	_mm_store_si128((__m128i*)v127.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v126,r0,r3
	_mm_store_si128((__m128i*)v126.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v125,r0,r3
	_mm_store_si128((__m128i*)v125.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v124,r0,r3
	_mm_store_si128((__m128i*)v124.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v123,r0,r3
	_mm_store_si128((__m128i*)v123.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v122,r0,r3
	_mm_store_si128((__m128i*)v122.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v121,r0,r3
	_mm_store_si128((__m128i*)v121.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v120,r0,r3
	_mm_store_si128((__m128i*)v120.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v119,r0,r3
	_mm_store_si128((__m128i*)v119.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v118,r0,r3
	_mm_store_si128((__m128i*)v118.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v117,r0,r3
	_mm_store_si128((__m128i*)v117.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v116,r0,r3
	_mm_store_si128((__m128i*)v116.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v115,r0,r3
	_mm_store_si128((__m128i*)v115.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v114,r0,r3
	_mm_store_si128((__m128i*)v114.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v113,r0,r3
	_mm_store_si128((__m128i*)v113.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v112,r0,r3
	_mm_store_si128((__m128i*)v112.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v111,r0,r3
	_mm_store_si128((__m128i*)v111.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v110,r0,r3
	_mm_store_si128((__m128i*)v110.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v109,r0,r3
	_mm_store_si128((__m128i*)v109.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v108,r0,r3
	_mm_store_si128((__m128i*)v108.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v107,r0,r3
	_mm_store_si128((__m128i*)v107.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v106,r0,r3
	_mm_store_si128((__m128i*)v106.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v105,r0,r3
	_mm_store_si128((__m128i*)v105.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v104,r0,r3
	_mm_store_si128((__m128i*)v104.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v103,r0,r3
	_mm_store_si128((__m128i*)v103.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v102,r0,r3
	_mm_store_si128((__m128i*)v102.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v101,r0,r3
	_mm_store_si128((__m128i*)v101.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v100,r0,r3
	_mm_store_si128((__m128i*)v100.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v99,r0,r3
	_mm_store_si128((__m128i*)v99.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v98,r0,r3
	_mm_store_si128((__m128i*)v98.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v97,r0,r3
	_mm_store_si128((__m128i*)v97.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v96,r0,r3
	_mm_store_si128((__m128i*)v96.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v95,r0,r3
	_mm_store_si128((__m128i*)v95.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v94,r0,r3
	_mm_store_si128((__m128i*)v94.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v93,r0,r3
	_mm_store_si128((__m128i*)v93.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v92,r0,r3
	_mm_store_si128((__m128i*)v92.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v91,r0,r3
	_mm_store_si128((__m128i*)v91.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v90,r0,r3
	_mm_store_si128((__m128i*)v90.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v89,r0,r3
	_mm_store_si128((__m128i*)v89.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v88,r0,r3
	_mm_store_si128((__m128i*)v88.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v87,r0,r3
	_mm_store_si128((__m128i*)v87.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v86,r0,r3
	_mm_store_si128((__m128i*)v86.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v85,r0,r3
	_mm_store_si128((__m128i*)v85.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v84,r0,r3
	_mm_store_si128((__m128i*)v84.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v83,r0,r3
	_mm_store_si128((__m128i*)v83.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v82,r0,r3
	_mm_store_si128((__m128i*)v82.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v81,r0,r3
	_mm_store_si128((__m128i*)v81.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v80,r0,r3
	_mm_store_si128((__m128i*)v80.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v79,r0,r3
	_mm_store_si128((__m128i*)v79.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v78,r0,r3
	_mm_store_si128((__m128i*)v78.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v77,r0,r3
	_mm_store_si128((__m128i*)v77.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v76,r0,r3
	_mm_store_si128((__m128i*)v76.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v75,r0,r3
	_mm_store_si128((__m128i*)v75.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v74,r0,r3
	_mm_store_si128((__m128i*)v74.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v73,r0,r3
	_mm_store_si128((__m128i*)v73.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v72,r0,r3
	_mm_store_si128((__m128i*)v72.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v71,r0,r3
	_mm_store_si128((__m128i*)v71.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v70,r0,r3
	_mm_store_si128((__m128i*)v70.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v69,r0,r3
	_mm_store_si128((__m128i*)v69.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v68,r0,r3
	_mm_store_si128((__m128i*)v68.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v67,r0,r3
	_mm_store_si128((__m128i*)v67.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v66,r0,r3
	_mm_store_si128((__m128i*)v66.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v65,r0,r3
	_mm_store_si128((__m128i*)v65.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v64,r0,r3
	_mm_store_si128((__m128i*)v64.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v63,r0,r3
	_mm_store_si128((__m128i*)v63.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v62,r0,r3
	_mm_store_si128((__m128i*)v62.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v61,r0,r3
	_mm_store_si128((__m128i*)v61.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v60,r0,r3
	_mm_store_si128((__m128i*)v60.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v59,r0,r3
	_mm_store_si128((__m128i*)v59.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v58,r0,r3
	_mm_store_si128((__m128i*)v58.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v57,r0,r3
	_mm_store_si128((__m128i*)v57.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v56,r0,r3
	_mm_store_si128((__m128i*)v56.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v55,r0,r3
	_mm_store_si128((__m128i*)v55.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v54,r0,r3
	_mm_store_si128((__m128i*)v54.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v53,r0,r3
	_mm_store_si128((__m128i*)v53.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v52,r0,r3
	_mm_store_si128((__m128i*)v52.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v51,r0,r3
	_mm_store_si128((__m128i*)v51.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v50,r0,r3
	_mm_store_si128((__m128i*)v50.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v49,r0,r3
	_mm_store_si128((__m128i*)v49.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v48,r0,r3
	_mm_store_si128((__m128i*)v48.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v47,r0,r3
	_mm_store_si128((__m128i*)v47.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v46,r0,r3
	_mm_store_si128((__m128i*)v46.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v45,r0,r3
	_mm_store_si128((__m128i*)v45.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v44,r0,r3
	_mm_store_si128((__m128i*)v44.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v43,r0,r3
	_mm_store_si128((__m128i*)v43.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v42,r0,r3
	_mm_store_si128((__m128i*)v42.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v41,r0,r3
	_mm_store_si128((__m128i*)v41.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v40,r0,r3
	_mm_store_si128((__m128i*)v40.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v39,r0,r3
	_mm_store_si128((__m128i*)v39.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v38,r0,r3
	_mm_store_si128((__m128i*)v38.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v37,r0,r3
	_mm_store_si128((__m128i*)v37.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v36,r0,r3
	_mm_store_si128((__m128i*)v36.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v35,r0,r3
	_mm_store_si128((__m128i*)v35.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v34,r0,r3
	_mm_store_si128((__m128i*)v34.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v33,r0,r3
	_mm_store_si128((__m128i*)v33.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// lvx128 v32,r0,r3
	_mm_store_si128((__m128i*)v32.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8271DF3C"))) PPC_WEAK_FUNC(sub_8271DF3C);
PPC_FUNC_IMPL(__imp__sub_8271DF3C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8271DF40"))) PPC_WEAK_FUNC(sub_8271DF40);
PPC_FUNC_IMPL(__imp__sub_8271DF40) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcc4
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lhz r11,50(r3)
	r11.u64 = PPC_LOAD_U16(ctx.r3.u32 + 50);
	// mr r20,r9
	r20.u64 = ctx.r9.u64;
	// mr r27,r7
	r27.u64 = ctx.r7.u64;
	// lhz r21,74(r3)
	r21.u64 = PPC_LOAD_U16(ctx.r3.u32 + 74);
	// rotlwi r26,r11,3
	r26.u64 = __builtin_rotateleft32(r11.u32, 3);
	// lhz r15,76(r3)
	r15.u64 = PPC_LOAD_U16(ctx.r3.u32 + 76);
	// lwz r10,188(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 188);
	// mr r22,r4
	r22.u64 = ctx.r4.u64;
	// rlwinm r9,r26,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 4) & 0xFFFFFFF0;
	// lwz r23,192(r3)
	r23.u64 = PPC_LOAD_U32(ctx.r3.u32 + 192);
	// mr r17,r5
	r17.u64 = ctx.r5.u64;
	// mr r19,r6
	r19.u64 = ctx.r6.u64;
	// mr r18,r8
	r18.u64 = ctx.r8.u64;
	// rotlwi r16,r11,2
	r16.u64 = __builtin_rotateleft32(r11.u32, 2);
	// srawi r24,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r24.s64 = r11.s32 >> 1;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// add r9,r9,r27
	ctx.r9.u64 = ctx.r9.u64 + r27.u64;
	// ble cr6,0x8271e010
	if (!cr6.gt) goto loc_8271E010;
	// addi r8,r11,1
	ctx.r8.s64 = r11.s64 + 1;
	// addi r31,r9,16
	r31.s64 = ctx.r9.s64 + 16;
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r29,r10,4
	r29.s64 = ctx.r10.s64 + 4;
	// add r28,r8,r10
	r28.u64 = ctx.r8.u64 + ctx.r10.u64;
	// subf r25,r9,r27
	r25.s64 = r27.s64 - ctx.r9.s64;
	// addi r30,r11,-1
	r30.s64 = r11.s64 + -1;
loc_8271DFB0:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x8271dfd4
	if (!cr6.eq) goto loc_8271DFD4;
	// lwz r11,-4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + -4);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x8271dfd4
	if (!cr6.eq) goto loc_8271DFD4;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// add r3,r25,r31
	ctx.r3.u64 = r25.u64 + r31.u64;
	// bl 0x826112d8
	sub_826112D8(ctx, base);
loc_8271DFD4:
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x8271dff8
	if (!cr6.eq) goto loc_8271DFF8;
	// lwz r11,-4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -4);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x8271dff8
	if (!cr6.eq) goto loc_8271DFF8;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x826112d8
	sub_826112D8(ctx, base);
loc_8271DFF8:
	// addi r30,r30,-1
	r30.s64 = r30.s64 + -1;
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// addi r28,r28,4
	r28.s64 = r28.s64 + 4;
	// addi r31,r31,16
	r31.s64 = r31.s64 + 16;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x8271dfb0
	if (!cr6.eq) goto loc_8271DFB0;
loc_8271E010:
	// cmpwi cr6,r24,1
	cr6.compare<int32_t>(r24.s32, 1, xer);
	// ble cr6,0x8271e06c
	if (!cr6.gt) goto loc_8271E06C;
	// addi r31,r20,16
	r31.s64 = r20.s64 + 16;
	// addi r30,r23,4
	r30.s64 = r23.s64 + 4;
	// subf r28,r20,r18
	r28.s64 = r18.s64 - r20.s64;
	// addi r29,r24,-1
	r29.s64 = r24.s64 + -1;
loc_8271E028:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x8271e058
	if (!cr6.eq) goto loc_8271E058;
	// lwz r11,-4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -4);
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x8271e058
	if (!cr6.eq) goto loc_8271E058;
	// mr r4,r16
	ctx.r4.u64 = r16.u64;
	// add r3,r28,r31
	ctx.r3.u64 = r28.u64 + r31.u64;
	// bl 0x826112d8
	sub_826112D8(ctx, base);
	// mr r4,r16
	ctx.r4.u64 = r16.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x826112d8
	sub_826112D8(ctx, base);
loc_8271E058:
	// addi r29,r29,-1
	r29.s64 = r29.s64 + -1;
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// addi r31,r31,16
	r31.s64 = r31.s64 + 16;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x8271e028
	if (!cr6.eq) goto loc_8271E028;
loc_8271E06C:
	// rlwinm r6,r26,1,0,30
	ctx.r6.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 1) & 0xFFFFFFFE;
	// srawi r7,r26,4
	xer.ca = (r26.s32 < 0) & ((r26.u32 & 0xF) != 0);
	ctx.r7.s64 = r26.s32 >> 4;
	// li r8,16
	ctx.r8.s64 = 16;
loc_8271E078:
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// ble cr6,0x8271e0b4
	if (!cr6.gt) goto loc_8271E0B4;
	// mr r9,r22
	ctx.r9.u64 = r22.u64;
	// mr r11,r27
	r11.u64 = r27.u64;
	// mr r10,r7
	ctx.r10.u64 = ctx.r7.u64;
loc_8271E08C:
	// addi r5,r11,16
	ctx.r5.s64 = r11.s64 + 16;
	// lvx128 v0,r0,r11
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// addi r11,r11,32
	r11.s64 = r11.s64 + 32;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// lvx128 v13,r0,r5
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r5.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vpkshus v0,v0,v13
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v13.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// stvx v0,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r9,16
	ctx.r9.s64 = ctx.r9.s64 + 16;
	// bne cr6,0x8271e08c
	if (!cr6.eq) goto loc_8271E08C;
loc_8271E0B4:
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// add r22,r21,r22
	r22.u64 = r21.u64 + r22.u64;
	// add r27,r6,r27
	r27.u64 = ctx.r6.u64 + r27.u64;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// bne cr6,0x8271e078
	if (!cr6.eq) goto loc_8271E078;
	// rlwinm r30,r16,0,0,27
	r30.u64 = __builtin_rotateleft64(r16.u32 | (r16.u64 << 32), 0) & 0xFFFFFFF0;
	// rlwinm r28,r16,1,0,30
	r28.u64 = __builtin_rotateleft64(r16.u32 | (r16.u64 << 32), 1) & 0xFFFFFFFE;
	// li r29,8
	r29.s64 = 8;
loc_8271E0D4:
	// li r4,0
	ctx.r4.s64 = 0;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// ble cr6,0x8271e190
	if (!cr6.gt) goto loc_8271E190;
	// addi r11,r30,-1
	r11.s64 = r30.s64 + -1;
	// mr r10,r19
	ctx.r10.u64 = r19.u64;
	// rlwinm r11,r11,28,4,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 28) & 0xFFFFFFF;
	// mr r9,r18
	ctx.r9.u64 = r18.u64;
	// addi r8,r11,1
	ctx.r8.s64 = r11.s64 + 1;
	// addi r11,r20,16
	r11.s64 = r20.s64 + 16;
	// subf r3,r20,r18
	ctx.r3.s64 = r18.s64 - r20.s64;
	// subf r31,r19,r17
	r31.s64 = r17.s64 - r19.s64;
	// rlwinm r4,r8,4,0,27
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 4) & 0xFFFFFFF0;
loc_8271E104:
	// li r5,16
	ctx.r5.s64 = 16;
	// lvlx v0,0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// li r25,16
	r25.s64 = 16;
	// add r7,r11,r3
	ctx.r7.u64 = r11.u64 + ctx.r3.u64;
	// li r27,16
	r27.s64 = 16;
	// addi r6,r11,-16
	ctx.r6.s64 = r11.s64 + -16;
	// lvrx v13,r9,r5
	temp.u32 = ctx.r9.u32 + ctx.r5.u32;
	_mm_store_si128((__m128i*)ctx.v13.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// li r26,16
	r26.s64 = 16;
	// vor v0,v0,v13
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// lvrx v12,r11,r25
	temp.u32 = r11.u32 + r25.u32;
	_mm_store_si128((__m128i*)ctx.v12.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// lvlx v13,0,r11
	temp.u32 = r11.u32;
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// add r5,r31,r10
	ctx.r5.u64 = r31.u64 + ctx.r10.u64;
	// vor v13,v13,v12
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v12.u8)));
	// lvlx v11,0,r7
	temp.u32 = ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvrx v12,r7,r27
	temp.u32 = ctx.r7.u32 + r27.u32;
	_mm_store_si128((__m128i*)ctx.v12.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// li r24,16
	r24.s64 = 16;
	// vor v12,v11,v12
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v12.u8)));
	// lvrx v10,r6,r26
	temp.u32 = ctx.r6.u32 + r26.u32;
	_mm_store_si128((__m128i*)ctx.v10.u8, temp.u32 & 0xF ? _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskR[(temp.u32 & 0xF) * 16])) : _mm_setzero_si128());
	// lvlx v11,0,r6
	temp.u32 = ctx.r6.u32;
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// mr r23,r10
	r23.u64 = ctx.r10.u64;
	// vor v11,v11,v10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_or_si128(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v10.u8)));
	// mr r25,r10
	r25.u64 = ctx.r10.u64;
	// li r22,16
	r22.s64 = 16;
	// vpkshus v0,v0,v12
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v12.s16), _mm_load_si128((__m128i*)ctx.v0.s16)));
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// addi r9,r9,32
	ctx.r9.s64 = ctx.r9.s64 + 32;
	// vpkshus v13,v11,v13
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v13.s16), _mm_load_si128((__m128i*)ctx.v11.s16)));
	// addi r11,r11,32
	r11.s64 = r11.s64 + 32;
	// addi r10,r10,16
	ctx.r10.s64 = ctx.r10.s64 + 16;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// stvlx v0,0,r5
	ea = ctx.r5.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, ctx.v0.u8[15 - i]);
	// stvrx v0,r5,r24
	ea = ctx.r5.u32 + r24.u32;
	for (size_t i = 0; i < (ea & 0xF); i++)
		PPC_STORE_U8(ea - i - 1, ctx.v0.u8[i]);
	// stvlx v13,0,r23
	ea = r23.u32;
	for (size_t i = 0; i < (16 - (ea & 0xF)); i++)
		PPC_STORE_U8(ea + i, ctx.v13.u8[15 - i]);
	// stvrx v13,r25,r22
	ea = r25.u32 + r22.u32;
	for (size_t i = 0; i < (ea & 0xF); i++)
		PPC_STORE_U8(ea - i - 1, ctx.v13.u8[i]);
	// bne cr6,0x8271e104
	if (!cr6.eq) goto loc_8271E104;
loc_8271E190:
	// cmpw cr6,r4,r16
	cr6.compare<int32_t>(ctx.r4.s32, r16.s32, xer);
	// bge cr6,0x8271e20c
	if (!cr6.lt) goto loc_8271E20C;
	// rlwinm r11,r4,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r4,r19
	ctx.r9.u64 = ctx.r4.u64 + r19.u64;
	// add r10,r11,r20
	ctx.r10.u64 = r11.u64 + r20.u64;
	// subf r6,r20,r18
	ctx.r6.s64 = r18.s64 - r20.s64;
	// subf r7,r19,r17
	ctx.r7.s64 = r17.s64 - r19.s64;
	// subf r8,r4,r16
	ctx.r8.s64 = r16.s64 - ctx.r4.s64;
loc_8271E1B0:
	// lhzx r11,r6,r10
	r11.u64 = PPC_LOAD_U16(ctx.r6.u32 + ctx.r10.u32);
	// cmplwi cr6,r11,255
	cr6.compare<uint32_t>(r11.u32, 255, xer);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// ble cr6,0x8271e1d0
	if (!cr6.gt) goto loc_8271E1D0;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// blt cr6,0x8271e1d0
	if (cr6.lt) goto loc_8271E1D0;
	// li r11,255
	r11.s64 = 255;
loc_8271E1D0:
	// stbx r11,r9,r7
	PPC_STORE_U8(ctx.r9.u32 + ctx.r7.u32, r11.u8);
	// lhz r11,0(r10)
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// cmplwi cr6,r11,255
	cr6.compare<uint32_t>(r11.u32, 255, xer);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// ble cr6,0x8271e1f4
	if (!cr6.gt) goto loc_8271E1F4;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// li r11,0
	r11.s64 = 0;
	// blt cr6,0x8271e1f4
	if (cr6.lt) goto loc_8271E1F4;
	// li r11,255
	r11.s64 = 255;
loc_8271E1F4:
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// stb r11,0(r9)
	PPC_STORE_U8(ctx.r9.u32 + 0, r11.u8);
	// addi r10,r10,2
	ctx.r10.s64 = ctx.r10.s64 + 2;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// bne cr6,0x8271e1b0
	if (!cr6.eq) goto loc_8271E1B0;
loc_8271E20C:
	// addi r29,r29,-1
	r29.s64 = r29.s64 + -1;
	// add r17,r15,r17
	r17.u64 = r15.u64 + r17.u64;
	// add r19,r15,r19
	r19.u64 = r15.u64 + r19.u64;
	// add r18,r28,r18
	r18.u64 = r28.u64 + r18.u64;
	// add r20,r28,r20
	r20.u64 = r28.u64 + r20.u64;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x8271e0d4
	if (!cr6.eq) goto loc_8271E0D4;
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// b 0x8239bd14
	return;
}

__attribute__((alias("__imp__sub_8271E400"))) PPC_WEAK_FUNC(sub_8271E400);
PPC_FUNC_IMPL(__imp__sub_8271E400) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lhz r11,52(r4)
	r11.u64 = PPC_LOAD_U16(ctx.r4.u32 + 52);
	// li r5,0
	ctx.r5.s64 = 0;
	// lhz r10,50(r4)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r4.u32 + 50);
	// rlwinm r31,r11,31,1,31
	r31.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFF;
	// lwz r11,1252(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 1252);
	// rlwinm r7,r10,31,1,31
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8271e4cc
	if (cr6.eq) goto loc_8271E4CC;
	// lis r10,-32138
	ctx.r10.s64 = -2106195968;
	// addi r6,r10,11592
	ctx.r6.s64 = ctx.r10.s64 + 11592;
loc_8271E438:
	// li r10,0
	ctx.r10.s64 = 0;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// beq cr6,0x8271e4c0
	if (cr6.eq) goto loc_8271E4C0;
	// cntlzw r9,r5
	ctx.r9.u64 = ctx.r5.u32 == 0 ? 32 : __builtin_clz(ctx.r5.u32);
	// rlwinm r8,r9,28,30,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 28) & 0x2;
loc_8271E44C:
	// cntlzw r9,r10
	ctx.r9.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// li r12,3855
	r12.s64 = 3855;
	// rlwinm r9,r9,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x1;
	// rldicr r12,r12,32,31
	r12.u64 = __builtin_rotateleft64(r12.u64, 32) & 0xFFFFFFFF00000000;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// oris r12,r12,3855
	r12.u64 = r12.u64 | 252641280;
	// rlwinm r9,r9,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 3) & 0xFFFFFFF8;
	// ori r12,r12,3855
	r12.u64 = r12.u64 | 3855;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmplw cr6,r10,r7
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r7.u32, xer);
	// ldx r9,r9,r6
	ctx.r9.u64 = PPC_LOAD_U64(ctx.r9.u32 + ctx.r6.u32);
	// and r9,r9,r12
	ctx.r9.u64 = ctx.r9.u64 & r12.u64;
	// mr r4,r9
	ctx.r4.u64 = ctx.r9.u64;
	// rldicl r9,r9,56,8
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u64, 56) & 0xFFFFFFFFFFFFFF;
	// stb r4,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r4.u8);
	// mr r4,r9
	ctx.r4.u64 = ctx.r9.u64;
	// rldicl r9,r9,56,8
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u64, 56) & 0xFFFFFFFFFFFFFF;
	// stb r4,1(r11)
	PPC_STORE_U8(r11.u32 + 1, ctx.r4.u8);
	// mr r4,r9
	ctx.r4.u64 = ctx.r9.u64;
	// rldicl r9,r9,56,8
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u64, 56) & 0xFFFFFFFFFFFFFF;
	// stb r4,2(r11)
	PPC_STORE_U8(r11.u32 + 2, ctx.r4.u8);
	// mr r4,r9
	ctx.r4.u64 = ctx.r9.u64;
	// rldicl r9,r9,56,8
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u64, 56) & 0xFFFFFFFFFFFFFF;
	// stb r4,3(r11)
	PPC_STORE_U8(r11.u32 + 3, ctx.r4.u8);
	// rldicl r4,r9,56,8
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r9.u64, 56) & 0xFFFFFFFFFFFFFF;
	// stb r9,4(r11)
	PPC_STORE_U8(r11.u32 + 4, ctx.r9.u8);
	// stb r4,5(r11)
	PPC_STORE_U8(r11.u32 + 5, ctx.r4.u8);
	// addi r11,r11,6
	r11.s64 = r11.s64 + 6;
	// blt cr6,0x8271e44c
	if (cr6.lt) goto loc_8271E44C;
loc_8271E4C0:
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// cmplw cr6,r5,r31
	cr6.compare<uint32_t>(ctx.r5.u32, r31.u32, xer);
	// blt cr6,0x8271e438
	if (cr6.lt) goto loc_8271E438;
loc_8271E4CC:
	// bl 0x82612318
	sub_82612318(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8271E4E4"))) PPC_WEAK_FUNC(sub_8271E4E4);
PPC_FUNC_IMPL(__imp__sub_8271E4E4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8271E4E8"))) PPC_WEAK_FUNC(sub_8271E4E8);
PPC_FUNC_IMPL(__imp__sub_8271E4E8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcc0
	// ld r12,-4096(r1)
	r12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -4096);
	// stwu r1,-4208(r1)
	ea = -4208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// addi r4,r30,21712
	ctx.r4.s64 = r30.s64 + 21712;
	// lwz r11,1248(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1248);
	// lwz r29,3052(r30)
	r29.u64 = PPC_LOAD_U32(r30.u32 + 3052);
	// stw r30,4228(r1)
	PPC_STORE_U32(ctx.r1.u32 + 4228, r30.u32);
	// stw r4,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, ctx.r4.u32);
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// lis r11,-32126
	r11.s64 = -2105409536;
	// stw r29,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r29.u32);
	// lwz r3,3360(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 3360);
	// li r11,1
	r11.s64 = 1;
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r11.u32);
	// bl 0x8271d5f8
	sub_8271D5F8(ctx, base);
	// lwz r9,21556(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 21556);
	// li r15,0
	r15.s64 = 0;
	// mr r11,r15
	r11.u64 = r15.u64;
	// mr r10,r15
	ctx.r10.u64 = r15.u64;
	// stw r9,20(r27)
	PPC_STORE_U32(r27.u32 + 20, ctx.r9.u32);
	// lwz r9,21568(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 21568);
	// stw r15,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r15.u32);
	// stw r15,4(r27)
	PPC_STORE_U32(r27.u32 + 4, r15.u32);
	// sth r15,16(r27)
	PPC_STORE_U16(r27.u32 + 16, r15.u16);
	// sth r15,18(r27)
	PPC_STORE_U16(r27.u32 + 18, r15.u16);
	// stw r9,24(r27)
	PPC_STORE_U32(r27.u32 + 24, ctx.r9.u32);
	// lhz r9,52(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 52);
	// lhz r8,50(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 50);
	// lhz r5,74(r31)
	ctx.r5.u64 = PPC_LOAD_U16(r31.u32 + 74);
	// rlwinm r9,r9,31,1,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 31) & 0x7FFFFFFF;
	// rlwinm r8,r8,31,1,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 31) & 0x7FFFFFFF;
	// stw r11,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, r11.u32);
	// stw r10,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, ctx.r10.u32);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// stw r15,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r15.u32);
	// stw r15,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r15.u32);
	// stw r5,192(r1)
	PPC_STORE_U32(ctx.r1.u32 + 192, ctx.r5.u32);
	// stw r9,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, ctx.r9.u32);
	// stw r8,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r8.u32);
	// ble cr6,0x8271f298
	if (!cr6.gt) goto loc_8271F298;
loc_8271E598:
	// lwz r9,4228(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 4228);
	// stw r11,8(r27)
	PPC_STORE_U32(r27.u32 + 8, r11.u32);
	// stw r10,12(r27)
	PPC_STORE_U32(r27.u32 + 12, ctx.r10.u32);
	// sth r15,18(r27)
	PPC_STORE_U16(r27.u32 + 18, r15.u16);
	// lwz r9,21236(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 21236);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x8271e5d4
	if (cr6.eq) goto loc_8271E5D4;
	// lwz r8,108(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r9,1240(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1240);
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r9,r8
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r8.u32);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x8271e5d4
	if (cr6.eq) goto loc_8271E5D4;
	// li r9,1
	ctx.r9.s64 = 1;
	// stw r9,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r9.u32);
loc_8271E5D4:
	// mr r14,r15
	r14.u64 = r15.u64;
	// lwz r9,140(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// stw r14,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r14.u32);
	// ble cr6,0x8271f248
	if (!cr6.gt) goto loc_8271F248;
loc_8271E5E8:
	// clrlwi r11,r14,28
	r11.u64 = r14.u32 & 0xF;
	// lwz r9,120(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// clrlwi r10,r14,29
	ctx.r10.u64 = r14.u32 & 0x7;
	// addi r11,r11,564
	r11.s64 = r11.s64 + 564;
	// addi r10,r10,556
	ctx.r10.s64 = ctx.r10.s64 + 556;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// ld r22,0(r9)
	r22.u64 = PPC_LOAD_U64(ctx.r9.u32 + 0);
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r9,r9,8
	ctx.r9.s64 = ctx.r9.s64 + 8;
	// rldicl r6,r22,10,54
	ctx.r6.u64 = __builtin_rotateleft64(r22.u64, 10) & 0x3FF;
	// rlwinm r7,r5,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r11,r31
	r11.u64 = PPC_LOAD_U16(r11.u32 + r31.u32);
	// li r3,2
	ctx.r3.s64 = 2;
	// lhzx r10,r10,r31
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + r31.u32);
	// add r4,r7,r5
	ctx.r4.u64 = ctx.r7.u64 + ctx.r5.u64;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// stw r9,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r9.u32);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// rlwinm r8,r11,6,0,25
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 6) & 0xFFFFFFC0;
	// rldicl r11,r22,3,61
	r11.u64 = __builtin_rotateleft64(r22.u64, 3) & 0x7;
	// addi r9,r31,304
	ctx.r9.s64 = r31.s64 + 304;
	// rlwimi r11,r6,0,30,31
	r11.u64 = (__builtin_rotateleft32(ctx.r6.u32, 0) & 0x3) | (r11.u64 & 0xFFFFFFFFFFFFFFFC);
	// rlwinm r10,r10,6,0,25
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 6) & 0xFFFFFFC0;
	// clrlwi r11,r11,29
	r11.u64 = r11.u32 & 0x7;
	// mr r16,r11
	r16.u64 = r11.u64;
	// add r19,r16,r31
	r19.u64 = r16.u64 + r31.u64;
	// stb r11,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r11.u8);
	// lbz r30,1407(r19)
	r30.u64 = PPC_LOAD_U8(r19.u32 + 1407);
loc_8271E658:
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271e6a8
	if (cr6.eq) goto loc_8271E6A8;
	// lwz r11,-8(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + -8);
	// lwz r6,8(r27)
	ctx.r6.u64 = PPC_LOAD_U32(r27.u32 + 8);
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// dcbt r10,r11
	// add r6,r10,r5
	ctx.r6.u64 = ctx.r10.u64 + ctx.r5.u64;
	// dcbt r6,r11
	// add r6,r10,r7
	ctx.r6.u64 = ctx.r10.u64 + ctx.r7.u64;
	// dcbt r6,r11
	// add r6,r10,r4
	ctx.r6.u64 = ctx.r10.u64 + ctx.r4.u64;
	// dcbt r6,r11
	// lwz r11,12(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 12);
	// lwz r6,0(r9)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// add r6,r11,r6
	ctx.r6.u64 = r11.u64 + ctx.r6.u64;
	// dcbt r8,r6
	// lwz r6,8(r9)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r9.u32 + 8);
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// dcbt r8,r11
loc_8271E6A8:
	// addi r3,r3,-1
	ctx.r3.s64 = ctx.r3.s64 + -1;
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// rlwinm r30,r30,31,1,31
	r30.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 31) & 0x7FFFFFFF;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x8271e658
	if (!cr6.eq) goto loc_8271E658;
	// addi r18,r31,1440
	r18.s64 = r31.s64 + 1440;
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// rlwinm r21,r11,2,0,29
	r21.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r11,0(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// lwzx r11,r11,r21
	r11.u64 = PPC_LOAD_U32(r11.u32 + r21.u32);
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x8271f1dc
	if (cr6.eq) goto loc_8271F1DC;
	// mr r25,r11
	r25.u64 = r11.u64;
	// lwz r11,1444(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1444);
	// lbz r10,30(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 30);
	// rldicl r9,r22,17,47
	ctx.r9.u64 = __builtin_rotateleft64(r22.u64, 17) & 0x1FFFF;
	// clrlwi r20,r9,31
	r20.u64 = ctx.r9.u32 & 0x1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// lwzx r24,r11,r21
	r24.u64 = PPC_LOAD_U32(r11.u32 + r21.u32);
	// beq cr6,0x8271e708
	if (cr6.eq) goto loc_8271E708;
	// rlwinm r25,r25,1,0,30
	r25.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r24,r24,1,0,30
	r24.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r25,r25,0,16,14
	r25.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 0) & 0xFFFFFFFFFFFEFFFF;
	// rlwinm r24,r24,0,16,14
	r24.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 0) & 0xFFFFFFFFFFFEFFFF;
loc_8271E708:
	// lhz r11,2(r29)
	r11.u64 = PPC_LOAD_U16(r29.u32 + 2);
	// lwz r10,1376(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1376);
	// extsh r9,r11
	ctx.r9.s64 = r11.s16;
	// lwz r11,1864(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1864);
	// lhz r8,0(r29)
	ctx.r8.u64 = PPC_LOAD_U16(r29.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// mullw r11,r9,r10
	r11.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r10.s32);
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// rlwinm r9,r9,8,0,23
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 8) & 0xFFFFFF00;
	// mullw r10,r8,r10
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// rlwinm r8,r8,8,0,23
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 8) & 0xFFFFFF00;
	// subf r9,r9,r11
	ctx.r9.s64 = r11.s64 - ctx.r9.s64;
	// beq cr6,0x8271e774
	if (cr6.eq) goto loc_8271E774;
	// addi r7,r11,255
	ctx.r7.s64 = r11.s64 + 255;
	// subf r11,r8,r10
	r11.s64 = ctx.r10.s64 - ctx.r8.s64;
	// addi r10,r10,255
	ctx.r10.s64 = ctx.r10.s64 + 255;
	// addi r9,r9,255
	ctx.r9.s64 = ctx.r9.s64 + 255;
	// srawi r8,r7,9
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x1FF) != 0);
	ctx.r8.s64 = ctx.r7.s32 >> 9;
	// addi r11,r11,255
	r11.s64 = r11.s64 + 255;
	// srawi r10,r10,9
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1FF) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 9;
	// srawi r9,r9,9
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1FF) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 9;
	// srawi r11,r11,9
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1FF) != 0);
	r11.s64 = r11.s32 >> 9;
	// rlwinm r8,r8,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// b 0x8271e798
	goto loc_8271E798;
loc_8271E774:
	// addi r7,r11,128
	ctx.r7.s64 = r11.s64 + 128;
	// subf r11,r8,r10
	r11.s64 = ctx.r10.s64 - ctx.r8.s64;
	// addi r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 128;
	// addi r9,r9,128
	ctx.r9.s64 = ctx.r9.s64 + 128;
	// srawi r8,r7,8
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0xFF) != 0);
	ctx.r8.s64 = ctx.r7.s32 >> 8;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// srawi r10,r10,8
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xFF) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 8;
	// srawi r9,r9,8
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0xFF) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 8;
	// srawi r11,r11,8
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFF) != 0);
	r11.s64 = r11.s32 >> 8;
loc_8271E798:
	// sth r10,88(r1)
	PPC_STORE_U16(ctx.r1.u32 + 88, ctx.r10.u16);
	// sth r8,90(r1)
	PPC_STORE_U16(ctx.r1.u32 + 90, ctx.r8.u16);
	// sth r11,84(r1)
	PPC_STORE_U16(ctx.r1.u32 + 84, r11.u16);
	// lwz r28,1420(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 1420);
	// lwz r29,16(r27)
	r29.u64 = PPC_LOAD_U32(r27.u32 + 16);
	// lwz r26,1432(r31)
	r26.u64 = PPC_LOAD_U32(r31.u32 + 1432);
	// sth r9,86(r1)
	PPC_STORE_U16(ctx.r1.u32 + 86, ctx.r9.u16);
	// lwz r5,88(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// rlwinm r11,r5,1,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 1) & 0x10000;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// subf r10,r11,r28
	ctx.r10.s64 = r28.s64 - r11.s64;
	// rlwinm r11,r29,5,0,26
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 5) & 0xFFFFFFE0;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// subf r11,r11,r26
	r11.s64 = r26.s64 - r11.s64;
	// add r10,r10,r5
	ctx.r10.u64 = ctx.r10.u64 + ctx.r5.u64;
	// subf r11,r5,r11
	r11.s64 = r11.s64 - ctx.r5.s64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271e800
	if (cr6.eq) goto loc_8271E800;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82616260
	sub_82616260(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
loc_8271E800:
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stw r30,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r30.u32);
	// rlwinm r11,r5,1,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 1) & 0x10000;
	// mr r3,r5
	ctx.r3.u64 = ctx.r5.u64;
	// subf r10,r11,r28
	ctx.r10.s64 = r28.s64 - r11.s64;
	// rlwinm r11,r29,5,0,26
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 5) & 0xFFFFFFE0;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// subf r11,r11,r26
	r11.s64 = r26.s64 - r11.s64;
	// add r10,r10,r5
	ctx.r10.u64 = ctx.r10.u64 + ctx.r5.u64;
	// subf r11,r5,r11
	r11.s64 = r11.s64 - ctx.r5.s64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271e84c
	if (cr6.eq) goto loc_8271E84C;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82616260
	sub_82616260(ctx, base);
loc_8271E84C:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// cmplwi cr6,r16,1
	cr6.compare<uint32_t>(r16.u32, 1, xer);
	// stw r3,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r3.u32);
	// stw r25,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r25.u32);
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// stw r24,8(r11)
	PPC_STORE_U32(r11.u32 + 8, r24.u32);
	// lwz r11,0(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// stwx r30,r11,r21
	PPC_STORE_U32(r11.u32 + r21.u32, r30.u32);
	// lwz r11,1444(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1444);
	// stwx r3,r11,r21
	PPC_STORE_U32(r11.u32 + r21.u32, ctx.r3.u32);
	// beq cr6,0x8271ec0c
	if (cr6.eq) goto loc_8271EC0C;
	// subfic r23,r16,5
	xer.ca = r16.u32 <= 5;
	r23.s64 = 5 - r16.s64;
	// cmplwi cr6,r16,2
	cr6.compare<uint32_t>(r16.u32, 2, xer);
	// beq cr6,0x8271e890
	if (cr6.eq) goto loc_8271E890;
	// stw r25,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, r25.u32);
	// stw r24,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, r24.u32);
	// b 0x8271e898
	goto loc_8271E898;
loc_8271E890:
	// stw r25,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, r25.u32);
	// stw r24,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, r24.u32);
loc_8271E898:
	// mr r24,r15
	r24.u64 = r15.u64;
	// addi r26,r1,162
	r26.s64 = ctx.r1.s64 + 162;
	// mr r25,r18
	r25.u64 = r18.u64;
loc_8271E8A4:
	// clrlwi r11,r23,31
	r11.u64 = r23.u32 & 0x1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8271ebf4
	if (cr6.eq) goto loc_8271EBF4;
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// lwz r10,104(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r11,1436(r31)
	PPC_STORE_U32(r31.u32 + 1436, r11.u32);
	// beq cr6,0x8271e988
	if (cr6.eq) goto loc_8271E988;
	// lhz r10,18(r27)
	ctx.r10.u64 = PPC_LOAD_U16(r27.u32 + 18);
	// mr r3,r15
	ctx.r3.u64 = r15.u64;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8271eb78
	if (cr6.eq) goto loc_8271EB78;
	// lwz r10,4(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lwz r11,-4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -4);
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x8271eb78
	if (cr6.eq) goto loc_8271EB78;
	// lwz r10,1868(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1868);
	// rlwinm r8,r11,1,15,15
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// lwz r9,16(r27)
	ctx.r9.u64 = PPC_LOAD_U32(r27.u32 + 16);
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// addi r4,r10,1
	ctx.r4.s64 = ctx.r10.s64 + 1;
	// clrlwi r10,r4,31
	ctx.r10.u64 = ctx.r4.u32 & 0x1;
	// addi r7,r4,353
	ctx.r7.s64 = ctx.r4.s64 + 353;
	// subfic r10,r10,5
	xer.ca = ctx.r10.u32 <= 5;
	ctx.r10.s64 = 5 - ctx.r10.s64;
	// rlwinm r7,r7,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r6,r4,356
	ctx.r6.s64 = ctx.r4.s64 + 356;
	// rlwinm r6,r6,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r7,r7,r31
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r7.u32 + r31.u32);
	// subf r8,r8,r7
	ctx.r8.s64 = ctx.r7.s64 - ctx.r8.s64;
	// lwzx r7,r6,r31
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + r31.u32);
	// slw r10,r9,r10
	ctx.r10.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r9.u32 << (ctx.r10.u8 & 0x3F));
	// add r9,r8,r10
	ctx.r9.u64 = ctx.r8.u64 + ctx.r10.u64;
	// subf r10,r10,r7
	ctx.r10.s64 = ctx.r7.s64 - ctx.r10.s64;
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// subf r10,r11,r10
	ctx.r10.s64 = ctx.r10.s64 - r11.s64;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// rlwinm r10,r10,0,0,16
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r10,r10,0,16,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8271eb78
	if (cr6.eq) goto loc_8271EB78;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// bne cr6,0x8271e974
	if (!cr6.eq) goto loc_8271E974;
	// lwz r10,1104(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1104);
	// cmpwi cr6,r10,7
	cr6.compare<int32_t>(ctx.r10.s32, 7, xer);
	// bne cr6,0x8271e974
	if (!cr6.eq) goto loc_8271E974;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r4,r11
	ctx.r4.u64 = r11.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x826fd200
	sub_826FD200(ctx, base);
	// b 0x8271eb78
	goto loc_8271EB78;
loc_8271E974:
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r5,r11
	ctx.r5.u64 = r11.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82616260
	sub_82616260(ctx, base);
	// b 0x8271eb78
	goto loc_8271EB78;
loc_8271E988:
	// lhz r9,50(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 50);
	// lwz r10,4(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// rlwinm r9,r9,31,1,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 31) & 0x7FFFFFFF;
	// lhz r8,18(r27)
	ctx.r8.u64 = PPC_LOAD_U16(r27.u32 + 18);
	// rlwinm r6,r10,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r7,r9,r10
	ctx.r7.s64 = ctx.r10.s64 - ctx.r9.s64;
	// rlwinm r8,r8,31,1,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 31) & 0x7FFFFFFF;
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// add r10,r6,r11
	ctx.r10.u64 = ctx.r6.u64 + r11.u64;
	// cmpw cr6,r8,r9
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r9.s32, xer);
	// neg r6,r8
	ctx.r6.s64 = -ctx.r8.s64;
	// rlwinm r9,r7,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// srawi r6,r6,31
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x7FFFFFFF) != 0);
	ctx.r6.s64 = ctx.r6.s32 >> 31;
	// lwz r10,-4(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -4);
	// li r8,1
	ctx.r8.s64 = 1;
	// and r10,r10,r6
	ctx.r10.u64 = ctx.r10.u64 & ctx.r6.u64;
	// lwzx r9,r9,r11
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + r11.u32);
	// blt cr6,0x8271e9d4
	if (cr6.lt) goto loc_8271E9D4;
	// mr r8,r15
	ctx.r8.u64 = r15.u64;
loc_8271E9D4:
	// rlwinm r8,r8,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r6,r9,31,1,31
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 31) & 0x7FFFFFFF;
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// rlwinm r5,r10,31,1,31
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// xor r7,r6,r9
	ctx.r7.u64 = ctx.r6.u64 ^ ctx.r9.u64;
	// add r11,r8,r11
	r11.u64 = ctx.r8.u64 + r11.u64;
	// xor r8,r5,r10
	ctx.r8.u64 = ctx.r5.u64 ^ ctx.r10.u64;
	// rlwinm r6,r7,0,17,17
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 0) & 0x4000;
	// rlwinm r7,r8,0,17,17
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x4000;
	// lwz r11,-4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -4);
	// rlwinm r8,r11,31,1,31
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFF;
	// xor r8,r8,r11
	ctx.r8.u64 = ctx.r8.u64 ^ r11.u64;
	// rlwinm r8,r8,0,17,17
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x4000;
	// add r8,r8,r6
	ctx.r8.u64 = ctx.r8.u64 + ctx.r6.u64;
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x8271ea30
	if (!cr6.gt) goto loc_8271EA30;
	// cmpwi cr6,r8,16384
	cr6.compare<int32_t>(ctx.r8.s32, 16384, xer);
	// bne cr6,0x8271eb58
	if (!cr6.eq) goto loc_8271EB58;
	// cmplwi cr6,r9,16384
	cr6.compare<uint32_t>(ctx.r9.u32, 16384, xer);
	// bne cr6,0x8271eb38
	if (!cr6.eq) goto loc_8271EB38;
	// mr r9,r15
	ctx.r9.u64 = r15.u64;
loc_8271EA30:
	// subf r5,r9,r11
	ctx.r5.s64 = r11.s64 - ctx.r9.s64;
	// lwz r4,1868(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 1868);
	// subf r30,r10,r11
	r30.s64 = r11.s64 - ctx.r10.s64;
	// lwz r28,16(r27)
	r28.u64 = PPC_LOAD_U32(r27.u32 + 16);
	// subf r29,r9,r10
	r29.s64 = ctx.r10.s64 - ctx.r9.s64;
	// xor r30,r30,r5
	r30.u64 = r30.u64 ^ ctx.r5.u64;
	// xor r29,r29,r5
	r29.u64 = r29.u64 ^ ctx.r5.u64;
	// rlwinm r8,r11,16,0,15
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF0000;
	// rlwinm r7,r9,16,0,15
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 16) & 0xFFFF0000;
	// rlwinm r6,r10,16,0,15
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 16) & 0xFFFF0000;
	// srawi r5,r30,31
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = r30.s32 >> 31;
	// srawi r30,r29,31
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x7FFFFFFF) != 0);
	r30.s64 = r29.s32 >> 31;
	// subf r3,r7,r8
	ctx.r3.s64 = ctx.r8.s64 - ctx.r7.s64;
	// subf r29,r6,r8
	r29.s64 = ctx.r8.s64 - ctx.r6.s64;
	// subf r18,r7,r6
	r18.s64 = ctx.r6.s64 - ctx.r7.s64;
	// xor r29,r29,r3
	r29.u64 = r29.u64 ^ ctx.r3.u64;
	// xor r18,r18,r3
	r18.u64 = r18.u64 ^ ctx.r3.u64;
	// srawi r3,r29,31
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r29.s32 >> 31;
	// srawi r29,r18,31
	xer.ca = (r18.s32 < 0) & ((r18.u32 & 0x7FFFFFFF) != 0);
	r29.s64 = r18.s32 >> 31;
	// or r18,r5,r30
	r18.u64 = ctx.r5.u64 | r30.u64;
	// and r11,r5,r11
	r11.u64 = ctx.r5.u64 & r11.u64;
	// andc r10,r10,r18
	ctx.r10.u64 = ctx.r10.u64 & ~r18.u64;
	// addi r4,r4,1
	ctx.r4.s64 = ctx.r4.s64 + 1;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// and r10,r30,r9
	ctx.r10.u64 = r30.u64 & ctx.r9.u64;
	// clrlwi r17,r4,31
	r17.u64 = ctx.r4.u32 & 0x1;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// or r9,r3,r29
	ctx.r9.u64 = ctx.r3.u64 | r29.u64;
	// srawi r10,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	ctx.r10.s64 = r11.s32 >> 16;
	// subfic r11,r17,5
	xer.ca = r17.u32 <= 5;
	r11.s64 = 5 - r17.s64;
	// andc r9,r6,r9
	ctx.r9.u64 = ctx.r6.u64 & ~ctx.r9.u64;
	// and r7,r29,r7
	ctx.r7.u64 = r29.u64 & ctx.r7.u64;
	// and r8,r3,r8
	ctx.r8.u64 = ctx.r3.u64 & ctx.r8.u64;
	// or r9,r9,r7
	ctx.r9.u64 = ctx.r9.u64 | ctx.r7.u64;
	// addi r15,r4,353
	r15.s64 = ctx.r4.s64 + 353;
	// or r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 | ctx.r8.u64;
	// addi r14,r4,356
	r14.s64 = ctx.r4.s64 + 356;
	// rlwinm r10,r10,16,0,15
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 16) & 0xFFFF0000;
	// rlwinm r9,r9,16,16,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 16) & 0xFFFF;
	// rlwinm r15,r15,2,0,29
	r15.u64 = __builtin_rotateleft64(r15.u32 | (r15.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r14,r14,2,0,29
	r14.u64 = __builtin_rotateleft64(r14.u32 | (r14.u64 << 32), 2) & 0xFFFFFFFC;
	// or r3,r10,r9
	ctx.r3.u64 = ctx.r10.u64 | ctx.r9.u64;
	// rlwinm r10,r3,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0x10000;
	// lwzx r15,r15,r31
	r15.u64 = PPC_LOAD_U32(r15.u32 + r31.u32);
	// lwzx r14,r14,r31
	r14.u64 = PPC_LOAD_U32(r14.u32 + r31.u32);
	// slw r11,r28,r11
	r11.u64 = r11.u8 & 0x20 ? 0 : (r28.u32 << (r11.u8 & 0x3F));
	// subf r10,r10,r15
	ctx.r10.s64 = r15.s64 - ctx.r10.s64;
	// subf r9,r11,r14
	ctx.r9.s64 = r14.s64 - r11.s64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// subf r9,r3,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r3.s64;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271eb70
	if (cr6.eq) goto loc_8271EB70;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// bne cr6,0x8271eb60
	if (!cr6.eq) goto loc_8271EB60;
	// lwz r11,1104(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1104);
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// bne cr6,0x8271eb60
	if (!cr6.eq) goto loc_8271EB60;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x826fd200
	sub_826FD200(ctx, base);
	// b 0x8271eb70
	goto loc_8271EB70;
loc_8271EB38:
	// cmplwi cr6,r11,16384
	cr6.compare<uint32_t>(r11.u32, 16384, xer);
	// bne cr6,0x8271eb48
	if (!cr6.eq) goto loc_8271EB48;
	// mr r11,r15
	r11.u64 = r15.u64;
	// b 0x8271ea30
	goto loc_8271EA30;
loc_8271EB48:
	// cmplwi cr6,r10,16384
	cr6.compare<uint32_t>(ctx.r10.u32, 16384, xer);
	// bne cr6,0x8271ea30
	if (!cr6.eq) goto loc_8271EA30;
	// mr r10,r15
	ctx.r10.u64 = r15.u64;
	// b 0x8271ea30
	goto loc_8271EA30;
loc_8271EB58:
	// mr r3,r15
	ctx.r3.u64 = r15.u64;
	// b 0x8271eb78
	goto loc_8271EB78;
loc_8271EB60:
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82616260
	sub_82616260(ctx, base);
loc_8271EB70:
	// lwz r14,92(r1)
	r14.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r15,0
	r15.s64 = 0;
loc_8271EB78:
	// clrlwi r11,r20,24
	r11.u64 = r20.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8271ebe0
	if (!cr6.eq) goto loc_8271EBE0;
	// lhz r9,-2(r26)
	ctx.r9.u64 = PPC_LOAD_U16(r26.u32 + -2);
	// srawi r6,r3,16
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0xFFFF) != 0);
	ctx.r6.s64 = ctx.r3.s32 >> 16;
	// lhz r5,0(r26)
	ctx.r5.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// extsh r8,r9
	ctx.r8.s64 = ctx.r9.s16;
	// lhz r11,64(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 64);
	// extsh r9,r3
	ctx.r9.s64 = ctx.r3.s16;
	// lhz r10,62(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 62);
	// extsh r7,r5
	ctx.r7.s64 = ctx.r5.s16;
	// lhz r3,66(r31)
	ctx.r3.u64 = PPC_LOAD_U16(r31.u32 + 66);
	// add r8,r8,r6
	ctx.r8.u64 = ctx.r8.u64 + ctx.r6.u64;
	// lhz r4,68(r31)
	ctx.r4.u64 = PPC_LOAD_U16(r31.u32 + 68);
	// add r9,r9,r7
	ctx.r9.u64 = ctx.r9.u64 + ctx.r7.u64;
	// add r8,r8,r11
	ctx.r8.u64 = ctx.r8.u64 + r11.u64;
	// add r9,r9,r10
	ctx.r9.u64 = ctx.r9.u64 + ctx.r10.u64;
	// rotlwi r7,r4,16
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r4.u32, 16);
	// and r9,r9,r3
	ctx.r9.u64 = ctx.r9.u64 & ctx.r3.u64;
	// rlwinm r8,r8,16,0,15
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 16) & 0xFFFF0000;
	// rotlwi r11,r11,16
	r11.u64 = __builtin_rotateleft32(r11.u32, 16);
	// and r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 & ctx.r7.u64;
	// subf r10,r10,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r10.s64;
	// subf r11,r11,r8
	r11.s64 = ctx.r8.s64 - r11.s64;
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// or r3,r11,r10
	ctx.r3.u64 = r11.u64 | ctx.r10.u64;
loc_8271EBE0:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// addi r26,r26,4
	r26.s64 = r26.s64 + 4;
	// stwx r3,r24,r11
	PPC_STORE_U32(r24.u32 + r11.u32, ctx.r3.u32);
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// stwx r3,r21,r11
	PPC_STORE_U32(r21.u32 + r11.u32, ctx.r3.u32);
loc_8271EBF4:
	// addi r24,r24,8
	r24.s64 = r24.s64 + 8;
	// addi r25,r25,4
	r25.s64 = r25.s64 + 4;
	// srawi r23,r23,1
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x1) != 0);
	r23.s64 = r23.s32 >> 1;
	// cmpwi cr6,r24,16
	cr6.compare<int32_t>(r24.s32, 16, xer);
	// blt cr6,0x8271e8a4
	if (cr6.lt) goto loc_8271E8A4;
	// b 0x8271ec1c
	goto loc_8271EC1C;
loc_8271EC0C:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// stw r30,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r30.u32);
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// stw r3,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r3.u32);
loc_8271EC1C:
	// addi r9,r31,1380
	ctx.r9.s64 = r31.s64 + 1380;
	// lwz r10,220(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 220);
	// rldicl r11,r22,8,56
	r11.u64 = __builtin_rotateleft64(r22.u64, 8) & 0xFF;
	// addi r8,r1,1744
	ctx.r8.s64 = ctx.r1.s64 + 1744;
	// clrlwi r11,r11,26
	r11.u64 = r11.u32 & 0x3F;
	// addi r7,r1,2896
	ctx.r7.s64 = ctx.r1.s64 + 2896;
	// stw r9,532(r31)
	PPC_STORE_U32(r31.u32 + 532, ctx.r9.u32);
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rldicl r6,r22,16,48
	ctx.r6.u64 = __builtin_rotateleft64(r22.u64, 16) & 0xFFFF;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// stw r8,1844(r31)
	PPC_STORE_U32(r31.u32 + 1844, ctx.r8.u32);
	// mr r18,r22
	r18.u64 = r22.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stw r7,1848(r31)
	PPC_STORE_U32(r31.u32 + 1848, ctx.r7.u32);
	// lbz r20,1407(r19)
	r20.u64 = PPC_LOAD_U8(r19.u32 + 1407);
	// clrlwi r17,r6,26
	r17.u64 = ctx.r6.u32 & 0x3F;
	// add r19,r11,r10
	r19.u64 = r11.u64 + ctx.r10.u64;
	// addi r21,r31,1404
	r21.s64 = r31.s64 + 1404;
	// mr r22,r15
	r22.u64 = r15.u64;
	// addi r23,r31,296
	r23.s64 = r31.s64 + 296;
	// stw r19,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, r19.u32);
loc_8271EC70:
	// clrlwi r11,r20,31
	r11.u64 = r20.u32 & 0x1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8271ef18
	if (cr6.eq) goto loc_8271EF18;
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// lwz r11,16(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 16);
	// lwz r9,1412(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1412);
	// rlwinm r11,r11,5,0,26
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 5) & 0xFFFFFFE0;
	// lwz r8,1424(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1424);
	// lwzx r3,r22,r10
	ctx.r3.u64 = PPC_LOAD_U32(r22.u32 + ctx.r10.u32);
	// rlwinm r10,r3,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0x10000;
	// subf r10,r10,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r10.s64;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// subf r11,r11,r8
	r11.s64 = ctx.r8.s64 - r11.s64;
	// add r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 + ctx.r3.u64;
	// subf r11,r3,r11
	r11.s64 = r11.s64 - ctx.r3.s64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271ecf4
	if (cr6.eq) goto loc_8271ECF4;
	// lwz r11,1104(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1104);
	// cmpwi cr6,r11,7
	cr6.compare<int32_t>(r11.s32, 7, xer);
	// bne cr6,0x8271ece0
	if (!cr6.eq) goto loc_8271ECE0;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x826fd200
	sub_826FD200(ctx, base);
	// b 0x8271ecf4
	goto loc_8271ECF4;
loc_8271ECE0:
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82616260
	sub_82616260(ctx, base);
loc_8271ECF4:
	// srawi r26,r3,16
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0xFFFF) != 0);
	r26.s64 = ctx.r3.s32 >> 16;
	// lbz r8,48(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 48);
	// lhz r4,90(r31)
	ctx.r4.u64 = PPC_LOAD_U16(r31.u32 + 90);
	// extsh r25,r3
	r25.s64 = ctx.r3.s16;
	// srawi r11,r26,2
	xer.ca = (r26.s32 < 0) & ((r26.u32 & 0x3) != 0);
	r11.s64 = r26.s32 >> 2;
	// lwz r9,8(r27)
	ctx.r9.u64 = PPC_LOAD_U32(r27.u32 + 8);
	// cmplwi cr6,r8,1
	cr6.compare<uint32_t>(ctx.r8.u32, 1, xer);
	// lwz r10,0(r23)
	ctx.r10.u64 = PPC_LOAD_U32(r23.u32 + 0);
	// mullw r11,r11,r4
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r4.s32);
	// lwz r24,1548(r23)
	r24.u64 = PPC_LOAD_U32(r23.u32 + 1548);
	// srawi r8,r25,2
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x3) != 0);
	ctx.r8.s64 = r25.s32 >> 2;
	// clrlwi r29,r25,30
	r29.u64 = r25.u32 & 0x3;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// clrlwi r30,r26,30
	r30.u64 = r26.u32 & 0x3;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// li r7,1
	ctx.r7.s64 = 1;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// add r28,r11,r10
	r28.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r29,2,0,29
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// bne cr6,0x8271ed90
	if (!cr6.eq) goto loc_8271ED90;
	// addi r11,r11,134
	r11.s64 = r11.s64 + 134;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8271eda4
	if (cr6.eq) goto loc_8271EDA4;
	// li r9,1
	ctx.r9.s64 = 1;
	// lbz r8,35(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// lhz r4,90(r31)
	ctx.r4.u64 = PPC_LOAD_U16(r31.u32 + 90);
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8266c7a8
	sub_8266C7A8(ctx, base);
	// b 0x8271eda4
	goto loc_8271EDA4;
loc_8271ED90:
	// addi r11,r11,150
	r11.s64 = r11.s64 + 150;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8271EDA4:
	// lwz r8,1108(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1108);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// beq cr6,0x8271edc8
	if (cr6.eq) goto loc_8271EDC8;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// add r11,r22,r11
	r11.u64 = r22.u64 + r11.u64;
	// lhz r10,2(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// lhz r11,0(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// extsh r25,r10
	r25.s64 = ctx.r10.s16;
	// extsh r26,r11
	r26.s64 = r11.s16;
loc_8271EDC8:
	// clrlwi r11,r25,30
	r11.u64 = r25.u32 & 0x3;
	// lbz r10,31(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 31);
	// clrlwi r9,r26,30
	ctx.r9.u64 = r26.u32 & 0x3;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// lbzx r10,r11,r21
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + r21.u32);
	// lbzx r11,r9,r21
	r11.u64 = PPC_LOAD_U8(ctx.r9.u32 + r21.u32);
	// add r10,r10,r25
	ctx.r10.u64 = ctx.r10.u64 + r25.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// srawi r10,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 1;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// beq cr6,0x8271ee24
	if (cr6.eq) goto loc_8271EE24;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// clrlwi r9,r10,31
	ctx.r9.u64 = ctx.r10.u32 & 0x1;
	// ble cr6,0x8271ee08
	if (!cr6.gt) goto loc_8271EE08;
	// subf r10,r9,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r9.s64;
	// b 0x8271ee0c
	goto loc_8271EE0C;
loc_8271EE08:
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
loc_8271EE0C:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// clrlwi r9,r11,31
	ctx.r9.u64 = r11.u32 & 0x1;
	// ble cr6,0x8271ee20
	if (!cr6.gt) goto loc_8271EE20;
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// b 0x8271ee24
	goto loc_8271EE24;
loc_8271EE20:
	// add r11,r9,r11
	r11.u64 = ctx.r9.u64 + r11.u64;
loc_8271EE24:
	// sth r10,98(r1)
	PPC_STORE_U16(ctx.r1.u32 + 98, ctx.r10.u16);
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// sth r11,96(r1)
	PPC_STORE_U16(ctx.r1.u32 + 96, r11.u16);
	// beq cr6,0x8271ee94
	if (cr6.eq) goto loc_8271EE94;
	// lwz r4,96(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r11,16(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 16);
	// rlwinm r8,r4,1,15,15
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0x10000;
	// lwz r9,1872(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1872);
	// rlwinm r6,r11,4,0,27
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// lwz r7,1876(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1876);
	// rlwinm r5,r11,4,0,27
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// subf r11,r8,r6
	r11.s64 = ctx.r6.s64 - ctx.r8.s64;
	// subf r8,r5,r7
	ctx.r8.s64 = ctx.r7.s64 - ctx.r5.s64;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// subf r9,r4,r8
	ctx.r9.s64 = ctx.r8.s64 - ctx.r4.s64;
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// mr r10,r4
	ctx.r10.u64 = ctx.r4.u64;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271ee8c
	if (cr6.eq) goto loc_8271EE8C;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x826fd2e0
	sub_826FD2E0(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
loc_8271EE8C:
	// stw r10,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r10.u32);
	// b 0x8271ee98
	goto loc_8271EE98;
loc_8271EE94:
	// lwz r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
loc_8271EE98:
	// extsh r11,r10
	r11.s64 = ctx.r10.s16;
	// lhz r4,92(r31)
	ctx.r4.u64 = PPC_LOAD_U16(r31.u32 + 92);
	// srawi r10,r10,16
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xFFFF) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 16;
	// lwz r29,12(r27)
	r29.u64 = PPC_LOAD_U32(r27.u32 + 12);
	// lwz r3,8(r23)
	ctx.r3.u64 = PPC_LOAD_U32(r23.u32 + 8);
	// addi r30,r24,768
	r30.s64 = r24.s64 + 768;
	// srawi r28,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	r28.s64 = ctx.r10.s32 >> 2;
	// clrlwi r8,r10,30
	ctx.r8.u64 = ctx.r10.u32 & 0x3;
	// srawi r10,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	ctx.r10.s64 = r11.s32 >> 2;
	// rlwinm r11,r11,2,28,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xC;
	// li r7,0
	ctx.r7.s64 = 0;
	// add r9,r11,r8
	ctx.r9.u64 = r11.u64 + ctx.r8.u64;
	// mullw r11,r28,r4
	r11.s64 = int64_t(r28.s32) * int64_t(ctx.r4.s32);
	// addi r9,r9,150
	ctx.r9.s64 = ctx.r9.s64 + 150;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r28,r9,2,0,29
	r28.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// add r29,r11,r29
	r29.u64 = r11.u64 + r29.u64;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// add r3,r3,r29
	ctx.r3.u64 = ctx.r3.u64 + r29.u64;
	// lwzx r11,r28,r31
	r11.u64 = PPC_LOAD_U32(r28.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,16(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 16);
	// lhz r4,92(r31)
	ctx.r4.u64 = PPC_LOAD_U16(r31.u32 + 92);
	// li r7,0
	ctx.r7.s64 = 0;
	// lwzx r10,r28,r31
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + r31.u32);
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// addi r5,r30,16
	ctx.r5.s64 = r30.s64 + 16;
	// add r3,r11,r29
	ctx.r3.u64 = r11.u64 + r29.u64;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8271EF18:
	// addi r22,r22,8
	r22.s64 = r22.s64 + 8;
	// addi r23,r23,4
	r23.s64 = r23.s64 + 4;
	// srawi r20,r20,1
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x1) != 0);
	r20.s64 = r20.s32 >> 1;
	// cmpwi cr6,r22,16
	cr6.compare<int32_t>(r22.s32, 16, xer);
	// blt cr6,0x8271ec70
	if (cr6.lt) goto loc_8271EC70;
	// mr r30,r15
	r30.u64 = r15.u64;
	// stw r30,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r30.u32);
loc_8271EF34:
	// srawi r29,r30,2
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x3) != 0);
	r29.s64 = r30.s32 >> 2;
	// addi r11,r30,98
	r11.s64 = r30.s64 + 98;
	// addi r10,r29,2
	ctx.r10.s64 = r29.s64 + 2;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r8,r10,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// rldicl r11,r18,20,44
	r11.u64 = __builtin_rotateleft64(r18.u64, 20) & 0xFFFFF;
	// stw r29,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, r29.u32);
	// clrlwi r7,r17,31
	ctx.r7.u64 = r17.u32 & 0x1;
	// clrlwi r11,r11,29
	r11.u64 = r11.u32 & 0x7;
	// lwzx r10,r9,r31
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + r31.u32);
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// lwzx r9,r8,r27
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r8.u32 + r27.u32);
	// add r26,r10,r9
	r26.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r26,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, r26.u32);
	// beq cr6,0x8271f160
	if (cr6.eq) goto loc_8271F160;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8271f0b4
	if (!cr6.eq) goto loc_8271F0B4;
	// lwz r11,0(r19)
	r11.u64 = PPC_LOAD_U32(r19.u32 + 0);
	// addi r5,r31,932
	ctx.r5.s64 = r31.s64 + 932;
	// lwz r10,24(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 24);
	// lwz r4,276(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 276);
	// addi r9,r10,1
	ctx.r9.s64 = ctx.r10.s64 + 1;
	// stw r15,200(r1)
	PPC_STORE_U32(ctx.r1.u32 + 200, r15.u32);
	// stw r15,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r15.u32);
	// stw r11,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, r11.u32);
	// lwz r11,4(r19)
	r11.u64 = PPC_LOAD_U32(r19.u32 + 4);
	// lbz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// stw r11,196(r1)
	PPC_STORE_U32(ctx.r1.u32 + 196, r11.u32);
	// lwz r11,20(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 20);
	// stw r10,188(r1)
	PPC_STORE_U32(ctx.r1.u32 + 188, ctx.r10.u32);
	// stw r11,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r11.u32);
	// lwz r11,260(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// stw r9,24(r27)
	PPC_STORE_U32(r27.u32 + 24, ctx.r9.u32);
	// lwz r10,260(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// stw r10,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, ctx.r10.u32);
	// stw r11,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r11.u32);
	// dcbzl r0,r10
	memset(base + ((ctx.r10.u32) & ~127), 0, 128);
	// lwz r7,188(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// lwz r19,168(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// cmplwi cr6,r7,128
	cr6.compare<uint32_t>(ctx.r7.u32, 128, xer);
	// blt cr6,0x8271eff8
	if (cr6.lt) goto loc_8271EFF8;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r19
	ctx.r6.u64 = r19.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82611f38
	sub_82611F38(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// b 0x8271f074
	goto loc_8271F074;
loc_8271EFF8:
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// lwz r6,128(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// ble cr6,0x8271f070
	if (!cr6.gt) goto loc_8271F070;
	// lwz r3,176(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// lwz r30,196(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 196);
	// lwz r29,184(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// lwz r8,200(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 200);
loc_8271F018:
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
	// rlwinm r10,r10,24,8,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0xFFFFFF;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// mullw r10,r10,r3
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r3.s32);
	// add r28,r10,r30
	r28.u64 = ctx.r10.u64 + r30.u64;
	// rlwinm r10,r9,25,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 25) & 0x1;
	// clrlwi r9,r9,26
	ctx.r9.u64 = ctx.r9.u32 & 0x3F;
	// neg r10,r10
	ctx.r10.s64 = -ctx.r10.s64;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// xor r28,r28,r10
	r28.u64 = r28.u64 ^ ctx.r10.u64;
	// subf r10,r10,r28
	ctx.r10.s64 = r28.s64 - ctx.r10.s64;
	// lbzx r8,r9,r4
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r9.u32 + ctx.r4.u32);
	// rotlwi r26,r8,1
	r26.u64 = __builtin_rotateleft32(ctx.r8.u32, 1);
	// lbzx r28,r8,r5
	r28.u64 = PPC_LOAD_U8(ctx.r8.u32 + ctx.r5.u32);
	// addi r8,r9,1
	ctx.r8.s64 = ctx.r9.s64 + 1;
	// or r6,r28,r6
	ctx.r6.u64 = r28.u64 | ctx.r6.u64;
	// sthx r10,r26,r29
	PPC_STORE_U16(r26.u32 + r29.u32, ctx.r10.u16);
	// bne cr6,0x8271f018
	if (!cr6.eq) goto loc_8271F018;
loc_8271F070:
	// stw r11,20(r27)
	PPC_STORE_U32(r27.u32 + 20, r11.u32);
loc_8271F074:
	// lwz r4,124(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// lwz r3,144(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// bne cr6,0x8271f09c
	if (!cr6.eq) goto loc_8271F09C;
	// bl 0x8261c9f8
	sub_8261C9F8(ctx, base);
	// lwz r30,100(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r29,136(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// lwz r26,152(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// lwz r28,92(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// b 0x8271f0f4
	goto loc_8271F0F4;
loc_8271F09C:
	// bl 0x826ff808
	sub_826FF808(ctx, base);
	// lwz r30,100(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r29,136(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// lwz r26,152(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// lwz r28,92(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// b 0x8271f0f4
	goto loc_8271F0F4;
loc_8271F0B4:
	// rldicl r9,r18,24,40
	ctx.r9.u64 = __builtin_rotateleft64(r18.u64, 24) & 0xFFFFFF;
	// lwz r28,448(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 448);
	// rlwinm r10,r11,0,29,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x6;
	// clrlwi r5,r9,28
	ctx.r5.u64 = ctx.r9.u32 & 0xF;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// add r11,r5,r31
	r11.u64 = ctx.r5.u64 + r31.u64;
	// mr r4,r19
	ctx.r4.u64 = r19.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lbz r11,160(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 160);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// addi r11,r11,117
	r11.s64 = r11.s64 + 117;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8271F0F4:
	// lbz r16,80(r1)
	r16.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// cmplwi cr6,r16,2
	cr6.compare<uint32_t>(r16.u32, 2, xer);
	// bgt cr6,0x8271f12c
	if (cr6.gt) goto loc_8271F12C;
	// addi r11,r29,45
	r11.s64 = r29.s64 + 45;
	// lwz r10,532(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 532);
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// lwz r5,1848(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 1848);
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r4,1844(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 1844);
	// lbzx r8,r30,r10
	ctx.r8.u64 = PPC_LOAD_U8(r30.u32 + ctx.r10.u32);
	// lhzx r7,r11,r31
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + r31.u32);
	// bl 0x8271f588
	sub_8271F588(ctx, base);
	// b 0x8271f1bc
	goto loc_8271F1BC;
loc_8271F12C:
	// subfic r10,r16,465
	xer.ca = r16.u32 <= 465;
	ctx.r10.s64 = 465 - r16.s64;
	// lwz r11,532(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 532);
	// addi r9,r29,45
	ctx.r9.s64 = r29.s64 + 45;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// lbzx r8,r30,r11
	ctx.r8.u64 = PPC_LOAD_U8(r30.u32 + r11.u32);
	// lwzx r11,r10,r31
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r31.u32);
	// rotlwi r10,r8,2
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 2);
	// lhzx r6,r9,r31
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r9.u32 + r31.u32);
	// add r4,r11,r10
	ctx.r4.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x82706700
	sub_82706700(ctx, base);
	// b 0x8271f1bc
	goto loc_8271F1BC;
loc_8271F160:
	// cmplwi cr6,r16,2
	cr6.compare<uint32_t>(r16.u32, 2, xer);
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bgt cr6,0x8271f190
	if (cr6.gt) goto loc_8271F190;
	// addi r11,r29,45
	r11.s64 = r29.s64 + 45;
	// lwz r10,532(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 532);
	// lwz r5,1848(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 1848);
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r4,1844(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 1844);
	// lbzx r6,r30,r10
	ctx.r6.u64 = PPC_LOAD_U8(r30.u32 + ctx.r10.u32);
	// lhzx r7,r11,r31
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + r31.u32);
	// bl 0x8271f478
	sub_8271F478(ctx, base);
	// b 0x8271f1bc
	goto loc_8271F1BC;
loc_8271F190:
	// subfic r10,r16,465
	xer.ca = r16.u32 <= 465;
	ctx.r10.s64 = 465 - r16.s64;
	// lwz r11,532(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 532);
	// addi r9,r29,45
	ctx.r9.s64 = r29.s64 + 45;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// lbzx r8,r30,r11
	ctx.r8.u64 = PPC_LOAD_U8(r30.u32 + r11.u32);
	// lwzx r11,r10,r31
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r31.u32);
	// rotlwi r10,r8,2
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 2);
	// lhzx r5,r9,r31
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r9.u32 + r31.u32);
	// add r4,r11,r10
	ctx.r4.u64 = r11.u64 + ctx.r10.u64;
	// bl 0x82706640
	sub_82706640(ctx, base);
loc_8271F1BC:
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// rlwinm r17,r17,31,25,31
	r17.u64 = __builtin_rotateleft64(r17.u32 | (r17.u64 << 32), 31) & 0x7F;
	// rldicr r18,r18,8,55
	r18.u64 = __builtin_rotateleft64(r18.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// cmpwi cr6,r30,6
	cr6.compare<int32_t>(r30.s32, 6, xer);
	// stw r30,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r30.u32);
	// blt cr6,0x8271ef34
	if (cr6.lt) goto loc_8271EF34;
	// lwz r29,116(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r5,192(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 192);
loc_8271F1DC:
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// addi r14,r14,1
	r14.s64 = r14.s64 + 1;
	// lhz r10,18(r27)
	ctx.r10.u64 = PPC_LOAD_U16(r27.u32 + 18);
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// addi r7,r11,2
	ctx.r7.s64 = r11.s64 + 2;
	// lwz r11,12(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 12);
	// addi r8,r10,2
	ctx.r8.s64 = ctx.r10.s64 + 2;
	// lwz r9,4(r27)
	ctx.r9.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// lwz r10,8(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 8);
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// stw r14,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r14.u32);
	// addi r10,r10,16
	ctx.r10.s64 = ctx.r10.s64 + 16;
	// stw r29,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r29.u32);
	// stw r7,0(r27)
	PPC_STORE_U32(r27.u32 + 0, ctx.r7.u32);
	// lwz r7,112(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// stw r11,12(r27)
	PPC_STORE_U32(r27.u32 + 12, r11.u32);
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// lwz r11,140(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// stw r9,4(r27)
	PPC_STORE_U32(r27.u32 + 4, ctx.r9.u32);
	// sth r8,18(r27)
	PPC_STORE_U16(r27.u32 + 18, ctx.r8.u16);
	// cmpw cr6,r14,r11
	cr6.compare<int32_t>(r14.s32, r11.s32, xer);
	// stw r10,8(r27)
	PPC_STORE_U32(r27.u32 + 8, ctx.r10.u32);
	// stw r7,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r7.u32);
	// blt cr6,0x8271e5e8
	if (cr6.lt) goto loc_8271E5E8;
	// lwz r11,148(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// lwz r10,156(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
loc_8271F248:
	// lwz r9,108(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// rlwinm r7,r5,4,0,27
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 4) & 0xFFFFFFF0;
	// lwz r8,0(r27)
	ctx.r8.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// addi r6,r9,1
	ctx.r6.s64 = ctx.r9.s64 + 1;
	// lhz r9,16(r27)
	ctx.r9.u64 = PPC_LOAD_U16(r27.u32 + 16);
	// add r11,r7,r11
	r11.u64 = ctx.r7.u64 + r11.u64;
	// stw r15,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r15.u32);
	// addi r4,r9,2
	ctx.r4.s64 = ctx.r9.s64 + 2;
	// rlwinm r9,r5,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// stw r6,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r6.u32);
	// stw r11,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, r11.u32);
	// sth r4,16(r27)
	PPC_STORE_U16(r27.u32 + 16, ctx.r4.u16);
	// lhz r9,50(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 50);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// stw r10,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, ctx.r10.u32);
	// stw r9,0(r27)
	PPC_STORE_U32(r27.u32 + 0, ctx.r9.u32);
	// lwz r9,172(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// cmpw cr6,r6,r9
	cr6.compare<int32_t>(ctx.r6.s32, ctx.r9.s32, xer);
	// blt cr6,0x8271e598
	if (cr6.lt) goto loc_8271E598;
loc_8271F298:
	// lis r11,-32126
	r11.s64 = -2105409536;
	// lwz r3,180(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// addi r4,r1,208
	ctx.r4.s64 = ctx.r1.s64 + 208;
	// lwz r31,3360(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + 3360);
	// bl 0x8271d940
	sub_8271D940(ctx, base);
	// mr r8,r15
	ctx.r8.u64 = r15.u64;
	// addi r10,r31,8
	ctx.r10.s64 = r31.s64 + 8;
	// addi r11,r1,1220
	r11.s64 = ctx.r1.s64 + 1220;
	// lis r7,-32126
	ctx.r7.s64 = -2105409536;
loc_8271F2BC:
	// lwz r9,-8(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + -8);
	// lwz r6,-4(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -4);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271f2fc
	if (!cr6.eq) goto loc_8271F2FC;
	// lwz r9,-4(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + -4);
	// lwz r6,0(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271f2fc
	if (!cr6.eq) goto loc_8271F2FC;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// lwz r6,4(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271f2fc
	if (!cr6.eq) goto loc_8271F2FC;
	// lwz r9,4(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// lwz r6,8(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// beq cr6,0x8271f300
	if (cr6.eq) goto loc_8271F300;
loc_8271F2FC:
	// stw r8,-25036(r7)
	PPC_STORE_U32(ctx.r7.u32 + -25036, ctx.r8.u32);
loc_8271F300:
	// lwz r9,8(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// lwz r6,-20(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -20);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271f340
	if (!cr6.eq) goto loc_8271F340;
	// lwz r9,12(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	// lwz r6,-16(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -16);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271f340
	if (!cr6.eq) goto loc_8271F340;
	// lwz r9,16(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	// lwz r6,-12(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -12);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271f340
	if (!cr6.eq) goto loc_8271F340;
	// lwz r9,20(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 20);
	// lwz r6,-8(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -8);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// beq cr6,0x8271f348
	if (cr6.eq) goto loc_8271F348;
loc_8271F340:
	// addi r9,r8,1
	ctx.r9.s64 = ctx.r8.s64 + 1;
	// stw r9,-25036(r7)
	PPC_STORE_U32(ctx.r7.u32 + -25036, ctx.r9.u32);
loc_8271F348:
	// lwz r9,24(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	// lwz r6,-36(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -36);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271f388
	if (!cr6.eq) goto loc_8271F388;
	// lwz r9,28(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 28);
	// lwz r6,-32(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -32);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271f388
	if (!cr6.eq) goto loc_8271F388;
	// lwz r9,32(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 32);
	// lwz r6,-28(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -28);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271f388
	if (!cr6.eq) goto loc_8271F388;
	// lwz r9,36(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 36);
	// lwz r6,-24(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -24);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// beq cr6,0x8271f390
	if (cr6.eq) goto loc_8271F390;
loc_8271F388:
	// addi r9,r8,2
	ctx.r9.s64 = ctx.r8.s64 + 2;
	// stw r9,-25036(r7)
	PPC_STORE_U32(ctx.r7.u32 + -25036, ctx.r9.u32);
loc_8271F390:
	// addi r8,r8,3
	ctx.r8.s64 = ctx.r8.s64 + 3;
	// addi r11,r11,-48
	r11.s64 = r11.s64 + -48;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmpwi cr6,r8,9
	cr6.compare<int32_t>(ctx.r8.s32, 9, xer);
	// blt cr6,0x8271f2bc
	if (cr6.lt) goto loc_8271F2BC;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,4208
	ctx.r1.s64 = ctx.r1.s64 + 4208;
	// b 0x8239bd10
	return;
}

__attribute__((alias("__imp__sub_8271F3B0"))) PPC_WEAK_FUNC(sub_8271F3B0);
PPC_FUNC_IMPL(__imp__sub_8271F3B0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcfc
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r29,r31,17248
	r29.s64 = r31.s64 + 17248;
	// addi r30,r31,15920
	r30.s64 = r31.s64 + 15920;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x8271fc00
	sub_8271FC00(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8271f46c
	if (!cr6.eq) goto loc_8271F46C;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8271f800
	sub_8271F800(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8271f46c
	if (!cr6.eq) goto loc_8271F46C;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8271e4e8
	sub_8271E4E8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x8271f46c
	if (!cr6.eq) goto loc_8271F46C;
	// lwz r11,3892(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 3892);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8271f450
	if (cr6.eq) goto loc_8271F450;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8271e400
	sub_8271E400(ctx, base);
	// lwz r7,220(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 220);
	// lwz r8,3720(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 3720);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r11,224(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 224);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r9,3728(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 3728);
	// add r5,r8,r7
	ctx.r5.u64 = ctx.r8.u64 + ctx.r7.u64;
	// lwz r10,3724(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 3724);
	// add r7,r9,r11
	ctx.r7.u64 = ctx.r9.u64 + r11.u64;
	// add r6,r10,r11
	ctx.r6.u64 = ctx.r10.u64 + r11.u64;
	// bl 0x82612ea8
	sub_82612EA8(ctx, base);
loc_8271F450:
	// li r11,1
	r11.s64 = 1;
	// li r10,0
	ctx.r10.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,15560(r31)
	PPC_STORE_U32(r31.u32 + 15560, r11.u32);
	// stw r10,15564(r31)
	PPC_STORE_U32(r31.u32 + 15564, ctx.r10.u32);
	// stw r11,15536(r31)
	PPC_STORE_U32(r31.u32 + 15536, r11.u32);
	// stw r11,456(r31)
	PPC_STORE_U32(r31.u32 + 456, r11.u32);
loc_8271F46C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x8239bd4c
	return;
}

__attribute__((alias("__imp__sub_8271F474"))) PPC_WEAK_FUNC(sub_8271F474);
PPC_FUNC_IMPL(__imp__sub_8271F474) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8271F478"))) PPC_WEAK_FUNC(sub_8271F478);
PPC_FUNC_IMPL(__imp__sub_8271F478) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r2{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v14{};
	PPCVRegister v15{};
	PPCVRegister v16{};
	PPCVRegister v17{};
	PPCVRegister v18{};
	PPCVRegister v24{};
	PPCVRegister v25{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	uint32_t ea{};
	// rlwinm r6,r6,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// li r8,144
	ctx.r8.s64 = 144;
	// add r4,r4,r6
	ctx.r4.u64 = ctx.r4.u64 + ctx.r6.u64;
	// add r2,r5,r6
	r2.u64 = ctx.r5.u64 + ctx.r6.u64;
	// li r6,48
	ctx.r6.s64 = 48;
	// mr r5,r7
	ctx.r5.u64 = ctx.r7.u64;
	// li r7,96
	ctx.r7.s64 = 96;
	// lvx128 v1,r0,r4
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r9,192
	ctx.r9.s64 = 192;
	// lvx128 v11,r0,r2
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r2.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r10,240
	ctx.r10.s64 = 240;
	// lvx128 v2,r4,r6
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r4.u32 + ctx.r6.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavguh v1,v1,v11
	// lvx128 v12,r2,r6
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r2.u32 + ctx.r6.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r11,288
	r11.s64 = 288;
	// li r12,336
	r12.s64 = 336;
	// lvx128 v3,r4,r7
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r4.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v13,r2,r7
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r2.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavguh v2,v2,v12
	// lvx128 v4,r4,r8
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r4.u32 + ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavguh v3,v3,v13
	// lvx128 v14,r2,r8
	_mm_store_si128((__m128i*)v14.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r2.u32 + ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vpkshus v24,v1,v1
	_mm_store_si128((__m128i*)v24.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v1.s16), _mm_load_si128((__m128i*)ctx.v1.s16)));
	// lvx128 v5,r4,r9
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r4.u32 + ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavguh v4,v4,v14
	// lvx128 v15,r2,r9
	_mm_store_si128((__m128i*)v15.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r2.u32 + ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vpkshus v25,v2,v2
	_mm_store_si128((__m128i*)v25.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v2.s16), _mm_load_si128((__m128i*)ctx.v2.s16)));
	// lvx128 v6,r4,r10
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r4.u32 + ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavguh v5,v5,v15
	// lvx128 v7,r4,r11
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r4.u32 + r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vpkshus v26,v3,v3
	_mm_store_si128((__m128i*)v26.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v3.s16), _mm_load_si128((__m128i*)ctx.v3.s16)));
	// lvx128 v8,r4,r12
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r4.u32 + r12.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r3,4
	ctx.r4.s64 = ctx.r3.s64 + 4;
	// lvx128 v16,r2,r10
	_mm_store_si128((__m128i*)v16.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r2.u32 + ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r6,r5,1,0,30
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 1) & 0xFFFFFFFE;
	// lvx128 v17,r2,r11
	_mm_store_si128((__m128i*)v17.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r2.u32 + r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavguh v6,v6,v16
	// vpkshus v27,v4,v4
	_mm_store_si128((__m128i*)v27.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v4.s16), _mm_load_si128((__m128i*)ctx.v4.s16)));
	// lvx128 v18,r2,r12
	_mm_store_si128((__m128i*)v18.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r2.u32 + r12.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavguh v7,v7,v17
	// stvewx v24,r0,r3
	ea = (ctx.r3.u32) & ~0x3;
	PPC_STORE_U32(ea, v24.u32[3 - ((ea & 0xF) >> 2)]);
	// add r7,r5,r6
	ctx.r7.u64 = ctx.r5.u64 + ctx.r6.u64;
	// vpkshus v28,v5,v5
	_mm_store_si128((__m128i*)v28.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v5.s16), _mm_load_si128((__m128i*)ctx.v5.s16)));
	// stvewx v24,r0,r4
	ea = (ctx.r4.u32) & ~0x3;
	PPC_STORE_U32(ea, v24.u32[3 - ((ea & 0xF) >> 2)]);
	// rlwinm r8,r5,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// vavguh v8,v8,v18
	// stvewx v25,r3,r5
	ea = (ctx.r3.u32 + ctx.r5.u32) & ~0x3;
	PPC_STORE_U32(ea, v25.u32[3 - ((ea & 0xF) >> 2)]);
	// vpkshus v29,v6,v6
	_mm_store_si128((__m128i*)v29.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v6.s16), _mm_load_si128((__m128i*)ctx.v6.s16)));
	// stvewx v25,r4,r5
	ea = (ctx.r4.u32 + ctx.r5.u32) & ~0x3;
	PPC_STORE_U32(ea, v25.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v26,r3,r6
	ea = (ctx.r3.u32 + ctx.r6.u32) & ~0x3;
	PPC_STORE_U32(ea, v26.u32[3 - ((ea & 0xF) >> 2)]);
	// add r9,r5,r8
	ctx.r9.u64 = ctx.r5.u64 + ctx.r8.u64;
	// vpkshus v30,v7,v7
	_mm_store_si128((__m128i*)v30.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v7.s16), _mm_load_si128((__m128i*)ctx.v7.s16)));
	// stvewx v26,r4,r6
	ea = (ctx.r4.u32 + ctx.r6.u32) & ~0x3;
	PPC_STORE_U32(ea, v26.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v27,r3,r7
	ea = (ctx.r3.u32 + ctx.r7.u32) & ~0x3;
	PPC_STORE_U32(ea, v27.u32[3 - ((ea & 0xF) >> 2)]);
	// add r10,r6,r8
	ctx.r10.u64 = ctx.r6.u64 + ctx.r8.u64;
	// vpkshus v31,v8,v8
	_mm_store_si128((__m128i*)v31.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)ctx.v8.s16), _mm_load_si128((__m128i*)ctx.v8.s16)));
	// stvewx v27,r4,r7
	ea = (ctx.r4.u32 + ctx.r7.u32) & ~0x3;
	PPC_STORE_U32(ea, v27.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v28,r3,r8
	ea = (ctx.r3.u32 + ctx.r8.u32) & ~0x3;
	PPC_STORE_U32(ea, v28.u32[3 - ((ea & 0xF) >> 2)]);
	// add r11,r7,r8
	r11.u64 = ctx.r7.u64 + ctx.r8.u64;
	// stvewx v28,r4,r8
	ea = (ctx.r4.u32 + ctx.r8.u32) & ~0x3;
	PPC_STORE_U32(ea, v28.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v29,r3,r9
	ea = (ctx.r3.u32 + ctx.r9.u32) & ~0x3;
	PPC_STORE_U32(ea, v29.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v29,r4,r9
	ea = (ctx.r4.u32 + ctx.r9.u32) & ~0x3;
	PPC_STORE_U32(ea, v29.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v30,r3,r10
	ea = (ctx.r3.u32 + ctx.r10.u32) & ~0x3;
	PPC_STORE_U32(ea, v30.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v30,r4,r10
	ea = (ctx.r4.u32 + ctx.r10.u32) & ~0x3;
	PPC_STORE_U32(ea, v30.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v31,r3,r11
	ea = (ctx.r3.u32 + r11.u32) & ~0x3;
	PPC_STORE_U32(ea, v31.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v31,r4,r11
	ea = (ctx.r4.u32 + r11.u32) & ~0x3;
	PPC_STORE_U32(ea, v31.u32[3 - ((ea & 0xF) >> 2)]);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8271F584"))) PPC_WEAK_FUNC(sub_8271F584);
PPC_FUNC_IMPL(__imp__sub_8271F584) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_8271F588"))) PPC_WEAK_FUNC(sub_8271F588);
PPC_FUNC_IMPL(__imp__sub_8271F588) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r2{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v14{};
	PPCVRegister v15{};
	PPCVRegister v16{};
	PPCVRegister v17{};
	PPCVRegister v18{};
	PPCVRegister v19{};
	PPCVRegister v20{};
	PPCVRegister v21{};
	PPCVRegister v22{};
	PPCVRegister v23{};
	PPCVRegister v24{};
	PPCVRegister v25{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	uint32_t ea{};
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// li r9,144
	ctx.r9.s64 = 144;
	// add r2,r5,r8
	r2.u64 = ctx.r5.u64 + ctx.r8.u64;
	// mr r5,r6
	ctx.r5.u64 = ctx.r6.u64;
	// add r4,r4,r8
	ctx.r4.u64 = ctx.r4.u64 + ctx.r8.u64;
	// mr r6,r7
	ctx.r6.u64 = ctx.r7.u64;
	// li r7,48
	ctx.r7.s64 = 48;
	// li r8,96
	ctx.r8.s64 = 96;
	// lvx128 v14,r2,r9
	_mm_store_si128((__m128i*)v14.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r2.u32 + ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r10,192
	ctx.r10.s64 = 192;
	// lvx128 v11,r0,r2
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r2.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v4,r4,r9
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r4.u32 + ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r12,r6,1,0,30
	r12.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// lvx128 v1,r0,r4
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavguh v4,v4,v14
	// lvx128 v2,r4,r7
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r4.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavguh v1,v1,v11
	// lvx128 v3,r4,r8
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r4.u32 + ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v5,r4,r10
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r4.u32 + ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r4,r4,r10
	ctx.r4.u64 = ctx.r4.u64 + ctx.r10.u64;
	// lvx128 v12,r2,r7
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r2.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v13,r2,r8
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r2.u32 + ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavguh v2,v2,v12
	// lvx128 v15,r2,r10
	_mm_store_si128((__m128i*)v15.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r2.u32 + ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r2,r2,r10
	r2.u64 = r2.u64 + ctx.r10.u64;
	// li r10,64
	ctx.r10.s64 = 64;
	// vavguh v3,v3,v13
	// lvx128 v6,r4,r7
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r4.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavguh v5,v5,v15
	// lvx128 v7,r4,r8
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r4.u32 + ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v8,r4,r9
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r4.u32 + ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r3,4
	ctx.r4.s64 = ctx.r3.s64 + 4;
	// lvx128 v16,r2,r7
	_mm_store_si128((__m128i*)v16.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r2.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r7,16
	ctx.r7.s64 = 16;
	// lvx128 v17,r2,r8
	_mm_store_si128((__m128i*)v17.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r2.u32 + ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r8,32
	ctx.r8.s64 = 32;
	// lvx128 v18,r2,r9
	_mm_store_si128((__m128i*)v18.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r2.u32 + ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavguh v6,v6,v16
	// lvx128 v16,r0,r5
	_mm_store_si128((__m128i*)v16.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r5.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r9,48
	ctx.r9.s64 = 48;
	// vavguh v7,v7,v17
	// lvx128 v20,r5,r10
	_mm_store_si128((__m128i*)v20.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r5.u32 + ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v17,r5,r7
	_mm_store_si128((__m128i*)v17.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r5.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vaddshs v24,v1,v16
	_mm_store_si128((__m128i*)v24.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v1.s16), _mm_load_si128((__m128i*)v16.s16)));
	// vavguh v8,v8,v18
	// lvx128 v18,r5,r8
	_mm_store_si128((__m128i*)v18.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r5.u32 + ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vaddshs v25,v2,v17
	_mm_store_si128((__m128i*)v25.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v2.s16), _mm_load_si128((__m128i*)v17.s16)));
	// lvx128 v19,r5,r9
	_mm_store_si128((__m128i*)v19.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r5.u32 + ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vaddshs v26,v3,v18
	_mm_store_si128((__m128i*)v26.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v3.s16), _mm_load_si128((__m128i*)v18.s16)));
	// vpkshus v24,v24,v24
	_mm_store_si128((__m128i*)v24.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)v24.s16), _mm_load_si128((__m128i*)v24.s16)));
	// add r5,r5,r10
	ctx.r5.u64 = ctx.r5.u64 + ctx.r10.u64;
	// vaddshs v27,v4,v19
	_mm_store_si128((__m128i*)v27.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v4.s16), _mm_load_si128((__m128i*)v19.s16)));
	// vpkshus v25,v25,v25
	_mm_store_si128((__m128i*)v25.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)v25.s16), _mm_load_si128((__m128i*)v25.s16)));
	// vaddshs v28,v5,v20
	_mm_store_si128((__m128i*)v28.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v5.s16), _mm_load_si128((__m128i*)v20.s16)));
	// vpkshus v26,v26,v26
	_mm_store_si128((__m128i*)v26.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)v26.s16), _mm_load_si128((__m128i*)v26.s16)));
	// vpkshus v27,v27,v27
	_mm_store_si128((__m128i*)v27.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)v27.s16), _mm_load_si128((__m128i*)v27.s16)));
	// lvx128 v21,r5,r7
	_mm_store_si128((__m128i*)v21.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r5.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v22,r5,r8
	_mm_store_si128((__m128i*)v22.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r5.u32 + ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r7,r6,r12
	ctx.r7.u64 = ctx.r6.u64 + r12.u64;
	// lvx128 v23,r5,r9
	_mm_store_si128((__m128i*)v23.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r5.u32 + ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vpkshus v28,v28,v28
	_mm_store_si128((__m128i*)v28.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)v28.s16), _mm_load_si128((__m128i*)v28.s16)));
	// stvewx v24,r0,r3
	ea = (ctx.r3.u32) & ~0x3;
	PPC_STORE_U32(ea, v24.u32[3 - ((ea & 0xF) >> 2)]);
	// rlwinm r8,r6,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// stvewx v24,r0,r4
	ea = (ctx.r4.u32) & ~0x3;
	PPC_STORE_U32(ea, v24.u32[3 - ((ea & 0xF) >> 2)]);
	// vaddshs v29,v6,v21
	_mm_store_si128((__m128i*)v29.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v6.s16), _mm_load_si128((__m128i*)v21.s16)));
	// stvewx v25,r3,r6
	ea = (ctx.r3.u32 + ctx.r6.u32) & ~0x3;
	PPC_STORE_U32(ea, v25.u32[3 - ((ea & 0xF) >> 2)]);
	// vaddshs v30,v7,v22
	_mm_store_si128((__m128i*)v30.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v7.s16), _mm_load_si128((__m128i*)v22.s16)));
	// stvewx v25,r4,r6
	ea = (ctx.r4.u32 + ctx.r6.u32) & ~0x3;
	PPC_STORE_U32(ea, v25.u32[3 - ((ea & 0xF) >> 2)]);
	// vaddshs v31,v8,v23
	_mm_store_si128((__m128i*)v31.s16, _mm_adds_epi16(_mm_load_si128((__m128i*)ctx.v8.s16), _mm_load_si128((__m128i*)v23.s16)));
	// stvewx v26,r3,r12
	ea = (ctx.r3.u32 + r12.u32) & ~0x3;
	PPC_STORE_U32(ea, v26.u32[3 - ((ea & 0xF) >> 2)]);
	// add r9,r6,r8
	ctx.r9.u64 = ctx.r6.u64 + ctx.r8.u64;
	// stvewx v26,r4,r12
	ea = (ctx.r4.u32 + r12.u32) & ~0x3;
	PPC_STORE_U32(ea, v26.u32[3 - ((ea & 0xF) >> 2)]);
	// vpkshus v29,v29,v29
	_mm_store_si128((__m128i*)v29.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)v29.s16), _mm_load_si128((__m128i*)v29.s16)));
	// stvewx v27,r3,r7
	ea = (ctx.r3.u32 + ctx.r7.u32) & ~0x3;
	PPC_STORE_U32(ea, v27.u32[3 - ((ea & 0xF) >> 2)]);
	// vpkshus v30,v30,v30
	_mm_store_si128((__m128i*)v30.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)v30.s16), _mm_load_si128((__m128i*)v30.s16)));
	// stvewx v27,r4,r7
	ea = (ctx.r4.u32 + ctx.r7.u32) & ~0x3;
	PPC_STORE_U32(ea, v27.u32[3 - ((ea & 0xF) >> 2)]);
	// add r10,r12,r8
	ctx.r10.u64 = r12.u64 + ctx.r8.u64;
	// stvewx v28,r3,r8
	ea = (ctx.r3.u32 + ctx.r8.u32) & ~0x3;
	PPC_STORE_U32(ea, v28.u32[3 - ((ea & 0xF) >> 2)]);
	// vpkshus v31,v31,v31
	_mm_store_si128((__m128i*)v31.u8, _mm_packus_epi16(_mm_load_si128((__m128i*)v31.s16), _mm_load_si128((__m128i*)v31.s16)));
	// add r11,r7,r8
	r11.u64 = ctx.r7.u64 + ctx.r8.u64;
	// stvewx v28,r4,r8
	ea = (ctx.r4.u32 + ctx.r8.u32) & ~0x3;
	PPC_STORE_U32(ea, v28.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v29,r3,r9
	ea = (ctx.r3.u32 + ctx.r9.u32) & ~0x3;
	PPC_STORE_U32(ea, v29.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v29,r4,r9
	ea = (ctx.r4.u32 + ctx.r9.u32) & ~0x3;
	PPC_STORE_U32(ea, v29.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v30,r3,r10
	ea = (ctx.r3.u32 + ctx.r10.u32) & ~0x3;
	PPC_STORE_U32(ea, v30.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v30,r4,r10
	ea = (ctx.r4.u32 + ctx.r10.u32) & ~0x3;
	PPC_STORE_U32(ea, v30.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v31,r3,r11
	ea = (ctx.r3.u32 + r11.u32) & ~0x3;
	PPC_STORE_U32(ea, v31.u32[3 - ((ea & 0xF) >> 2)]);
	// stvewx v31,r4,r11
	ea = (ctx.r4.u32 + r11.u32) & ~0x3;
	PPC_STORE_U32(ea, v31.u32[3 - ((ea & 0xF) >> 2)]);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8271F800"))) PPC_WEAK_FUNC(sub_8271F800);
PPC_FUNC_IMPL(__imp__sub_8271F800) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bce0
	// stwu r1,-1792(r1)
	ea = -1792 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,1
	ctx.r10.s64 = 65536;
	// lwz r11,21560(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 21560);
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// ori r10,r10,33684
	ctx.r10.u64 = ctx.r10.u64 | 33684;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// li r25,0
	r25.s64 = 0;
	// lis r23,-32126
	r23.s64 = -2105409536;
	// lwz r29,1248(r30)
	r29.u64 = PPC_LOAD_U32(r30.u32 + 1248);
	// addi r24,r3,21712
	r24.s64 = ctx.r3.s64 + 21712;
	// lwzx r28,r3,r10
	r28.u64 = PPC_LOAD_U32(ctx.r3.u32 + ctx.r10.u32);
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// lwz r11,21572(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 21572);
	// stw r25,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r25.u32);
	// stw r29,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r29.u32);
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// stw r11,32(r31)
	PPC_STORE_U32(r31.u32 + 32, r11.u32);
	// lwz r3,3360(r23)
	ctx.r3.u64 = PPC_LOAD_U32(r23.u32 + 3360);
	// bl 0x8271d5f8
	sub_8271D5F8(ctx, base);
	// lwz r11,32(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 32);
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// mr r9,r25
	ctx.r9.u64 = r25.u64;
	// stw r25,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r25.u32);
	// stw r25,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r25.u32);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r25,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r25.u32);
	// stw r25,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r25.u32);
	// clrlwi r4,r10,16
	ctx.r4.u64 = ctx.r10.u32 & 0xFFFF;
	// sth r25,16(r31)
	PPC_STORE_U16(r31.u32 + 16, r25.u16);
	// rlwinm r5,r10,16,22,31
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 16) & 0x3FF;
	// lhz r7,50(r30)
	ctx.r7.u64 = PPC_LOAD_U16(r30.u32 + 50);
	// mr r10,r25
	ctx.r10.u64 = r25.u64;
	// stw r11,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r11.u32);
	// addi r11,r28,-1
	r11.s64 = r28.s64 + -1;
	// stw r8,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r8.u32);
	// stw r9,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r9.u32);
	// stw r10,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r10.u32);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// lhz r11,52(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 52);
	// rlwinm r26,r11,31,1,31
	r26.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFF;
	// lhz r11,74(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 74);
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// stw r11,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r11.u32);
	// rlwinm r11,r7,31,1,31
	r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 31) & 0x7FFFFFFF;
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r11.u32);
	// beq cr6,0x8271fab4
	if (cr6.eq) goto loc_8271FAB4;
	// lis r27,-32126
	r27.s64 = -2105409536;
	// lis r28,-32126
	r28.s64 = -2105409536;
loc_8271F8D0:
	// cmplw cr6,r9,r5
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r5.u32, xer);
	// stw r8,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r8.u32);
	// stw r10,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r10.u32);
	// sth r25,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r25.u16);
	// bne cr6,0x8271fa3c
	if (!cr6.eq) goto loc_8271FA3C;
	// mr r10,r25
	ctx.r10.u64 = r25.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stw r10,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r10.u32);
	// beq cr6,0x8271fa3c
	if (cr6.eq) goto loc_8271FA3C;
loc_8271F8F4:
	// cmplw cr6,r10,r4
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r4.u32, xer);
	// bne cr6,0x8271f9e0
	if (!cr6.eq) goto loc_8271F9E0;
	// lbz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U8(r29.u32 + 0);
	// mr r11,r25
	r11.u64 = r25.u64;
	// clrlwi r10,r10,26
	ctx.r10.u64 = ctx.r10.u32 & 0x3F;
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// stw r10,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r10.u32);
loc_8271F910:
	// addi r9,r11,98
	ctx.r9.s64 = r11.s64 + 98;
	// lwz r10,28(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,2
	ctx.r8.s64 = r11.s64 + 2;
	// addi r11,r10,-128
	r11.s64 = ctx.r10.s64 + -128;
	// rlwinm r10,r8,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// li r8,-128
	ctx.r8.s64 = -128;
	// lwzx r9,r9,r30
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + r30.u32);
	// stw r11,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r11.u32);
	// lwzx r10,r10,r31
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r31.u32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r10,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r10.u32);
	// dcbt r8,r11
	// lwz r11,260(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 260);
	// dcbzl r0,r11
	memset(base + ((r11.u32) & ~127), 0, 128);
	// lwz r29,120(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// srawi r11,r29,2
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x3) != 0);
	r11.s64 = r29.s32 >> 2;
	// lwz r10,136(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// lwz r7,144(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// addi r9,r11,45
	ctx.r9.s64 = r11.s64 + 45;
	// rlwinm r11,r10,6,18,25
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 6) & 0x3FC0;
	// stw r3,28(r31)
	PPC_STORE_U32(r31.u32 + 28, ctx.r3.u32);
	// rlwinm r8,r9,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r10,224(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 224);
	// lwz r9,3364(r28)
	ctx.r9.u64 = PPC_LOAD_U32(r28.u32 + 3364);
	// add r5,r11,r10
	ctx.r5.u64 = r11.u64 + ctx.r10.u64;
	// lwz r4,260(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + 260);
	// lwz r6,3352(r27)
	ctx.r6.u64 = PPC_LOAD_U32(r27.u32 + 3352);
	// lhzx r8,r8,r30
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r8.u32 + r30.u32);
	// bl 0x8266b9b8
	sub_8266B9B8(ctx, base);
	// addi r11,r29,1
	r11.s64 = r29.s64 + 1;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// blt cr6,0x8271f910
	if (cr6.lt) goto loc_8271F910;
	// lwz r10,108(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r9,88(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// rlwinm r5,r11,16,22,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0x3FF;
	// clrlwi r4,r11,16
	ctx.r4.u64 = r11.u32 & 0xFFFF;
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplw cr6,r9,r5
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r5.u32, xer);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r10,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r10.u32);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// bne cr6,0x8271fa3c
	if (!cr6.eq) goto loc_8271FA3C;
	// lwz r29,80(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r10,116(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// b 0x8271f8f4
	goto loc_8271F8F4;
loc_8271F9E0:
	// cmplw cr6,r9,r5
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r5.u32, xer);
	// bne cr6,0x8271fa3c
	if (!cr6.eq) goto loc_8271FA3C;
	// lhz r7,18(r31)
	ctx.r7.u64 = PPC_LOAD_U16(r31.u32 + 18);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// lwz r8,0(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r29,r29,8
	r29.s64 = r29.s64 + 8;
	// addi r3,r7,2
	ctx.r3.s64 = ctx.r7.s64 + 2;
	// lwz r6,4(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// addi r22,r8,2
	r22.s64 = ctx.r8.s64 + 2;
	// lwz r7,8(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lwz r8,12(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// addi r7,r7,16
	ctx.r7.s64 = ctx.r7.s64 + 16;
	// stw r10,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r10.u32);
	// addi r8,r8,8
	ctx.r8.s64 = ctx.r8.s64 + 8;
	// stw r29,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r29.u32);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// sth r3,18(r31)
	PPC_STORE_U16(r31.u32 + 18, ctx.r3.u16);
	// stw r22,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r22.u32);
	// stw r6,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r6.u32);
	// stw r7,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r7.u32);
	// stw r8,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r8.u32);
	// blt cr6,0x8271f8f4
	if (cr6.lt) goto loc_8271F8F4;
loc_8271FA3C:
	// lwz r7,124(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lhz r8,16(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 16);
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// add r6,r11,r7
	ctx.r6.u64 = r11.u64 + ctx.r7.u64;
	// lwz r7,112(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// addi r22,r8,2
	r22.s64 = ctx.r8.s64 + 2;
	// add r3,r10,r7
	ctx.r3.u64 = ctx.r10.u64 + ctx.r7.u64;
	// lwz r10,132(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// rlwinm r7,r11,3,0,28
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// rlwinm r8,r10,4,0,27
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// stw r9,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r9.u32);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// stw r6,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r6.u32);
	// stw r6,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r6.u32);
	// cmplw cr6,r9,r26
	cr6.compare<uint32_t>(ctx.r9.u32, r26.u32, xer);
	// stw r3,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r3.u32);
	// stw r3,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r3.u32);
	// lwz r3,84(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// sth r22,16(r31)
	PPC_STORE_U16(r31.u32 + 16, r22.u16);
	// add r29,r7,r3
	r29.u64 = ctx.r7.u64 + ctx.r3.u64;
	// lwz r7,92(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// lwz r7,100(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// add r10,r10,r7
	ctx.r10.u64 = ctx.r10.u64 + ctx.r7.u64;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// stw r29,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r29.u32);
	// stw r8,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r8.u32);
	// stw r10,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r10.u32);
	// blt cr6,0x8271f8d0
	if (cr6.lt) goto loc_8271F8D0;
loc_8271FAB4:
	// addi r4,r1,160
	ctx.r4.s64 = ctx.r1.s64 + 160;
	// lwz r31,3360(r23)
	r31.u64 = PPC_LOAD_U32(r23.u32 + 3360);
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// bl 0x8271d940
	sub_8271D940(ctx, base);
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// addi r10,r31,8
	ctx.r10.s64 = r31.s64 + 8;
	// addi r11,r1,1172
	r11.s64 = ctx.r1.s64 + 1172;
	// lis r7,-32126
	ctx.r7.s64 = -2105409536;
loc_8271FAD4:
	// lwz r9,-8(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + -8);
	// lwz r6,-4(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -4);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271fb14
	if (!cr6.eq) goto loc_8271FB14;
	// lwz r9,-4(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + -4);
	// lwz r6,0(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271fb14
	if (!cr6.eq) goto loc_8271FB14;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// lwz r6,4(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271fb14
	if (!cr6.eq) goto loc_8271FB14;
	// lwz r9,4(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// lwz r6,8(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// beq cr6,0x8271fb18
	if (cr6.eq) goto loc_8271FB18;
loc_8271FB14:
	// stw r8,-25040(r7)
	PPC_STORE_U32(ctx.r7.u32 + -25040, ctx.r8.u32);
loc_8271FB18:
	// lwz r9,8(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// lwz r6,-20(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -20);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271fb58
	if (!cr6.eq) goto loc_8271FB58;
	// lwz r9,12(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	// lwz r6,-16(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -16);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271fb58
	if (!cr6.eq) goto loc_8271FB58;
	// lwz r9,16(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	// lwz r6,-12(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -12);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271fb58
	if (!cr6.eq) goto loc_8271FB58;
	// lwz r9,20(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 20);
	// lwz r6,-8(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -8);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// beq cr6,0x8271fb60
	if (cr6.eq) goto loc_8271FB60;
loc_8271FB58:
	// addi r9,r8,1
	ctx.r9.s64 = ctx.r8.s64 + 1;
	// stw r9,-25040(r7)
	PPC_STORE_U32(ctx.r7.u32 + -25040, ctx.r9.u32);
loc_8271FB60:
	// lwz r9,24(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24);
	// lwz r6,-36(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -36);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271fba0
	if (!cr6.eq) goto loc_8271FBA0;
	// lwz r9,28(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 28);
	// lwz r6,-32(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -32);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271fba0
	if (!cr6.eq) goto loc_8271FBA0;
	// lwz r9,32(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 32);
	// lwz r6,-28(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -28);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bne cr6,0x8271fba0
	if (!cr6.eq) goto loc_8271FBA0;
	// lwz r9,36(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 36);
	// lwz r6,-24(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + -24);
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// beq cr6,0x8271fba8
	if (cr6.eq) goto loc_8271FBA8;
loc_8271FBA0:
	// addi r9,r8,2
	ctx.r9.s64 = ctx.r8.s64 + 2;
	// stw r9,-25040(r7)
	PPC_STORE_U32(ctx.r7.u32 + -25040, ctx.r9.u32);
loc_8271FBA8:
	// addi r8,r8,3
	ctx.r8.s64 = ctx.r8.s64 + 3;
	// addi r11,r11,-48
	r11.s64 = r11.s64 + -48;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// cmpwi cr6,r8,9
	cr6.compare<int32_t>(ctx.r8.s32, 9, xer);
	// blt cr6,0x8271fad4
	if (cr6.lt) goto loc_8271FAD4;
	// lwz r3,140(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// addi r1,r1,1792
	ctx.r1.s64 = ctx.r1.s64 + 1792;
	// b 0x8239bd30
	return;
}

__attribute__((alias("__imp__sub_8271FC00"))) PPC_WEAK_FUNC(sub_8271FC00);
PPC_FUNC_IMPL(__imp__sub_8271FC00) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcc0
	// stwu r1,-384(r1)
	ea = -384 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// mr r18,r4
	r18.u64 = ctx.r4.u64;
	// li r26,0
	r26.s64 = 0;
	// lwz r11,2928(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 2928);
	// lwz r10,2088(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 2088);
	// addi r8,r11,726
	ctx.r8.s64 = r11.s64 + 726;
	// lwz r9,3960(r27)
	ctx.r9.u64 = PPC_LOAD_U32(r27.u32 + 3960);
	// addi r11,r11,729
	r11.s64 = r11.s64 + 729;
	// stw r27,404(r1)
	PPC_STORE_U32(ctx.r1.u32 + 404, r27.u32);
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// stw r31,420(r1)
	PPC_STORE_U32(ctx.r1.u32 + 420, r31.u32);
	// rlwinm r7,r11,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r11,r10,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r10,263
	ctx.r10.s64 = ctx.r10.s64 + 263;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// lwzx r8,r8,r27
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + r27.u32);
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// cmpwi cr6,r9,3
	cr6.compare<int32_t>(ctx.r9.s32, 3, xer);
	// stw r8,2880(r27)
	PPC_STORE_U32(r27.u32 + 2880, ctx.r8.u32);
	// lwzx r8,r7,r27
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r7.u32 + r27.u32);
	// stw r8,2892(r27)
	PPC_STORE_U32(r27.u32 + 2892, ctx.r8.u32);
	// lwz r11,2100(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 2100);
	// stw r11,2092(r27)
	PPC_STORE_U32(r27.u32 + 2092, r11.u32);
	// lwzx r11,r10,r27
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r27.u32);
	// stw r11,2096(r27)
	PPC_STORE_U32(r27.u32 + 2096, r11.u32);
	// li r11,1
	r11.s64 = 1;
	// bne cr6,0x8271fc84
	if (!cr6.eq) goto loc_8271FC84;
	// stw r26,456(r27)
	PPC_STORE_U32(r27.u32 + 456, r26.u32);
	// b 0x8271fc88
	goto loc_8271FC88;
loc_8271FC84:
	// stw r11,456(r27)
	PPC_STORE_U32(r27.u32 + 456, r11.u32);
loc_8271FC88:
	// lwz r10,14776(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 14776);
	// lwz r8,3392(r27)
	ctx.r8.u64 = PPC_LOAD_U32(r27.u32 + 3392);
	// mullw r10,r10,r8
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r8.s32);
	// rlwinm r10,r10,0,0,24
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFF80;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x8271fcb0
	if (cr6.eq) goto loc_8271FCB0;
	// li r10,3
	ctx.r10.s64 = 3;
	// stw r10,14780(r27)
	PPC_STORE_U32(r27.u32 + 14780, ctx.r10.u32);
	// li r10,4
	ctx.r10.s64 = 4;
	// b 0x8271fcbc
	goto loc_8271FCBC;
loc_8271FCB0:
	// li r10,4
	ctx.r10.s64 = 4;
	// stw r10,14780(r27)
	PPC_STORE_U32(r27.u32 + 14780, ctx.r10.u32);
	// li r10,3
	ctx.r10.s64 = 3;
loc_8271FCBC:
	// stw r10,14784(r27)
	PPC_STORE_U32(r27.u32 + 14784, ctx.r10.u32);
	// cmpwi cr6,r9,2
	cr6.compare<int32_t>(ctx.r9.s32, 2, xer);
	// beq cr6,0x8271fcd4
	if (cr6.eq) goto loc_8271FCD4;
	// cmpwi cr6,r9,3
	cr6.compare<int32_t>(ctx.r9.s32, 3, xer);
	// beq cr6,0x8271fcd4
	if (cr6.eq) goto loc_8271FCD4;
	// mr r11,r26
	r11.u64 = r26.u64;
loc_8271FCD4:
	// lwz r10,1972(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 1972);
	// li r5,1
	ctx.r5.s64 = 1;
	// stw r11,76(r10)
	PPC_STORE_U32(ctx.r10.u32 + 76, r11.u32);
	// lwz r4,248(r27)
	ctx.r4.u64 = PPC_LOAD_U32(r27.u32 + 248);
	// lwz r3,1972(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + 1972);
	// bl 0x8265b9d0
	sub_8265B9D0(ctx, base);
	// lwz r11,248(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 248);
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// bge cr6,0x8271fd08
	if (!cr6.lt) goto loc_8271FD08;
	// addi r11,r27,2464
	r11.s64 = r27.s64 + 2464;
	// addi r10,r27,2480
	ctx.r10.s64 = r27.s64 + 2480;
	// addi r9,r27,2520
	ctx.r9.s64 = r27.s64 + 2520;
	// b 0x8271fd2c
	goto loc_8271FD2C;
loc_8271FD08:
	// cmpwi cr6,r11,13
	cr6.compare<int32_t>(r11.s32, 13, xer);
	// bge cr6,0x8271fd20
	if (!cr6.lt) goto loc_8271FD20;
	// addi r11,r27,2452
	r11.s64 = r27.s64 + 2452;
	// addi r10,r27,2492
	ctx.r10.s64 = r27.s64 + 2492;
	// addi r9,r27,2532
	ctx.r9.s64 = r27.s64 + 2532;
	// b 0x8271fd2c
	goto loc_8271FD2C;
loc_8271FD20:
	// addi r11,r27,2440
	r11.s64 = r27.s64 + 2440;
	// addi r10,r27,2504
	ctx.r10.s64 = r27.s64 + 2504;
	// addi r9,r27,2544
	ctx.r9.s64 = r27.s64 + 2544;
loc_8271FD2C:
	// lwz r15,268(r27)
	r15.u64 = PPC_LOAD_U32(r27.u32 + 268);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stw r11,2476(r27)
	PPC_STORE_U32(r27.u32 + 2476, r11.u32);
	// stw r10,2516(r27)
	PPC_STORE_U32(r27.u32 + 2516, ctx.r10.u32);
	// stw r9,2556(r27)
	PPC_STORE_U32(r27.u32 + 2556, ctx.r9.u32);
	// stw r15,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r15.u32);
	// bl 0x82612140
	sub_82612140(ctx, base);
	// mr r4,r18
	ctx.r4.u64 = r18.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82616878
	sub_82616878(ctx, base);
	// lwz r10,21556(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 21556);
	// lhz r11,52(r18)
	r11.u64 = PPC_LOAD_U16(r18.u32 + 52);
	// mr r29,r26
	r29.u64 = r26.u64;
	// lhz r9,50(r18)
	ctx.r9.u64 = PPC_LOAD_U16(r18.u32 + 50);
	// mr r28,r26
	r28.u64 = r26.u64;
	// rlwinm r11,r11,31,1,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFF;
	// stw r26,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r26.u32);
	// mr r25,r26
	r25.u64 = r26.u64;
	// stw r10,20(r31)
	PPC_STORE_U32(r31.u32 + 20, ctx.r10.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lwz r10,21568(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 21568);
	// rlwinm r9,r9,31,1,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 31) & 0x7FFFFFFF;
	// stw r29,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r29.u32);
	// stw r11,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, r11.u32);
	// stw r28,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r28.u32);
	// stw r25,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r25.u32);
	// stw r10,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r10.u32);
	// lwz r11,21560(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 21560);
	// stw r9,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r9.u32);
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// lwz r11,21572(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 21572);
	// stw r26,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r26.u32);
	// stw r26,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r26.u32);
	// sth r26,16(r31)
	PPC_STORE_U16(r31.u32 + 16, r26.u16);
	// sth r26,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r26.u16);
	// stw r11,32(r31)
	PPC_STORE_U32(r31.u32 + 32, r11.u32);
	// ble cr6,0x82722738
	if (!cr6.gt) goto loc_82722738;
	// lis r11,-32244
	r11.s64 = -2113142784;
	// lis r14,2
	r14.s64 = 131072;
	// addi r11,r11,29840
	r11.s64 = r11.s64 + 29840;
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r11.u32);
	// lis r11,-32138
	r11.s64 = -2106195968;
	// addi r11,r11,11464
	r11.s64 = r11.s64 + 11464;
	// stw r11,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, r11.u32);
loc_8271FDDC:
	// stw r29,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r29.u32);
	// stw r28,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r28.u32);
	// sth r26,18(r31)
	PPC_STORE_U16(r31.u32 + 18, r26.u16);
	// lwz r11,21236(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 21236);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8271ffe0
	if (cr6.eq) goto loc_8271FFE0;
	// lwz r11,1240(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 1240);
	// rlwinm r10,r25,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r10
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8271ffe0
	if (cr6.eq) goto loc_8271FFE0;
	// lwz r11,84(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 84);
	// ld r10,104(r18)
	ctx.r10.u64 = PPC_LOAD_U64(r18.u32 + 104);
	// std r10,0(r11)
	PPC_STORE_U64(r11.u32 + 0, ctx.r10.u64);
	// lwz r11,84(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 84);
	// lwz r10,112(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 112);
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// lwz r11,84(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 84);
	// lwz r10,116(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 116);
	// stw r10,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r10.u32);
	// lwz r11,84(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 84);
	// lwz r10,120(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 120);
	// stw r10,16(r11)
	PPC_STORE_U32(r11.u32 + 16, ctx.r10.u32);
	// lwz r11,84(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 84);
	// lwz r10,124(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 124);
	// stw r10,20(r11)
	PPC_STORE_U32(r11.u32 + 20, ctx.r10.u32);
	// lwz r11,84(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 84);
	// lwz r10,128(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 128);
	// stw r10,24(r11)
	PPC_STORE_U32(r11.u32 + 24, ctx.r10.u32);
	// lwz r11,84(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 84);
	// lwz r10,132(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 132);
	// stw r10,28(r11)
	PPC_STORE_U32(r11.u32 + 28, ctx.r10.u32);
	// lwz r11,84(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 84);
	// lwz r10,136(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 136);
	// stw r10,32(r11)
	PPC_STORE_U32(r11.u32 + 32, ctx.r10.u32);
	// lwz r11,84(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 84);
	// lwz r10,140(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 140);
	// stw r10,36(r11)
	PPC_STORE_U32(r11.u32 + 36, ctx.r10.u32);
	// lwz r11,84(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 84);
	// lwz r10,144(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 144);
	// stw r10,40(r11)
	PPC_STORE_U32(r11.u32 + 40, ctx.r10.u32);
	// lwz r11,84(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 84);
	// lwz r10,148(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 148);
	// stw r10,44(r11)
	PPC_STORE_U32(r11.u32 + 44, ctx.r10.u32);
	// lwz r11,84(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 84);
	// lwz r10,152(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 152);
	// stw r10,48(r11)
	PPC_STORE_U32(r11.u32 + 48, ctx.r10.u32);
	// lwz r31,84(r27)
	r31.u64 = PPC_LOAD_U32(r27.u32 + 84);
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8271ff24
	if (cr6.eq) goto loc_8271FF24;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// li r30,1
	r30.s64 = 1;
	// addi r11,r10,16
	r11.s64 = ctx.r10.s64 + 16;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bge cr6,0x8271fefc
	if (!cr6.lt) goto loc_8271FEFC;
loc_8271FEBC:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8271fefc
	if (cr6.eq) goto loc_8271FEFC;
	// ld r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r8,r11,32
	ctx.r8.u64 = r11.u64 & 0xFFFFFFFF;
	// subf. r10,r11,r10
	ctx.r10.s64 = ctx.r10.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// subf r30,r11,r30
	r30.s64 = r30.s64 - r11.s64;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r11,r9,r8
	r11.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r9.u64 << (ctx.r8.u8 & 0x7F));
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// bge 0x8271feec
	if (!cr0.lt) goto loc_8271FEEC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271FEEC:
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r10,16
	r11.s64 = ctx.r10.s64 + 16;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bgt cr6,0x8271febc
	if (cr6.gt) goto loc_8271FEBC;
loc_8271FEFC:
	// ld r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r10,r30,32
	ctx.r10.u64 = r30.u64 & 0xFFFFFFFF;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// subf. r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// sld r10,r9,r10
	ctx.r10.u64 = ctx.r10.u8 & 0x40 ? 0 : (ctx.r9.u64 << (ctx.r10.u8 & 0x7F));
	// std r10,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r10.u64);
	// bge 0x8271ff24
	if (!cr0.lt) goto loc_8271FF24;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8271FF24:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// clrlwi r4,r11,29
	ctx.r4.u64 = r11.u32 & 0x7;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82639b10
	sub_82639B10(ctx, base);
	// lwz r11,84(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 84);
	// li r10,1
	ctx.r10.s64 = 1;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// ld r11,0(r11)
	r11.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// std r11,104(r18)
	PPC_STORE_U64(r18.u32 + 104, r11.u64);
	// lwz r11,84(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 84);
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// stw r11,112(r18)
	PPC_STORE_U32(r18.u32 + 112, r11.u32);
	// lwz r11,84(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 84);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// stw r11,116(r18)
	PPC_STORE_U32(r18.u32 + 116, r11.u32);
	// lwz r11,84(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 84);
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// stw r11,120(r18)
	PPC_STORE_U32(r18.u32 + 120, r11.u32);
	// lwz r11,84(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 84);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// stw r11,124(r18)
	PPC_STORE_U32(r18.u32 + 124, r11.u32);
	// lwz r11,84(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 84);
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// stw r11,128(r18)
	PPC_STORE_U32(r18.u32 + 128, r11.u32);
	// lwz r11,84(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 84);
	// lwz r11,28(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// stw r11,132(r18)
	PPC_STORE_U32(r18.u32 + 132, r11.u32);
	// lwz r11,84(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 84);
	// lwz r11,32(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// stw r11,136(r18)
	PPC_STORE_U32(r18.u32 + 136, r11.u32);
	// lwz r11,84(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 84);
	// lwz r11,36(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 36);
	// stw r11,140(r18)
	PPC_STORE_U32(r18.u32 + 140, r11.u32);
	// lwz r11,84(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 84);
	// lwz r11,40(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 40);
	// stw r11,144(r18)
	PPC_STORE_U32(r18.u32 + 144, r11.u32);
	// lwz r11,84(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 84);
	// lwz r11,44(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 44);
	// stw r11,148(r18)
	PPC_STORE_U32(r18.u32 + 148, r11.u32);
	// lwz r11,84(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 84);
	// lwz r11,48(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 48);
	// stb r10,1187(r18)
	PPC_STORE_U8(r18.u32 + 1187, ctx.r10.u8);
	// stw r11,152(r18)
	PPC_STORE_U32(r18.u32 + 152, r11.u32);
	// bne cr6,0x827227fc
	if (!cr6.eq) goto loc_827227FC;
loc_8271FFE0:
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x827226b4
	if (!cr6.gt) goto loc_827226B4;
loc_8271FFF0:
	// lwz r11,0(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// li r10,128
	ctx.r10.s64 = 128;
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 12);
	// dcbt r10,r11
	// lis r12,-4289
	r12.s64 = -281083904;
	// lwz r11,0(r15)
	r11.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// li r19,0
	r19.s64 = 0;
	// ori r12,r12,63743
	r12.u64 = r12.u64 | 63743;
	// li r22,0
	r22.s64 = 0;
	// and r11,r11,r12
	r11.u64 = r11.u64 & r12.u64;
	// li r30,0
	r30.s64 = 0;
	// li r21,0
	r21.s64 = 0;
	// li r20,0
	r20.s64 = 0;
	// stw r11,0(r15)
	PPC_STORE_U32(r15.u32 + 0, r11.u32);
	// lbz r11,24(r18)
	r11.u64 = PPC_LOAD_U8(r18.u32 + 24);
	// stb r11,4(r15)
	PPC_STORE_U8(r15.u32 + 4, r11.u8);
	// lwz r11,1852(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 1852);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82720074
	if (!cr6.eq) goto loc_82720074;
	// lwz r3,0(r18)
	ctx.r3.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// ld r11,0(r3)
	r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// lwz r10,8(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// rldicl r8,r11,1,63
	ctx.r8.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// addic. r11,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	r11.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// rotlwi r31,r8,0
	r31.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r9,0(r3)
	PPC_STORE_U64(ctx.r3.u32 + 0, ctx.r9.u64);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// bge 0x82720068
	if (!cr0.lt) goto loc_82720068;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82720068:
	// lwz r11,0(r15)
	r11.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// rlwimi r11,r31,5,24,26
	r11.u64 = (__builtin_rotateleft32(r31.u32, 5) & 0xE0) | (r11.u64 & 0xFFFFFFFFFFFFFF1F);
	// stw r11,0(r15)
	PPC_STORE_U32(r15.u32 + 0, r11.u32);
loc_82720074:
	// lbz r11,26(r18)
	r11.u64 = PPC_LOAD_U8(r18.u32 + 26);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x827200b8
	if (!cr6.eq) goto loc_827200B8;
	// lwz r3,0(r18)
	ctx.r3.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// ld r11,0(r3)
	r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// lwz r10,8(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// rldicl r8,r11,1,63
	ctx.r8.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// addic. r11,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	r11.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// rotlwi r31,r8,0
	r31.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r9,0(r3)
	PPC_STORE_U64(ctx.r3.u32 + 0, ctx.r9.u64);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// bge 0x827200ac
	if (!cr0.lt) goto loc_827200AC;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_827200AC:
	// lwz r11,0(r15)
	r11.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// rlwimi r11,r31,31,0,0
	r11.u64 = (__builtin_rotateleft32(r31.u32, 31) & 0x80000000) | (r11.u64 & 0xFFFFFFFF7FFFFFFF);
	// stw r11,0(r15)
	PPC_STORE_U32(r15.u32 + 0, r11.u32);
loc_827200B8:
	// lwz r11,0(r15)
	r11.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// rlwinm r10,r11,0,24,26
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xE0;
	// cmplwi cr6,r10,32
	cr6.compare<uint32_t>(ctx.r10.u32, 32, xer);
	// bne cr6,0x827200dc
	if (!cr6.eq) goto loc_827200DC;
	// li r17,1
	r17.s64 = 1;
	// lis r11,0
	r11.s64 = 0;
	// mr r30,r17
	r30.u64 = r17.u64;
	// ori r16,r11,32768
	r16.u64 = r11.u64 | 32768;
	// b 0x827205b8
	goto loc_827205B8;
loc_827200DC:
	// rlwinm r11,r11,0,0,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x827204ec
	if (!cr6.eq) goto loc_827204EC;
	// lwz r31,0(r18)
	r31.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// lwz r11,176(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 176);
	// ld r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// lwz r29,0(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rldicl r11,r9,10,54
	r11.u64 = __builtin_rotateleft64(ctx.r9.u64, 10) & 0x3FF;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r11,r29
	r11.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// extsh r30,r11
	r30.s64 = r11.s16;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// blt cr6,0x827201e0
	if (cr6.lt) goto loc_827201E0;
	// clrlwi r11,r30,28
	r11.u64 = r30.u32 & 0xF;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// sld r9,r9,r11
	ctx.r9.u64 = r11.u8 & 0x40 ? 0 : (ctx.r9.u64 << (r11.u8 & 0x7F));
	// std r9,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r9.u64);
	// subf r9,r11,r10
	ctx.r9.s64 = ctx.r10.s64 - r11.s64;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// bge cr6,0x827201d0
	if (!cr6.lt) goto loc_827201D0;
loc_82720130:
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// addi r10,r10,-4
	ctx.r10.s64 = ctx.r10.s64 + -4;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x82720164
	if (cr6.lt) goto loc_82720164;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb840
	sub_825EB840(ctx, base);
	// cmplwi cr6,r3,1
	cr6.compare<uint32_t>(ctx.r3.u32, 1, xer);
	// beq cr6,0x82720130
	if (cr6.eq) goto loc_82720130;
	// lis r11,0
	r11.s64 = 0;
	// srawi r30,r30,4
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0xF) != 0);
	r30.s64 = r30.s32 >> 4;
	// ori r16,r11,32768
	r16.u64 = r11.u64 | 32768;
	// b 0x82720228
	goto loc_82720228;
loc_82720164:
	// lbz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r4,r11,6
	ctx.r4.s64 = r11.s64 + 6;
	// lbz r9,1(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 1);
	// rldicr r8,r8,8,63
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u64, 8) & 0xFFFFFFFFFFFFFFFF;
	// lbz r5,2(r11)
	ctx.r5.u64 = PPC_LOAD_U8(r11.u32 + 2);
	// lbz r6,3(r11)
	ctx.r6.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// lbz r8,5(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 5);
	// lbz r7,4(r11)
	ctx.r7.u64 = PPC_LOAD_U8(r11.u32 + 4);
	// rldicr r11,r9,8,55
	r11.u64 = __builtin_rotateleft64(ctx.r9.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// ld r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// stw r4,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r4.u32);
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// neg r8,r10
	ctx.r8.s64 = -ctx.r10.s64;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// extsw r8,r8
	ctx.r8.s64 = ctx.r8.s32;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r11,r11,r8
	r11.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
loc_827201D0:
	// lis r11,0
	r11.s64 = 0;
	// srawi r30,r30,4
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0xF) != 0);
	r30.s64 = r30.s32 >> 4;
	// ori r16,r11,32768
	r16.u64 = r11.u64 | 32768;
	// b 0x82720228
	goto loc_82720228;
loc_827201E0:
	// li r4,10
	ctx.r4.s64 = 10;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
	// lis r11,0
	r11.s64 = 0;
	// ori r16,r11,32768
	r16.u64 = r11.u64 | 32768;
loc_827201F4:
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rldicl r11,r11,1,63
	r11.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// add r30,r11,r30
	r30.u64 = r11.u64 + r30.u64;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
	// add r11,r30,r16
	r11.u64 = r30.u64 + r16.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r11,r29
	r11.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// extsh r30,r11
	r30.s64 = r11.s16;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// blt cr6,0x827201f4
	if (cr6.lt) goto loc_827201F4;
loc_82720228:
	// addi r11,r30,1
	r11.s64 = r30.s64 + 1;
	// li r17,1
	r17.s64 = 1;
	// cmpwi cr6,r11,37
	cr6.compare<int32_t>(r11.s32, 37, xer);
	// mr r10,r17
	ctx.r10.u64 = r17.u64;
	// bge cr6,0x82720240
	if (!cr6.lt) goto loc_82720240;
	// li r10,0
	ctx.r10.s64 = 0;
loc_82720240:
	// extsw r23,r10
	r23.s64 = ctx.r10.s32;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x82720250
	if (cr6.eq) goto loc_82720250;
	// addi r11,r11,-37
	r11.s64 = r11.s64 + -37;
loc_82720250:
	// li r24,0
	r24.s64 = 0;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x827204c0
	if (cr6.eq) goto loc_827204C0;
	// cmpwi cr6,r11,35
	cr6.compare<int32_t>(r11.s32, 35, xer);
	// bge cr6,0x827203ac
	if (!cr6.lt) goto loc_827203AC;
	// lwz r10,12(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 12);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r10
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// srawi r9,r11,24
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFFFF) != 0);
	ctx.r9.s64 = r11.s32 >> 24;
	// srawi r8,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r8.s64 = r11.s32 >> 4;
	// clrlwi r10,r11,28
	ctx.r10.u64 = r11.u32 & 0xF;
	// clrlwi r28,r8,28
	r28.u64 = ctx.r8.u32 & 0xF;
	// srawi r8,r11,8
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFF) != 0);
	ctx.r8.s64 = r11.s32 >> 8;
	// srawi r11,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	r11.s64 = r11.s32 >> 16;
	// add r30,r10,r28
	r30.u64 = ctx.r10.u64 + r28.u64;
	// clrlwi r27,r9,24
	r27.u64 = ctx.r9.u32 & 0xFF;
	// clrlwi r26,r8,24
	r26.u64 = ctx.r8.u32 & 0xFF;
	// clrlwi r25,r11,24
	r25.u64 = r11.u32 & 0xFF;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// ble cr6,0x82720358
	if (!cr6.gt) goto loc_82720358;
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// li r29,0
	r29.s64 = 0;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// beq cr6,0x82720358
	if (cr6.eq) goto loc_82720358;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// ble cr6,0x82720314
	if (!cr6.gt) goto loc_82720314;
loc_827202BC:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82720314
	if (cr6.eq) goto loc_82720314;
	// subfic r8,r11,64
	xer.ca = r11.u32 <= 64;
	ctx.r8.s64 = 64 - r11.s64;
	// ld r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// subf. r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrldi r8,r8,32
	ctx.r8.u64 = ctx.r8.u64 & 0xFFFFFFFF;
	// subf r30,r11,r30
	r30.s64 = r30.s64 - r11.s64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// srd r8,r10,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r10.u64 >> (ctx.r8.u8 & 0x7F));
	// sld r11,r10,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 << (r11.u8 & 0x7F));
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// slw r11,r10,r30
	r11.u64 = r30.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r30.u8 & 0x3F));
	// add r29,r11,r29
	r29.u64 = r11.u64 + r29.u64;
	// bge 0x82720304
	if (!cr0.lt) goto loc_82720304;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82720304:
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bgt cr6,0x827202bc
	if (cr6.gt) goto loc_827202BC;
loc_82720314:
	// subfic r9,r30,64
	xer.ca = r30.u32 <= 64;
	ctx.r9.s64 = 64 - r30.s64;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r8,r30,32
	ctx.r8.u64 = r30.u64 & 0xFFFFFFFF;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// clrldi r9,r9,32
	ctx.r9.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// subf. r10,r30,r10
	ctx.r10.s64 = ctx.r10.s64 - r30.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r8,r11,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// srd r9,r11,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r9.u8 & 0x7F));
	// rotlwi r11,r9,0
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// add r30,r11,r29
	r30.u64 = r11.u64 + r29.u64;
	// std r8,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r8.u64);
	// bge 0x82720350
	if (!cr0.lt) goto loc_82720350;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82720350:
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// b 0x8272035c
	goto loc_8272035C;
loc_82720358:
	// li r10,0
	ctx.r10.s64 = 0;
loc_8272035C:
	// and r11,r10,r27
	r11.u64 = ctx.r10.u64 & r27.u64;
	// rlwinm r8,r25,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r9,r11,0,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFE;
	// sraw r10,r10,r28
	temp.u32 = r28.u32 & 0x3F;
	if (temp.u32 > 0x1F) temp.u32 = 0x1F;
	xer.ca = (ctx.r10.s32 < 0) & (((ctx.r10.s32 >> temp.u32) << temp.u32) != ctx.r10.s32);
	ctx.r10.s64 = ctx.r10.s32 >> temp.u32;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// clrlwi r7,r11,31
	ctx.r7.u64 = r11.u32 & 0x1;
	// rlwinm r8,r9,15,0,16
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 15) & 0xFFFF8000;
	// clrlwi r9,r10,31
	ctx.r9.u64 = ctx.r10.u32 & 0x1;
	// srawi r10,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 1;
	// neg r11,r7
	r11.s64 = -ctx.r7.s64;
	// add r10,r10,r26
	ctx.r10.u64 = ctx.r10.u64 + r26.u64;
	// neg r9,r9
	ctx.r9.s64 = -ctx.r9.s64;
	// rlwinm r7,r11,16,0,15
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF0000;
	// xor r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 ^ ctx.r9.u64;
	// rlwinm r11,r11,16,0,15
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF0000;
	// xor r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 ^ ctx.r7.u64;
	// subf r10,r9,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r9.s64;
	// subf r11,r11,r8
	r11.s64 = ctx.r8.s64 - r11.s64;
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// b 0x827204bc
	goto loc_827204BC;
loc_827203AC:
	// cmpwi cr6,r11,36
	cr6.compare<int32_t>(r11.s32, 36, xer);
	// bne cr6,0x827203c0
	if (!cr6.eq) goto loc_827203C0;
	// mr r24,r17
	r24.u64 = r17.u64;
	// li r11,0
	r11.s64 = 0;
	// b 0x827204c0
	goto loc_827204C0;
loc_827203C0:
	// lbz r11,30(r18)
	r11.u64 = PPC_LOAD_U8(r18.u32 + 30);
	// li r29,0
	r29.s64 = 0;
	// lhz r10,70(r18)
	ctx.r10.u64 = PPC_LOAD_U16(r18.u32 + 70);
	// lhz r9,72(r18)
	ctx.r9.u64 = PPC_LOAD_U16(r18.u32 + 72);
	// subf r27,r11,r10
	r27.s64 = ctx.r10.s64 - r11.s64;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// subf r28,r11,r9
	r28.s64 = ctx.r9.s64 - r11.s64;
	// addi r11,r10,16
	r11.s64 = ctx.r10.s64 + 16;
	// add r30,r28,r27
	r30.u64 = r28.u64 + r27.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x827203f4
	if (!cr6.eq) goto loc_827203F4;
	// li r11,0
	r11.s64 = 0;
	// b 0x82720494
	goto loc_82720494;
loc_827203F4:
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// ble cr6,0x82720454
	if (!cr6.gt) goto loc_82720454;
loc_827203FC:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82720454
	if (cr6.eq) goto loc_82720454;
	// subfic r8,r11,64
	xer.ca = r11.u32 <= 64;
	ctx.r8.s64 = 64 - r11.s64;
	// ld r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// subf. r10,r11,r10
	ctx.r10.s64 = ctx.r10.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// clrldi r8,r8,32
	ctx.r8.u64 = ctx.r8.u64 & 0xFFFFFFFF;
	// subf r30,r11,r30
	r30.s64 = r30.s64 - r11.s64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// srd r8,r9,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r9.u64 >> (ctx.r8.u8 & 0x7F));
	// sld r11,r9,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (ctx.r9.u64 << (r11.u8 & 0x7F));
	// rotlwi r9,r8,0
	ctx.r9.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// slw r11,r9,r30
	r11.u64 = r30.u8 & 0x20 ? 0 : (ctx.r9.u32 << (r30.u8 & 0x3F));
	// add r29,r11,r29
	r29.u64 = r11.u64 + r29.u64;
	// bge 0x82720444
	if (!cr0.lt) goto loc_82720444;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82720444:
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r10,16
	r11.s64 = ctx.r10.s64 + 16;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bgt cr6,0x827203fc
	if (cr6.gt) goto loc_827203FC;
loc_82720454:
	// subfic r9,r30,64
	xer.ca = r30.u32 <= 64;
	ctx.r9.s64 = 64 - r30.s64;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r8,r30,32
	ctx.r8.u64 = r30.u64 & 0xFFFFFFFF;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// clrldi r9,r9,32
	ctx.r9.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// subf. r10,r30,r10
	ctx.r10.s64 = ctx.r10.s64 - r30.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r8,r11,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// srd r9,r11,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r9.u8 & 0x7F));
	// rotlwi r11,r9,0
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// add r30,r11,r29
	r30.u64 = r11.u64 + r29.u64;
	// std r8,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r8.u64);
	// bge 0x82720490
	if (!cr0.lt) goto loc_82720490;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82720490:
	// mr r11,r30
	r11.u64 = r30.u64;
loc_82720494:
	// slw r10,r17,r27
	ctx.r10.u64 = r27.u8 & 0x20 ? 0 : (r17.u32 << (r27.u8 & 0x3F));
	// slw r8,r17,r28
	ctx.r8.u64 = r28.u8 & 0x20 ? 0 : (r17.u32 << (r28.u8 & 0x3F));
	// rlwinm r9,r11,16,0,15
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF0000;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// sraw r11,r11,r28
	temp.u32 = r28.u32 & 0x3F;
	if (temp.u32 > 0x1F) temp.u32 = 0x1F;
	xer.ca = (r11.s32 < 0) & (((r11.s32 >> temp.u32) << temp.u32) != r11.s32);
	r11.s64 = r11.s32 >> temp.u32;
	// rlwinm r8,r8,16,0,15
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 16) & 0xFFFF0000;
	// and r11,r10,r11
	r11.u64 = ctx.r10.u64 & r11.u64;
	// addis r10,r8,-1
	ctx.r10.s64 = ctx.r8.s64 + -65536;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// and r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 & ctx.r9.u64;
loc_827204BC:
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
loc_827204C0:
	// rldicr r10,r23,8,55
	ctx.r10.u64 = __builtin_rotateleft64(r23.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// or r10,r10,r24
	ctx.r10.u64 = ctx.r10.u64 | r24.u64;
	// rldicr r10,r10,32,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u64, 32) & 0xFFFFFFFF00000000;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// rldicl r10,r11,24,40
	ctx.r10.u64 = __builtin_rotateleft64(r11.u64, 24) & 0xFFFFFF;
	// rldicl r9,r11,32,32
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 32) & 0xFFFFFFFF;
	// clrlwi r30,r10,31
	r30.u64 = ctx.r10.u32 & 0x1;
	// clrlwi r22,r9,31
	r22.u64 = ctx.r9.u32 & 0x1;
	// rotlwi r21,r11,0
	r21.u64 = __builtin_rotateleft32(r11.u32, 0);
	// b 0x827204f8
	goto loc_827204F8;
loc_827204EC:
	// lis r11,0
	r11.s64 = 0;
	// li r17,1
	r17.s64 = 1;
	// ori r16,r11,32768
	r16.u64 = r11.u64 | 32768;
loc_827204F8:
	// lwz r11,0(r15)
	r11.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// rlwinm r10,r11,0,24,26
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xE0;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x827205b8
	if (!cr6.eq) goto loc_827205B8;
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// beq cr6,0x8272051c
	if (cr6.eq) goto loc_8272051C;
	// li r10,3
	ctx.r10.s64 = 3;
	// rlwimi r11,r10,5,24,26
	r11.u64 = (__builtin_rotateleft32(ctx.r10.u32, 5) & 0xE0) | (r11.u64 & 0xFFFFFFFFFFFFFF1F);
	// b 0x827205b4
	goto loc_827205B4;
loc_8272051C:
	// lwz r3,0(r18)
	ctx.r3.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// ld r11,0(r3)
	r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// lwz r10,8(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// rldicl r8,r11,1,63
	ctx.r8.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// addic. r11,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	r11.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// rotlwi r31,r8,0
	r31.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r9,0(r3)
	PPC_STORE_U64(ctx.r3.u32 + 0, ctx.r9.u64);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// bge 0x82720548
	if (!cr0.lt) goto loc_82720548;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82720548:
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x82720564
	if (!cr6.eq) goto loc_82720564;
	// lwz r11,1856(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 1856);
	// lwz r10,0(r15)
	ctx.r10.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// rlwimi r10,r11,5,24,26
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 5) & 0xE0) | (ctx.r10.u64 & 0xFFFFFFFFFFFFFF1F);
	// stw r10,0(r15)
	PPC_STORE_U32(r15.u32 + 0, ctx.r10.u32);
	// b 0x827205b8
	goto loc_827205B8;
loc_82720564:
	// lwz r3,0(r18)
	ctx.r3.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// ld r11,0(r3)
	r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// lwz r10,8(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// rldicl r8,r11,1,63
	ctx.r8.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// addic. r11,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	r11.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// rotlwi r31,r8,0
	r31.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r9,0(r3)
	PPC_STORE_U64(ctx.r3.u32 + 0, ctx.r9.u64);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// bge 0x82720590
	if (!cr0.lt) goto loc_82720590;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82720590:
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x827205ac
	if (!cr6.eq) goto loc_827205AC;
	// lwz r11,1860(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 1860);
	// lwz r10,0(r15)
	ctx.r10.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// rlwimi r10,r11,5,24,26
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 5) & 0xE0) | (ctx.r10.u64 & 0xFFFFFFFFFFFFFF1F);
	// stw r10,0(r15)
	PPC_STORE_U32(r15.u32 + 0, ctx.r10.u32);
	// b 0x827205b8
	goto loc_827205B8;
loc_827205AC:
	// lwz r11,0(r15)
	r11.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// rlwimi r11,r17,6,24,26
	r11.u64 = (__builtin_rotateleft32(r17.u32, 6) & 0xE0) | (r11.u64 & 0xFFFFFFFFFFFFFF1F);
loc_827205B4:
	// stw r11,0(r15)
	PPC_STORE_U32(r15.u32 + 0, r11.u32);
loc_827205B8:
	// lwz r11,0(r15)
	r11.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// rlwinm r10,r11,0,0,0
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x827205d4
	if (cr6.eq) goto loc_827205D4;
	// li r11,0
	r11.s64 = 0;
	// stb r11,5(r15)
	PPC_STORE_U8(r15.u32 + 5, r11.u8);
	// b 0x827213d4
	goto loc_827213D4;
loc_827205D4:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// bne cr6,0x8272090c
	if (!cr6.eq) goto loc_8272090C;
	// oris r11,r11,16384
	r11.u64 = r11.u64 | 1073741824;
	// stw r11,0(r15)
	PPC_STORE_U32(r15.u32 + 0, r11.u32);
	// lbz r10,27(r18)
	ctx.r10.u64 = PPC_LOAD_U8(r18.u32 + 27);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x827208c4
	if (cr6.eq) goto loc_827208C4;
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// beq cr6,0x827213d0
	if (cr6.eq) goto loc_827213D0;
	// lbz r10,1181(r18)
	ctx.r10.u64 = PPC_LOAD_U8(r18.u32 + 1181);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82720638
	if (cr6.eq) goto loc_82720638;
	// rlwinm r11,r11,20,12,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 20) & 0xFFFFF;
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// clrlwi r11,r11,28
	r11.u64 = r11.u32 & 0xF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82720624
	if (cr6.eq) goto loc_82720624;
	// lbz r11,1182(r18)
	r11.u64 = PPC_LOAD_U8(r18.u32 + 1182);
	// rotlwi r11,r11,1
	r11.u64 = __builtin_rotateleft32(r11.u32, 1);
	// b 0x82720890
	goto loc_82720890;
loc_82720624:
	// lbz r11,1180(r18)
	r11.u64 = PPC_LOAD_U8(r18.u32 + 1180);
	// lbz r10,1185(r18)
	ctx.r10.u64 = PPC_LOAD_U8(r18.u32 + 1185);
	// rotlwi r11,r11,1
	r11.u64 = __builtin_rotateleft32(r11.u32, 1);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// b 0x82720890
	goto loc_82720890;
loc_82720638:
	// lwz r31,0(r18)
	r31.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// li r29,0
	r29.s64 = 0;
	// lbz r11,1186(r18)
	r11.u64 = PPC_LOAD_U8(r18.u32 + 1186);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// beq cr6,0x82720724
	if (cr6.eq) goto loc_82720724;
	// mr r30,r17
	r30.u64 = r17.u64;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bge cr6,0x827206b8
	if (!cr6.lt) goto loc_827206B8;
loc_82720660:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x827206b8
	if (cr6.eq) goto loc_827206B8;
	// subfic r8,r11,64
	xer.ca = r11.u32 <= 64;
	ctx.r8.s64 = 64 - r11.s64;
	// ld r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// subf. r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrldi r8,r8,32
	ctx.r8.u64 = ctx.r8.u64 & 0xFFFFFFFF;
	// subf r30,r11,r30
	r30.s64 = r30.s64 - r11.s64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// srd r8,r10,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r10.u64 >> (ctx.r8.u8 & 0x7F));
	// sld r11,r10,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 << (r11.u8 & 0x7F));
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// slw r11,r10,r30
	r11.u64 = r30.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r30.u8 & 0x3F));
	// add r29,r11,r29
	r29.u64 = r11.u64 + r29.u64;
	// bge 0x827206a8
	if (!cr0.lt) goto loc_827206A8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_827206A8:
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bgt cr6,0x82720660
	if (cr6.gt) goto loc_82720660;
loc_827206B8:
	// subfic r9,r30,64
	xer.ca = r30.u32 <= 64;
	ctx.r9.s64 = 64 - r30.s64;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r8,r30,32
	ctx.r8.u64 = r30.u64 & 0xFFFFFFFF;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// clrldi r9,r9,32
	ctx.r9.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// subf. r10,r30,r10
	ctx.r10.s64 = ctx.r10.s64 - r30.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r8,r11,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// srd r9,r11,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r9.u8 & 0x7F));
	// rotlwi r11,r9,0
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// add r30,r11,r29
	r30.u64 = r11.u64 + r29.u64;
	// std r8,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r8.u64);
	// bge 0x827206f4
	if (!cr0.lt) goto loc_827206F4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_827206F4:
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x8272070c
	if (cr6.eq) goto loc_8272070C;
	// lbz r11,1182(r18)
	r11.u64 = PPC_LOAD_U8(r18.u32 + 1182);
	// rotlwi r11,r11,1
	r11.u64 = __builtin_rotateleft32(r11.u32, 1);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// b 0x82720894
	goto loc_82720894;
loc_8272070C:
	// lbz r11,1180(r18)
	r11.u64 = PPC_LOAD_U8(r18.u32 + 1180);
	// lbz r10,1185(r18)
	ctx.r10.u64 = PPC_LOAD_U8(r18.u32 + 1185);
	// rotlwi r11,r11,1
	r11.u64 = __builtin_rotateleft32(r11.u32, 1);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// b 0x82720894
	goto loc_82720894;
loc_82720724:
	// li r30,3
	r30.s64 = 3;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bge cr6,0x82720788
	if (!cr6.lt) goto loc_82720788;
loc_82720730:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82720788
	if (cr6.eq) goto loc_82720788;
	// subfic r8,r11,64
	xer.ca = r11.u32 <= 64;
	ctx.r8.s64 = 64 - r11.s64;
	// ld r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// subf. r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrldi r8,r8,32
	ctx.r8.u64 = ctx.r8.u64 & 0xFFFFFFFF;
	// subf r30,r11,r30
	r30.s64 = r30.s64 - r11.s64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// srd r8,r10,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r10.u64 >> (ctx.r8.u8 & 0x7F));
	// sld r11,r10,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 << (r11.u8 & 0x7F));
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// slw r11,r10,r30
	r11.u64 = r30.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r30.u8 & 0x3F));
	// add r29,r11,r29
	r29.u64 = r11.u64 + r29.u64;
	// bge 0x82720778
	if (!cr0.lt) goto loc_82720778;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82720778:
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bgt cr6,0x82720730
	if (cr6.gt) goto loc_82720730;
loc_82720788:
	// subfic r9,r30,64
	xer.ca = r30.u32 <= 64;
	ctx.r9.s64 = 64 - r30.s64;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r8,r30,32
	ctx.r8.u64 = r30.u64 & 0xFFFFFFFF;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// clrldi r9,r9,32
	ctx.r9.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// subf. r10,r30,r10
	ctx.r10.s64 = ctx.r10.s64 - r30.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r8,r11,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// srd r9,r11,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r9.u8 & 0x7F));
	// rotlwi r11,r9,0
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// add r30,r11,r29
	r30.u64 = r11.u64 + r29.u64;
	// std r8,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r8.u64);
	// bge 0x827207c4
	if (!cr0.lt) goto loc_827207C4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_827207C4:
	// cmpwi cr6,r30,7
	cr6.compare<int32_t>(r30.s32, 7, xer);
	// bne cr6,0x82720884
	if (!cr6.eq) goto loc_82720884;
	// lwz r31,0(r18)
	r31.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// li r30,5
	r30.s64 = 5;
	// li r29,0
	r29.s64 = 0;
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplwi cr6,r11,5
	cr6.compare<uint32_t>(r11.u32, 5, xer);
	// bge cr6,0x82720840
	if (!cr6.lt) goto loc_82720840;
loc_827207E8:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82720840
	if (cr6.eq) goto loc_82720840;
	// subfic r8,r11,64
	xer.ca = r11.u32 <= 64;
	ctx.r8.s64 = 64 - r11.s64;
	// ld r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// subf. r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrldi r8,r8,32
	ctx.r8.u64 = ctx.r8.u64 & 0xFFFFFFFF;
	// subf r30,r11,r30
	r30.s64 = r30.s64 - r11.s64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// srd r8,r10,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r10.u64 >> (ctx.r8.u8 & 0x7F));
	// sld r11,r10,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 << (r11.u8 & 0x7F));
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// slw r11,r10,r30
	r11.u64 = r30.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r30.u8 & 0x3F));
	// add r29,r11,r29
	r29.u64 = r11.u64 + r29.u64;
	// bge 0x82720830
	if (!cr0.lt) goto loc_82720830;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82720830:
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bgt cr6,0x827207e8
	if (cr6.gt) goto loc_827207E8;
loc_82720840:
	// subfic r9,r30,64
	xer.ca = r30.u32 <= 64;
	ctx.r9.s64 = 64 - r30.s64;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r8,r30,32
	ctx.r8.u64 = r30.u64 & 0xFFFFFFFF;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// clrldi r9,r9,32
	ctx.r9.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// subf. r10,r30,r10
	ctx.r10.s64 = ctx.r10.s64 - r30.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r8,r11,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// srd r9,r11,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r9.u8 & 0x7F));
	// rotlwi r11,r9,0
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// add r30,r11,r29
	r30.u64 = r11.u64 + r29.u64;
	// std r8,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r8.u64);
	// bge 0x8272087c
	if (!cr0.lt) goto loc_8272087C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8272087C:
	// mr r11,r30
	r11.u64 = r30.u64;
	// b 0x8272088c
	goto loc_8272088C;
loc_82720884:
	// lbz r11,1180(r18)
	r11.u64 = PPC_LOAD_U8(r18.u32 + 1180);
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
loc_8272088C:
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
loc_82720890:
	// addi r11,r11,255
	r11.s64 = r11.s64 + 255;
loc_82720894:
	// stb r11,4(r15)
	PPC_STORE_U8(r15.u32 + 4, r11.u8);
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// blt cr6,0x827208ac
	if (cr6.lt) goto loc_827208AC;
	// cmplwi cr6,r11,62
	cr6.compare<uint32_t>(r11.u32, 62, xer);
	// ble cr6,0x827208c4
	if (!cr6.gt) goto loc_827208C4;
loc_827208AC:
	// li r11,4
	r11.s64 = 4;
	// li r12,1
	r12.s64 = 1;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// rldicr r12,r12,63,63
	r12.u64 = __builtin_rotateleft64(r12.u64, 63) & 0xFFFFFFFFFFFFFFFF;
	// or r11,r11,r12
	r11.u64 = r11.u64 | r12.u64;
	// b 0x827213f4
	goto loc_827213F4;
loc_827208C4:
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// beq cr6,0x827213d0
	if (cr6.eq) goto loc_827213D0;
	// lwz r3,0(r18)
	ctx.r3.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// ld r11,0(r3)
	r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// lwz r10,8(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// rldicl r8,r11,1,63
	ctx.r8.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// addic. r11,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	r11.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// rotlwi r31,r8,0
	r31.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r9,0(r3)
	PPC_STORE_U64(ctx.r3.u32 + 0, ctx.r9.u64);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// bge 0x827208f8
	if (!cr0.lt) goto loc_827208F8;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_827208F8:
	// lwz r10,0(r15)
	ctx.r10.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// rlwimi r10,r11,3,27,28
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 3) & 0x18) | (ctx.r10.u64 & 0xFFFFFFFFFFFFFFE7);
	// stw r10,0(r15)
	PPC_STORE_U32(r15.u32 + 0, ctx.r10.u32);
	// b 0x827213d0
	goto loc_827213D0;
loc_8272090C:
	// rlwinm r11,r11,0,24,26
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xE0;
	// cmplwi cr6,r11,64
	cr6.compare<uint32_t>(r11.u32, 64, xer);
	// bne cr6,0x82720d20
	if (!cr6.eq) goto loc_82720D20;
	// lwz r31,0(r18)
	r31.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// lwz r11,176(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 176);
	// ld r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// lwz r29,0(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rldicl r11,r9,10,54
	r11.u64 = __builtin_rotateleft64(ctx.r9.u64, 10) & 0x3FF;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r11,r29
	r11.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// extsh r30,r11
	r30.s64 = r11.s16;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// blt cr6,0x82720a00
	if (cr6.lt) goto loc_82720A00;
	// clrlwi r11,r30,28
	r11.u64 = r30.u32 & 0xF;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// sld r9,r9,r11
	ctx.r9.u64 = r11.u8 & 0x40 ? 0 : (ctx.r9.u64 << (r11.u8 & 0x7F));
	// std r9,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r9.u64);
	// subf r9,r11,r10
	ctx.r9.s64 = ctx.r10.s64 - r11.s64;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// bge cr6,0x827209f8
	if (!cr6.lt) goto loc_827209F8;
loc_82720960:
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// addi r10,r10,-4
	ctx.r10.s64 = ctx.r10.s64 + -4;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x8272098c
	if (cr6.lt) goto loc_8272098C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb840
	sub_825EB840(ctx, base);
	// cmplwi cr6,r3,1
	cr6.compare<uint32_t>(ctx.r3.u32, 1, xer);
	// beq cr6,0x82720960
	if (cr6.eq) goto loc_82720960;
	// srawi r30,r30,4
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0xF) != 0);
	r30.s64 = r30.s32 >> 4;
	// b 0x82720a40
	goto loc_82720A40;
loc_8272098C:
	// lbz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r4,r11,6
	ctx.r4.s64 = r11.s64 + 6;
	// lbz r9,1(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 1);
	// rldicr r8,r8,8,63
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u64, 8) & 0xFFFFFFFFFFFFFFFF;
	// lbz r5,2(r11)
	ctx.r5.u64 = PPC_LOAD_U8(r11.u32 + 2);
	// lbz r6,3(r11)
	ctx.r6.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// lbz r8,5(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 5);
	// lbz r7,4(r11)
	ctx.r7.u64 = PPC_LOAD_U8(r11.u32 + 4);
	// rldicr r11,r9,8,55
	r11.u64 = __builtin_rotateleft64(ctx.r9.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// ld r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// stw r4,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r4.u32);
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// neg r8,r10
	ctx.r8.s64 = -ctx.r10.s64;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// extsw r8,r8
	ctx.r8.s64 = ctx.r8.s32;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r11,r11,r8
	r11.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
loc_827209F8:
	// srawi r30,r30,4
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0xF) != 0);
	r30.s64 = r30.s32 >> 4;
	// b 0x82720a40
	goto loc_82720A40;
loc_82720A00:
	// li r4,10
	ctx.r4.s64 = 10;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
loc_82720A0C:
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rldicl r11,r11,1,63
	r11.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// add r30,r11,r30
	r30.u64 = r11.u64 + r30.u64;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
	// add r11,r30,r16
	r11.u64 = r30.u64 + r16.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r11,r29
	r11.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// extsh r30,r11
	r30.s64 = r11.s16;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// blt cr6,0x82720a0c
	if (cr6.lt) goto loc_82720A0C;
loc_82720A40:
	// addi r11,r30,1
	r11.s64 = r30.s64 + 1;
	// mr r10,r17
	ctx.r10.u64 = r17.u64;
	// cmpwi cr6,r11,37
	cr6.compare<int32_t>(r11.s32, 37, xer);
	// bge cr6,0x82720a54
	if (!cr6.lt) goto loc_82720A54;
	// li r10,0
	ctx.r10.s64 = 0;
loc_82720A54:
	// extsw r23,r10
	r23.s64 = ctx.r10.s32;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x82720a64
	if (cr6.eq) goto loc_82720A64;
	// addi r11,r11,-37
	r11.s64 = r11.s64 + -37;
loc_82720A64:
	// li r24,0
	r24.s64 = 0;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82720cd8
	if (cr6.eq) goto loc_82720CD8;
	// cmpwi cr6,r11,35
	cr6.compare<int32_t>(r11.s32, 35, xer);
	// bge cr6,0x82720bc4
	if (!cr6.lt) goto loc_82720BC4;
	// lwz r10,12(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 12);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r10
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// srawi r9,r11,24
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFFFF) != 0);
	ctx.r9.s64 = r11.s32 >> 24;
	// srawi r8,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r8.s64 = r11.s32 >> 4;
	// clrlwi r10,r11,28
	ctx.r10.u64 = r11.u32 & 0xF;
	// clrlwi r28,r8,28
	r28.u64 = ctx.r8.u32 & 0xF;
	// srawi r8,r11,8
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFF) != 0);
	ctx.r8.s64 = r11.s32 >> 8;
	// srawi r11,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	r11.s64 = r11.s32 >> 16;
	// add r30,r10,r28
	r30.u64 = ctx.r10.u64 + r28.u64;
	// clrlwi r27,r9,24
	r27.u64 = ctx.r9.u32 & 0xFF;
	// clrlwi r26,r8,24
	r26.u64 = ctx.r8.u32 & 0xFF;
	// clrlwi r25,r11,24
	r25.u64 = r11.u32 & 0xFF;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// ble cr6,0x82720b6c
	if (!cr6.gt) goto loc_82720B6C;
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// li r29,0
	r29.s64 = 0;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// beq cr6,0x82720b6c
	if (cr6.eq) goto loc_82720B6C;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// ble cr6,0x82720b28
	if (!cr6.gt) goto loc_82720B28;
loc_82720AD0:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82720b28
	if (cr6.eq) goto loc_82720B28;
	// subfic r8,r11,64
	xer.ca = r11.u32 <= 64;
	ctx.r8.s64 = 64 - r11.s64;
	// ld r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// subf. r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrldi r8,r8,32
	ctx.r8.u64 = ctx.r8.u64 & 0xFFFFFFFF;
	// subf r30,r11,r30
	r30.s64 = r30.s64 - r11.s64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// srd r8,r10,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r10.u64 >> (ctx.r8.u8 & 0x7F));
	// sld r11,r10,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 << (r11.u8 & 0x7F));
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// slw r11,r10,r30
	r11.u64 = r30.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r30.u8 & 0x3F));
	// add r29,r11,r29
	r29.u64 = r11.u64 + r29.u64;
	// bge 0x82720b18
	if (!cr0.lt) goto loc_82720B18;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82720B18:
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bgt cr6,0x82720ad0
	if (cr6.gt) goto loc_82720AD0;
loc_82720B28:
	// subfic r9,r30,64
	xer.ca = r30.u32 <= 64;
	ctx.r9.s64 = 64 - r30.s64;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r8,r30,32
	ctx.r8.u64 = r30.u64 & 0xFFFFFFFF;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// clrldi r9,r9,32
	ctx.r9.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// subf. r10,r30,r10
	ctx.r10.s64 = ctx.r10.s64 - r30.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r8,r11,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// srd r9,r11,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r9.u8 & 0x7F));
	// rotlwi r11,r9,0
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// add r30,r11,r29
	r30.u64 = r11.u64 + r29.u64;
	// std r8,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r8.u64);
	// bge 0x82720b64
	if (!cr0.lt) goto loc_82720B64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82720B64:
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// b 0x82720b70
	goto loc_82720B70;
loc_82720B6C:
	// li r10,0
	ctx.r10.s64 = 0;
loc_82720B70:
	// and r11,r10,r27
	r11.u64 = ctx.r10.u64 & r27.u64;
	// rlwinm r8,r25,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r9,r11,0,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFE;
	// sraw r10,r10,r28
	temp.u32 = r28.u32 & 0x3F;
	if (temp.u32 > 0x1F) temp.u32 = 0x1F;
	xer.ca = (ctx.r10.s32 < 0) & (((ctx.r10.s32 >> temp.u32) << temp.u32) != ctx.r10.s32);
	ctx.r10.s64 = ctx.r10.s32 >> temp.u32;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// clrlwi r7,r11,31
	ctx.r7.u64 = r11.u32 & 0x1;
	// rlwinm r8,r9,15,0,16
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 15) & 0xFFFF8000;
	// clrlwi r9,r10,31
	ctx.r9.u64 = ctx.r10.u32 & 0x1;
	// srawi r10,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 1;
	// neg r11,r7
	r11.s64 = -ctx.r7.s64;
	// add r10,r10,r26
	ctx.r10.u64 = ctx.r10.u64 + r26.u64;
	// neg r9,r9
	ctx.r9.s64 = -ctx.r9.s64;
	// rlwinm r7,r11,16,0,15
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF0000;
	// xor r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 ^ ctx.r9.u64;
	// rlwinm r11,r11,16,0,15
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF0000;
	// xor r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 ^ ctx.r7.u64;
	// subf r10,r9,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r9.s64;
	// subf r11,r11,r8
	r11.s64 = ctx.r8.s64 - r11.s64;
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// b 0x82720cd8
	goto loc_82720CD8;
loc_82720BC4:
	// cmpwi cr6,r11,36
	cr6.compare<int32_t>(r11.s32, 36, xer);
	// bne cr6,0x82720bd8
	if (!cr6.eq) goto loc_82720BD8;
	// mr r24,r17
	r24.u64 = r17.u64;
	// li r11,0
	r11.s64 = 0;
	// b 0x82720cd8
	goto loc_82720CD8;
loc_82720BD8:
	// lbz r11,30(r18)
	r11.u64 = PPC_LOAD_U8(r18.u32 + 30);
	// li r29,0
	r29.s64 = 0;
	// lhz r10,70(r18)
	ctx.r10.u64 = PPC_LOAD_U16(r18.u32 + 70);
	// lhz r9,72(r18)
	ctx.r9.u64 = PPC_LOAD_U16(r18.u32 + 72);
	// subf r27,r11,r10
	r27.s64 = ctx.r10.s64 - r11.s64;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// subf r28,r11,r9
	r28.s64 = ctx.r9.s64 - r11.s64;
	// addi r11,r10,16
	r11.s64 = ctx.r10.s64 + 16;
	// add r30,r28,r27
	r30.u64 = r28.u64 + r27.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x82720c0c
	if (!cr6.eq) goto loc_82720C0C;
	// li r11,0
	r11.s64 = 0;
	// b 0x82720cac
	goto loc_82720CAC;
loc_82720C0C:
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// ble cr6,0x82720c6c
	if (!cr6.gt) goto loc_82720C6C;
loc_82720C14:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82720c6c
	if (cr6.eq) goto loc_82720C6C;
	// subfic r8,r11,64
	xer.ca = r11.u32 <= 64;
	ctx.r8.s64 = 64 - r11.s64;
	// ld r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// subf. r10,r11,r10
	ctx.r10.s64 = ctx.r10.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// clrldi r8,r8,32
	ctx.r8.u64 = ctx.r8.u64 & 0xFFFFFFFF;
	// subf r30,r11,r30
	r30.s64 = r30.s64 - r11.s64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// srd r8,r9,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r9.u64 >> (ctx.r8.u8 & 0x7F));
	// sld r11,r9,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (ctx.r9.u64 << (r11.u8 & 0x7F));
	// rotlwi r9,r8,0
	ctx.r9.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// slw r11,r9,r30
	r11.u64 = r30.u8 & 0x20 ? 0 : (ctx.r9.u32 << (r30.u8 & 0x3F));
	// add r29,r11,r29
	r29.u64 = r11.u64 + r29.u64;
	// bge 0x82720c5c
	if (!cr0.lt) goto loc_82720C5C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82720C5C:
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r10,16
	r11.s64 = ctx.r10.s64 + 16;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bgt cr6,0x82720c14
	if (cr6.gt) goto loc_82720C14;
loc_82720C6C:
	// subfic r9,r30,64
	xer.ca = r30.u32 <= 64;
	ctx.r9.s64 = 64 - r30.s64;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r8,r30,32
	ctx.r8.u64 = r30.u64 & 0xFFFFFFFF;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// clrldi r9,r9,32
	ctx.r9.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// subf. r10,r30,r10
	ctx.r10.s64 = ctx.r10.s64 - r30.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r8,r11,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// srd r9,r11,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r9.u8 & 0x7F));
	// rotlwi r11,r9,0
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// add r30,r11,r29
	r30.u64 = r11.u64 + r29.u64;
	// std r8,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r8.u64);
	// bge 0x82720ca8
	if (!cr0.lt) goto loc_82720CA8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82720CA8:
	// mr r11,r30
	r11.u64 = r30.u64;
loc_82720CAC:
	// slw r8,r17,r28
	ctx.r8.u64 = r28.u8 & 0x20 ? 0 : (r17.u32 << (r28.u8 & 0x3F));
	// slw r10,r17,r27
	ctx.r10.u64 = r27.u8 & 0x20 ? 0 : (r17.u32 << (r27.u8 & 0x3F));
	// rlwinm r9,r11,16,0,15
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF0000;
	// sraw r11,r11,r28
	temp.u32 = r28.u32 & 0x3F;
	if (temp.u32 > 0x1F) temp.u32 = 0x1F;
	xer.ca = (r11.s32 < 0) & (((r11.s32 >> temp.u32) << temp.u32) != r11.s32);
	r11.s64 = r11.s32 >> temp.u32;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// rlwinm r8,r8,16,0,15
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 16) & 0xFFFF0000;
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// addis r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -65536;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// and r10,r8,r9
	ctx.r10.u64 = ctx.r8.u64 & ctx.r9.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
loc_82720CD8:
	// rldicr r10,r23,8,55
	ctx.r10.u64 = __builtin_rotateleft64(r23.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// or r10,r10,r24
	ctx.r10.u64 = ctx.r10.u64 | r24.u64;
	// rldicr r10,r10,32,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u64, 32) & 0xFFFFFFFF00000000;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// rldicl r10,r11,32,32
	ctx.r10.u64 = __builtin_rotateleft64(r11.u64, 32) & 0xFFFFFFFF;
	// rotlwi r20,r11,0
	r20.u64 = __builtin_rotateleft32(r11.u32, 0);
	// clrlwi r10,r10,31
	ctx.r10.u64 = ctx.r10.u32 & 0x1;
	// or r10,r10,r22
	ctx.r10.u64 = ctx.r10.u64 | r22.u64;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x8272119c
	if (!cr6.eq) goto loc_8272119C;
	// rldicl r11,r11,24,40
	r11.u64 = __builtin_rotateleft64(r11.u64, 24) & 0xFFFFFF;
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82720d20
	if (!cr6.eq) goto loc_82720D20;
	// lwz r11,0(r15)
	r11.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// oris r11,r11,16384
	r11.u64 = r11.u64 | 1073741824;
	// b 0x827213cc
	goto loc_827213CC;
loc_82720D20:
	// lbz r11,29(r18)
	r11.u64 = PPC_LOAD_U8(r18.u32 + 29);
	// lbz r28,28(r18)
	r28.u64 = PPC_LOAD_U8(r18.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82720d40
	if (cr6.eq) goto loc_82720D40;
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// bne cr6,0x82720d40
	if (!cr6.eq) goto loc_82720D40;
	// mr r27,r17
	r27.u64 = r17.u64;
	// b 0x82720d88
	goto loc_82720D88;
loc_82720D40:
	// li r27,0
	r27.s64 = 0;
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// beq cr6,0x82720d88
	if (cr6.eq) goto loc_82720D88;
	// lwz r3,0(r18)
	ctx.r3.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// ld r11,0(r3)
	r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// lwz r10,8(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// rldicl r8,r11,1,63
	ctx.r8.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// addic. r11,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	r11.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// rotlwi r31,r8,0
	r31.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r9,0(r3)
	PPC_STORE_U64(ctx.r3.u32 + 0, ctx.r9.u64);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// bge 0x82720d78
	if (!cr0.lt) goto loc_82720D78;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82720D78:
	// lwz r10,0(r15)
	ctx.r10.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// clrlwi r11,r31,24
	r11.u64 = r31.u32 & 0xFF;
	// rlwimi r10,r11,3,27,28
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 3) & 0x18) | (ctx.r10.u64 & 0xFFFFFFFFFFFFFFE7);
	// stw r10,0(r15)
	PPC_STORE_U32(r15.u32 + 0, ctx.r10.u32);
loc_82720D88:
	// lwz r31,0(r18)
	r31.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// lwz r11,196(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 196);
	// ld r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// lwz r29,0(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rldicl r11,r9,8,56
	r11.u64 = __builtin_rotateleft64(ctx.r9.u64, 8) & 0xFF;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r11,r29
	r11.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// extsh r30,r11
	r30.s64 = r11.s16;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// blt cr6,0x82720e70
	if (cr6.lt) goto loc_82720E70;
	// clrlwi r11,r30,28
	r11.u64 = r30.u32 & 0xF;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// sld r9,r9,r11
	ctx.r9.u64 = r11.u8 & 0x40 ? 0 : (ctx.r9.u64 << (r11.u8 & 0x7F));
	// std r9,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r9.u64);
	// subf r9,r11,r10
	ctx.r9.s64 = ctx.r10.s64 - r11.s64;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// bge cr6,0x82720e68
	if (!cr6.lt) goto loc_82720E68;
loc_82720DD0:
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// addi r10,r10,-4
	ctx.r10.s64 = ctx.r10.s64 + -4;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x82720dfc
	if (cr6.lt) goto loc_82720DFC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb840
	sub_825EB840(ctx, base);
	// cmplwi cr6,r3,1
	cr6.compare<uint32_t>(ctx.r3.u32, 1, xer);
	// beq cr6,0x82720dd0
	if (cr6.eq) goto loc_82720DD0;
	// srawi r30,r30,4
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0xF) != 0);
	r30.s64 = r30.s32 >> 4;
	// b 0x82720eb0
	goto loc_82720EB0;
loc_82720DFC:
	// lbz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r4,r11,6
	ctx.r4.s64 = r11.s64 + 6;
	// lbz r9,1(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 1);
	// rldicr r8,r8,8,63
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u64, 8) & 0xFFFFFFFFFFFFFFFF;
	// lbz r5,2(r11)
	ctx.r5.u64 = PPC_LOAD_U8(r11.u32 + 2);
	// lbz r6,3(r11)
	ctx.r6.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// lbz r8,5(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 5);
	// lbz r7,4(r11)
	ctx.r7.u64 = PPC_LOAD_U8(r11.u32 + 4);
	// rldicr r11,r9,8,55
	r11.u64 = __builtin_rotateleft64(ctx.r9.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// ld r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// stw r4,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r4.u32);
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// neg r8,r10
	ctx.r8.s64 = -ctx.r10.s64;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// extsw r8,r8
	ctx.r8.s64 = ctx.r8.s32;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r11,r11,r8
	r11.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
loc_82720E68:
	// srawi r30,r30,4
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0xF) != 0);
	r30.s64 = r30.s32 >> 4;
	// b 0x82720eb0
	goto loc_82720EB0;
loc_82720E70:
	// li r4,8
	ctx.r4.s64 = 8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
loc_82720E7C:
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rldicl r11,r11,1,63
	r11.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// add r30,r11,r30
	r30.u64 = r11.u64 + r30.u64;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
	// add r11,r30,r16
	r11.u64 = r30.u64 + r16.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r11,r29
	r11.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// extsh r30,r11
	r30.s64 = r11.s16;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// blt cr6,0x82720e7c
	if (cr6.lt) goto loc_82720E7C;
loc_82720EB0:
	// lwz r31,0(r18)
	r31.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// mr r19,r30
	r19.u64 = r30.u64;
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82720edc
	if (cr6.eq) goto loc_82720EDC;
	// li r11,4
	r11.s64 = 4;
	// li r12,1
	r12.s64 = 1;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// rldicr r12,r12,63,63
	r12.u64 = __builtin_rotateleft64(r12.u64, 63) & 0xFFFFFFFFFFFFFFFF;
	// or r11,r11,r12
	r11.u64 = r11.u64 | r12.u64;
	// b 0x827213f4
	goto loc_827213F4;
loc_82720EDC:
	// lbz r11,27(r18)
	r11.u64 = PPC_LOAD_U8(r18.u32 + 27);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x827211b4
	if (cr6.eq) goto loc_827211B4;
	// lbz r11,1181(r18)
	r11.u64 = PPC_LOAD_U8(r18.u32 + 1181);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82720f2c
	if (cr6.eq) goto loc_82720F2C;
	// lwz r10,0(r15)
	ctx.r10.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// rlwinm r10,r10,20,12,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 20) & 0xFFFFF;
	// and r11,r10,r11
	r11.u64 = ctx.r10.u64 & r11.u64;
	// clrlwi r11,r11,28
	r11.u64 = r11.u32 & 0xF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82720f18
	if (cr6.eq) goto loc_82720F18;
	// lbz r11,1182(r18)
	r11.u64 = PPC_LOAD_U8(r18.u32 + 1182);
	// rotlwi r11,r11,1
	r11.u64 = __builtin_rotateleft32(r11.u32, 1);
	// b 0x82721180
	goto loc_82721180;
loc_82720F18:
	// lbz r11,1180(r18)
	r11.u64 = PPC_LOAD_U8(r18.u32 + 1180);
	// lbz r10,1185(r18)
	ctx.r10.u64 = PPC_LOAD_U8(r18.u32 + 1185);
	// rotlwi r11,r11,1
	r11.u64 = __builtin_rotateleft32(r11.u32, 1);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// b 0x82721180
	goto loc_82721180;
loc_82720F2C:
	// lbz r11,1186(r18)
	r11.u64 = PPC_LOAD_U8(r18.u32 + 1186);
	// li r29,0
	r29.s64 = 0;
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// beq cr6,0x82721014
	if (cr6.eq) goto loc_82721014;
	// mr r30,r17
	r30.u64 = r17.u64;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// bge cr6,0x82720fa8
	if (!cr6.lt) goto loc_82720FA8;
loc_82720F50:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82720fa8
	if (cr6.eq) goto loc_82720FA8;
	// subfic r8,r11,64
	xer.ca = r11.u32 <= 64;
	ctx.r8.s64 = 64 - r11.s64;
	// ld r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// subf. r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrldi r8,r8,32
	ctx.r8.u64 = ctx.r8.u64 & 0xFFFFFFFF;
	// subf r30,r11,r30
	r30.s64 = r30.s64 - r11.s64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// srd r8,r10,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r10.u64 >> (ctx.r8.u8 & 0x7F));
	// sld r11,r10,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 << (r11.u8 & 0x7F));
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// slw r11,r10,r30
	r11.u64 = r30.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r30.u8 & 0x3F));
	// add r29,r11,r29
	r29.u64 = r11.u64 + r29.u64;
	// bge 0x82720f98
	if (!cr0.lt) goto loc_82720F98;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82720F98:
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bgt cr6,0x82720f50
	if (cr6.gt) goto loc_82720F50;
loc_82720FA8:
	// subfic r9,r30,64
	xer.ca = r30.u32 <= 64;
	ctx.r9.s64 = 64 - r30.s64;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r8,r30,32
	ctx.r8.u64 = r30.u64 & 0xFFFFFFFF;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// clrldi r9,r9,32
	ctx.r9.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// subf. r10,r30,r10
	ctx.r10.s64 = ctx.r10.s64 - r30.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r8,r11,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// srd r9,r11,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r9.u8 & 0x7F));
	// rotlwi r11,r9,0
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// add r30,r11,r29
	r30.u64 = r11.u64 + r29.u64;
	// std r8,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r8.u64);
	// bge 0x82720fe4
	if (!cr0.lt) goto loc_82720FE4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82720FE4:
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x82720ffc
	if (cr6.eq) goto loc_82720FFC;
	// lbz r11,1182(r18)
	r11.u64 = PPC_LOAD_U8(r18.u32 + 1182);
	// rotlwi r11,r11,1
	r11.u64 = __builtin_rotateleft32(r11.u32, 1);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// b 0x82721184
	goto loc_82721184;
loc_82720FFC:
	// lbz r11,1180(r18)
	r11.u64 = PPC_LOAD_U8(r18.u32 + 1180);
	// lbz r10,1185(r18)
	ctx.r10.u64 = PPC_LOAD_U8(r18.u32 + 1185);
	// rotlwi r11,r11,1
	r11.u64 = __builtin_rotateleft32(r11.u32, 1);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// b 0x82721184
	goto loc_82721184;
loc_82721014:
	// li r30,3
	r30.s64 = 3;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bge cr6,0x82721078
	if (!cr6.lt) goto loc_82721078;
loc_82721020:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82721078
	if (cr6.eq) goto loc_82721078;
	// subfic r8,r11,64
	xer.ca = r11.u32 <= 64;
	ctx.r8.s64 = 64 - r11.s64;
	// ld r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// subf. r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrldi r8,r8,32
	ctx.r8.u64 = ctx.r8.u64 & 0xFFFFFFFF;
	// subf r30,r11,r30
	r30.s64 = r30.s64 - r11.s64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// srd r8,r10,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r10.u64 >> (ctx.r8.u8 & 0x7F));
	// sld r11,r10,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 << (r11.u8 & 0x7F));
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// slw r11,r10,r30
	r11.u64 = r30.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r30.u8 & 0x3F));
	// add r29,r11,r29
	r29.u64 = r11.u64 + r29.u64;
	// bge 0x82721068
	if (!cr0.lt) goto loc_82721068;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82721068:
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bgt cr6,0x82721020
	if (cr6.gt) goto loc_82721020;
loc_82721078:
	// subfic r9,r30,64
	xer.ca = r30.u32 <= 64;
	ctx.r9.s64 = 64 - r30.s64;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r8,r30,32
	ctx.r8.u64 = r30.u64 & 0xFFFFFFFF;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// clrldi r9,r9,32
	ctx.r9.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// subf. r10,r30,r10
	ctx.r10.s64 = ctx.r10.s64 - r30.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r8,r11,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// srd r9,r11,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r9.u8 & 0x7F));
	// rotlwi r11,r9,0
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// add r30,r11,r29
	r30.u64 = r11.u64 + r29.u64;
	// std r8,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r8.u64);
	// bge 0x827210b4
	if (!cr0.lt) goto loc_827210B4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_827210B4:
	// cmpwi cr6,r30,7
	cr6.compare<int32_t>(r30.s32, 7, xer);
	// bne cr6,0x82721174
	if (!cr6.eq) goto loc_82721174;
	// lwz r31,0(r18)
	r31.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// li r30,5
	r30.s64 = 5;
	// li r29,0
	r29.s64 = 0;
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplwi cr6,r11,5
	cr6.compare<uint32_t>(r11.u32, 5, xer);
	// bge cr6,0x82721130
	if (!cr6.lt) goto loc_82721130;
loc_827210D8:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82721130
	if (cr6.eq) goto loc_82721130;
	// subfic r8,r11,64
	xer.ca = r11.u32 <= 64;
	ctx.r8.s64 = 64 - r11.s64;
	// ld r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// subf. r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrldi r8,r8,32
	ctx.r8.u64 = ctx.r8.u64 & 0xFFFFFFFF;
	// subf r30,r11,r30
	r30.s64 = r30.s64 - r11.s64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// srd r8,r10,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r10.u64 >> (ctx.r8.u8 & 0x7F));
	// sld r11,r10,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 << (r11.u8 & 0x7F));
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// slw r11,r10,r30
	r11.u64 = r30.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r30.u8 & 0x3F));
	// add r29,r11,r29
	r29.u64 = r11.u64 + r29.u64;
	// bge 0x82721120
	if (!cr0.lt) goto loc_82721120;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82721120:
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bgt cr6,0x827210d8
	if (cr6.gt) goto loc_827210D8;
loc_82721130:
	// subfic r9,r30,64
	xer.ca = r30.u32 <= 64;
	ctx.r9.s64 = 64 - r30.s64;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r8,r30,32
	ctx.r8.u64 = r30.u64 & 0xFFFFFFFF;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// clrldi r9,r9,32
	ctx.r9.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// subf. r10,r30,r10
	ctx.r10.s64 = ctx.r10.s64 - r30.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r8,r11,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// srd r9,r11,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r9.u8 & 0x7F));
	// rotlwi r11,r9,0
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// add r30,r11,r29
	r30.u64 = r11.u64 + r29.u64;
	// std r8,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r8.u64);
	// bge 0x8272116c
	if (!cr0.lt) goto loc_8272116C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8272116C:
	// mr r11,r30
	r11.u64 = r30.u64;
	// b 0x8272117c
	goto loc_8272117C;
loc_82721174:
	// lbz r11,1180(r18)
	r11.u64 = PPC_LOAD_U8(r18.u32 + 1180);
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
loc_8272117C:
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
loc_82721180:
	// addi r11,r11,255
	r11.s64 = r11.s64 + 255;
loc_82721184:
	// stb r11,4(r15)
	PPC_STORE_U8(r15.u32 + 4, r11.u8);
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// blt cr6,0x8272119c
	if (cr6.lt) goto loc_8272119C;
	// cmplwi cr6,r11,62
	cr6.compare<uint32_t>(r11.u32, 62, xer);
	// ble cr6,0x827211b4
	if (!cr6.gt) goto loc_827211B4;
loc_8272119C:
	// mr r11,r17
	r11.u64 = r17.u64;
	// li r12,1
	r12.s64 = 1;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// rldicr r12,r12,63,63
	r12.u64 = __builtin_rotateleft64(r12.u64, 63) & 0xFFFFFFFFFFFFFFFF;
	// or r11,r11,r12
	r11.u64 = r11.u64 | r12.u64;
	// b 0x827213f4
	goto loc_827213F4;
loc_827211B4:
	// lwz r11,0(r15)
	r11.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// rlwinm r11,r11,0,2,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFBFFFFFFF;
	// stw r11,0(r15)
	PPC_STORE_U32(r15.u32 + 0, r11.u32);
	// beq cr6,0x8272123c
	if (cr6.eq) goto loc_8272123C;
	// lwz r3,0(r18)
	ctx.r3.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// ld r11,0(r3)
	r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// lwz r10,8(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// rldicl r8,r11,1,63
	ctx.r8.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// addic. r11,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	r11.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// rotlwi r30,r8,0
	r30.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r9,0(r3)
	PPC_STORE_U64(ctx.r3.u32 + 0, ctx.r9.u64);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// bge 0x827211f4
	if (!cr0.lt) goto loc_827211F4;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_827211F4:
	// mr r11,r30
	r11.u64 = r30.u64;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// beq cr6,0x82721230
	if (cr6.eq) goto loc_82721230;
	// lwz r3,0(r18)
	ctx.r3.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// ld r11,0(r3)
	r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// lwz r10,8(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// rldicl r8,r11,1,63
	ctx.r8.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// addic. r11,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	r11.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// rotlwi r31,r8,0
	r31.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r9,0(r3)
	PPC_STORE_U64(ctx.r3.u32 + 0, ctx.r9.u64);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// bge 0x8272122c
	if (!cr0.lt) goto loc_8272122C;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8272122C:
	// add r11,r31,r30
	r11.u64 = r31.u64 + r30.u64;
loc_82721230:
	// lwz r10,0(r15)
	ctx.r10.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// rlwimi r10,r11,22,8,9
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 22) & 0xC00000) | (ctx.r10.u64 & 0xFFFFFFFFFF3FFFFF);
	// stw r10,0(r15)
	PPC_STORE_U32(r15.u32 + 0, ctx.r10.u32);
loc_8272123C:
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// beq cr6,0x827213d0
	if (cr6.eq) goto loc_827213D0;
	// lwz r31,0(r18)
	r31.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// lwz r11,200(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 200);
	// ld r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// lwz r29,0(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rldicl r11,r9,8,56
	r11.u64 = __builtin_rotateleft64(ctx.r9.u64, 8) & 0xFF;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r11,r29
	r11.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// extsh r30,r11
	r30.s64 = r11.s16;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// blt cr6,0x8272132c
	if (cr6.lt) goto loc_8272132C;
	// clrlwi r11,r30,28
	r11.u64 = r30.u32 & 0xF;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// sld r9,r9,r11
	ctx.r9.u64 = r11.u8 & 0x40 ? 0 : (ctx.r9.u64 << (r11.u8 & 0x7F));
	// std r9,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r9.u64);
	// subf r9,r11,r10
	ctx.r9.s64 = ctx.r10.s64 - r11.s64;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// bge cr6,0x82721324
	if (!cr6.lt) goto loc_82721324;
loc_8272128C:
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// addi r10,r10,-4
	ctx.r10.s64 = ctx.r10.s64 + -4;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x827212b8
	if (cr6.lt) goto loc_827212B8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb840
	sub_825EB840(ctx, base);
	// cmplwi cr6,r3,1
	cr6.compare<uint32_t>(ctx.r3.u32, 1, xer);
	// beq cr6,0x8272128c
	if (cr6.eq) goto loc_8272128C;
	// srawi r30,r30,4
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0xF) != 0);
	r30.s64 = r30.s32 >> 4;
	// b 0x8272136c
	goto loc_8272136C;
loc_827212B8:
	// lbz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r4,r11,6
	ctx.r4.s64 = r11.s64 + 6;
	// lbz r9,1(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 1);
	// rldicr r8,r8,8,63
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u64, 8) & 0xFFFFFFFFFFFFFFFF;
	// lbz r5,2(r11)
	ctx.r5.u64 = PPC_LOAD_U8(r11.u32 + 2);
	// lbz r6,3(r11)
	ctx.r6.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// lbz r8,5(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 5);
	// lbz r7,4(r11)
	ctx.r7.u64 = PPC_LOAD_U8(r11.u32 + 4);
	// rldicr r11,r9,8,55
	r11.u64 = __builtin_rotateleft64(ctx.r9.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// ld r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// stw r4,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r4.u32);
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// neg r8,r10
	ctx.r8.s64 = -ctx.r10.s64;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// extsw r8,r8
	ctx.r8.s64 = ctx.r8.s32;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r11,r11,r8
	r11.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
loc_82721324:
	// srawi r30,r30,4
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0xF) != 0);
	r30.s64 = r30.s32 >> 4;
	// b 0x8272136c
	goto loc_8272136C;
loc_8272132C:
	// li r4,8
	ctx.r4.s64 = 8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
loc_82721338:
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rldicl r11,r11,1,63
	r11.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// add r30,r11,r30
	r30.u64 = r11.u64 + r30.u64;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
	// add r11,r30,r16
	r11.u64 = r30.u64 + r16.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r11,r29
	r11.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// extsh r30,r11
	r30.s64 = r11.s16;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// blt cr6,0x82721338
	if (cr6.lt) goto loc_82721338;
loc_8272136C:
	// lwz r11,0(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82721384
	if (cr6.eq) goto loc_82721384;
	// li r11,4
	r11.s64 = 4;
	// b 0x827213f4
	goto loc_827213F4;
loc_82721384:
	// cmpwi cr6,r30,8
	cr6.compare<int32_t>(r30.s32, 8, xer);
	// mr r9,r17
	ctx.r9.u64 = r17.u64;
	// blt cr6,0x82721394
	if (cr6.lt) goto loc_82721394;
	// li r9,0
	ctx.r9.s64 = 0;
loc_82721394:
	// lwz r11,0(r15)
	r11.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// rlwinm r10,r30,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwimi r11,r9,28,3,3
	r11.u64 = (__builtin_rotateleft32(ctx.r9.u32, 28) & 0x10000000) | (r11.u64 & 0xFFFFFFFFEFFFFFFF);
	// lwz r9,152(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// mr r7,r11
	ctx.r7.u64 = r11.u64;
	// addi r8,r9,64
	ctx.r8.s64 = ctx.r9.s64 + 64;
	// stw r11,0(r15)
	PPC_STORE_U32(r15.u32 + 0, r11.u32);
	// lwzx r11,r10,r9
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// rlwimi r7,r11,24,5,7
	ctx.r7.u64 = (__builtin_rotateleft32(r11.u32, 24) & 0x7000000) | (ctx.r7.u64 & 0xFFFFFFFFF8FFFFFF);
	// stw r7,0(r15)
	PPC_STORE_U32(r15.u32 + 0, ctx.r7.u32);
	// lwzx r11,r10,r8
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r8.u32);
	// rotlwi r10,r7,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r7.u32, 0);
	// rlwimi r10,r11,20,10,11
	ctx.r10.u64 = (__builtin_rotateleft32(r11.u32, 20) & 0x300000) | (ctx.r10.u64 & 0xFFFFFFFFFFCFFFFF);
	// rlwinm r11,r10,0,5,3
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFF7FFFFFF;
loc_827213CC:
	// stw r11,0(r15)
	PPC_STORE_U32(r15.u32 + 0, r11.u32);
loc_827213D0:
	// stb r19,5(r15)
	PPC_STORE_U8(r15.u32 + 5, r19.u8);
loc_827213D4:
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// beq cr6,0x827213e8
	if (cr6.eq) goto loc_827213E8;
	// li r11,16384
	r11.s64 = 16384;
	// rldimi r11,r11,32,0
	r11.u64 = (__builtin_rotateleft64(r11.u64, 32) & 0xFFFFFFFF00000000) | (r11.u64 & 0xFFFFFFFF);
	// b 0x827213f4
	goto loc_827213F4;
loc_827213E8:
	// clrldi r10,r21,32
	ctx.r10.u64 = r21.u64 & 0xFFFFFFFF;
	// rldicr r11,r20,32,31
	r11.u64 = __builtin_rotateleft64(r20.u64, 32) & 0xFFFFFFFF00000000;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
loc_827213F4:
	// lwz r10,0(r15)
	ctx.r10.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// rlwinm r10,r10,0,24,26
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xE0;
	// cmplwi cr6,r10,96
	cr6.compare<uint32_t>(ctx.r10.u32, 96, xer);
	// beq cr6,0x82721414
	if (cr6.eq) goto loc_82721414;
	// lwz r10,404(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 404);
	// lwz r10,3696(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 3696);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82722720
	if (cr6.eq) goto loc_82722720;
loc_82721414:
	// li r9,1
	ctx.r9.s64 = 1;
	// rldicr r10,r11,0,1
	ctx.r10.u64 = __builtin_rotateleft64(r11.u64, 0) & 0xC000000000000000;
	// rldicr r9,r9,63,63
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u64, 63) & 0xFFFFFFFFFFFFFFFF;
	// cmpld cr6,r10,r9
	cr6.compare<uint64_t>(ctx.r10.u64, ctx.r9.u64, xer);
	// beq cr6,0x8272272c
	if (cr6.eq) goto loc_8272272C;
	// lwz r10,100(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// li r6,16384
	ctx.r6.s64 = 16384;
	// lwz r9,1440(r18)
	ctx.r9.u64 = PPC_LOAD_U32(r18.u32 + 1440);
	// sradi r7,r11,32
	xer.ca = (r11.s64 < 0) & ((r11.u64 & 0xFFFFFFFF) != 0);
	ctx.r7.s64 = r11.s64 >> 32;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// rldimi r6,r6,32,0
	ctx.r6.u64 = (__builtin_rotateleft64(ctx.r6.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r6.u64 & 0xFFFFFFFF);
	// cmpld cr6,r11,r6
	cr6.compare<uint64_t>(r11.u64, ctx.r6.u64, xer);
	// stwx r11,r9,r10
	PPC_STORE_U32(ctx.r9.u32 + ctx.r10.u32, r11.u32);
	// lwz r11,1444(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 1444);
	// stwx r7,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r7.u32);
	// bne cr6,0x82722190
	if (!cr6.eq) goto loc_82722190;
	// lwz r6,420(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 420);
	// lbz r8,28(r18)
	ctx.r8.u64 = PPC_LOAD_U8(r18.u32 + 28);
	// lbz r11,4(r15)
	r11.u64 = PPC_LOAD_U8(r15.u32 + 4);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// lwz r7,92(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r8,1248(r18)
	ctx.r8.u64 = PPC_LOAD_U32(r18.u32 + 1248);
	// lwz r10,4(r6)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r6.u32 + 4);
	// clrlwi r21,r7,31
	r21.u64 = ctx.r7.u32 & 0x1;
	// lbz r16,5(r15)
	r16.u64 = PPC_LOAD_U8(r15.u32 + 5);
	// rlwinm r9,r10,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// lhz r5,50(r18)
	ctx.r5.u64 = PPC_LOAD_U16(r18.u32 + 50);
	// rotlwi r10,r11,2
	ctx.r10.u64 = __builtin_rotateleft32(r11.u32, 2);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lwz r10,220(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 220);
	// neg r4,r21
	ctx.r4.s64 = -r21.s64;
	// stb r16,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r16.u8);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// and r20,r4,r5
	r20.u64 = ctx.r4.u64 & ctx.r5.u64;
	// stw r9,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r9.u32);
	// add r17,r11,r10
	r17.u64 = r11.u64 + ctx.r10.u64;
	// beq cr6,0x827214cc
	if (cr6.eq) goto loc_827214CC;
	// lwz r11,0(r15)
	r11.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// lwz r9,228(r18)
	ctx.r9.u64 = PPC_LOAD_U32(r18.u32 + 228);
	// rlwinm r11,r11,12,28,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 12) & 0xC;
	// lwz r10,232(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 232);
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// add r19,r10,r11
	r19.u64 = ctx.r10.u64 + r11.u64;
	// stw r9,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r9.u32);
	// b 0x827214d8
	goto loc_827214D8;
loc_827214CC:
	// addi r11,r18,236
	r11.s64 = r18.s64 + 236;
	// addi r19,r18,248
	r19.s64 = r18.s64 + 248;
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
loc_827214D8:
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// rlwinm r11,r7,16,0,15
	r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 16) & 0xFFFF0000;
	// lwz r10,32(r6)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r6.u32 + 32);
	// rlwinm r8,r7,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// or r5,r11,r9
	ctx.r5.u64 = r11.u64 | ctx.r9.u64;
	// li r11,0
	r11.s64 = 0;
	// stw r9,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, ctx.r9.u32);
	// stw r5,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r5.u32);
	// lwz r10,32(r6)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r6.u32 + 32);
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// stw r10,32(r6)
	PPC_STORE_U32(ctx.r6.u32 + 32, ctx.r10.u32);
	// lwz r10,1240(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 1240);
	// lhz r6,50(r18)
	ctx.r6.u64 = PPC_LOAD_U16(r18.u32 + 50);
	// mullw r6,r6,r7
	ctx.r6.s64 = int64_t(ctx.r6.s32) * int64_t(ctx.r7.s32);
	// lwzx r10,r10,r8
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r8.u32);
	// addi r8,r10,-1
	ctx.r8.s64 = ctx.r10.s64 + -1;
	// srawi r10,r6,1
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r6.s32 >> 1;
	// and r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 & ctx.r7.u64;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r8,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, ctx.r8.u32);
	// stw r10,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, ctx.r10.u32);
loc_82721530:
	// clrlwi r9,r16,31
	ctx.r9.u64 = r16.u32 & 0x1;
	// rlwinm r10,r11,0,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFC;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r9,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, ctx.r9.u32);
	// bne cr6,0x8272159c
	if (!cr6.eq) goto loc_8272159C;
	// lwz r7,188(r18)
	ctx.r7.u64 = PPC_LOAD_U32(r18.u32 + 188);
	// addi r9,r11,18
	ctx.r9.s64 = r11.s64 + 18;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// lwz r10,264(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 264);
	// rlwinm r8,r21,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(r21.u32 | (r21.u64 << 32), 1) & 0xFFFFFFFE;
	// stw r19,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, r19.u32);
	// or r11,r8,r11
	r11.u64 = ctx.r8.u64 | r11.u64;
	// stw r7,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r7.u32);
	// lwz r7,1160(r18)
	ctx.r7.u64 = PPC_LOAD_U32(r18.u32 + 1160);
	// addi r8,r11,104
	ctx.r8.s64 = r11.s64 + 104;
	// rlwinm r8,r8,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// stw r7,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r7.u32);
	// rlwinm r7,r9,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// add r9,r20,r9
	ctx.r9.u64 = r20.u64 + ctx.r9.u64;
	// lhzx r11,r7,r18
	r11.u64 = PPC_LOAD_U16(ctx.r7.u32 + r18.u32);
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// li r9,119
	ctx.r9.s64 = 119;
	// stw r9,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r9.u32);
	// lhzx r9,r8,r18
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r8.u32 + r18.u32);
	// b 0x827215e0
	goto loc_827215E0;
loc_8272159C:
	// lwz r10,192(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 192);
	// addi r9,r21,102
	ctx.r9.s64 = r21.s64 + 102;
	// lwz r8,84(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// stw r10,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r10.u32);
	// addi r10,r11,63
	ctx.r10.s64 = r11.s64 + 63;
	// lwz r11,1164(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 1164);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lhzx r9,r9,r18
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r9.u32 + r18.u32);
	// stw r11,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r11.u32);
	// srawi r11,r20,1
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x1) != 0);
	r11.s64 = r20.s32 >> 1;
	// lwzx r10,r10,r18
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r18.u32);
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// lwz r8,120(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// stw r8,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r8.u32);
	// li r8,119
	ctx.r8.s64 = 119;
	// stw r8,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r8.u32);
loc_827215E0:
	// rlwinm r11,r11,5,0,26
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 5) & 0xFFFFFFE0;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lwz r10,420(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 420);
	// stw r11,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r11.u32);
	// extsh r11,r9
	r11.s64 = ctx.r9.s16;
	// lwz r9,16(r17)
	ctx.r9.u64 = PPC_LOAD_U32(r17.u32 + 16);
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r11.u32);
	// lwz r11,28(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 28);
	// stw r9,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r9.u32);
	// addi r11,r11,-128
	r11.s64 = r11.s64 + -128;
	// stw r11,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, r11.u32);
	// stw r11,28(r10)
	PPC_STORE_U32(ctx.r10.u32 + 28, r11.u32);
	// dcbzl r0,r11
	memset(base + ((r11.u32) & ~127), 0, 128);
	// li r28,0
	r28.s64 = 0;
	// lwz r10,140(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// lwz r31,0(r18)
	r31.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// lbz r4,8(r10)
	ctx.r4.u64 = PPC_LOAD_U8(ctx.r10.u32 + 8);
	// lwz r29,0(r10)
	r29.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// subfic r10,r4,64
	xer.ca = ctx.r4.u32 <= 64;
	ctx.r10.s64 = 64 - ctx.r4.s64;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r10,r10,32
	ctx.r10.u64 = ctx.r10.u64 & 0xFFFFFFFF;
	// srd r10,r11,r10
	ctx.r10.u64 = ctx.r10.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r10.u8 & 0x7F));
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r10,r29
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + r29.u32);
	// extsh r30,r10
	r30.s64 = ctx.r10.s16;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// blt cr6,0x8272170c
	if (cr6.lt) goto loc_8272170C;
	// clrlwi r10,r30,28
	ctx.r10.u64 = r30.u32 & 0xF;
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpw cr6,r9,r10
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r10.s32, xer);
	// sld r11,r11,r10
	r11.u64 = ctx.r10.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r10.u8 & 0x7F));
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// subf r11,r10,r9
	r11.s64 = ctx.r9.s64 - ctx.r10.s64;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// bge cr6,0x82721704
	if (!cr6.lt) goto loc_82721704;
loc_8272166C:
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// addi r10,r10,-4
	ctx.r10.s64 = ctx.r10.s64 + -4;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x82721698
	if (cr6.lt) goto loc_82721698;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb840
	sub_825EB840(ctx, base);
	// cmplwi cr6,r3,1
	cr6.compare<uint32_t>(ctx.r3.u32, 1, xer);
	// beq cr6,0x8272166c
	if (cr6.eq) goto loc_8272166C;
	// srawi r30,r30,4
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0xF) != 0);
	r30.s64 = r30.s32 >> 4;
	// b 0x82721750
	goto loc_82721750;
loc_82721698:
	// lbz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r4,r11,6
	ctx.r4.s64 = r11.s64 + 6;
	// lbz r9,1(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 1);
	// rldicr r8,r8,8,63
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u64, 8) & 0xFFFFFFFFFFFFFFFF;
	// lbz r5,2(r11)
	ctx.r5.u64 = PPC_LOAD_U8(r11.u32 + 2);
	// lbz r6,3(r11)
	ctx.r6.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// lbz r8,5(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 5);
	// lbz r7,4(r11)
	ctx.r7.u64 = PPC_LOAD_U8(r11.u32 + 4);
	// rldicr r11,r9,8,55
	r11.u64 = __builtin_rotateleft64(ctx.r9.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// ld r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// stw r4,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r4.u32);
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// neg r8,r10
	ctx.r8.s64 = -ctx.r10.s64;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// extsw r8,r8
	ctx.r8.s64 = ctx.r8.s32;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r11,r11,r8
	r11.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
loc_82721704:
	// srawi r30,r30,4
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0xF) != 0);
	r30.s64 = r30.s32 >> 4;
	// b 0x82721750
	goto loc_82721750;
loc_8272170C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
	// lis r11,0
	r11.s64 = 0;
	// ori r27,r11,32768
	r27.u64 = r11.u64 | 32768;
loc_8272171C:
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rldicl r11,r11,1,63
	r11.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// add r30,r11,r30
	r30.u64 = r11.u64 + r30.u64;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
	// add r11,r30,r27
	r11.u64 = r30.u64 + r27.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r11,r29
	r11.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// extsh r30,r11
	r30.s64 = r11.s16;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// blt cr6,0x8272171c
	if (cr6.lt) goto loc_8272171C;
loc_82721750:
	// clrlwi r30,r30,16
	r30.u64 = r30.u32 & 0xFFFF;
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// mr r27,r30
	r27.u64 = r30.u64;
	// cmpw cr6,r27,r11
	cr6.compare<int32_t>(r27.s32, r11.s32, xer);
	// beq cr6,0x827218a0
	if (cr6.eq) goto loc_827218A0;
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x827219c0
	if (cr6.eq) goto loc_827219C0;
	// lwz r11,148(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// bne cr6,0x827217b8
	if (!cr6.eq) goto loc_827217B8;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// addic. r10,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	ctx.r10.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// rldicl r11,r11,1,63
	r11.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// rotlwi r30,r11,0
	r30.u64 = __builtin_rotateleft32(r11.u32, 0);
	// std r9,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r9.u64);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// bge 0x827217a4
	if (!cr0.lt) goto loc_827217A4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_827217A4:
	// rlwinm r11,r27,1,0,30
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// addis r11,r11,1
	r11.s64 = r11.s64 + 65536;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// b 0x8272187c
	goto loc_8272187C;
loc_827217B8:
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// bne cr6,0x82721880
	if (!cr6.eq) goto loc_82721880;
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// li r30,2
	r30.s64 = 2;
	// li r29,0
	r29.s64 = 0;
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// bge cr6,0x82721830
	if (!cr6.lt) goto loc_82721830;
loc_827217D8:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82721830
	if (cr6.eq) goto loc_82721830;
	// subfic r8,r11,64
	xer.ca = r11.u32 <= 64;
	ctx.r8.s64 = 64 - r11.s64;
	// ld r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// subf. r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrldi r8,r8,32
	ctx.r8.u64 = ctx.r8.u64 & 0xFFFFFFFF;
	// subf r30,r11,r30
	r30.s64 = r30.s64 - r11.s64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// srd r8,r10,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r10.u64 >> (ctx.r8.u8 & 0x7F));
	// sld r11,r10,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 << (r11.u8 & 0x7F));
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// slw r11,r10,r30
	r11.u64 = r30.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r30.u8 & 0x3F));
	// add r29,r11,r29
	r29.u64 = r11.u64 + r29.u64;
	// bge 0x82721820
	if (!cr0.lt) goto loc_82721820;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82721820:
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bgt cr6,0x827217d8
	if (cr6.gt) goto loc_827217D8;
loc_82721830:
	// subfic r9,r30,64
	xer.ca = r30.u32 <= 64;
	ctx.r9.s64 = 64 - r30.s64;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r8,r30,32
	ctx.r8.u64 = r30.u64 & 0xFFFFFFFF;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// clrldi r9,r9,32
	ctx.r9.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// subf. r10,r30,r10
	ctx.r10.s64 = ctx.r10.s64 - r30.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r8,r11,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// srd r9,r11,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r9.u8 & 0x7F));
	// rotlwi r11,r9,0
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// add r30,r11,r29
	r30.u64 = r11.u64 + r29.u64;
	// std r8,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r8.u64);
	// bge 0x8272186c
	if (!cr0.lt) goto loc_8272186C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8272186C:
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// addis r11,r11,1
	r11.s64 = r11.s64 + 65536;
	// addi r11,r11,-3
	r11.s64 = r11.s64 + -3;
loc_8272187C:
	// clrlwi r30,r11,16
	r30.u64 = r11.u32 & 0xFFFF;
loc_82721880:
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// rldicl r8,r11,1,63
	ctx.r8.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// addic. r11,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	r11.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// rotlwi r29,r8,0
	r29.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// b 0x8272199c
	goto loc_8272199C;
loc_827218A0:
	// lwz r11,148(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// bgt cr6,0x827218b8
	if (cr6.gt) goto loc_827218B8;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// subfic r11,r11,3
	xer.ca = r11.u32 <= 3;
	r11.s64 = 3 - r11.s64;
	// b 0x827218bc
	goto loc_827218BC;
loc_827218B8:
	// li r11,0
	r11.s64 = 0;
loc_827218BC:
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r30,r11,8
	r30.s64 = r11.s64 + 8;
	// li r29,0
	r29.s64 = 0;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// bne cr6,0x827218dc
	if (!cr6.eq) goto loc_827218DC;
	// li r11,0
	r11.s64 = 0;
	// b 0x8272197c
	goto loc_8272197C;
loc_827218DC:
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// ble cr6,0x8272193c
	if (!cr6.gt) goto loc_8272193C;
loc_827218E4:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272193c
	if (cr6.eq) goto loc_8272193C;
	// subfic r8,r11,64
	xer.ca = r11.u32 <= 64;
	ctx.r8.s64 = 64 - r11.s64;
	// ld r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// subf. r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrldi r8,r8,32
	ctx.r8.u64 = ctx.r8.u64 & 0xFFFFFFFF;
	// subf r30,r11,r30
	r30.s64 = r30.s64 - r11.s64;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// srd r8,r10,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (ctx.r10.u64 >> (ctx.r8.u8 & 0x7F));
	// sld r11,r10,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (ctx.r10.u64 << (r11.u8 & 0x7F));
	// rotlwi r10,r8,0
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
	// slw r11,r10,r30
	r11.u64 = r30.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r30.u8 & 0x3F));
	// add r29,r11,r29
	r29.u64 = r11.u64 + r29.u64;
	// bge 0x8272192c
	if (!cr0.lt) goto loc_8272192C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_8272192C:
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// addi r11,r9,16
	r11.s64 = ctx.r9.s64 + 16;
	// cmplw cr6,r30,r11
	cr6.compare<uint32_t>(r30.u32, r11.u32, xer);
	// bgt cr6,0x827218e4
	if (cr6.gt) goto loc_827218E4;
loc_8272193C:
	// subfic r9,r30,64
	xer.ca = r30.u32 <= 64;
	ctx.r9.s64 = 64 - r30.s64;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// clrldi r8,r30,32
	ctx.r8.u64 = r30.u64 & 0xFFFFFFFF;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// clrldi r9,r9,32
	ctx.r9.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// subf. r10,r30,r10
	ctx.r10.s64 = ctx.r10.s64 - r30.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r8,r11,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// srd r9,r11,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x40 ? 0 : (r11.u64 >> (ctx.r9.u8 & 0x7F));
	// rotlwi r11,r9,0
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// add r30,r11,r29
	r30.u64 = r11.u64 + r29.u64;
	// std r8,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r8.u64);
	// bge 0x82721978
	if (!cr0.lt) goto loc_82721978;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82721978:
	// mr r11,r30
	r11.u64 = r30.u64;
loc_8272197C:
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// clrlwi r30,r11,16
	r30.u64 = r11.u32 & 0xFFFF;
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// addic. r10,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	ctx.r10.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// rldicl r11,r11,1,63
	r11.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// rotlwi r29,r11,0
	r29.u64 = __builtin_rotateleft32(r11.u32, 0);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
loc_8272199C:
	// std r9,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r9.u64);
	// bge 0x827219ac
	if (!cr0.lt) goto loc_827219AC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_827219AC:
	// rlwinm r11,r29,1,0,30
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// extsh r10,r30
	ctx.r10.s64 = r30.s16;
	// subfic r11,r11,1
	xer.ca = r11.u32 <= 1;
	r11.s64 = 1 - r11.s64;
	// mullw r11,r11,r10
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r10.s32);
	// extsh r28,r11
	r28.s64 = r11.s16;
loc_827219C0:
	// lwz r5,172(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// sth r28,0(r5)
	PPC_STORE_U16(ctx.r5.u32 + 0, r28.u16);
	// lwz r11,0(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82722720
	if (!cr6.eq) goto loc_82722720;
	// lwz r11,164(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82721a00
	if (cr6.eq) goto loc_82721A00;
	// lwz r11,136(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// mr r3,r18
	ctx.r3.u64 = r18.u64;
	// lwz r6,276(r18)
	ctx.r6.u64 = PPC_LOAD_U32(r18.u32 + 276);
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// bl 0x826fcd00
	sub_826FCD00(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt cr6,0x82722720
	if (cr6.lt) goto loc_82722720;
loc_82721A00:
	// lwz r15,96(r1)
	r15.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// li r23,1
	r23.s64 = 1;
	// lwz r10,180(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// li r26,0
	r26.s64 = 0;
	// lwz r22,124(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// li r25,0
	r25.s64 = 0;
	// lhz r11,50(r18)
	r11.u64 = PPC_LOAD_U16(r18.u32 + 50);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r6,r22,0,30,30
	ctx.r6.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 0) & 0x2;
	// lwz r9,0(r15)
	ctx.r9.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// rlwinm r27,r11,31,1,31
	r27.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFF;
	// lbz r11,4(r15)
	r11.u64 = PPC_LOAD_U8(r15.u32 + 4);
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// rlwinm r9,r9,0,27,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x18;
	// cntlzw r7,r9
	ctx.r7.u64 = ctx.r9.u32 == 0 ? 32 : __builtin_clz(ctx.r9.u32);
	// lwz r9,128(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// add r8,r10,r9
	ctx.r8.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lwz r10,144(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// rlwinm r24,r7,27,31,31
	r24.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 27) & 0x1;
	// srawi r7,r22,2
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x3) != 0);
	ctx.r7.s64 = r22.s32 >> 2;
	// li r9,0
	ctx.r9.s64 = 0;
	// bne cr6,0x82721a78
	if (!cr6.eq) goto loc_82721A78;
	// lwz r6,156(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// beq cr6,0x82721a8c
	if (cr6.eq) goto loc_82721A8C;
	// rlwinm r6,r27,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r6,r6,r8
	ctx.r6.s64 = ctx.r8.s64 - ctx.r6.s64;
	// lwz r6,0(r6)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r6.u32 + 0);
	// cmpwi cr6,r6,16384
	cr6.compare<int32_t>(ctx.r6.s32, 16384, xer);
	// bne cr6,0x82721a8c
	if (!cr6.eq) goto loc_82721A8C;
loc_82721A78:
	// lwz r9,104(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// li r23,8
	r23.s64 = 8;
	// rlwinm r9,r9,5,0,26
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 5) & 0xFFFFFFE0;
	// subf r26,r9,r10
	r26.s64 = ctx.r10.s64 - ctx.r9.s64;
	// mr r9,r26
	ctx.r9.u64 = r26.u64;
loc_82721A8C:
	// cntlzw r6,r7
	ctx.r6.u64 = ctx.r7.u32 == 0 ? 32 : __builtin_clz(ctx.r7.u32);
	// lwz r31,160(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// rlwinm r6,r6,27,31,31
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 27) & 0x1;
	// and r6,r6,r22
	ctx.r6.u64 = ctx.r6.u64 & r22.u64;
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// bne cr6,0x82721abc
	if (!cr6.eq) goto loc_82721ABC;
	// lwz r6,168(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// beq cr6,0x82721d10
	if (cr6.eq) goto loc_82721D10;
	// lwz r6,-4(r8)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r8.u32 + -4);
	// cmpwi cr6,r6,16384
	cr6.compare<int32_t>(ctx.r6.s32, 16384, xer);
	// bne cr6,0x82721d10
	if (!cr6.eq) goto loc_82721D10;
loc_82721ABC:
	// addi r25,r10,-32
	r25.s64 = ctx.r10.s64 + -32;
	// li r23,1
	r23.s64 = 1;
	// mr r9,r25
	ctx.r9.u64 = r25.u64;
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x82721f38
	if (cr6.eq) goto loc_82721F38;
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x82721d10
	if (cr6.eq) goto loc_82721D10;
	// clrlwi r6,r22,30
	ctx.r6.u64 = r22.u32 & 0x3;
	// li r3,0
	ctx.r3.s64 = 0;
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// beq cr6,0x82721af0
	if (cr6.eq) goto loc_82721AF0;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// beq cr6,0x82721b08
	if (cr6.eq) goto loc_82721B08;
loc_82721AF0:
	// addi r7,r27,1
	ctx.r7.s64 = r27.s64 + 1;
	// rlwinm r7,r7,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r8,r7,r8
	ctx.r8.s64 = ctx.r8.s64 - ctx.r7.s64;
	// lwz r8,0(r8)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// cmpwi cr6,r8,16384
	cr6.compare<int32_t>(ctx.r8.s32, 16384, xer);
	// bne cr6,0x82721b10
	if (!cr6.eq) goto loc_82721B10;
loc_82721B08:
	// lhz r8,-16(r26)
	ctx.r8.u64 = PPC_LOAD_U16(r26.u32 + -16);
	// extsh r3,r8
	ctx.r3.s64 = ctx.r8.s16;
loc_82721B10:
	// lhz r8,16(r26)
	ctx.r8.u64 = PPC_LOAD_U16(r26.u32 + 16);
	// lhz r7,0(r25)
	ctx.r7.u64 = PPC_LOAD_U16(r25.u32 + 0);
	// lbz r6,27(r18)
	ctx.r6.u64 = PPC_LOAD_U8(r18.u32 + 27);
	// extsh r30,r8
	r30.s64 = ctx.r8.s16;
	// extsh r29,r7
	r29.s64 = ctx.r7.s16;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x82721ce0
	if (cr6.eq) goto loc_82721CE0;
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// beq cr6,0x82721c24
	if (cr6.eq) goto loc_82721C24;
	// cmpwi cr6,r22,4
	cr6.compare<int32_t>(r22.s32, 4, xer);
	// beq cr6,0x82721c24
	if (cr6.eq) goto loc_82721C24;
	// cmpwi cr6,r22,5
	cr6.compare<int32_t>(r22.s32, 5, xer);
	// beq cr6,0x82721c24
	if (cr6.eq) goto loc_82721C24;
	// cmpwi cr6,r22,1
	cr6.compare<int32_t>(r22.s32, 1, xer);
	// bne cr6,0x82721bb8
	if (!cr6.eq) goto loc_82721BB8;
	// rlwinm r7,r27,3,0,28
	ctx.r7.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 3) & 0xFFFFFFF8;
	// lwz r8,220(r18)
	ctx.r8.u64 = PPC_LOAD_U32(r18.u32 + 220);
	// rlwinm r6,r11,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r7,r7,r31
	ctx.r7.s64 = r31.s64 - ctx.r7.s64;
	// add r6,r11,r6
	ctx.r6.u64 = r11.u64 + ctx.r6.u64;
	// rlwinm r6,r6,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r7,0(r7)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r7.u32 + 0);
	// add r6,r6,r8
	ctx.r6.u64 = ctx.r6.u64 + ctx.r8.u64;
	// clrlwi r7,r7,26
	ctx.r7.u64 = ctx.r7.u32 & 0x3F;
	// rlwinm r5,r7,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r6,16(r6)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r6.u32 + 16);
	// add r7,r7,r5
	ctx.r7.u64 = ctx.r7.u64 + ctx.r5.u64;
	// rlwinm r4,r6,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r6,r7,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r7,88(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// add r8,r6,r8
	ctx.r8.u64 = ctx.r6.u64 + ctx.r8.u64;
	// lwzx r7,r4,r7
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r4.u32 + ctx.r7.u32);
	// lwz r8,16(r8)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + 16);
	// mullw r6,r8,r30
	ctx.r6.s64 = int64_t(ctx.r8.s32) * int64_t(r30.s32);
	// mullw r8,r7,r8
	ctx.r8.s64 = int64_t(ctx.r7.s32) * int64_t(ctx.r8.s32);
	// mullw r8,r8,r3
	ctx.r8.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r3.s32);
	// mullw r7,r7,r6
	ctx.r7.s64 = int64_t(ctx.r7.s32) * int64_t(ctx.r6.s32);
	// add r8,r8,r14
	ctx.r8.u64 = ctx.r8.u64 + r14.u64;
	// add r7,r7,r14
	ctx.r7.u64 = ctx.r7.u64 + r14.u64;
	// srawi r3,r8,18
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x3FFFF) != 0);
	ctx.r3.s64 = ctx.r8.s32 >> 18;
	// srawi r30,r7,18
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x3FFFF) != 0);
	r30.s64 = ctx.r7.s32 >> 18;
	// b 0x82721ce0
	goto loc_82721CE0;
loc_82721BB8:
	// cmpwi cr6,r22,2
	cr6.compare<int32_t>(r22.s32, 2, xer);
	// bne cr6,0x82721ce0
	if (!cr6.eq) goto loc_82721CE0;
	// rlwinm r6,r11,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r7,-8(r31)
	ctx.r7.u64 = PPC_LOAD_U8(r31.u32 + -8);
	// lwz r8,220(r18)
	ctx.r8.u64 = PPC_LOAD_U32(r18.u32 + 220);
	// add r6,r11,r6
	ctx.r6.u64 = r11.u64 + ctx.r6.u64;
	// clrlwi r7,r7,26
	ctx.r7.u64 = ctx.r7.u32 & 0x3F;
	// rlwinm r5,r6,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r6,r7,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// add r5,r5,r8
	ctx.r5.u64 = ctx.r5.u64 + ctx.r8.u64;
	// add r7,r7,r6
	ctx.r7.u64 = ctx.r7.u64 + ctx.r6.u64;
	// rlwinm r6,r7,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r7,16(r5)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r5.u32 + 16);
	// add r6,r6,r8
	ctx.r6.u64 = ctx.r6.u64 + ctx.r8.u64;
	// lwz r8,88(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// rlwinm r7,r7,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r8,r7,r8
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r7.u32 + ctx.r8.u32);
	// lwz r7,16(r6)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + 16);
	// mullw r6,r7,r29
	ctx.r6.s64 = int64_t(ctx.r7.s32) * int64_t(r29.s32);
	// mullw r7,r8,r7
	ctx.r7.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r7.s32);
	// mullw r7,r7,r3
	ctx.r7.s64 = int64_t(ctx.r7.s32) * int64_t(ctx.r3.s32);
	// mullw r8,r8,r6
	ctx.r8.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r6.s32);
	// add r7,r7,r14
	ctx.r7.u64 = ctx.r7.u64 + r14.u64;
	// add r8,r8,r14
	ctx.r8.u64 = ctx.r8.u64 + r14.u64;
	// srawi r3,r7,18
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x3FFFF) != 0);
	ctx.r3.s64 = ctx.r7.s32 >> 18;
	// srawi r29,r8,18
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x3FFFF) != 0);
	r29.s64 = ctx.r8.s32 >> 18;
	// b 0x82721ce0
	goto loc_82721CE0;
loc_82721C24:
	// rlwinm r7,r27,3,0,28
	ctx.r7.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 3) & 0xFFFFFFF8;
	// lbz r6,-8(r31)
	ctx.r6.u64 = PPC_LOAD_U8(r31.u32 + -8);
	// lwz r8,220(r18)
	ctx.r8.u64 = PPC_LOAD_U32(r18.u32 + 220);
	// rlwinm r4,r11,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r7,r7,r31
	ctx.r7.s64 = r31.s64 - ctx.r7.s64;
	// lwz r15,96(r1)
	r15.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// clrlwi r6,r6,26
	ctx.r6.u64 = ctx.r6.u32 & 0x3F;
	// add r4,r11,r4
	ctx.r4.u64 = r11.u64 + ctx.r4.u64;
	// rlwinm r28,r4,2,0,29
	r28.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r16,0(r7)
	r16.u64 = PPC_LOAD_U8(ctx.r7.u32 + 0);
	// lbz r5,-8(r7)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r7.u32 + -8);
	// rlwinm r7,r6,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r28,r28,r8
	r28.u64 = r28.u64 + ctx.r8.u64;
	// add r7,r6,r7
	ctx.r7.u64 = ctx.r6.u64 + ctx.r7.u64;
	// clrlwi r5,r5,26
	ctx.r5.u64 = ctx.r5.u32 & 0x3F;
	// rlwinm r6,r7,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// clrlwi r4,r16,26
	ctx.r4.u64 = r16.u32 & 0x3F;
	// lbz r16,80(r1)
	r16.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// add r6,r6,r8
	ctx.r6.u64 = ctx.r6.u64 + ctx.r8.u64;
	// lwz r7,16(r28)
	ctx.r7.u64 = PPC_LOAD_U32(r28.u32 + 16);
	// lwz r28,88(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// rlwinm r7,r7,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r6,16(r6)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r6.u32 + 16);
	// mullw r6,r6,r29
	ctx.r6.s64 = int64_t(ctx.r6.s32) * int64_t(r29.s32);
	// lwzx r7,r7,r28
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r7.u32 + r28.u32);
	// rlwinm r29,r5,2,0,29
	r29.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// add r5,r5,r29
	ctx.r5.u64 = ctx.r5.u64 + r29.u64;
	// rlwinm r29,r4,2,0,29
	r29.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r5,r5,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// add r4,r4,r29
	ctx.r4.u64 = ctx.r4.u64 + r29.u64;
	// add r29,r5,r8
	r29.u64 = ctx.r5.u64 + ctx.r8.u64;
	// rlwinm r5,r4,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// add r5,r5,r8
	ctx.r5.u64 = ctx.r5.u64 + ctx.r8.u64;
	// lwz r8,16(r29)
	ctx.r8.u64 = PPC_LOAD_U32(r29.u32 + 16);
	// mullw r4,r7,r8
	ctx.r4.s64 = int64_t(ctx.r7.s32) * int64_t(ctx.r8.s32);
	// lwz r8,16(r5)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r5.u32 + 16);
	// mullw r8,r7,r8
	ctx.r8.s64 = int64_t(ctx.r7.s32) * int64_t(ctx.r8.s32);
	// mullw r5,r4,r3
	ctx.r5.s64 = int64_t(ctx.r4.s32) * int64_t(ctx.r3.s32);
	// mullw r8,r8,r30
	ctx.r8.s64 = int64_t(ctx.r8.s32) * int64_t(r30.s32);
	// mullw r7,r7,r6
	ctx.r7.s64 = int64_t(ctx.r7.s32) * int64_t(ctx.r6.s32);
	// add r6,r5,r14
	ctx.r6.u64 = ctx.r5.u64 + r14.u64;
	// add r8,r8,r14
	ctx.r8.u64 = ctx.r8.u64 + r14.u64;
	// add r7,r7,r14
	ctx.r7.u64 = ctx.r7.u64 + r14.u64;
	// srawi r3,r6,18
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x3FFFF) != 0);
	ctx.r3.s64 = ctx.r6.s32 >> 18;
	// srawi r30,r8,18
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x3FFFF) != 0);
	r30.s64 = ctx.r8.s32 >> 18;
	// srawi r29,r7,18
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x3FFFF) != 0);
	r29.s64 = ctx.r7.s32 >> 18;
	// lis r14,2
	r14.s64 = 131072;
loc_82721CE0:
	// subf r7,r30,r3
	ctx.r7.s64 = ctx.r3.s64 - r30.s64;
	// subf r8,r29,r3
	ctx.r8.s64 = ctx.r3.s64 - r29.s64;
	// srawi r6,r7,31
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x7FFFFFFF) != 0);
	ctx.r6.s64 = ctx.r7.s32 >> 31;
	// srawi r5,r8,31
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = ctx.r8.s32 >> 31;
	// xor r7,r7,r6
	ctx.r7.u64 = ctx.r7.u64 ^ ctx.r6.u64;
	// xor r8,r8,r5
	ctx.r8.u64 = ctx.r8.u64 ^ ctx.r5.u64;
	// subf r7,r6,r7
	ctx.r7.s64 = ctx.r7.s64 - ctx.r6.s64;
	// subf r8,r5,r8
	ctx.r8.s64 = ctx.r8.s64 - ctx.r5.s64;
	// cmpw cr6,r8,r7
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r7.s32, xer);
	// bge cr6,0x82721d10
	if (!cr6.lt) goto loc_82721D10;
	// mr r9,r26
	ctx.r9.u64 = r26.u64;
	// li r23,8
	r23.s64 = 8;
loc_82721D10:
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82721f38
	if (cr6.eq) goto loc_82721F38;
	// lbz r8,27(r18)
	ctx.r8.u64 = PPC_LOAD_U8(r18.u32 + 27);
	// neg r7,r24
	ctx.r7.s64 = -r24.s64;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// or r23,r7,r23
	r23.u64 = ctx.r7.u64 | r23.u64;
	// beq cr6,0x82721f2c
	if (cr6.eq) goto loc_82721F2C;
	// cmplw cr6,r9,r25
	cr6.compare<uint32_t>(ctx.r9.u32, r25.u32, xer);
	// bne cr6,0x82721e2c
	if (!cr6.eq) goto loc_82721E2C;
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// beq cr6,0x82721d7c
	if (cr6.eq) goto loc_82721D7C;
	// cmpwi cr6,r22,2
	cr6.compare<int32_t>(r22.s32, 2, xer);
	// beq cr6,0x82721d7c
	if (cr6.eq) goto loc_82721D7C;
	// cmpwi cr6,r22,4
	cr6.compare<int32_t>(r22.s32, 4, xer);
	// beq cr6,0x82721d7c
	if (cr6.eq) goto loc_82721D7C;
	// cmpwi cr6,r22,5
	cr6.compare<int32_t>(r22.s32, 5, xer);
	// beq cr6,0x82721d7c
	if (cr6.eq) goto loc_82721D7C;
	// addi r11,r1,192
	r11.s64 = ctx.r1.s64 + 192;
	// li r8,16
	ctx.r8.s64 = 16;
	// mtctr r8
	ctr.u64 = ctx.r8.u64;
loc_82721D60:
	// lhz r8,0(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// addi r9,r9,2
	ctx.r9.s64 = ctx.r9.s64 + 2;
	// sth r8,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r8.u16);
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// bdnz 0x82721d60
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82721D60;
	// addi r9,r1,192
	ctx.r9.s64 = ctx.r1.s64 + 192;
	// b 0x82721f38
	goto loc_82721F38;
loc_82721D7C:
	// lbz r8,-8(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + -8);
	// rlwinm r4,r11,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r31,88(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r6,r1,194
	ctx.r6.s64 = ctx.r1.s64 + 194;
	// clrlwi r8,r8,26
	ctx.r8.u64 = ctx.r8.u32 & 0x3F;
	// lwz r5,220(r18)
	ctx.r5.u64 = PPC_LOAD_U32(r18.u32 + 220);
	// lhz r7,0(r9)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// extsh r30,r7
	r30.s64 = ctx.r7.s16;
	// lwzx r3,r4,r31
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r4.u32 + r31.u32);
	// rlwinm r4,r11,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r7,r9,2
	ctx.r7.s64 = ctx.r9.s64 + 2;
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// li r9,15
	ctx.r9.s64 = 15;
	// rlwinm r4,r11,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r11,r8,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// add r4,r4,r5
	ctx.r4.u64 = ctx.r4.u64 + ctx.r5.u64;
	// add r11,r8,r11
	r11.u64 = ctx.r8.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// lwz r4,16(r4)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r4.u32 + 16);
	// rlwinm r5,r4,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// lwzx r5,r5,r31
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r5.u32 + r31.u32);
	// mullw r11,r11,r30
	r11.s64 = int64_t(r11.s32) * int64_t(r30.s32);
	// mullw r11,r5,r11
	r11.s64 = int64_t(ctx.r5.s32) * int64_t(r11.s32);
	// add r11,r11,r14
	r11.u64 = r11.u64 + r14.u64;
	// srawi r11,r11,18
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3FFFF) != 0);
	r11.s64 = r11.s32 >> 18;
	// sth r11,192(r1)
	PPC_STORE_U16(ctx.r1.u32 + 192, r11.u16);
loc_82721DEC:
	// lhz r11,0(r7)
	r11.u64 = PPC_LOAD_U16(ctx.r7.u32 + 0);
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r7,r7,2
	ctx.r7.s64 = ctx.r7.s64 + 2;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// mullw r11,r11,r8
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r8.s32);
	// mullw r11,r3,r11
	r11.s64 = int64_t(ctx.r3.s32) * int64_t(r11.s32);
	// add r11,r11,r14
	r11.u64 = r11.u64 + r14.u64;
	// srawi r11,r11,18
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3FFFF) != 0);
	r11.s64 = r11.s32 >> 18;
	// sth r11,0(r6)
	PPC_STORE_U16(ctx.r6.u32 + 0, r11.u16);
	// addi r6,r6,2
	ctx.r6.s64 = ctx.r6.s64 + 2;
	// bne cr6,0x82721dec
	if (!cr6.eq) goto loc_82721DEC;
	// lhz r11,192(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 192);
	// addi r9,r1,192
	ctx.r9.s64 = ctx.r1.s64 + 192;
	// sth r11,208(r1)
	PPC_STORE_U16(ctx.r1.u32 + 208, r11.u16);
	// b 0x82721f38
	goto loc_82721F38;
loc_82721E2C:
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// beq cr6,0x82721e74
	if (cr6.eq) goto loc_82721E74;
	// cmpwi cr6,r22,1
	cr6.compare<int32_t>(r22.s32, 1, xer);
	// beq cr6,0x82721e74
	if (cr6.eq) goto loc_82721E74;
	// cmpwi cr6,r22,4
	cr6.compare<int32_t>(r22.s32, 4, xer);
	// beq cr6,0x82721e74
	if (cr6.eq) goto loc_82721E74;
	// cmpwi cr6,r22,5
	cr6.compare<int32_t>(r22.s32, 5, xer);
	// beq cr6,0x82721e74
	if (cr6.eq) goto loc_82721E74;
	// addi r11,r1,192
	r11.s64 = ctx.r1.s64 + 192;
	// li r8,16
	ctx.r8.s64 = 16;
	// mtctr r8
	ctr.u64 = ctx.r8.u64;
loc_82721E58:
	// lhz r8,0(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// addi r9,r9,2
	ctx.r9.s64 = ctx.r9.s64 + 2;
	// sth r8,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r8.u16);
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// bdnz 0x82721e58
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82721E58;
	// addi r9,r1,208
	ctx.r9.s64 = ctx.r1.s64 + 208;
	// b 0x82721f38
	goto loc_82721F38;
loc_82721E74:
	// rlwinm r8,r27,3,0,28
	ctx.r8.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 3) & 0xFFFFFFF8;
	// lwz r5,220(r18)
	ctx.r5.u64 = PPC_LOAD_U32(r18.u32 + 220);
	// rlwinm r4,r11,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lhz r7,0(r9)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// subf r8,r8,r31
	ctx.r8.s64 = r31.s64 - ctx.r8.s64;
	// lwz r31,88(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// extsh r30,r7
	r30.s64 = ctx.r7.s16;
	// addi r7,r9,2
	ctx.r7.s64 = ctx.r9.s64 + 2;
	// addi r6,r1,194
	ctx.r6.s64 = ctx.r1.s64 + 194;
	// li r9,15
	ctx.r9.s64 = 15;
	// lwzx r3,r4,r31
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r4.u32 + r31.u32);
	// rlwinm r4,r11,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r8,0(r8)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r8.u32 + 0);
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// clrlwi r8,r8,26
	ctx.r8.u64 = ctx.r8.u32 & 0x3F;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r4,r11,r5
	ctx.r4.u64 = r11.u64 + ctx.r5.u64;
	// rlwinm r11,r8,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r8,r11
	r11.u64 = ctx.r8.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r4,16(r4)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r4.u32 + 16);
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// rlwinm r4,r4,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// lwzx r5,r4,r31
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r4.u32 + r31.u32);
	// mullw r11,r11,r30
	r11.s64 = int64_t(r11.s32) * int64_t(r30.s32);
	// mullw r11,r5,r11
	r11.s64 = int64_t(ctx.r5.s32) * int64_t(r11.s32);
	// add r11,r11,r14
	r11.u64 = r11.u64 + r14.u64;
	// srawi r11,r11,18
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3FFFF) != 0);
	r11.s64 = r11.s32 >> 18;
	// sth r11,192(r1)
	PPC_STORE_U16(ctx.r1.u32 + 192, r11.u16);
loc_82721EEC:
	// lhz r11,0(r7)
	r11.u64 = PPC_LOAD_U16(ctx.r7.u32 + 0);
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r7,r7,2
	ctx.r7.s64 = ctx.r7.s64 + 2;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// mullw r11,r11,r8
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r8.s32);
	// mullw r11,r3,r11
	r11.s64 = int64_t(ctx.r3.s32) * int64_t(r11.s32);
	// add r11,r11,r14
	r11.u64 = r11.u64 + r14.u64;
	// srawi r11,r11,18
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3FFFF) != 0);
	r11.s64 = r11.s32 >> 18;
	// sth r11,0(r6)
	PPC_STORE_U16(ctx.r6.u32 + 0, r11.u16);
	// addi r6,r6,2
	ctx.r6.s64 = ctx.r6.s64 + 2;
	// bne cr6,0x82721eec
	if (!cr6.eq) goto loc_82721EEC;
	// lhz r11,192(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 192);
	// addi r9,r1,208
	ctx.r9.s64 = ctx.r1.s64 + 208;
	// sth r11,208(r1)
	PPC_STORE_U16(ctx.r1.u32 + 208, r11.u16);
	// b 0x82721f38
	goto loc_82721F38;
loc_82721F2C:
	// cmplw cr6,r9,r26
	cr6.compare<uint32_t>(ctx.r9.u32, r26.u32, xer);
	// bne cr6,0x82721f38
	if (!cr6.eq) goto loc_82721F38;
	// addi r9,r9,16
	ctx.r9.s64 = ctx.r9.s64 + 16;
loc_82721F38:
	// lwz r11,420(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 420);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// lwz r11,28(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 28);
	// beq cr6,0x827220e4
	if (cr6.eq) goto loc_827220E4;
	// lhz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// cmpwi cr6,r23,1
	cr6.compare<int32_t>(r23.s32, 1, xer);
	// lhz r7,0(r9)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// sth r8,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r8.u16);
	// sth r8,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r8.u16);
	// sth r8,16(r10)
	PPC_STORE_U16(ctx.r10.u32 + 16, ctx.r8.u16);
	// bne cr6,0x82722018
	if (!cr6.eq) goto loc_82722018;
	// lhz r8,2(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 2);
	// lhz r7,2(r11)
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// sth r8,2(r11)
	PPC_STORE_U16(r11.u32 + 2, ctx.r8.u16);
	// sth r8,2(r10)
	PPC_STORE_U16(ctx.r10.u32 + 2, ctx.r8.u16);
	// lhz r8,4(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 4);
	// lhz r7,4(r11)
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + 4);
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// sth r8,4(r11)
	PPC_STORE_U16(r11.u32 + 4, ctx.r8.u16);
	// sth r8,4(r10)
	PPC_STORE_U16(ctx.r10.u32 + 4, ctx.r8.u16);
	// lhz r8,6(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 6);
	// lhz r7,6(r11)
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + 6);
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// sth r8,6(r11)
	PPC_STORE_U16(r11.u32 + 6, ctx.r8.u16);
	// sth r8,6(r10)
	PPC_STORE_U16(ctx.r10.u32 + 6, ctx.r8.u16);
	// lhz r8,8(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 8);
	// lhz r7,8(r11)
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + 8);
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// sth r8,8(r11)
	PPC_STORE_U16(r11.u32 + 8, ctx.r8.u16);
	// sth r8,8(r10)
	PPC_STORE_U16(ctx.r10.u32 + 8, ctx.r8.u16);
	// lhz r8,10(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 10);
	// lhz r7,10(r11)
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + 10);
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// sth r8,10(r11)
	PPC_STORE_U16(r11.u32 + 10, ctx.r8.u16);
	// sth r8,10(r10)
	PPC_STORE_U16(ctx.r10.u32 + 10, ctx.r8.u16);
	// lhz r8,12(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 12);
	// lhz r7,12(r11)
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + 12);
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// sth r8,12(r11)
	PPC_STORE_U16(r11.u32 + 12, ctx.r8.u16);
	// sth r8,12(r10)
	PPC_STORE_U16(ctx.r10.u32 + 12, ctx.r8.u16);
	// lhz r9,14(r9)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r9.u32 + 14);
	// lhz r8,14(r11)
	ctx.r8.u64 = PPC_LOAD_U16(r11.u32 + 14);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// sth r9,14(r11)
	PPC_STORE_U16(r11.u32 + 14, ctx.r9.u16);
	// sth r9,14(r10)
	PPC_STORE_U16(ctx.r10.u32 + 14, ctx.r9.u16);
	// b 0x82722108
	goto loc_82722108;
loc_82722018:
	// cmpwi cr6,r23,8
	cr6.compare<int32_t>(r23.s32, 8, xer);
	// bne cr6,0x827220f0
	if (!cr6.eq) goto loc_827220F0;
	// lhz r8,2(r11)
	ctx.r8.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r8,2(r10)
	PPC_STORE_U16(ctx.r10.u32 + 2, ctx.r8.u16);
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// stw r8,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r8.u32);
	// ld r8,8(r11)
	ctx.r8.u64 = PPC_LOAD_U64(r11.u32 + 8);
	// std r8,8(r10)
	PPC_STORE_U64(ctx.r10.u32 + 8, ctx.r8.u64);
	// lhz r8,2(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 2);
	// lhz r7,16(r11)
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + 16);
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// sth r8,16(r11)
	PPC_STORE_U16(r11.u32 + 16, ctx.r8.u16);
	// sth r8,18(r10)
	PPC_STORE_U16(ctx.r10.u32 + 18, ctx.r8.u16);
	// lhz r8,4(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 4);
	// lhz r7,32(r11)
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + 32);
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// sth r8,32(r11)
	PPC_STORE_U16(r11.u32 + 32, ctx.r8.u16);
	// sth r8,20(r10)
	PPC_STORE_U16(ctx.r10.u32 + 20, ctx.r8.u16);
	// lhz r8,6(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 6);
	// lhz r7,48(r11)
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + 48);
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// sth r8,48(r11)
	PPC_STORE_U16(r11.u32 + 48, ctx.r8.u16);
	// sth r8,22(r10)
	PPC_STORE_U16(ctx.r10.u32 + 22, ctx.r8.u16);
	// lhz r8,8(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 8);
	// lhz r7,64(r11)
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + 64);
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// sth r8,64(r11)
	PPC_STORE_U16(r11.u32 + 64, ctx.r8.u16);
	// sth r8,24(r10)
	PPC_STORE_U16(ctx.r10.u32 + 24, ctx.r8.u16);
	// lhz r8,10(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 10);
	// lhz r7,80(r11)
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + 80);
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// sth r8,80(r11)
	PPC_STORE_U16(r11.u32 + 80, ctx.r8.u16);
	// sth r8,26(r10)
	PPC_STORE_U16(ctx.r10.u32 + 26, ctx.r8.u16);
	// lhz r8,12(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 12);
	// lhz r7,96(r11)
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + 96);
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// sth r8,96(r11)
	PPC_STORE_U16(r11.u32 + 96, ctx.r8.u16);
	// sth r8,28(r10)
	PPC_STORE_U16(ctx.r10.u32 + 28, ctx.r8.u16);
	// lhz r9,14(r9)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r9.u32 + 14);
	// lhz r8,112(r11)
	ctx.r8.u64 = PPC_LOAD_U16(r11.u32 + 112);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// sth r9,112(r11)
	PPC_STORE_U16(r11.u32 + 112, ctx.r9.u16);
	// sth r9,30(r10)
	PPC_STORE_U16(ctx.r10.u32 + 30, ctx.r9.u16);
	// b 0x82722140
	goto loc_82722140;
loc_827220E4:
	// lhz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// sth r9,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r9.u16);
	// sth r9,16(r10)
	PPC_STORE_U16(ctx.r10.u32 + 16, ctx.r9.u16);
loc_827220F0:
	// lhz r9,2(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r9,2(r10)
	PPC_STORE_U16(ctx.r10.u32 + 2, ctx.r9.u16);
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// ld r9,8(r11)
	ctx.r9.u64 = PPC_LOAD_U64(r11.u32 + 8);
	// std r9,8(r10)
	PPC_STORE_U64(ctx.r10.u32 + 8, ctx.r9.u64);
loc_82722108:
	// lhz r9,16(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 16);
	// sth r9,18(r10)
	PPC_STORE_U16(ctx.r10.u32 + 18, ctx.r9.u16);
	// lhz r9,32(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 32);
	// sth r9,20(r10)
	PPC_STORE_U16(ctx.r10.u32 + 20, ctx.r9.u16);
	// lhz r9,48(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 48);
	// sth r9,22(r10)
	PPC_STORE_U16(ctx.r10.u32 + 22, ctx.r9.u16);
	// lhz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 64);
	// sth r9,24(r10)
	PPC_STORE_U16(ctx.r10.u32 + 24, ctx.r9.u16);
	// lhz r9,80(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 80);
	// sth r9,26(r10)
	PPC_STORE_U16(ctx.r10.u32 + 26, ctx.r9.u16);
	// lhz r9,96(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 96);
	// sth r9,28(r10)
	PPC_STORE_U16(ctx.r10.u32 + 28, ctx.r9.u16);
	// lhz r11,112(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 112);
	// sth r11,30(r10)
	PPC_STORE_U16(ctx.r10.u32 + 30, r11.u16);
loc_82722140:
	// addi r11,r22,1
	r11.s64 = r22.s64 + 1;
	// rlwinm r16,r16,31,25,31
	r16.u64 = __builtin_rotateleft64(r16.u32 | (r16.u64 << 32), 31) & 0x7F;
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// stb r16,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, r16.u8);
	// blt cr6,0x82721530
	if (cr6.lt) goto loc_82721530;
	// lwz r10,0(r15)
	ctx.r10.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// lbz r11,4(r15)
	r11.u64 = PPC_LOAD_U8(r15.u32 + 4);
	// clrlwi r10,r10,1
	ctx.r10.u64 = ctx.r10.u32 & 0x7FFFFFFF;
	// lbz r9,5(r15)
	ctx.r9.u64 = PPC_LOAD_U8(r15.u32 + 5);
	// rldicr r11,r11,8,63
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFFFF;
	// lwz r8,420(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 420);
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// stw r10,0(r15)
	PPC_STORE_U32(r15.u32 + 0, ctx.r10.u32);
	// rldicr r10,r11,48,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u64, 48) & 0xFFFF000000000000;
	// lwz r11,4(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 4);
	// rlwinm r9,r11,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// lwz r11,1248(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 1248);
	// stdx r10,r9,r11
	PPC_STORE_U64(ctx.r9.u32 + r11.u32, ctx.r10.u64);
	// b 0x82722644
	goto loc_82722644;
loc_82722190:
	// lbz r10,29(r18)
	ctx.r10.u64 = PPC_LOAD_U8(r18.u32 + 29);
	// li r24,0
	r24.s64 = 0;
	// lwz r11,0(r15)
	r11.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// lbz r25,34(r18)
	r25.u64 = PPC_LOAD_U8(r18.u32 + 34);
	// mr r28,r10
	r28.u64 = ctx.r10.u64;
	// lbz r20,5(r15)
	r20.u64 = PPC_LOAD_U8(r15.u32 + 5);
	// rlwinm r23,r11,12,30,31
	r23.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 12) & 0x3;
	// rlwinm r19,r11,4,31,31
	r19.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0x1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x827221bc
	if (cr6.eq) goto loc_827221BC;
	// rlwinm r25,r11,8,29,31
	r25.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 8) & 0x7;
loc_827221BC:
	// lbz r10,28(r18)
	ctx.r10.u64 = PPC_LOAD_U8(r18.u32 + 28);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x827221d8
	if (cr6.eq) goto loc_827221D8;
	// lwz r10,228(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 228);
	// rlwinm r11,r11,12,28,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 12) & 0xC;
	// add r22,r11,r10
	r22.u64 = r11.u64 + ctx.r10.u64;
	// b 0x827221dc
	goto loc_827221DC;
loc_827221D8:
	// addi r22,r18,236
	r22.s64 = r18.s64 + 236;
loc_827221DC:
	// lwz r17,420(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 420);
	// li r21,0
	r21.s64 = 0;
loc_827221E4:
	// clrlwi r11,r20,31
	r11.u64 = r20.u32 & 0x1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x827225d8
	if (cr6.eq) goto loc_827225D8;
	// addi r11,r28,-1
	r11.s64 = r28.s64 + -1;
	// and r11,r11,r19
	r11.u64 = r11.u64 & r19.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82722348
	if (cr6.eq) goto loc_82722348;
	// lwz r31,0(r18)
	r31.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// lwz r11,440(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 440);
	// ld r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// lwz r29,0(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rldicl r11,r9,6,58
	r11.u64 = __builtin_rotateleft64(ctx.r9.u64, 6) & 0x3F;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r11,r29
	r11.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// extsh r30,r11
	r30.s64 = r11.s16;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// blt cr6,0x827222e8
	if (cr6.lt) goto loc_827222E8;
	// clrlwi r11,r30,28
	r11.u64 = r30.u32 & 0xF;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// sld r9,r9,r11
	ctx.r9.u64 = r11.u8 & 0x40 ? 0 : (ctx.r9.u64 << (r11.u8 & 0x7F));
	// std r9,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r9.u64);
	// subf r9,r11,r10
	ctx.r9.s64 = ctx.r10.s64 - r11.s64;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// bge cr6,0x827222e0
	if (!cr6.lt) goto loc_827222E0;
loc_82722248:
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// addi r10,r10,-4
	ctx.r10.s64 = ctx.r10.s64 + -4;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x82722274
	if (cr6.lt) goto loc_82722274;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb840
	sub_825EB840(ctx, base);
	// cmplwi cr6,r3,1
	cr6.compare<uint32_t>(ctx.r3.u32, 1, xer);
	// beq cr6,0x82722248
	if (cr6.eq) goto loc_82722248;
	// srawi r30,r30,4
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0xF) != 0);
	r30.s64 = r30.s32 >> 4;
	// b 0x82722328
	goto loc_82722328;
loc_82722274:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r4,r11,6
	ctx.r4.s64 = r11.s64 + 6;
	// lbz r8,1(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 1);
	// rldicr r9,r9,8,63
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u64, 8) & 0xFFFFFFFFFFFFFFFF;
	// lbz r5,2(r11)
	ctx.r5.u64 = PPC_LOAD_U8(r11.u32 + 2);
	// lbz r6,3(r11)
	ctx.r6.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// lbz r8,5(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 5);
	// lbz r7,4(r11)
	ctx.r7.u64 = PPC_LOAD_U8(r11.u32 + 4);
	// rldicr r11,r9,8,55
	r11.u64 = __builtin_rotateleft64(ctx.r9.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// ld r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// stw r4,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r4.u32);
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// neg r8,r10
	ctx.r8.s64 = -ctx.r10.s64;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// extsw r8,r8
	ctx.r8.s64 = ctx.r8.s32;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r11,r11,r8
	r11.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
loc_827222E0:
	// srawi r30,r30,4
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0xF) != 0);
	r30.s64 = r30.s32 >> 4;
	// b 0x82722328
	goto loc_82722328;
loc_827222E8:
	// li r4,6
	ctx.r4.s64 = 6;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
loc_827222F4:
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rldicl r11,r11,1,63
	r11.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// add r30,r11,r30
	r30.u64 = r11.u64 + r30.u64;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
	// add r11,r30,r16
	r11.u64 = r30.u64 + r16.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r11,r29
	r11.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// extsh r30,r11
	r30.s64 = r11.s16;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// blt cr6,0x827222f4
	if (cr6.lt) goto loc_827222F4;
loc_82722328:
	// lwz r11,0(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 20);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82722720
	if (!cr6.eq) goto loc_82722720;
	// add r11,r30,r18
	r11.u64 = r30.u64 + r18.u64;
	// add r10,r30,r18
	ctx.r10.u64 = r30.u64 + r18.u64;
	// lbz r25,516(r11)
	r25.u64 = PPC_LOAD_U8(r11.u32 + 516);
	// lbz r23,524(r10)
	r23.u64 = PPC_LOAD_U8(ctx.r10.u32 + 524);
loc_82722348:
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// bne cr6,0x8272238c
	if (!cr6.eq) goto loc_8272238C;
	// lwz r31,20(r17)
	r31.u64 = PPC_LOAD_U32(r17.u32 + 20);
	// mr r3,r18
	ctx.r3.u64 = r18.u64;
	// lwz r4,0(r22)
	ctx.r4.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// lbz r5,924(r18)
	ctx.r5.u64 = PPC_LOAD_U8(r18.u32 + 924);
	// bl 0x826fc940
	sub_826FC940(ctx, base);
	// rlwinm r11,r3,1,24,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFE;
	// lwz r10,24(r17)
	ctx.r10.u64 = PPC_LOAD_U32(r17.u32 + 24);
	// ori r24,r24,1
	r24.u64 = r24.u64 | 1;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// stw r11,20(r17)
	PPC_STORE_U32(r17.u32 + 20, r11.u32);
	// stb r3,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, ctx.r3.u8);
	// lwz r11,24(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 24);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// b 0x827225d0
	goto loc_827225D0;
loc_8272238C:
	// cmpwi cr6,r25,2
	cr6.compare<int32_t>(r25.s32, 2, xer);
	// bgt cr6,0x82722418
	if (cr6.gt) goto loc_82722418;
	// or r11,r19,r28
	r11.u64 = r19.u64 | r28.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x827223a8
	if (cr6.eq) goto loc_827223A8;
	// mr r11,r23
	r11.u64 = r23.u64;
	// b 0x82722554
	goto loc_82722554;
loc_827223A8:
	// lwz r3,0(r18)
	ctx.r3.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// ld r11,0(r3)
	r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// lwz r10,8(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// rldicl r8,r11,1,63
	ctx.r8.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// addic. r11,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	r11.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// rotlwi r31,r8,0
	r31.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r9,0(r3)
	PPC_STORE_U64(ctx.r3.u32 + 0, ctx.r9.u64);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// bge 0x827223d4
	if (!cr0.lt) goto loc_827223D4;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_827223D4:
	// cmplwi cr6,r31,1
	cr6.compare<uint32_t>(r31.u32, 1, xer);
	// bne cr6,0x82722410
	if (!cr6.eq) goto loc_82722410;
	// lwz r3,0(r18)
	ctx.r3.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// ld r11,0(r3)
	r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// lwz r10,8(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// rldicr r9,r11,1,62
	ctx.r9.u64 = __builtin_rotateleft64(r11.u64, 1) & 0xFFFFFFFFFFFFFFFE;
	// rldicl r8,r11,1,63
	ctx.r8.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// addic. r11,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	r11.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// rotlwi r31,r8,0
	r31.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// std r9,0(r3)
	PPC_STORE_U64(ctx.r3.u32 + 0, ctx.r9.u64);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// bge 0x82722408
	if (!cr0.lt) goto loc_82722408;
	// bl 0x825eb900
	sub_825EB900(ctx, base);
loc_82722408:
	// addi r11,r31,1
	r11.s64 = r31.s64 + 1;
	// b 0x82722554
	goto loc_82722554;
loc_82722410:
	// li r11,3
	r11.s64 = 3;
	// b 0x82722554
	goto loc_82722554;
loc_82722418:
	// lwz r31,0(r18)
	r31.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// lwz r11,444(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 444);
	// ld r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// lwz r29,0(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rldicl r11,r9,6,58
	r11.u64 = __builtin_rotateleft64(ctx.r9.u64, 6) & 0x3F;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r11,r29
	r11.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// extsh r30,r11
	r30.s64 = r11.s16;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// blt cr6,0x82722500
	if (cr6.lt) goto loc_82722500;
	// clrlwi r11,r30,28
	r11.u64 = r30.u32 & 0xF;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// sld r9,r9,r11
	ctx.r9.u64 = r11.u8 & 0x40 ? 0 : (ctx.r9.u64 << (r11.u8 & 0x7F));
	// std r9,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r9.u64);
	// subf r9,r11,r10
	ctx.r9.s64 = ctx.r10.s64 - r11.s64;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// bge cr6,0x827224f8
	if (!cr6.lt) goto loc_827224F8;
loc_82722460:
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// addi r10,r10,-4
	ctx.r10.s64 = ctx.r10.s64 + -4;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x8272248c
	if (cr6.lt) goto loc_8272248C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb840
	sub_825EB840(ctx, base);
	// cmplwi cr6,r3,1
	cr6.compare<uint32_t>(ctx.r3.u32, 1, xer);
	// beq cr6,0x82722460
	if (cr6.eq) goto loc_82722460;
	// srawi r30,r30,4
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0xF) != 0);
	r30.s64 = r30.s32 >> 4;
	// b 0x82722540
	goto loc_82722540;
loc_8272248C:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r4,r11,6
	ctx.r4.s64 = r11.s64 + 6;
	// lbz r8,1(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 1);
	// rldicr r9,r9,8,63
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u64, 8) & 0xFFFFFFFFFFFFFFFF;
	// lbz r5,2(r11)
	ctx.r5.u64 = PPC_LOAD_U8(r11.u32 + 2);
	// lbz r6,3(r11)
	ctx.r6.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// lbz r8,5(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 5);
	// lbz r7,4(r11)
	ctx.r7.u64 = PPC_LOAD_U8(r11.u32 + 4);
	// rldicr r11,r9,8,55
	r11.u64 = __builtin_rotateleft64(ctx.r9.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// ld r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// stw r4,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r4.u32);
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// rldicr r11,r11,8,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// neg r8,r10
	ctx.r8.s64 = -ctx.r10.s64;
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// extsw r8,r8
	ctx.r8.s64 = ctx.r8.s32;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// sld r11,r11,r8
	r11.u64 = ctx.r8.u8 & 0x40 ? 0 : (r11.u64 << (ctx.r8.u8 & 0x7F));
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
loc_827224F8:
	// srawi r30,r30,4
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0xF) != 0);
	r30.s64 = r30.s32 >> 4;
	// b 0x82722540
	goto loc_82722540;
loc_82722500:
	// li r4,6
	ctx.r4.s64 = 6;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
loc_8272250C:
	// ld r11,0(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rldicl r11,r11,1,63
	r11.u64 = __builtin_rotateleft64(r11.u64, 1) & 0x1;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// add r30,r11,r30
	r30.u64 = r11.u64 + r30.u64;
	// bl 0x825eb9d0
	sub_825EB9D0(ctx, base);
	// add r11,r30,r16
	r11.u64 = r30.u64 + r16.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r11,r29
	r11.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// extsh r30,r11
	r30.s64 = r11.s16;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// blt cr6,0x8272250c
	if (cr6.lt) goto loc_8272250C;
loc_82722540:
	// lwz r10,0(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// addi r11,r30,1
	r11.s64 = r30.s64 + 1;
	// lwz r10,20(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 20);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x82722720
	if (!cr6.eq) goto loc_82722720;
loc_82722554:
	// add r9,r11,r18
	ctx.r9.u64 = r11.u64 + r18.u64;
	// lwz r28,24(r17)
	r28.u64 = PPC_LOAD_U32(r17.u32 + 24);
	// rlwinm r10,r25,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 4) & 0xFFFFFFF0;
	// lwz r30,20(r17)
	r30.u64 = PPC_LOAD_U32(r17.u32 + 20);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// lwz r27,0(r22)
	r27.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// add r8,r25,r18
	ctx.r8.u64 = r25.u64 + r18.u64;
	// lbz r29,160(r9)
	r29.u64 = PPC_LOAD_U8(ctx.r9.u32 + 160);
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// li r31,0
	r31.s64 = 0;
	// or r24,r11,r24
	r24.u64 = r11.u64 | r24.u64;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// lbz r26,924(r8)
	r26.u64 = PPC_LOAD_U8(ctx.r8.u32 + 924);
	// ble cr6,0x827225bc
	if (!cr6.gt) goto loc_827225BC;
loc_82722590:
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r18
	ctx.r3.u64 = r18.u64;
	// bl 0x826fc940
	sub_826FC940(ctx, base);
	// stbx r3,r31,r28
	PPC_STORE_U8(r31.u32 + r28.u32, ctx.r3.u8);
	// rlwinm r11,r3,1,24,30
	r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFE;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// add r30,r11,r30
	r30.u64 = r11.u64 + r30.u64;
	// cmpw cr6,r31,r29
	cr6.compare<int32_t>(r31.s32, r29.s32, xer);
	// blt cr6,0x82722590
	if (cr6.lt) goto loc_82722590;
loc_827225BC:
	// cmpwi cr6,r30,-1
	cr6.compare<int32_t>(r30.s32, -1, xer);
	// beq cr6,0x82722720
	if (cr6.eq) goto loc_82722720;
	// lwz r11,24(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 24);
	// stw r30,20(r17)
	PPC_STORE_U32(r17.u32 + 20, r30.u32);
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
loc_827225D0:
	// stw r11,24(r17)
	PPC_STORE_U32(r17.u32 + 24, r11.u32);
	// li r28,0
	r28.s64 = 0;
loc_827225D8:
	// addi r21,r21,1
	r21.s64 = r21.s64 + 1;
	// rlwinm r20,r20,31,25,31
	r20.u64 = __builtin_rotateleft64(r20.u32 | (r20.u64 << 32), 31) & 0x7F;
	// rldicr r24,r24,8,55
	r24.u64 = __builtin_rotateleft64(r24.u64, 8) & 0xFFFFFFFFFFFFFF00;
	// cmpwi cr6,r21,6
	cr6.compare<int32_t>(r21.s32, 6, xer);
	// blt cr6,0x827221e4
	if (cr6.lt) goto loc_827221E4;
	// lwz r10,4(r17)
	ctx.r10.u64 = PPC_LOAD_U32(r17.u32 + 4);
	// rldicl r7,r24,56,8
	ctx.r7.u64 = __builtin_rotateleft64(r24.u64, 56) & 0xFFFFFFFFFFFFFF;
	// lwz r11,0(r15)
	r11.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// rlwinm r5,r10,3,0,28
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// lbz r8,5(r15)
	ctx.r8.u64 = PPC_LOAD_U8(r15.u32 + 5);
	// rlwinm r10,r11,27,29,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x7;
	// lbz r6,4(r15)
	ctx.r6.u64 = PPC_LOAD_U8(r15.u32 + 4);
	// rldicr r4,r11,0,32
	ctx.r4.u64 = __builtin_rotateleft64(r11.u64, 0) & 0xFFFFFFFF80000000;
	// lwz r9,1248(r18)
	ctx.r9.u64 = PPC_LOAD_U32(r18.u32 + 1248);
	// rlwinm r11,r10,6,0,25
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 6) & 0xFFFFFFC0;
	// rlwinm r10,r10,5,19,24
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 5) & 0x1F80;
	// or r11,r11,r8
	r11.u64 = r11.u64 | ctx.r8.u64;
	// lwz r8,420(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 420);
	// or r10,r10,r6
	ctx.r10.u64 = ctx.r10.u64 | ctx.r6.u64;
	// clrldi r11,r11,56
	r11.u64 = r11.u64 & 0xFF;
	// rlwinm r10,r10,8,16,23
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 8) & 0xFF00;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// rldicr r11,r11,32,31
	r11.u64 = __builtin_rotateleft64(r11.u64, 32) & 0xFFFFFFFF00000000;
	// or r11,r11,r4
	r11.u64 = r11.u64 | ctx.r4.u64;
	// rldicr r11,r11,16,47
	r11.u64 = __builtin_rotateleft64(r11.u64, 16) & 0xFFFFFFFFFFFF0000;
	// or r11,r11,r7
	r11.u64 = r11.u64 | ctx.r7.u64;
	// stdx r11,r5,r9
	PPC_STORE_U64(ctx.r5.u32 + ctx.r9.u32, r11.u64);
loc_82722644:
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r15,r15,20
	r15.s64 = r15.s64 + 20;
	// lhz r10,18(r8)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r8.u32 + 18);
	// addi r7,r11,1
	ctx.r7.s64 = r11.s64 + 1;
	// lwz r11,0(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// addi r6,r10,2
	ctx.r6.s64 = ctx.r10.s64 + 2;
	// lwz r9,4(r8)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r8.u32 + 4);
	// addi r5,r11,2
	ctx.r5.s64 = r11.s64 + 2;
	// lwz r11,12(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 12);
	// lwz r10,8(r8)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r8.u32 + 8);
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r15,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r15.u32);
	// addi r10,r10,16
	ctx.r10.s64 = ctx.r10.s64 + 16;
	// stw r7,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r7.u32);
	// sth r6,18(r8)
	PPC_STORE_U16(ctx.r8.u32 + 18, ctx.r6.u16);
	// stw r5,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r5.u32);
	// lwz r5,100(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// stw r11,12(r8)
	PPC_STORE_U32(ctx.r8.u32 + 12, r11.u32);
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// stw r9,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r9.u32);
	// stw r10,8(r8)
	PPC_STORE_U32(ctx.r8.u32 + 8, ctx.r10.u32);
	// cmpw cr6,r7,r11
	cr6.compare<int32_t>(ctx.r7.s32, r11.s32, xer);
	// stw r5,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r5.u32);
	// blt cr6,0x8271fff0
	if (cr6.lt) goto loc_8271FFF0;
	// lwz r29,108(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r28,112(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
loc_827226B4:
	// lwz r9,420(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 420);
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r8,r11,1
	ctx.r8.s64 = r11.s64 + 1;
	// lhz r11,16(r9)
	r11.u64 = PPC_LOAD_U16(ctx.r9.u32 + 16);
	// lwz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// stw r8,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r8.u32);
	// sth r11,16(r9)
	PPC_STORE_U16(ctx.r9.u32 + 16, r11.u16);
	// lhz r11,50(r18)
	r11.u64 = PPC_LOAD_U16(r18.u32 + 50);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r11,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r11.u32);
	// lhz r11,74(r18)
	r11.u64 = PPC_LOAD_U16(r18.u32 + 74);
	// lhz r9,76(r18)
	ctx.r9.u64 = PPC_LOAD_U16(r18.u32 + 76);
	// rotlwi r10,r11,4
	ctx.r10.u64 = __builtin_rotateleft32(r11.u32, 4);
	// rotlwi r11,r9,3
	r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 3);
	// add r29,r10,r29
	r29.u64 = ctx.r10.u64 + r29.u64;
	// add r28,r11,r28
	r28.u64 = r11.u64 + r28.u64;
	// lwz r11,176(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// cmpw cr6,r8,r11
	cr6.compare<int32_t>(ctx.r8.s32, r11.s32, xer);
	// stw r29,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r29.u32);
	// stw r28,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r28.u32);
	// bge cr6,0x82722738
	if (!cr6.lt) goto loc_82722738;
	// lwz r31,420(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 420);
	// rotlwi r25,r8,0
	r25.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// lwz r27,404(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 404);
	// li r26,0
	r26.s64 = 0;
	// b 0x8271fddc
	goto loc_8271FDDC;
loc_82722720:
	// li r3,4
	ctx.r3.s64 = 4;
	// addi r1,r1,384
	ctx.r1.s64 = ctx.r1.s64 + 384;
	// b 0x8239bd10
	return;
loc_8272272C:
	// extsw r3,r11
	ctx.r3.s64 = r11.s32;
	// addi r1,r1,384
	ctx.r1.s64 = ctx.r1.s64 + 384;
	// b 0x8239bd10
	return;
loc_82722738:
	// lwz r11,404(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 404);
	// lis r7,1
	ctx.r7.s64 = 65536;
	// lwz r10,420(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 420);
	// li r6,-1
	ctx.r6.s64 = -1;
	// ori r7,r7,33684
	ctx.r7.u64 = ctx.r7.u64 | 33684;
	// li r3,0
	ctx.r3.s64 = 0;
	// lwz r8,21572(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 21572);
	// lwz r9,32(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 32);
	// subf r9,r8,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r8.s64;
	// rlwinm r9,r9,30,2,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 30) & 0x3FFFFFFF;
	// stwx r9,r11,r7
	PPC_STORE_U32(r11.u32 + ctx.r7.u32, ctx.r9.u32);
	// lwz r10,32(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 32);
	// stw r6,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r6.u32);
	// lwz r9,84(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 84);
	// ld r10,104(r18)
	ctx.r10.u64 = PPC_LOAD_U64(r18.u32 + 104);
	// std r10,0(r9)
	PPC_STORE_U64(ctx.r9.u32 + 0, ctx.r10.u64);
	// lwz r10,84(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 84);
	// lwz r9,112(r18)
	ctx.r9.u64 = PPC_LOAD_U32(r18.u32 + 112);
	// stw r9,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, ctx.r9.u32);
	// lwz r10,84(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 84);
	// lwz r9,116(r18)
	ctx.r9.u64 = PPC_LOAD_U32(r18.u32 + 116);
	// stw r9,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, ctx.r9.u32);
	// lwz r10,84(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 84);
	// lwz r9,120(r18)
	ctx.r9.u64 = PPC_LOAD_U32(r18.u32 + 120);
	// stw r9,16(r10)
	PPC_STORE_U32(ctx.r10.u32 + 16, ctx.r9.u32);
	// lwz r10,84(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 84);
	// lwz r9,124(r18)
	ctx.r9.u64 = PPC_LOAD_U32(r18.u32 + 124);
	// stw r9,20(r10)
	PPC_STORE_U32(ctx.r10.u32 + 20, ctx.r9.u32);
	// lwz r10,84(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 84);
	// lwz r9,128(r18)
	ctx.r9.u64 = PPC_LOAD_U32(r18.u32 + 128);
	// stw r9,24(r10)
	PPC_STORE_U32(ctx.r10.u32 + 24, ctx.r9.u32);
	// lwz r10,84(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 84);
	// lwz r9,132(r18)
	ctx.r9.u64 = PPC_LOAD_U32(r18.u32 + 132);
	// stw r9,28(r10)
	PPC_STORE_U32(ctx.r10.u32 + 28, ctx.r9.u32);
	// lwz r10,84(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 84);
	// lwz r9,136(r18)
	ctx.r9.u64 = PPC_LOAD_U32(r18.u32 + 136);
	// stw r9,32(r10)
	PPC_STORE_U32(ctx.r10.u32 + 32, ctx.r9.u32);
	// lwz r10,84(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 84);
	// lwz r9,140(r18)
	ctx.r9.u64 = PPC_LOAD_U32(r18.u32 + 140);
	// stw r9,36(r10)
	PPC_STORE_U32(ctx.r10.u32 + 36, ctx.r9.u32);
	// lwz r10,84(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 84);
	// lwz r9,144(r18)
	ctx.r9.u64 = PPC_LOAD_U32(r18.u32 + 144);
	// stw r9,40(r10)
	PPC_STORE_U32(ctx.r10.u32 + 40, ctx.r9.u32);
	// lwz r10,84(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 84);
	// lwz r9,148(r18)
	ctx.r9.u64 = PPC_LOAD_U32(r18.u32 + 148);
	// stw r9,44(r10)
	PPC_STORE_U32(ctx.r10.u32 + 44, ctx.r9.u32);
	// lwz r11,84(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 84);
	// lwz r10,152(r18)
	ctx.r10.u64 = PPC_LOAD_U32(r18.u32 + 152);
	// stw r10,48(r11)
	PPC_STORE_U32(r11.u32 + 48, ctx.r10.u32);
loc_827227FC:
	// addi r1,r1,384
	ctx.r1.s64 = ctx.r1.s64 + 384;
	// b 0x8239bd10
	return;
}

__attribute__((alias("__imp__sub_82722A00"))) PPC_WEAK_FUNC(sub_82722A00);
PPC_FUNC_IMPL(__imp__sub_82722A00) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcf8
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lhz r11,52(r3)
	r11.u64 = PPC_LOAD_U16(ctx.r3.u32 + 52);
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lhz r10,50(r3)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r3.u32 + 50);
	// li r4,0
	ctx.r4.s64 = 0;
	// rlwinm r29,r11,31,1,31
	r29.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFF;
	// lwz r31,1256(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1256);
	// rlwinm r28,r10,31,1,31
	r28.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mullw r11,r28,r29
	r11.s64 = int64_t(r28.s32) * int64_t(r29.s32);
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r5,r11,1,0,30
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// bl 0x8239cd50
	sub_8239CD50(ctx, base);
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x82722a8c
	if (cr6.eq) goto loc_82722A8C;
loc_82722A48:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x82722a80
	if (cr6.eq) goto loc_82722A80;
	// mr r11,r28
	r11.u64 = r28.u64;
loc_82722A54:
	// mr r9,r30
	ctx.r9.u64 = r30.u64;
	// lbz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 0);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// addi r30,r30,20
	r30.s64 = r30.s64 + 20;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lhz r9,0(r9)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// rotlwi r9,r9,7
	ctx.r9.u64 = __builtin_rotateleft32(ctx.r9.u32, 7);
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// stb r10,0(r31)
	PPC_STORE_U8(r31.u32 + 0, ctx.r10.u8);
	// addi r31,r31,6
	r31.s64 = r31.s64 + 6;
	// bne cr6,0x82722a54
	if (!cr6.eq) goto loc_82722A54;
loc_82722A80:
	// addi r29,r29,-1
	r29.s64 = r29.s64 + -1;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x82722a48
	if (!cr6.eq) goto loc_82722A48;
loc_82722A8C:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x8239bd48
	return;
}

__attribute__((alias("__imp__sub_82722A94"))) PPC_WEAK_FUNC(sub_82722A94);
PPC_FUNC_IMPL(__imp__sub_82722A94) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_82722A98"))) PPC_WEAK_FUNC(sub_82722A98);
PPC_FUNC_IMPL(__imp__sub_82722A98) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcf0
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lhz r11,52(r3)
	r11.u64 = PPC_LOAD_U16(ctx.r3.u32 + 52);
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// lhz r10,50(r3)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r3.u32 + 50);
	// li r4,0
	ctx.r4.s64 = 0;
	// rlwinm r29,r11,31,1,31
	r29.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFF;
	// lwz r30,1256(r3)
	r30.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1256);
	// rlwinm r28,r10,31,1,31
	r28.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// mullw r11,r28,r29
	r11.s64 = int64_t(r28.s32) * int64_t(r29.s32);
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r5,r11,1,0,30
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// bl 0x8239cd50
	sub_8239CD50(ctx, base);
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x82722bbc
	if (cr6.eq) goto loc_82722BBC;
	// lis r11,-32138
	r11.s64 = -2106195968;
	// addi r11,r11,14320
	r11.s64 = r11.s64 + 14320;
loc_82722AE8:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x82722bb0
	if (cr6.eq) goto loc_82722BB0;
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
loc_82722AF4:
	// lbz r9,9(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 9);
	// addi r8,r11,-56
	ctx.r8.s64 = r11.s64 + -56;
	// lbz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 8);
	// addi r7,r11,-56
	ctx.r7.s64 = r11.s64 + -56;
	// rotlwi r9,r9,3
	ctx.r9.u64 = __builtin_rotateleft32(ctx.r9.u32, 3);
	// lbz r27,7(r31)
	r27.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// lbz r26,6(r31)
	r26.u64 = PPC_LOAD_U8(r31.u32 + 6);
	// addi r6,r11,-16
	ctx.r6.s64 = r11.s64 + -16;
	// or r9,r9,r3
	ctx.r9.u64 = ctx.r9.u64 | ctx.r3.u64;
	// rotlwi r3,r27,3
	ctx.r3.u64 = __builtin_rotateleft32(r27.u32, 3);
	// addi r5,r11,-16
	ctx.r5.s64 = r11.s64 + -16;
	// or r3,r3,r26
	ctx.r3.u64 = ctx.r3.u64 | r26.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// lbzx r8,r3,r8
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r3.u32 + ctx.r8.u32);
	// stb r8,0(r30)
	PPC_STORE_U8(r30.u32 + 0, ctx.r8.u8);
	// clrlwi r8,r8,24
	ctx.r8.u64 = ctx.r8.u32 & 0xFF;
	// lbzx r9,r9,r7
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r9.u32 + ctx.r7.u32);
	// stb r9,1(r30)
	PPC_STORE_U8(r30.u32 + 1, ctx.r9.u8);
	// lbz r9,9(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 9);
	// lbz r7,7(r31)
	ctx.r7.u64 = PPC_LOAD_U8(r31.u32 + 7);
	// rlwinm r9,r9,1,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFC;
	// lbz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 8);
	// rlwinm r7,r7,31,1,31
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 31) & 0x7FFFFFFF;
	// lbz r27,6(r31)
	r27.u64 = PPC_LOAD_U8(r31.u32 + 6);
	// rlwinm r3,r3,1,0,29
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFC;
	// or r9,r9,r7
	ctx.r9.u64 = ctx.r9.u64 | ctx.r7.u64;
	// rlwinm r7,r27,31,1,31
	ctx.r7.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 31) & 0x7FFFFFFF;
	// or r7,r3,r7
	ctx.r7.u64 = ctx.r3.u64 | ctx.r7.u64;
	// lbzx r7,r7,r6
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r7.u32 + ctx.r6.u32);
	// stb r7,2(r30)
	PPC_STORE_U8(r30.u32 + 2, ctx.r7.u8);
	// lbzx r9,r9,r5
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r9.u32 + ctx.r5.u32);
	// stb r9,3(r30)
	PPC_STORE_U8(r30.u32 + 3, ctx.r9.u8);
	// lbz r9,10(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 10);
	// lbzx r9,r9,r11
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r9.u32 + r11.u32);
	// stb r9,4(r30)
	PPC_STORE_U8(r30.u32 + 4, ctx.r9.u8);
	// lbz r9,11(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 11);
	// addi r31,r31,20
	r31.s64 = r31.s64 + 20;
	// lbzx r9,r9,r11
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r9.u32 + r11.u32);
	// stb r9,5(r30)
	PPC_STORE_U8(r30.u32 + 5, ctx.r9.u8);
	// lhz r9,0(r4)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r4.u32 + 0);
	// rotlwi r9,r9,7
	ctx.r9.u64 = __builtin_rotateleft32(ctx.r9.u32, 7);
	// or r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 | ctx.r8.u64;
	// stb r9,0(r30)
	PPC_STORE_U8(r30.u32 + 0, ctx.r9.u8);
	// addi r30,r30,6
	r30.s64 = r30.s64 + 6;
	// bne cr6,0x82722af4
	if (!cr6.eq) goto loc_82722AF4;
loc_82722BB0:
	// addi r29,r29,-1
	r29.s64 = r29.s64 + -1;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x82722ae8
	if (!cr6.eq) goto loc_82722AE8;
loc_82722BBC:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x8239bd40
	return;
}

__attribute__((alias("__imp__sub_82722BC4"))) PPC_WEAK_FUNC(sub_82722BC4);
PPC_FUNC_IMPL(__imp__sub_82722BC4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_82722BC8"))) PPC_WEAK_FUNC(sub_82722BC8);
PPC_FUNC_IMPL(__imp__sub_82722BC8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcc0
	// stwu r1,-272(r1)
	ea = -272 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// stw r5,308(r1)
	PPC_STORE_U32(ctx.r1.u32 + 308, ctx.r5.u32);
	// mr r3,r7
	ctx.r3.u64 = ctx.r7.u64;
	// stw r6,316(r1)
	PPC_STORE_U32(ctx.r1.u32 + 316, ctx.r6.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// lwz r9,136(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 136);
	// lwz r10,208(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 208);
	// rlwinm r5,r9,1,0,30
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r11,204(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 204);
	// rlwinm r7,r10,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// stw r3,324(r1)
	PPC_STORE_U32(ctx.r1.u32 + 324, ctx.r3.u32);
	// add r5,r9,r5
	ctx.r5.u64 = ctx.r9.u64 + ctx.r5.u64;
	// lwz r21,3920(r31)
	r21.u64 = PPC_LOAD_U32(r31.u32 + 3920);
	// add r7,r10,r7
	ctx.r7.u64 = ctx.r10.u64 + ctx.r7.u64;
	// rlwinm r5,r5,1,0,30
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r6,r11,1,0,30
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r6,r11,r6
	ctx.r6.u64 = r11.u64 + ctx.r6.u64;
	// add r8,r11,r8
	ctx.r8.u64 = r11.u64 + ctx.r8.u64;
	// stw r5,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r5.u32);
	// rlwinm r5,r10,1,0,30
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// rlwinm r29,r11,1,0,30
	r29.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r19,r11,3,0,28
	r19.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// rlwinm r14,r11,4,0,27
	r14.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// stw r5,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r5.u32);
	// rlwinm r23,r8,2,0,29
	r23.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// stw r10,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r10.u32);
	// rlwinm r10,r6,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// stw r10,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r10.u32);
	// rlwinm r10,r7,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// stw r10,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r10.u32);
	// beq cr6,0x82722c6c
	if (cr6.eq) goto loc_82722C6C;
	// rotlwi r28,r11,0
	r28.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lwz r11,208(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 208);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// li r11,17
	r11.s64 = 17;
	// b 0x82722c78
	goto loc_82722C78;
loc_82722C6C:
	// li r28,0
	r28.s64 = 0;
	// li r11,1
	r11.s64 = 1;
	// stw r28,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r28.u32);
loc_82722C78:
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r11.u32);
	// lwz r11,140(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 140);
	// stw r4,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r4.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// beq cr6,0x82723034
	if (cr6.eq) goto loc_82723034;
	// stw r10,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r10.u32);
	// b 0x82722ca4
	goto loc_82722CA4;
loc_82722C9C:
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r4,100(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
loc_82722CA4:
	// lwz r8,21236(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 21236);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// beq cr6,0x82722ce4
	if (cr6.eq) goto loc_82722CE4;
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// bge cr6,0x82722cdc
	if (!cr6.lt) goto loc_82722CDC;
	// lwz r11,21268(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 21268);
	// lwz r8,96(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 4);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82722cdc
	if (!cr6.eq) goto loc_82722CDC;
	// li r20,0
	r20.s64 = 0;
	// b 0x82722cf0
	goto loc_82722CF0;
loc_82722CDC:
	// li r20,1
	r20.s64 = 1;
	// b 0x82722cf0
	goto loc_82722CF0;
loc_82722CE4:
	// subfc r11,r11,r10
	xer.ca = ctx.r10.u32 >= r11.u32;
	r11.s64 = ctx.r10.s64 - r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// addi r20,r11,1
	r20.s64 = r11.s64 + 1;
loc_82722CF0:
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// li r17,0
	r17.s64 = 0;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82723008
	if (cr6.eq) goto loc_82723008;
	// add r11,r4,r28
	r11.u64 = ctx.r4.u64 + r28.u64;
	// addi r16,r3,-2
	r16.s64 = ctx.r3.s64 + -2;
	// addi r18,r11,3
	r18.s64 = r11.s64 + 3;
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// addi r15,r11,-2
	r15.s64 = r11.s64 + -2;
loc_82722D14:
	// add r11,r15,r21
	r11.u64 = r15.u64 + r21.u64;
	// lbz r10,0(r21)
	ctx.r10.u64 = PPC_LOAD_U8(r21.u32 + 0);
	// add r9,r16,r21
	ctx.r9.u64 = r16.u64 + r21.u64;
	// lbz r8,1(r21)
	ctx.r8.u64 = PPC_LOAD_U8(r21.u32 + 1);
	// rlwinm r10,r10,0,0,24
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFF80;
	// lbz r7,2(r21)
	ctx.r7.u64 = PPC_LOAD_U8(r21.u32 + 2);
	// lbz r6,3(r21)
	ctx.r6.u64 = PPC_LOAD_U8(r21.u32 + 3);
	// extsb r27,r8
	r27.s64 = ctx.r8.s8;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// lbz r11,2(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 2);
	// extsb r24,r7
	r24.s64 = ctx.r7.s8;
	// lbz r9,2(r9)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r9.u32 + 2);
	// extsb r22,r6
	r22.s64 = ctx.r6.s8;
	// rlwinm r25,r11,0,0,24
	r25.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFF80;
	// clrlwi r10,r9,25
	ctx.r10.u64 = ctx.r9.u32 & 0x7F;
	// clrlwi r26,r11,25
	r26.u64 = r11.u32 & 0x7F;
	// bne cr6,0x82722ea4
	if (!cr6.eq) goto loc_82722EA4;
	// add r11,r30,r28
	r11.u64 = r30.u64 + r28.u64;
	// lwz r5,248(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 248);
	// li r6,16
	ctx.r6.s64 = 16;
	// add r3,r11,r19
	ctx.r3.u64 = r11.u64 + r19.u64;
	// lwz r11,15864(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15864);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r20,0
	cr6.compare<int32_t>(r20.s32, 0, xer);
	// bne cr6,0x82722e0c
	if (!cr6.eq) goto loc_82722E0C;
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x82722db4
	if (cr6.eq) goto loc_82722DB4;
	// rlwinm r11,r27,31,1,28
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 31) & 0x7FFFFFF8;
	// lwz r9,112(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lwz r5,248(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 248);
	// rlwinm r6,r27,3,25,28
	ctx.r6.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 3) & 0x78;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// lwz r10,15864(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 15864);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// add r3,r11,r9
	ctx.r3.u64 = r11.u64 + ctx.r9.u64;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82722DB4:
	// add r11,r30,r28
	r11.u64 = r30.u64 + r28.u64;
	// lwz r5,248(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 248);
	// lwz r10,15864(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 15864);
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// add r3,r11,r14
	ctx.r3.u64 = r11.u64 + r14.u64;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// bne cr6,0x82722e0c
	if (!cr6.eq) goto loc_82722E0C;
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x82722e0c
	if (cr6.eq) goto loc_82722E0C;
	// rlwinm r11,r26,31,1,28
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 31) & 0x7FFFFFF8;
	// lwz r5,248(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 248);
	// lwz r10,15864(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 15864);
	// rlwinm r6,r26,3,25,28
	ctx.r6.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 3) & 0x78;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// add r3,r11,r23
	ctx.r3.u64 = r11.u64 + r23.u64;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82722E0C:
	// cmplwi cr6,r17,0
	cr6.compare<uint32_t>(r17.u32, 0, xer);
	// beq cr6,0x82722e34
	if (cr6.eq) goto loc_82722E34;
	// add r11,r30,r28
	r11.u64 = r30.u64 + r28.u64;
	// lwz r5,248(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 248);
	// lwz r10,15868(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 15868);
	// li r6,8
	ctx.r6.s64 = 8;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// addi r3,r11,-5
	ctx.r3.s64 = r11.s64 + -5;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82722E34:
	// cmplwi cr6,r24,0
	cr6.compare<uint32_t>(r24.u32, 0, xer);
	// beq cr6,0x82722e68
	if (cr6.eq) goto loc_82722E68;
	// rlwinm r11,r24,28,4,31
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 28) & 0xFFFFFFF;
	// lwz r5,248(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 248);
	// lwz r10,15868(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 15868);
	// rlwinm r6,r24,2,26,29
	ctx.r6.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 2) & 0x3C;
	// mullw r11,r11,r19
	r11.s64 = int64_t(r11.s32) * int64_t(r19.s32);
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// addi r3,r11,-1
	ctx.r3.s64 = r11.s64 + -1;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82722E68:
	// lwz r5,248(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 248);
	// li r6,8
	ctx.r6.s64 = 8;
	// lwz r11,15868(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15868);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r18
	ctx.r3.u64 = r18.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r22,0
	cr6.compare<uint32_t>(r22.u32, 0, xer);
	// beq cr6,0x82722fe0
	if (cr6.eq) goto loc_82722FE0;
	// rlwinm r11,r22,28,4,31
	r11.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 28) & 0xFFFFFFF;
	// rlwinm r6,r22,2,26,29
	ctx.r6.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 2) & 0x3C;
	// mullw r11,r11,r19
	r11.s64 = int64_t(r11.s32) * int64_t(r19.s32);
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// b 0x82722fc8
	goto loc_82722FC8;
loc_82722EA4:
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82722ed4
	if (cr6.eq) goto loc_82722ED4;
	// rlwinm r11,r10,31,1,28
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFF8;
	// lwz r5,248(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 248);
	// rlwinm r6,r10,3,25,28
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0x78;
	// lwz r10,15864(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 15864);
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// add r3,r11,r19
	ctx.r3.u64 = r11.u64 + r19.u64;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82722ED4:
	// cmpwi cr6,r20,0
	cr6.compare<int32_t>(r20.s32, 0, xer);
	// bne cr6,0x82722f34
	if (!cr6.eq) goto loc_82722F34;
	// add r11,r30,r28
	r11.u64 = r30.u64 + r28.u64;
	// lwz r5,248(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 248);
	// li r6,16
	ctx.r6.s64 = 16;
	// add r3,r11,r14
	ctx.r3.u64 = r11.u64 + r14.u64;
	// lwz r11,15864(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15864);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// bne cr6,0x82722f34
	if (!cr6.eq) goto loc_82722F34;
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x82722f34
	if (cr6.eq) goto loc_82722F34;
	// rlwinm r11,r26,31,1,28
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 31) & 0x7FFFFFF8;
	// lwz r5,248(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 248);
	// lwz r10,15864(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 15864);
	// rlwinm r6,r26,3,25,28
	ctx.r6.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 3) & 0x78;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// add r3,r11,r23
	ctx.r3.u64 = r11.u64 + r23.u64;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82722F34:
	// cmplwi cr6,r17,0
	cr6.compare<uint32_t>(r17.u32, 0, xer);
	// beq cr6,0x82722f5c
	if (cr6.eq) goto loc_82722F5C;
	// add r11,r30,r28
	r11.u64 = r30.u64 + r28.u64;
	// lwz r5,248(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 248);
	// lwz r10,15868(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 15868);
	// li r6,8
	ctx.r6.s64 = 8;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// addi r3,r11,-5
	ctx.r3.s64 = r11.s64 + -5;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82722F5C:
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplw cr6,r24,r11
	cr6.compare<uint32_t>(r24.u32, r11.u32, xer);
	// beq cr6,0x82722f70
	if (cr6.eq) goto loc_82722F70;
	// cmplwi cr6,r24,2
	cr6.compare<uint32_t>(r24.u32, 2, xer);
	// bne cr6,0x82722f90
	if (!cr6.eq) goto loc_82722F90;
loc_82722F70:
	// add r11,r30,r28
	r11.u64 = r30.u64 + r28.u64;
	// lwz r5,248(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 248);
	// lwz r10,15868(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 15868);
	// li r6,8
	ctx.r6.s64 = 8;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// addi r3,r11,-1
	ctx.r3.s64 = r11.s64 + -1;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82722F90:
	// lwz r5,248(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 248);
	// li r6,8
	ctx.r6.s64 = 8;
	// lwz r11,15868(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15868);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r18
	ctx.r3.u64 = r18.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplw cr6,r22,r11
	cr6.compare<uint32_t>(r22.u32, r11.u32, xer);
	// beq cr6,0x82722fc0
	if (cr6.eq) goto loc_82722FC0;
	// cmplwi cr6,r22,2
	cr6.compare<uint32_t>(r22.u32, 2, xer);
	// bne cr6,0x82722fe0
	if (!cr6.eq) goto loc_82722FE0;
loc_82722FC0:
	// add r11,r30,r28
	r11.u64 = r30.u64 + r28.u64;
	// li r6,8
	ctx.r6.s64 = 8;
loc_82722FC8:
	// lwz r10,15868(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 15868);
	// addi r3,r11,7
	ctx.r3.s64 = r11.s64 + 7;
	// lwz r5,248(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 248);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82722FE0:
	// lwz r9,136(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 136);
	// addi r17,r17,1
	r17.s64 = r17.s64 + 1;
	// addi r21,r21,6
	r21.s64 = r21.s64 + 6;
	// addi r30,r30,16
	r30.s64 = r30.s64 + 16;
	// addi r18,r18,16
	r18.s64 = r18.s64 + 16;
	// cmplw cr6,r17,r9
	cr6.compare<uint32_t>(r17.u32, ctx.r9.u32, xer);
	// blt cr6,0x82722d14
	if (cr6.lt) goto loc_82722D14;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r4,100(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r3,324(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 324);
loc_82723008:
	// addi r8,r10,1
	ctx.r8.s64 = ctx.r10.s64 + 1;
	// lwz r7,96(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r10,228(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 228);
	// addi r7,r7,4
	ctx.r7.s64 = ctx.r7.s64 + 4;
	// lwz r11,140(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 140);
	// add r10,r10,r4
	ctx.r10.u64 = ctx.r10.u64 + ctx.r4.u64;
	// cmplw cr6,r8,r11
	cr6.compare<uint32_t>(ctx.r8.u32, r11.u32, xer);
	// stw r8,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r8.u32);
	// stw r7,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r7.u32);
	// stw r10,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r10.u32);
	// blt cr6,0x82722c9c
	if (cr6.lt) goto loc_82722C9C;
loc_82723034:
	// lwz r11,140(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 140);
	// li r26,0
	r26.s64 = 0;
	// lwz r23,308(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 308);
	// lwz r25,3920(r31)
	r25.u64 = PPC_LOAD_U32(r31.u32 + 3920);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r20,316(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 316);
	// beq cr6,0x827232c4
	if (cr6.eq) goto loc_827232C4;
	// li r21,0
	r21.s64 = 0;
loc_82723054:
	// lwz r10,21236(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 21236);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// addi r10,r11,-1
	ctx.r10.s64 = r11.s64 + -1;
	// beq cr6,0x827230b4
	if (cr6.eq) goto loc_827230B4;
	// cmplw cr6,r26,r10
	cr6.compare<uint32_t>(r26.u32, ctx.r10.u32, xer);
	// bge cr6,0x827230a8
	if (!cr6.lt) goto loc_827230A8;
	// lwz r10,21268(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 21268);
	// add r9,r10,r21
	ctx.r9.u64 = ctx.r10.u64 + r21.u64;
	// lwz r9,4(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne cr6,0x827230a8
	if (!cr6.eq) goto loc_827230A8;
	// addi r11,r11,-2
	r11.s64 = r11.s64 + -2;
	// li r22,0
	r22.s64 = 0;
	// cmplw cr6,r26,r11
	cr6.compare<uint32_t>(r26.u32, r11.u32, xer);
	// bge cr6,0x827230ac
	if (!cr6.lt) goto loc_827230AC;
	// add r11,r10,r21
	r11.u64 = ctx.r10.u64 + r21.u64;
	// lwz r11,8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 8);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x827230ac
	if (!cr6.eq) goto loc_827230AC;
	// li r24,0
	r24.s64 = 0;
	// b 0x827230d0
	goto loc_827230D0;
loc_827230A8:
	// li r22,1
	r22.s64 = 1;
loc_827230AC:
	// li r24,1
	r24.s64 = 1;
	// b 0x827230d0
	goto loc_827230D0;
loc_827230B4:
	// addi r9,r11,-2
	ctx.r9.s64 = r11.s64 + -2;
	// subfc r11,r10,r26
	xer.ca = r26.u32 >= ctx.r10.u32;
	r11.s64 = r26.s64 - ctx.r10.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// subfc r10,r9,r26
	xer.ca = r26.u32 >= ctx.r9.u32;
	ctx.r10.s64 = r26.s64 - ctx.r9.s64;
	// addi r22,r11,1
	r22.s64 = r11.s64 + 1;
	// subfe r11,r10,r10
	temp.u8 = (~ctx.r10.u32 + ctx.r10.u32 < ~ctx.r10.u32) | (~ctx.r10.u32 + ctx.r10.u32 + xer.ca < xer.ca);
	r11.u64 = ~ctx.r10.u64 + ctx.r10.u64 + xer.ca;
	xer.ca = temp.u8;
	// addi r24,r11,1
	r24.s64 = r11.s64 + 1;
loc_827230D0:
	// lwz r11,136(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 136);
	// mr r30,r23
	r30.u64 = r23.u64;
	// li r27,0
	r27.s64 = 0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// ble cr6,0x827232a4
	if (!cr6.gt) goto loc_827232A4;
	// subf r28,r23,r20
	r28.s64 = r20.s64 - r23.s64;
loc_827230E8:
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// bne cr6,0x82723138
	if (!cr6.eq) goto loc_82723138;
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r6,8
	ctx.r6.s64 = 8;
	// lwz r10,116(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// add r29,r11,r10
	r29.u64 = r11.u64 + ctx.r10.u64;
	// lwz r5,248(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 248);
	// lwz r11,15864(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15864);
	// add r3,r29,r30
	ctx.r3.u64 = r29.u64 + r30.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// add r11,r29,r30
	r11.u64 = r29.u64 + r30.u64;
	// lwz r5,248(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 248);
	// li r6,8
	ctx.r6.s64 = 8;
	// lwz r10,15864(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 15864);
	// add r3,r11,r28
	ctx.r3.u64 = r11.u64 + r28.u64;
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82723138:
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// bne cr6,0x827231d4
	if (!cr6.eq) goto loc_827231D4;
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// add r11,r11,r25
	r11.u64 = r11.u64 + r25.u64;
	// lbz r11,4(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 4);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// rlwinm r11,r11,0,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF0;
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82723188
	if (cr6.eq) goto loc_82723188;
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r6,8
	ctx.r6.s64 = 8;
	// lwz r9,108(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// lwz r5,248(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 248);
	// lwz r10,15864(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 15864);
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// add r3,r11,r9
	ctx.r3.u64 = r11.u64 + ctx.r9.u64;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82723188:
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// add r11,r11,r25
	r11.u64 = r11.u64 + r25.u64;
	// lbz r11,5(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 5);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// rlwinm r11,r11,0,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF0;
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x827231d4
	if (cr6.eq) goto loc_827231D4;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// add r11,r30,r28
	r11.u64 = r30.u64 + r28.u64;
	// lwz r9,108(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// li r6,8
	ctx.r6.s64 = 8;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lwz r5,248(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 248);
	// lwz r10,15864(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 15864);
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// add r3,r11,r9
	ctx.r3.u64 = r11.u64 + ctx.r9.u64;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_827231D4:
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x82723220
	if (cr6.eq) goto loc_82723220;
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r6,4
	ctx.r6.s64 = 4;
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r29,r11,-5
	r29.s64 = r11.s64 + -5;
	// lwz r5,248(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 248);
	// lwz r11,15868(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 15868);
	// add r3,r30,r29
	ctx.r3.u64 = r30.u64 + r29.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// add r11,r30,r28
	r11.u64 = r30.u64 + r28.u64;
	// lwz r5,248(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 248);
	// li r6,4
	ctx.r6.s64 = 4;
	// lwz r10,15868(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 15868);
	// add r3,r11,r29
	ctx.r3.u64 = r11.u64 + r29.u64;
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82723220:
	// lbz r11,4(r25)
	r11.u64 = PPC_LOAD_U8(r25.u32 + 4);
	// clrlwi r11,r11,28
	r11.u64 = r11.u32 & 0xF;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82723254
	if (cr6.eq) goto loc_82723254;
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r6,4
	ctx.r6.s64 = 4;
	// lwz r5,248(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 248);
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// lwz r10,15868(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 15868);
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r3,r11,-1
	ctx.r3.s64 = r11.s64 + -1;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82723254:
	// lbz r11,5(r25)
	r11.u64 = PPC_LOAD_U8(r25.u32 + 5);
	// clrlwi r11,r11,28
	r11.u64 = r11.u32 & 0xF;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8272328c
	if (cr6.eq) goto loc_8272328C;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// add r11,r30,r28
	r11.u64 = r30.u64 + r28.u64;
	// lwz r5,248(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 248);
	// li r6,4
	ctx.r6.s64 = 4;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r10,15868(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 15868);
	// addi r3,r11,-1
	ctx.r3.s64 = r11.s64 + -1;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8272328C:
	// lwz r11,136(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 136);
	// addi r27,r27,1
	r27.s64 = r27.s64 + 1;
	// addi r25,r25,6
	r25.s64 = r25.s64 + 6;
	// addi r30,r30,8
	r30.s64 = r30.s64 + 8;
	// cmplw cr6,r27,r11
	cr6.compare<uint32_t>(r27.u32, r11.u32, xer);
	// blt cr6,0x827230e8
	if (cr6.lt) goto loc_827230E8;
loc_827232A4:
	// lwz r10,232(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 232);
	// addi r26,r26,1
	r26.s64 = r26.s64 + 1;
	// lwz r11,140(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 140);
	// addi r21,r21,4
	r21.s64 = r21.s64 + 4;
	// add r23,r10,r23
	r23.u64 = ctx.r10.u64 + r23.u64;
	// add r20,r10,r20
	r20.u64 = ctx.r10.u64 + r20.u64;
	// cmplw cr6,r26,r11
	cr6.compare<uint32_t>(r26.u32, r11.u32, xer);
	// blt cr6,0x82723054
	if (cr6.lt) goto loc_82723054;
loc_827232C4:
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// b 0x8239bd10
	return;
}

__attribute__((alias("__imp__sub_827232CC"))) PPC_WEAK_FUNC(sub_827232CC);
PPC_FUNC_IMPL(__imp__sub_827232CC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_827232D0"))) PPC_WEAK_FUNC(sub_827232D0);
PPC_FUNC_IMPL(__imp__sub_827232D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r31{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// clrlwi r10,r5,16
	ctx.r10.u64 = ctx.r5.u32 & 0xFFFF;
	// lwz r9,0(r4)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// srawi r8,r5,16
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0xFFFF) != 0);
	ctx.r8.s64 = ctx.r5.s32 >> 16;
	// add r7,r11,r10
	ctx.r7.u64 = r11.u64 + ctx.r10.u64;
	// clrlwi r5,r6,16
	ctx.r5.u64 = ctx.r6.u32 & 0xFFFF;
	// srawi r6,r6,16
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0xFFFF) != 0);
	ctx.r6.s64 = ctx.r6.s32 >> 16;
	// add r31,r9,r8
	r31.u64 = ctx.r9.u64 + ctx.r8.u64;
	// cmpwi cr6,r7,-115
	cr6.compare<int32_t>(ctx.r7.s32, -115, xer);
	// bge cr6,0x8272330c
	if (!cr6.lt) goto loc_8272330C;
	// clrlwi r11,r11,30
	r11.u64 = r11.u32 & 0x3;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r11,r11,-112
	r11.s64 = r11.s64 + -112;
	// b 0x82723324
	goto loc_82723324;
loc_8272330C:
	// cmpw cr6,r7,r5
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r5.s32, xer);
	// ble cr6,0x82723328
	if (!cr6.gt) goto loc_82723328;
	// clrlwi r11,r11,30
	r11.u64 = r11.u32 & 0x3;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// addi r11,r11,-3
	r11.s64 = r11.s64 + -3;
loc_82723324:
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
loc_82723328:
	// cmpwi cr6,r31,-115
	cr6.compare<int32_t>(r31.s32, -115, xer);
	// bge cr6,0x82723364
	if (!cr6.lt) goto loc_82723364;
	// rlwinm r11,r31,0,29,29
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// clrlwi r11,r9,30
	r11.u64 = ctx.r9.u32 & 0x3;
	// subf r11,r8,r11
	r11.s64 = r11.s64 - ctx.r8.s64;
	// beq cr6,0x82723354
	if (cr6.eq) goto loc_82723354;
	// addi r11,r11,-116
	r11.s64 = r11.s64 + -116;
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
loc_82723354:
	// addi r11,r11,-112
	r11.s64 = r11.s64 + -112;
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
loc_82723364:
	// cmpw cr6,r31,r6
	cr6.compare<int32_t>(r31.s32, ctx.r6.s32, xer);
	// ble cr6,0x8272339c
	if (!cr6.gt) goto loc_8272339C;
	// rlwinm r11,r31,0,29,29
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// clrlwi r11,r9,30
	r11.u64 = ctx.r9.u32 & 0x3;
	// subf r11,r8,r11
	r11.s64 = r11.s64 - ctx.r8.s64;
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// beq cr6,0x82723394
	if (cr6.eq) goto loc_82723394;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
loc_82723394:
	// addi r11,r11,-3
	r11.s64 = r11.s64 + -3;
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
loc_8272339C:
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_827233A4"))) PPC_WEAK_FUNC(sub_827233A4);
PPC_FUNC_IMPL(__imp__sub_827233A4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_827233A8"))) PPC_WEAK_FUNC(sub_827233A8);
PPC_FUNC_IMPL(__imp__sub_827233A8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r31{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// clrlwi r10,r5,16
	ctx.r10.u64 = ctx.r5.u32 & 0xFFFF;
	// lwz r9,0(r4)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// srawi r8,r5,16
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0xFFFF) != 0);
	ctx.r8.s64 = ctx.r5.s32 >> 16;
	// add r7,r11,r10
	ctx.r7.u64 = r11.u64 + ctx.r10.u64;
	// clrlwi r5,r6,16
	ctx.r5.u64 = ctx.r6.u32 & 0xFFFF;
	// srawi r6,r6,16
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0xFFFF) != 0);
	ctx.r6.s64 = ctx.r6.s32 >> 16;
	// add r31,r9,r8
	r31.u64 = ctx.r9.u64 + ctx.r8.u64;
	// cmpwi cr6,r7,-59
	cr6.compare<int32_t>(ctx.r7.s32, -59, xer);
	// bge cr6,0x827233e4
	if (!cr6.lt) goto loc_827233E4;
	// clrlwi r11,r11,30
	r11.u64 = r11.u32 & 0x3;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r11,r11,-56
	r11.s64 = r11.s64 + -56;
	// b 0x827233fc
	goto loc_827233FC;
loc_827233E4:
	// cmpw cr6,r7,r5
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r5.s32, xer);
	// ble cr6,0x82723400
	if (!cr6.gt) goto loc_82723400;
	// clrlwi r11,r11,30
	r11.u64 = r11.u32 & 0x3;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// addi r11,r11,-3
	r11.s64 = r11.s64 + -3;
loc_827233FC:
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
loc_82723400:
	// cmpwi cr6,r31,-59
	cr6.compare<int32_t>(r31.s32, -59, xer);
	// bge cr6,0x8272343c
	if (!cr6.lt) goto loc_8272343C;
	// rlwinm r11,r31,0,29,29
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// clrlwi r11,r9,30
	r11.u64 = ctx.r9.u32 & 0x3;
	// subf r11,r8,r11
	r11.s64 = r11.s64 - ctx.r8.s64;
	// beq cr6,0x8272342c
	if (cr6.eq) goto loc_8272342C;
	// addi r11,r11,-60
	r11.s64 = r11.s64 + -60;
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
loc_8272342C:
	// addi r11,r11,-56
	r11.s64 = r11.s64 + -56;
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
loc_8272343C:
	// cmpw cr6,r31,r6
	cr6.compare<int32_t>(r31.s32, ctx.r6.s32, xer);
	// ble cr6,0x82723474
	if (!cr6.gt) goto loc_82723474;
	// rlwinm r11,r31,0,29,29
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// clrlwi r11,r9,30
	r11.u64 = ctx.r9.u32 & 0x3;
	// subf r11,r8,r11
	r11.s64 = r11.s64 - ctx.r8.s64;
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// beq cr6,0x8272346c
	if (cr6.eq) goto loc_8272346C;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
loc_8272346C:
	// addi r11,r11,-3
	r11.s64 = r11.s64 + -3;
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
loc_82723474:
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8272347C"))) PPC_WEAK_FUNC(sub_8272347C);
PPC_FUNC_IMPL(__imp__sub_8272347C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_82723480"))) PPC_WEAK_FUNC(sub_82723480);
PPC_FUNC_IMPL(__imp__sub_82723480) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcd8
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r25,r9
	r25.u64 = ctx.r9.u64;
	// mr r20,r10
	r20.u64 = ctx.r10.u64;
	// rlwinm r10,r5,16,0,15
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 16) & 0xFFFF0000;
	// mr r21,r8
	r21.u64 = ctx.r8.u64;
	// lhz r11,50(r29)
	r11.u64 = PPC_LOAD_U16(r29.u32 + 50);
	// or r10,r10,r4
	ctx.r10.u64 = ctx.r10.u64 | ctx.r4.u64;
	// lwz r9,188(r29)
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + 188);
	// mr r26,r6
	r26.u64 = ctx.r6.u64;
	// mullw r11,r11,r5
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r5.s32);
	// lwz r6,1396(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + 1396);
	// lwz r30,1404(r29)
	r30.u64 = PPC_LOAD_U32(r29.u32 + 1404);
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// rlwinm r31,r10,6,0,25
	r31.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 6) & 0xFFFFFFC0;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// mr r22,r7
	r22.u64 = ctx.r7.u64;
	// subf r7,r31,r6
	ctx.r7.s64 = ctx.r6.s64 - r31.s64;
	// lwzx r11,r11,r9
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r9.u32);
	// extsh r28,r11
	r28.s64 = r11.s16;
	// rlwinm r9,r11,1,15,15
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// clrlwi r10,r28,30
	ctx.r10.u64 = r28.u32 & 0x3;
	// srawi r27,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	r27.s64 = r11.s32 >> 16;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// subf r8,r9,r31
	ctx.r8.s64 = r31.s64 - ctx.r9.s64;
	// stw r28,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r28.u32);
	// srawi r9,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r9.s64 = ctx.r10.s32 >> 2;
	// add r8,r8,r11
	ctx.r8.u64 = ctx.r8.u64 + r11.u64;
	// clrlwi r10,r27,30
	ctx.r10.u64 = r27.u32 & 0x3;
	// stw r27,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r27.u32);
	// add r9,r9,r28
	ctx.r9.u64 = ctx.r9.u64 + r28.u64;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// addis r8,r8,115
	ctx.r8.s64 = ctx.r8.s64 + 7536640;
	// subf r7,r11,r7
	ctx.r7.s64 = ctx.r7.s64 - r11.s64;
	// srawi r24,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	r24.s64 = ctx.r9.s32 >> 1;
	// srawi r11,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	r11.s64 = ctx.r10.s32 >> 2;
	// addi r8,r8,115
	ctx.r8.s64 = ctx.r8.s64 + 115;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// or r10,r8,r7
	ctx.r10.u64 = ctx.r8.u64 | ctx.r7.u64;
	// srawi r23,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r23.s64 = r11.s32 >> 1;
	// stw r24,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r24.u32);
	// rlwinm r10,r10,0,0,16
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r10,r10,0,16,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// stw r23,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r23.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82723558
	if (cr6.eq) goto loc_82723558;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// addi r4,r1,100
	ctx.r4.s64 = ctx.r1.s64 + 100;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r28,96(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r27,100(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
loc_82723558:
	// mr r11,r24
	r11.u64 = r24.u64;
	// srawi r5,r31,1
	xer.ca = (r31.s32 < 0) & ((r31.u32 & 0x1) != 0);
	ctx.r5.s64 = r31.s32 >> 1;
	// rlwimi r11,r23,16,0,15
	r11.u64 = (__builtin_rotateleft32(r23.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r30
	ctx.r9.s64 = r30.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r5,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r5.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// addis r11,r11,59
	r11.s64 = r11.s64 + 3866624;
	// addi r11,r11,59
	r11.s64 = r11.s64 + 59;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x827235ac
	if (cr6.eq) goto loc_827235AC;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// addi r4,r1,108
	ctx.r4.s64 = ctx.r1.s64 + 108;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
	// lwz r24,104(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lwz r23,108(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
loc_827235AC:
	// lis r9,-32126
	ctx.r9.s64 = -2105409536;
	// lhz r31,74(r29)
	r31.u64 = PPC_LOAD_U16(r29.u32 + 74);
	// srawi r10,r27,2
	xer.ca = (r27.s32 < 0) & ((r27.u32 & 0x3) != 0);
	ctx.r10.s64 = r27.s32 >> 2;
	// srawi r8,r28,2
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x3) != 0);
	ctx.r8.s64 = r28.s32 >> 2;
	// mullw r10,r10,r31
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(r31.s32);
	// lwz r11,-25016(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + -25016);
	// srawi r7,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r7.s64 = r11.s32 >> 3;
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// addze r8,r7
	temp.s64 = ctx.r7.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r7.u32;
	ctx.r8.s64 = temp.s64;
	// add r30,r10,r26
	r30.u64 = ctx.r10.u64 + r26.u64;
	// rlwinm r10,r8,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// li r26,0
	r26.s64 = 0;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82723654
	if (!cr0.eq) goto loc_82723654;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r30
	// addi r11,r31,128
	r11.s64 = r31.s64 + 128;
	// dcbt r11,r30
	// addi r11,r31,64
	r11.s64 = r31.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r30
	// rlwinm r11,r31,1,0,30
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r30
	// addi r11,r31,32
	r11.s64 = r31.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r30
	// rlwinm r11,r31,2,0,29
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r30
	// rlwinm r11,r31,1,0,30
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r30
	// rlwinm r11,r31,3,0,28
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r31,r11
	r11.s64 = r11.s64 - r31.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r30
	// mr r11,r26
	r11.u64 = r26.u64;
loc_82723654:
	// addi r10,r31,8
	ctx.r10.s64 = r31.s64 + 8;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// dcbt r10,r30
	// rlwinm r10,r31,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r10,r31,r10
	ctx.r10.u64 = r31.u64 + ctx.r10.u64;
	// addi r10,r10,64
	ctx.r10.s64 = ctx.r10.s64 + 64;
	// dcbt r10,r30
	// rlwinm r10,r31,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r31,r10
	ctx.r10.u64 = r31.u64 + ctx.r10.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r10,64
	ctx.r10.s64 = ctx.r10.s64 + 64;
	// dcbt r10,r30
	// mulli r10,r31,11
	ctx.r10.s64 = r31.s64 * 11;
	// addi r10,r10,64
	ctx.r10.s64 = ctx.r10.s64 + 64;
	// dcbt r10,r30
	// rlwinm r10,r31,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r31,r10
	ctx.r10.u64 = r31.u64 + ctx.r10.u64;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r10,64
	ctx.r10.s64 = ctx.r10.s64 + 64;
	// dcbt r10,r30
	// mulli r10,r31,13
	ctx.r10.s64 = r31.s64 * 13;
	// addi r10,r10,64
	ctx.r10.s64 = ctx.r10.s64 + 64;
	// dcbt r10,r30
	// rlwinm r10,r31,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r10,r31,r10
	ctx.r10.s64 = ctx.r10.s64 - r31.s64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r10,64
	ctx.r10.s64 = ctx.r10.s64 + 64;
	// dcbt r10,r30
	// rlwinm r10,r31,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 4) & 0xFFFFFFF0;
	// subf r10,r31,r10
	ctx.r10.s64 = ctx.r10.s64 - r31.s64;
	// addi r10,r10,64
	ctx.r10.s64 = ctx.r10.s64 + 64;
	// dcbt r10,r30
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// clrlwi r28,r28,30
	r28.u64 = r28.u32 & 0x3;
	// clrlwi r27,r27,30
	r27.u64 = r27.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// stw r11,-25016(r9)
	PPC_STORE_U32(ctx.r9.u32 + -25016, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// lwzx r11,r11,r29
	r11.u64 = PPC_LOAD_U32(r11.u32 + r29.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82723754
	if (cr6.eq) goto loc_82723754;
	// li r10,1
	ctx.r10.s64 = 1;
	// lbz r9,35(r29)
	ctx.r9.u64 = PPC_LOAD_U8(r29.u32 + 35);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_82723754:
	// lis r27,-32126
	r27.s64 = -2105409536;
	// lhz r6,76(r29)
	ctx.r6.u64 = PPC_LOAD_U16(r29.u32 + 76);
	// srawi r10,r23,2
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x3) != 0);
	ctx.r10.s64 = r23.s32 >> 2;
	// srawi r9,r24,2
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x3) != 0);
	ctx.r9.s64 = r24.s32 >> 2;
	// mullw r10,r10,r6
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r6.s32);
	// lwz r11,-25012(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -25012);
	// srawi r8,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r8.s64 = r11.s32 >> 4;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// addze r8,r8
	temp.s64 = ctx.r8.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r8.u32;
	ctx.r8.s64 = temp.s64;
	// add r3,r10,r22
	ctx.r3.u64 = ctx.r10.u64 + r22.u64;
	// rlwinm r8,r8,4,0,27
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 4) & 0xFFFFFFF0;
	// add r31,r10,r21
	r31.u64 = ctx.r10.u64 + r21.u64;
	// subf. r8,r8,r11
	ctx.r8.s64 = r11.s64 - ctx.r8.s64;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// bne 0x827237fc
	if (!cr0.eq) goto loc_827237FC;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r6,128
	r11.s64 = ctx.r6.s64 + 128;
	// dcbt r11,r3
	// addi r11,r6,64
	r11.s64 = ctx.r6.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r6,32
	r11.s64 = ctx.r6.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r6,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r6,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r6,r11
	r11.s64 = r11.s64 - ctx.r6.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// mr r11,r26
	r11.u64 = r26.u64;
loc_827237FC:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// clrlwi r30,r24,30
	r30.u64 = r24.u32 & 0x3;
	// clrlwi r28,r23,30
	r28.u64 = r23.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r5,r20
	ctx.r5.u64 = r20.u64;
	// stw r11,-25012(r27)
	PPC_STORE_U32(r27.u32 + -25012, r11.u32);
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r29)
	ctx.r9.u64 = PPC_LOAD_U8(r29.u32 + 35);
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r29
	r11.u64 = PPC_LOAD_U32(r11.u32 + r29.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,-25012(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -25012);
	// lhz r6,76(r29)
	ctx.r6.u64 = PPC_LOAD_U16(r29.u32 + 76);
	// srawi r10,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r10.s64 = r11.s32 >> 4;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x827238d0
	if (!cr0.eq) goto loc_827238D0;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r31
	// addi r11,r6,128
	r11.s64 = ctx.r6.s64 + 128;
	// dcbt r11,r31
	// addi r11,r6,64
	r11.s64 = ctx.r6.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r31
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r31
	// addi r11,r6,32
	r11.s64 = ctx.r6.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r31
	// rlwinm r11,r6,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r31
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r31
	// rlwinm r11,r6,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r6,r11
	r11.s64 = r11.s64 - ctx.r6.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r31
	// mr r11,r26
	r11.u64 = r26.u64;
loc_827238D0:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r5,308(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 308);
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// stw r11,-25012(r27)
	PPC_STORE_U32(r27.u32 + -25012, r11.u32);
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r29)
	ctx.r9.u64 = PPC_LOAD_U8(r29.u32 + 35);
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r29
	r11.u64 = PPC_LOAD_U32(r11.u32 + r29.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x8239bd28
	return;
}

__attribute__((alias("__imp__sub_8272391C"))) PPC_WEAK_FUNC(sub_8272391C);
PPC_FUNC_IMPL(__imp__sub_8272391C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_82723920"))) PPC_WEAK_FUNC(sub_82723920);
PPC_FUNC_IMPL(__imp__sub_82723920) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcc0
	// stwu r1,-272(r1)
	ea = -272 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// stw r10,348(r1)
	PPC_STORE_U32(ctx.r1.u32 + 348, ctx.r10.u32);
	// lis r11,-32244
	r11.s64 = -2113142784;
	// stw r8,332(r1)
	PPC_STORE_U32(ctx.r1.u32 + 332, ctx.r8.u32);
	// rlwinm r10,r5,16,0,15
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 16) & 0xFFFF0000;
	// stw r7,324(r1)
	PPC_STORE_U32(ctx.r1.u32 + 324, ctx.r7.u32);
	// addi r25,r11,30136
	r25.s64 = r11.s64 + 30136;
	// lis r11,115
	r11.s64 = 7536640;
	// lhz r27,50(r31)
	r27.u64 = PPC_LOAD_U16(r31.u32 + 50);
	// or r21,r10,r4
	r21.u64 = ctx.r10.u64 | ctx.r4.u64;
	// ori r29,r11,115
	r29.u64 = r11.u64 | 115;
	// lwz r26,188(r31)
	r26.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// mullw r11,r27,r5
	r11.s64 = int64_t(r27.s32) * int64_t(ctx.r5.s32);
	// lwz r28,1396(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 1396);
	// lwz r20,1404(r31)
	r20.u64 = PPC_LOAD_U32(r31.u32 + 1404);
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// mr r17,r9
	r17.u64 = ctx.r9.u64;
	// rlwinm r30,r21,6,0,25
	r30.u64 = __builtin_rotateleft64(r21.u32 | (r21.u64 << 32), 6) & 0xFFFFFFC0;
	// rlwinm r24,r11,1,0,30
	r24.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// mr r16,r6
	r16.u64 = ctx.r6.u64;
	// rlwinm r11,r24,2,0,29
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r26
	r11.u64 = PPC_LOAD_U32(r11.u32 + r26.u32);
	// extsh r23,r11
	r23.s64 = r11.s16;
	// rlwinm r9,r11,1,15,15
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// clrlwi r10,r23,30
	ctx.r10.u64 = r23.u32 & 0x3;
	// srawi r22,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	r22.s64 = r11.s32 >> 16;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// subf r9,r9,r11
	ctx.r9.s64 = r11.s64 - ctx.r9.s64;
	// stw r23,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r23.u32);
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// add r9,r9,r30
	ctx.r9.u64 = ctx.r9.u64 + r30.u64;
	// add r10,r10,r23
	ctx.r10.u64 = ctx.r10.u64 + r23.u64;
	// stw r22,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r22.u32);
	// subf r11,r11,r28
	r11.s64 = r28.s64 - r11.s64;
	// rlwinm r8,r22,2,26,29
	ctx.r8.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 2) & 0x3C;
	// srawi r15,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	r15.s64 = ctx.r10.s32 >> 1;
	// add r9,r9,r29
	ctx.r9.u64 = ctx.r9.u64 + r29.u64;
	// subf r7,r30,r11
	ctx.r7.s64 = r11.s64 - r30.s64;
	// srawi r10,r22,1
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x1) != 0);
	ctx.r10.s64 = r22.s32 >> 1;
	// lwzx r11,r8,r25
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + r25.u32);
	// or r9,r9,r7
	ctx.r9.u64 = ctx.r9.u64 | ctx.r7.u64;
	// rlwinm r10,r10,0,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFF8;
	// stw r15,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r15.u32);
	// rlwinm r9,r9,0,0,16
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFF8000;
	// add r14,r11,r10
	r14.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r9,r9,0,16,0
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// stw r14,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r14.u32);
	// beq cr6,0x82723a0c
	if (cr6.eq) goto loc_82723A0C;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r4,r1,100
	ctx.r4.s64 = ctx.r1.s64 + 100;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r23,96(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r22,100(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
loc_82723A0C:
	// add r11,r27,r24
	r11.u64 = r27.u64 + r24.u64;
	// lis r27,4
	r27.s64 = 262144;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r5,r30,r27
	ctx.r5.u64 = r30.u64 + r27.u64;
	// lwzx r11,r11,r26
	r11.u64 = PPC_LOAD_U32(r11.u32 + r26.u32);
	// extsh r19,r11
	r19.s64 = r11.s16;
	// rlwinm r9,r11,1,15,15
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// clrlwi r10,r19,30
	ctx.r10.u64 = r19.u32 & 0x3;
	// srawi r18,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	r18.s64 = r11.s32 >> 16;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// subf r9,r9,r11
	ctx.r9.s64 = r11.s64 - ctx.r9.s64;
	// stw r19,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r19.u32);
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// add r9,r9,r5
	ctx.r9.u64 = ctx.r9.u64 + ctx.r5.u64;
	// add r10,r10,r19
	ctx.r10.u64 = ctx.r10.u64 + r19.u64;
	// stw r18,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r18.u32);
	// subf r11,r11,r28
	r11.s64 = r28.s64 - r11.s64;
	// rlwinm r8,r18,2,26,29
	ctx.r8.u64 = __builtin_rotateleft64(r18.u32 | (r18.u64 << 32), 2) & 0x3C;
	// srawi r26,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	r26.s64 = ctx.r10.s32 >> 1;
	// add r9,r9,r29
	ctx.r9.u64 = ctx.r9.u64 + r29.u64;
	// subf r7,r5,r11
	ctx.r7.s64 = r11.s64 - ctx.r5.s64;
	// srawi r10,r18,1
	xer.ca = (r18.s32 < 0) & ((r18.u32 & 0x1) != 0);
	ctx.r10.s64 = r18.s32 >> 1;
	// lwzx r11,r8,r25
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + r25.u32);
	// or r9,r9,r7
	ctx.r9.u64 = ctx.r9.u64 | ctx.r7.u64;
	// rlwinm r10,r10,0,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFF8;
	// stw r26,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r26.u32);
	// rlwinm r9,r9,0,0,16
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFF8000;
	// add r25,r11,r10
	r25.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r9,r9,0,16,0
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// stw r25,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r25.u32);
	// beq cr6,0x82723aa4
	if (cr6.eq) goto loc_82723AA4;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r19,100(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r18,96(r1)
	r18.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
loc_82723AA4:
	// mr r11,r15
	r11.u64 = r15.u64;
	// lis r10,59
	ctx.r10.s64 = 3866624;
	// rlwimi r11,r14,16,0,15
	r11.u64 = (__builtin_rotateleft32(r14.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// ori r29,r10,59
	r29.u64 = ctx.r10.u64 | 59;
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r20
	ctx.r9.s64 = r20.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// rlwinm r30,r21,5,0,26
	r30.u64 = __builtin_rotateleft64(r21.u32 | (r21.u64 << 32), 5) & 0xFFFFFFE0;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// subf r10,r30,r9
	ctx.r10.s64 = ctx.r9.s64 - r30.s64;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82723b00
	if (cr6.eq) goto loc_82723B00;
	// mr r6,r20
	ctx.r6.u64 = r20.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r4,r1,108
	ctx.r4.s64 = ctx.r1.s64 + 108;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
	// lwz r15,104(r1)
	r15.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lwz r14,108(r1)
	r14.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
loc_82723B00:
	// mr r11,r26
	r11.u64 = r26.u64;
	// add r5,r30,r27
	ctx.r5.u64 = r30.u64 + r27.u64;
	// rlwimi r11,r25,16,0,15
	r11.u64 = (__builtin_rotateleft32(r25.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r20
	ctx.r9.s64 = r20.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r5,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r5.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82723b48
	if (cr6.eq) goto loc_82723B48;
	// mr r6,r20
	ctx.r6.u64 = r20.u64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
loc_82723B48:
	// lis r26,-32126
	r26.s64 = -2105409536;
	// lhz r10,74(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 74);
	// srawi r9,r22,2
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x3) != 0);
	ctx.r9.s64 = r22.s32 >> 2;
	// srawi r8,r23,2
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x3) != 0);
	ctx.r8.s64 = r23.s32 >> 2;
	// mullw r9,r9,r10
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r10.s32);
	// lwz r11,-25016(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -25016);
	// srawi r7,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r7.s64 = r11.s32 >> 3;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// addze r7,r7
	temp.s64 = ctx.r7.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r7.u32;
	ctx.r7.s64 = temp.s64;
	// rotlwi r30,r10,1
	r30.u64 = __builtin_rotateleft32(ctx.r10.u32, 1);
	// rlwinm r7,r7,3,0,28
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 3) & 0xFFFFFFF8;
	// add r29,r9,r16
	r29.u64 = ctx.r9.u64 + r16.u64;
	// subf. r7,r7,r11
	ctx.r7.s64 = r11.s64 - ctx.r7.s64;
	cr0.compare<int32_t>(ctx.r7.s32, 0, xer);
	// bne 0x82723bf0
	if (!cr0.eq) goto loc_82723BF0;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_82723BF0:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// clrlwi r28,r23,30
	r28.u64 = r23.u32 & 0x3;
	// clrlwi r27,r22,30
	r27.u64 = r22.u32 & 0x3;
	// li r25,1
	r25.s64 = 1;
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r11,-25016(r26)
	PPC_STORE_U32(r26.u32 + -25016, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// stw r25,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r25.u32);
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r5,r17
	ctx.r5.u64 = r17.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82723c74
	if (cr6.eq) goto loc_82723C74;
	// li r10,1
	ctx.r10.s64 = 1;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// stw r25,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r25.u32);
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r17
	ctx.r5.u64 = r17.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_82723C74:
	// srawi r9,r18,2
	xer.ca = (r18.s32 < 0) & ((r18.u32 & 0x3) != 0);
	ctx.r9.s64 = r18.s32 >> 2;
	// lhz r10,74(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 74);
	// lwz r11,-25016(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + -25016);
	// srawi r8,r19,2
	xer.ca = (r19.s32 < 0) & ((r19.u32 & 0x3) != 0);
	ctx.r8.s64 = r19.s32 >> 2;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// srawi r7,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r7.s64 = r11.s32 >> 3;
	// mullw r9,r9,r10
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r10.s32);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// addze r8,r7
	temp.s64 = ctx.r7.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r7.u32;
	ctx.r8.s64 = temp.s64;
	// add r24,r10,r17
	r24.u64 = ctx.r10.u64 + r17.u64;
	// rlwinm r8,r8,3,0,28
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// rotlwi r30,r10,1
	r30.u64 = __builtin_rotateleft32(ctx.r10.u32, 1);
	// add r29,r9,r16
	r29.u64 = ctx.r9.u64 + r16.u64;
	// subf. r10,r8,r11
	ctx.r10.s64 = r11.s64 - ctx.r8.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82723d20
	if (!cr0.eq) goto loc_82723D20;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_82723D20:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r25,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r25.u32);
	// clrlwi r28,r19,30
	r28.u64 = r19.u32 & 0x3;
	// clrlwi r27,r18,30
	r27.u64 = r18.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// stw r11,-25016(r26)
	PPC_STORE_U32(r26.u32 + -25016, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82723da0
	if (cr6.eq) goto loc_82723DA0;
	// li r10,1
	ctx.r10.s64 = 1;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// stw r25,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r25.u32);
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_82723DA0:
	// lis r30,-32126
	r30.s64 = -2105409536;
	// lhz r10,76(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// srawi r9,r14,2
	xer.ca = (r14.s32 < 0) & ((r14.u32 & 0x3) != 0);
	ctx.r9.s64 = r14.s32 >> 2;
	// lwz r23,324(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 324);
	// srawi r8,r15,2
	xer.ca = (r15.s32 < 0) & ((r15.u32 & 0x3) != 0);
	ctx.r8.s64 = r15.s32 >> 2;
	// lwz r22,332(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 332);
	// mullw r9,r9,r10
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r10.s32);
	// lwz r11,-25012(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -25012);
	// srawi r7,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r7.s64 = r11.s32 >> 4;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// addze r7,r7
	temp.s64 = ctx.r7.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r7.u32;
	ctx.r7.s64 = temp.s64;
	// rotlwi r6,r10,1
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r10.u32, 1);
	// rlwinm r7,r7,4,0,27
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 4) & 0xFFFFFFF0;
	// add r3,r9,r23
	ctx.r3.u64 = ctx.r9.u64 + r23.u64;
	// add r29,r9,r22
	r29.u64 = ctx.r9.u64 + r22.u64;
	// subf. r7,r7,r11
	ctx.r7.s64 = r11.s64 - ctx.r7.s64;
	cr0.compare<int32_t>(ctx.r7.s32, 0, xer);
	// bne 0x82723e54
	if (!cr0.eq) goto loc_82723E54;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r6,128
	r11.s64 = ctx.r6.s64 + 128;
	// dcbt r11,r3
	// addi r11,r6,64
	r11.s64 = ctx.r6.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r6,32
	r11.s64 = ctx.r6.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r6,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r6,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r6,r11
	r11.s64 = r11.s64 - ctx.r6.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// li r11,0
	r11.s64 = 0;
loc_82723E54:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r24,348(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 348);
	// clrlwi r28,r15,30
	r28.u64 = r15.u32 & 0x3;
	// stw r25,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r25.u32);
	// clrlwi r27,r14,30
	r27.u64 = r14.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// stw r11,-25012(r30)
	PPC_STORE_U32(r30.u32 + -25012, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lhz r10,76(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// lwz r11,-25012(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -25012);
	// rotlwi r6,r10,1
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r10.u32, 1);
	// srawi r10,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r10.s64 = r11.s32 >> 4;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82723f30
	if (!cr0.eq) goto loc_82723F30;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r6,128
	r11.s64 = ctx.r6.s64 + 128;
	// dcbt r11,r29
	// addi r11,r6,64
	r11.s64 = ctx.r6.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r6,32
	r11.s64 = ctx.r6.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r6,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r6,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r6,r11
	r11.s64 = r11.s64 - ctx.r6.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_82723F30:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r26,356(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 356);
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r25,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r25.u32);
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r11,-25012(r30)
	PPC_STORE_U32(r30.u32 + -25012, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r4,112(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lhz r11,76(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// lwz r7,116(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// srawi r9,r4,2
	xer.ca = (ctx.r4.s32 < 0) & ((ctx.r4.u32 & 0x3) != 0);
	ctx.r9.s64 = ctx.r4.s32 >> 2;
	// lwz r10,-25012(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + -25012);
	// add r5,r11,r24
	ctx.r5.u64 = r11.u64 + r24.u64;
	// srawi r8,r7,2
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x3) != 0);
	ctx.r8.s64 = ctx.r7.s32 >> 2;
	// mullw r9,r9,r11
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(r11.s32);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// srawi r8,r10,4
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xF) != 0);
	ctx.r8.s64 = ctx.r10.s32 >> 4;
	// add r26,r11,r26
	r26.u64 = r11.u64 + r26.u64;
	// addze r8,r8
	temp.s64 = ctx.r8.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r8.u32;
	ctx.r8.s64 = temp.s64;
	// rotlwi r6,r11,1
	ctx.r6.u64 = __builtin_rotateleft32(r11.u32, 1);
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r8,r8,4,0,27
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 4) & 0xFFFFFFF0;
	// add r3,r11,r23
	ctx.r3.u64 = r11.u64 + r23.u64;
	// add r29,r11,r22
	r29.u64 = r11.u64 + r22.u64;
	// subf. r8,r8,r10
	ctx.r8.s64 = ctx.r10.s64 - ctx.r8.s64;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// bne 0x82724034
	if (!cr0.eq) goto loc_82724034;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r6,128
	r11.s64 = ctx.r6.s64 + 128;
	// dcbt r11,r3
	// addi r11,r6,64
	r11.s64 = ctx.r6.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r6,32
	r11.s64 = ctx.r6.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r6,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r6,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r6,r11
	r11.s64 = r11.s64 - ctx.r6.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// li r10,0
	ctx.r10.s64 = 0;
loc_82724034:
	// addi r11,r10,1
	r11.s64 = ctx.r10.s64 + 1;
	// stw r25,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r25.u32);
	// clrlwi r28,r7,30
	r28.u64 = ctx.r7.u32 & 0x3;
	// clrlwi r27,r4,30
	r27.u64 = ctx.r4.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// stw r11,-25012(r30)
	PPC_STORE_U32(r30.u32 + -25012, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lhz r10,76(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// lwz r11,-25012(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -25012);
	// rotlwi r6,r10,1
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r10.u32, 1);
	// srawi r10,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r10.s64 = r11.s32 >> 4;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82724108
	if (!cr0.eq) goto loc_82724108;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r6,128
	r11.s64 = ctx.r6.s64 + 128;
	// dcbt r11,r29
	// addi r11,r6,64
	r11.s64 = ctx.r6.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r6,32
	r11.s64 = ctx.r6.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r6,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r6,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r6,r11
	r11.s64 = r11.s64 - ctx.r6.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_82724108:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r25,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r25.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r11,-25012(r30)
	PPC_STORE_U32(r30.u32 + -25012, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// b 0x8239bd10
	return;
}

__attribute__((alias("__imp__sub_82724154"))) PPC_WEAK_FUNC(sub_82724154);
PPC_FUNC_IMPL(__imp__sub_82724154) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_82724158"))) PPC_WEAK_FUNC(sub_82724158);
PPC_FUNC_IMPL(__imp__sub_82724158) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcc0
	// stwu r1,-288(r1)
	ea = -288 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// stw r10,364(r1)
	PPC_STORE_U32(ctx.r1.u32 + 364, ctx.r10.u32);
	// rlwinm r11,r5,16,0,15
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 16) & 0xFFFF0000;
	// stw r8,348(r1)
	PPC_STORE_U32(ctx.r1.u32 + 348, ctx.r8.u32);
	// lis r10,115
	ctx.r10.s64 = 7536640;
	// stw r7,340(r1)
	PPC_STORE_U32(ctx.r1.u32 + 340, ctx.r7.u32);
	// or r22,r11,r4
	r22.u64 = r11.u64 | ctx.r4.u64;
	// stw r6,332(r1)
	PPC_STORE_U32(ctx.r1.u32 + 332, ctx.r6.u32);
	// ori r30,r10,115
	r30.u64 = ctx.r10.u64 | 115;
	// lhz r26,50(r31)
	r26.u64 = PPC_LOAD_U16(r31.u32 + 50);
	// mr r15,r9
	r15.u64 = ctx.r9.u64;
	// lwz r25,188(r31)
	r25.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// rlwinm r28,r22,6,0,25
	r28.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 6) & 0xFFFFFFC0;
	// mullw r11,r26,r5
	r11.s64 = int64_t(r26.s32) * int64_t(ctx.r5.s32);
	// lwz r29,1396(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 1396);
	// lwz r23,1404(r31)
	r23.u64 = PPC_LOAD_U32(r31.u32 + 1404);
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// rlwinm r24,r11,1,0,30
	r24.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r11,r24,2,0,29
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 2) & 0xFFFFFFFC;
	// add r27,r11,r25
	r27.u64 = r11.u64 + r25.u64;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// extsh r21,r11
	r21.s64 = r11.s16;
	// rlwinm r9,r11,1,15,15
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// clrlwi r10,r21,30
	ctx.r10.u64 = r21.u32 & 0x3;
	// subf r8,r9,r11
	ctx.r8.s64 = r11.s64 - ctx.r9.s64;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// srawi r20,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	r20.s64 = r11.s32 >> 16;
	// stw r21,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r21.u32);
	// srawi r9,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r9.s64 = ctx.r10.s32 >> 2;
	// subf r11,r11,r29
	r11.s64 = r29.s64 - r11.s64;
	// add r9,r9,r21
	ctx.r9.u64 = ctx.r9.u64 + r21.u64;
	// subf r7,r28,r11
	ctx.r7.s64 = r11.s64 - r28.s64;
	// srawi r11,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	r11.s64 = ctx.r9.s32 >> 1;
	// stw r20,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r20.u32);
	// clrlwi r10,r20,30
	ctx.r10.u64 = r20.u32 & 0x3;
	// add r8,r8,r28
	ctx.r8.u64 = ctx.r8.u64 + r28.u64;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// add r8,r8,r30
	ctx.r8.u64 = ctx.r8.u64 + r30.u64;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// srawi r11,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	r11.s64 = ctx.r10.s32 >> 2;
	// or r10,r8,r7
	ctx.r10.u64 = ctx.r8.u64 | ctx.r7.u64;
	// add r11,r11,r20
	r11.u64 = r11.u64 + r20.u64;
	// rlwinm r10,r10,0,0,16
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFF8000;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// rlwinm r10,r10,0,16,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// beq cr6,0x82724240
	if (cr6.eq) goto loc_82724240;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// addi r3,r1,108
	ctx.r3.s64 = ctx.r1.s64 + 108;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r21,108(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r20,104(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
loc_82724240:
	// lwz r11,4(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// addi r28,r28,32
	r28.s64 = r28.s64 + 32;
	// extsh r19,r11
	r19.s64 = r11.s16;
	// rlwinm r9,r11,1,15,15
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// clrlwi r10,r19,30
	ctx.r10.u64 = r19.u32 & 0x3;
	// subf r8,r9,r11
	ctx.r8.s64 = r11.s64 - ctx.r9.s64;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// srawi r18,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	r18.s64 = r11.s32 >> 16;
	// stw r19,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r19.u32);
	// srawi r9,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r9.s64 = ctx.r10.s32 >> 2;
	// subf r11,r11,r29
	r11.s64 = r29.s64 - r11.s64;
	// add r9,r9,r19
	ctx.r9.u64 = ctx.r9.u64 + r19.u64;
	// subf r7,r28,r11
	ctx.r7.s64 = r11.s64 - r28.s64;
	// srawi r11,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	r11.s64 = ctx.r9.s32 >> 1;
	// stw r18,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r18.u32);
	// clrlwi r10,r18,30
	ctx.r10.u64 = r18.u32 & 0x3;
	// add r8,r8,r28
	ctx.r8.u64 = ctx.r8.u64 + r28.u64;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// add r8,r8,r30
	ctx.r8.u64 = ctx.r8.u64 + r30.u64;
	// stw r11,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r11.u32);
	// srawi r11,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	r11.s64 = ctx.r10.s32 >> 2;
	// or r10,r8,r7
	ctx.r10.u64 = ctx.r8.u64 | ctx.r7.u64;
	// add r11,r11,r18
	r11.u64 = r11.u64 + r18.u64;
	// rlwinm r10,r10,0,0,16
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFF8000;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// rlwinm r10,r10,0,16,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r11.u32);
	// beq cr6,0x827242d0
	if (cr6.eq) goto loc_827242D0;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r19,112(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lwz r18,116(r1)
	r18.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
loc_827242D0:
	// add r11,r26,r24
	r11.u64 = r26.u64 + r24.u64;
	// addis r28,r28,32
	r28.s64 = r28.s64 + 2097152;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r28,r28,-32
	r28.s64 = r28.s64 + -32;
	// add r27,r11,r25
	r27.u64 = r11.u64 + r25.u64;
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// extsh r17,r11
	r17.s64 = r11.s16;
	// rlwinm r9,r11,1,15,15
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// clrlwi r10,r17,30
	ctx.r10.u64 = r17.u32 & 0x3;
	// srawi r16,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	r16.s64 = r11.s32 >> 16;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// subf r8,r9,r11
	ctx.r8.s64 = r11.s64 - ctx.r9.s64;
	// stw r17,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r17.u32);
	// srawi r9,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r9.s64 = ctx.r10.s32 >> 2;
	// clrlwi r10,r16,30
	ctx.r10.u64 = r16.u32 & 0x3;
	// subf r11,r11,r29
	r11.s64 = r29.s64 - r11.s64;
	// stw r16,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r16.u32);
	// add r9,r9,r17
	ctx.r9.u64 = ctx.r9.u64 + r17.u64;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// add r8,r8,r28
	ctx.r8.u64 = ctx.r8.u64 + r28.u64;
	// subf r7,r28,r11
	ctx.r7.s64 = r11.s64 - r28.s64;
	// srawi r26,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	r26.s64 = ctx.r9.s32 >> 1;
	// srawi r11,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	r11.s64 = ctx.r10.s32 >> 2;
	// add r8,r8,r30
	ctx.r8.u64 = ctx.r8.u64 + r30.u64;
	// add r11,r11,r16
	r11.u64 = r11.u64 + r16.u64;
	// or r10,r8,r7
	ctx.r10.u64 = ctx.r8.u64 | ctx.r7.u64;
	// srawi r25,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r25.s64 = r11.s32 >> 1;
	// stw r26,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r26.u32);
	// rlwinm r10,r10,0,0,16
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r10,r10,0,16,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// stw r25,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r25.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82724370
	if (cr6.eq) goto loc_82724370;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r17,116(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r16,112(r1)
	r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
loc_82724370:
	// lwz r11,4(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// addi r5,r28,32
	ctx.r5.s64 = r28.s64 + 32;
	// extsh r14,r11
	r14.s64 = r11.s16;
	// rlwinm r9,r11,1,15,15
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// clrlwi r10,r14,30
	ctx.r10.u64 = r14.u32 & 0x3;
	// srawi r7,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	ctx.r7.s64 = r11.s32 >> 16;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// subf r8,r9,r11
	ctx.r8.s64 = r11.s64 - ctx.r9.s64;
	// stw r14,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r14.u32);
	// srawi r9,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r9.s64 = ctx.r10.s32 >> 2;
	// clrlwi r10,r7,30
	ctx.r10.u64 = ctx.r7.u32 & 0x3;
	// subf r11,r11,r29
	r11.s64 = r29.s64 - r11.s64;
	// stw r7,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r7.u32);
	// add r9,r9,r14
	ctx.r9.u64 = ctx.r9.u64 + r14.u64;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// add r8,r8,r5
	ctx.r8.u64 = ctx.r8.u64 + ctx.r5.u64;
	// subf r6,r5,r11
	ctx.r6.s64 = r11.s64 - ctx.r5.s64;
	// srawi r28,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	r28.s64 = ctx.r9.s32 >> 1;
	// srawi r11,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	r11.s64 = ctx.r10.s32 >> 2;
	// add r8,r8,r30
	ctx.r8.u64 = ctx.r8.u64 + r30.u64;
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// or r10,r8,r6
	ctx.r10.u64 = ctx.r8.u64 | ctx.r6.u64;
	// srawi r27,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r27.s64 = r11.s32 >> 1;
	// stw r28,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r28.u32);
	// rlwinm r10,r10,0,0,16
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r10,r10,0,16,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// stw r27,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r27.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x827243f8
	if (cr6.eq) goto loc_827243F8;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r14,116(r1)
	r14.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
loc_827243F8:
	// rlwinm r29,r22,5,0,26
	r29.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 5) & 0xFFFFFFE0;
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r22,96(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lis r10,59
	ctx.r10.s64 = 3866624;
	// rlwimi r11,r22,16,0,15
	r11.u64 = (__builtin_rotateleft32(r22.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// ori r30,r10,59
	r30.u64 = ctx.r10.u64 | 59;
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r23
	ctx.r9.s64 = r23.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r29,r9
	ctx.r10.s64 = ctx.r9.s64 - r29.s64;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82724454
	if (cr6.eq) goto loc_82724454;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
	// lwz r22,96(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
loc_82724454:
	// lwz r10,104(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// addi r29,r29,16
	r29.s64 = r29.s64 + 16;
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// rlwimi r11,r10,16,0,15
	r11.u64 = (__builtin_rotateleft32(ctx.r10.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r23
	ctx.r9.s64 = r23.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r29,r9
	ctx.r10.s64 = ctx.r9.s64 - r29.s64;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x827244a4
	if (cr6.eq) goto loc_827244A4;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// addi r3,r1,108
	ctx.r3.s64 = ctx.r1.s64 + 108;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
loc_827244A4:
	// mr r11,r26
	r11.u64 = r26.u64;
	// addis r29,r29,16
	r29.s64 = r29.s64 + 1048576;
	// rlwimi r11,r25,16,0,15
	r11.u64 = (__builtin_rotateleft32(r25.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// addi r29,r29,-16
	r29.s64 = r29.s64 + -16;
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r23
	ctx.r9.s64 = r23.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r29,r9
	ctx.r10.s64 = ctx.r9.s64 - r29.s64;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x827244f4
	if (cr6.eq) goto loc_827244F4;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
loc_827244F4:
	// mr r11,r28
	r11.u64 = r28.u64;
	// addi r5,r29,16
	ctx.r5.s64 = r29.s64 + 16;
	// rlwimi r11,r27,16,0,15
	r11.u64 = (__builtin_rotateleft32(r27.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r23
	ctx.r9.s64 = r23.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r5,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r5.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272453c
	if (cr6.eq) goto loc_8272453C;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,132
	ctx.r3.s64 = ctx.r1.s64 + 132;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
loc_8272453C:
	// lis r27,-32126
	r27.s64 = -2105409536;
	// lhz r30,74(r31)
	r30.u64 = PPC_LOAD_U16(r31.u32 + 74);
	// srawi r10,r20,2
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x3) != 0);
	ctx.r10.s64 = r20.s32 >> 2;
	// lwz r23,332(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 332);
	// srawi r9,r21,2
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x3) != 0);
	ctx.r9.s64 = r21.s32 >> 2;
	// mullw r10,r10,r30
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(r30.s32);
	// lwz r11,-25016(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -25016);
	// srawi r8,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	ctx.r8.s64 = r11.s32 >> 2;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// addze r8,r8
	temp.s64 = ctx.r8.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r8.u32;
	ctx.r8.s64 = temp.s64;
	// li r29,0
	r29.s64 = 0;
	// add r28,r10,r23
	r28.u64 = ctx.r10.u64 + r23.u64;
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// subf. r8,r8,r11
	ctx.r8.s64 = r11.s64 - ctx.r8.s64;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// bne 0x827245e8
	if (!cr0.eq) goto loc_827245E8;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r28
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r28
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r28
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r28
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// mr r11,r29
	r11.u64 = r29.u64;
loc_827245E8:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// clrlwi r26,r21,30
	r26.u64 = r21.u32 & 0x3;
	// clrlwi r25,r20,30
	r25.u64 = r20.u32 & 0x3;
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// stw r11,-25016(r27)
	PPC_STORE_U32(r27.u32 + -25016, r11.u32);
	// rlwinm r11,r26,2,0,29
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// add r11,r11,r25
	r11.u64 = r11.u64 + r25.u64;
	// mr r5,r15
	ctx.r5.u64 = r15.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// mr r9,r25
	ctx.r9.u64 = r25.u64;
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82724668
	if (cr6.eq) goto loc_82724668;
	// li r10,0
	ctx.r10.s64 = 0;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// mr r7,r26
	ctx.r7.u64 = r26.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r15
	ctx.r5.u64 = r15.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_82724668:
	// lhz r30,74(r31)
	r30.u64 = PPC_LOAD_U16(r31.u32 + 74);
	// srawi r10,r18,2
	xer.ca = (r18.s32 < 0) & ((r18.u32 & 0x3) != 0);
	ctx.r10.s64 = r18.s32 >> 2;
	// lwz r11,-25016(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -25016);
	// srawi r9,r19,2
	xer.ca = (r19.s32 < 0) & ((r19.u32 & 0x3) != 0);
	ctx.r9.s64 = r19.s32 >> 2;
	// mullw r10,r10,r30
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(r30.s32);
	// srawi r8,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	ctx.r8.s64 = r11.s32 >> 2;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// addze r9,r8
	temp.s64 = ctx.r8.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r8.u32;
	ctx.r9.s64 = temp.s64;
	// add r10,r10,r23
	ctx.r10.u64 = ctx.r10.u64 + r23.u64;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r28,r10,8
	r28.s64 = ctx.r10.s64 + 8;
	// addi r24,r15,8
	r24.s64 = r15.s64 + 8;
	// subf. r10,r9,r11
	ctx.r10.s64 = r11.s64 - ctx.r9.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82724710
	if (!cr0.eq) goto loc_82724710;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r28
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r28
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r28
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r28
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// mr r11,r29
	r11.u64 = r29.u64;
loc_82724710:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// clrlwi r26,r19,30
	r26.u64 = r19.u32 & 0x3;
	// clrlwi r25,r18,30
	r25.u64 = r18.u32 & 0x3;
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// stw r11,-25016(r27)
	PPC_STORE_U32(r27.u32 + -25016, r11.u32);
	// rlwinm r11,r26,2,0,29
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// add r11,r11,r25
	r11.u64 = r11.u64 + r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// mr r9,r25
	ctx.r9.u64 = r25.u64;
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82724790
	if (cr6.eq) goto loc_82724790;
	// li r10,0
	ctx.r10.s64 = 0;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// mr r7,r26
	ctx.r7.u64 = r26.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_82724790:
	// srawi r10,r16,2
	xer.ca = (r16.s32 < 0) & ((r16.u32 & 0x3) != 0);
	ctx.r10.s64 = r16.s32 >> 2;
	// lhz r30,74(r31)
	r30.u64 = PPC_LOAD_U16(r31.u32 + 74);
	// lwz r11,-25016(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -25016);
	// srawi r9,r17,2
	xer.ca = (r17.s32 < 0) & ((r17.u32 & 0x3) != 0);
	ctx.r9.s64 = r17.s32 >> 2;
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// srawi r8,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	ctx.r8.s64 = r11.s32 >> 2;
	// mullw r10,r10,r30
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(r30.s32);
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// addze r8,r8
	temp.s64 = ctx.r8.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r8.u32;
	ctx.r8.s64 = temp.s64;
	// rotlwi r10,r30,3
	ctx.r10.u64 = __builtin_rotateleft32(r30.u32, 3);
	// add r28,r9,r23
	r28.u64 = ctx.r9.u64 + r23.u64;
	// rlwinm r9,r8,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// add r24,r10,r15
	r24.u64 = ctx.r10.u64 + r15.u64;
	// subf. r10,r9,r11
	ctx.r10.s64 = r11.s64 - ctx.r9.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8272483c
	if (!cr0.eq) goto loc_8272483C;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r28
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r28
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r28
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r28
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// mr r11,r29
	r11.u64 = r29.u64;
loc_8272483C:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// clrlwi r26,r17,30
	r26.u64 = r17.u32 & 0x3;
	// clrlwi r25,r16,30
	r25.u64 = r16.u32 & 0x3;
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// stw r11,-25016(r27)
	PPC_STORE_U32(r27.u32 + -25016, r11.u32);
	// rlwinm r11,r26,2,0,29
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// add r11,r11,r25
	r11.u64 = r11.u64 + r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// mr r9,r25
	ctx.r9.u64 = r25.u64;
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x827248bc
	if (cr6.eq) goto loc_827248BC;
	// li r10,0
	ctx.r10.s64 = 0;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// mr r7,r26
	ctx.r7.u64 = r26.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_827248BC:
	// lwz r8,112(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lhz r30,74(r31)
	r30.u64 = PPC_LOAD_U16(r31.u32 + 74);
	// srawi r10,r8,2
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r8.s32 >> 2;
	// lwz r11,-25016(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + -25016);
	// srawi r9,r14,2
	xer.ca = (r14.s32 < 0) & ((r14.u32 & 0x3) != 0);
	ctx.r9.s64 = r14.s32 >> 2;
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// srawi r7,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	ctx.r7.s64 = r11.s32 >> 2;
	// mullw r10,r10,r30
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(r30.s32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// addze r9,r7
	temp.s64 = ctx.r7.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r7.u32;
	ctx.r9.s64 = temp.s64;
	// addi r7,r30,1
	ctx.r7.s64 = r30.s64 + 1;
	// rlwinm r6,r9,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r9,r7,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 3) & 0xFFFFFFF8;
	// add r10,r10,r23
	ctx.r10.u64 = ctx.r10.u64 + r23.u64;
	// subf. r7,r6,r11
	ctx.r7.s64 = r11.s64 - ctx.r6.s64;
	cr0.compare<int32_t>(ctx.r7.s32, 0, xer);
	// add r24,r9,r15
	r24.u64 = ctx.r9.u64 + r15.u64;
	// addi r28,r10,8
	r28.s64 = ctx.r10.s64 + 8;
	// bne 0x82724974
	if (!cr0.eq) goto loc_82724974;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r28
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r28
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r28
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r28
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// mr r11,r29
	r11.u64 = r29.u64;
loc_82724974:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// clrlwi r26,r14,30
	r26.u64 = r14.u32 & 0x3;
	// clrlwi r25,r8,30
	r25.u64 = ctx.r8.u32 & 0x3;
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// stw r11,-25016(r27)
	PPC_STORE_U32(r27.u32 + -25016, r11.u32);
	// rlwinm r11,r26,2,0,29
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// add r11,r11,r25
	r11.u64 = r11.u64 + r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// mr r9,r25
	ctx.r9.u64 = r25.u64;
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x827249f4
	if (cr6.eq) goto loc_827249F4;
	// li r10,0
	ctx.r10.s64 = 0;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// mr r7,r26
	ctx.r7.u64 = r26.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_827249F4:
	// lis r30,-32126
	r30.s64 = -2105409536;
	// lwz r8,100(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// srawi r10,r22,2
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x3) != 0);
	ctx.r10.s64 = r22.s32 >> 2;
	// lhz r6,76(r31)
	ctx.r6.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// srawi r9,r8,2
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x3) != 0);
	ctx.r9.s64 = ctx.r8.s32 >> 2;
	// lwz r21,340(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 340);
	// mullw r10,r10,r6
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r6.s32);
	// lwz r20,348(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 348);
	// lwz r11,-25012(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -25012);
	// srawi r7,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r7.s64 = r11.s32 >> 3;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// addze r7,r7
	temp.s64 = ctx.r7.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r7.u32;
	ctx.r7.s64 = temp.s64;
	// add r3,r10,r21
	ctx.r3.u64 = ctx.r10.u64 + r21.u64;
	// rlwinm r7,r7,3,0,28
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 3) & 0xFFFFFFF8;
	// add r28,r10,r20
	r28.u64 = ctx.r10.u64 + r20.u64;
	// subf. r7,r7,r11
	ctx.r7.s64 = r11.s64 - ctx.r7.s64;
	cr0.compare<int32_t>(ctx.r7.s32, 0, xer);
	// bne 0x82724aa8
	if (!cr0.eq) goto loc_82724AA8;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r6,128
	r11.s64 = ctx.r6.s64 + 128;
	// dcbt r11,r3
	// addi r11,r6,64
	r11.s64 = ctx.r6.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r6,32
	r11.s64 = ctx.r6.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r6,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r6,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r6,r11
	r11.s64 = r11.s64 - ctx.r6.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// mr r11,r29
	r11.u64 = r29.u64;
loc_82724AA8:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r23,364(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 364);
	// clrlwi r27,r8,30
	r27.u64 = ctx.r8.u32 & 0x3;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// clrlwi r26,r22,30
	r26.u64 = r22.u32 & 0x3;
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// stw r11,-25012(r30)
	PPC_STORE_U32(r30.u32 + -25012, r11.u32);
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,-25012(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -25012);
	// lhz r6,76(r31)
	ctx.r6.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82724b80
	if (!cr0.eq) goto loc_82724B80;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r28
	// addi r11,r6,128
	r11.s64 = ctx.r6.s64 + 128;
	// dcbt r11,r28
	// addi r11,r6,64
	r11.s64 = ctx.r6.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r28
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// addi r11,r6,32
	r11.s64 = ctx.r6.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r28
	// rlwinm r11,r6,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r6,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r6,r11
	r11.s64 = r11.s64 - ctx.r6.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// mr r11,r29
	r11.u64 = r29.u64;
loc_82724B80:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r25,372(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 372);
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stw r11,-25012(r30)
	PPC_STORE_U32(r30.u32 + -25012, r11.u32);
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r7,104(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lhz r6,76(r31)
	ctx.r6.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// addi r5,r23,4
	ctx.r5.s64 = r23.s64 + 4;
	// lwz r8,108(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// srawi r10,r7,2
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r7.s32 >> 2;
	// lwz r11,-25012(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -25012);
	// addi r24,r25,4
	r24.s64 = r25.s64 + 4;
	// srawi r9,r8,2
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x3) != 0);
	ctx.r9.s64 = ctx.r8.s32 >> 2;
	// mullw r10,r10,r6
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r6.s32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r9,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r9.s64 = r11.s32 >> 3;
	// addze r9,r9
	temp.s64 = ctx.r9.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r9.u32;
	ctx.r9.s64 = temp.s64;
	// rlwinm r9,r9,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r9,r9,r11
	ctx.r9.s64 = r11.s64 - ctx.r9.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// add r9,r10,r21
	ctx.r9.u64 = ctx.r10.u64 + r21.u64;
	// add r10,r10,r20
	ctx.r10.u64 = ctx.r10.u64 + r20.u64;
	// addi r3,r9,4
	ctx.r3.s64 = ctx.r9.s64 + 4;
	// addi r28,r10,4
	r28.s64 = ctx.r10.s64 + 4;
	// bne 0x82724c84
	if (!cr0.eq) goto loc_82724C84;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r6,128
	r11.s64 = ctx.r6.s64 + 128;
	// dcbt r11,r3
	// addi r11,r6,64
	r11.s64 = ctx.r6.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r6,32
	r11.s64 = ctx.r6.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r6,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r6,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r6,r11
	r11.s64 = r11.s64 - ctx.r6.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// mr r11,r29
	r11.u64 = r29.u64;
loc_82724C84:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// clrlwi r27,r8,30
	r27.u64 = ctx.r8.u32 & 0x3;
	// clrlwi r26,r7,30
	r26.u64 = ctx.r7.u32 & 0x3;
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// stw r11,-25012(r30)
	PPC_STORE_U32(r30.u32 + -25012, r11.u32);
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,-25012(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -25012);
	// lhz r6,76(r31)
	ctx.r6.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82724d54
	if (!cr0.eq) goto loc_82724D54;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r28
	// addi r11,r6,128
	r11.s64 = ctx.r6.s64 + 128;
	// dcbt r11,r28
	// addi r11,r6,64
	r11.s64 = ctx.r6.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r28
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// addi r11,r6,32
	r11.s64 = ctx.r6.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r28
	// rlwinm r11,r6,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r6,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r6,r11
	r11.s64 = r11.s64 - ctx.r6.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// mr r11,r29
	r11.u64 = r29.u64;
loc_82724D54:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stw r11,-25012(r30)
	PPC_STORE_U32(r30.u32 + -25012, r11.u32);
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r4,120(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// lhz r6,76(r31)
	ctx.r6.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// lwz r7,124(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// srawi r11,r4,2
	xer.ca = (ctx.r4.s32 < 0) & ((ctx.r4.u32 & 0x3) != 0);
	r11.s64 = ctx.r4.s32 >> 2;
	// lwz r10,-25012(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + -25012);
	// srawi r8,r7,2
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x3) != 0);
	ctx.r8.s64 = ctx.r7.s32 >> 2;
	// mullw r9,r11,r6
	ctx.r9.s64 = int64_t(r11.s32) * int64_t(ctx.r6.s32);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// srawi r8,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r8.s64 = ctx.r10.s32 >> 3;
	// rotlwi r11,r6,2
	r11.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// addze r8,r8
	temp.s64 = ctx.r8.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r8.u32;
	ctx.r8.s64 = temp.s64;
	// add r9,r11,r9
	ctx.r9.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r8,r8,3,0,28
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// add r5,r11,r23
	ctx.r5.u64 = r11.u64 + r23.u64;
	// add r24,r11,r25
	r24.u64 = r11.u64 + r25.u64;
	// subf. r8,r8,r10
	ctx.r8.s64 = ctx.r10.s64 - ctx.r8.s64;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// add r3,r9,r21
	ctx.r3.u64 = ctx.r9.u64 + r21.u64;
	// add r28,r9,r20
	r28.u64 = ctx.r9.u64 + r20.u64;
	// bne 0x82724e54
	if (!cr0.eq) goto loc_82724E54;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r6,128
	r11.s64 = ctx.r6.s64 + 128;
	// dcbt r11,r3
	// addi r11,r6,64
	r11.s64 = ctx.r6.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r6,32
	r11.s64 = ctx.r6.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r6,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r6,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r6,r11
	r11.s64 = r11.s64 - ctx.r6.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// mr r10,r29
	ctx.r10.u64 = r29.u64;
loc_82724E54:
	// addi r11,r10,1
	r11.s64 = ctx.r10.s64 + 1;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// clrlwi r27,r7,30
	r27.u64 = ctx.r7.u32 & 0x3;
	// clrlwi r26,r4,30
	r26.u64 = ctx.r4.u32 & 0x3;
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// stw r11,-25012(r30)
	PPC_STORE_U32(r30.u32 + -25012, r11.u32);
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,-25012(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -25012);
	// lhz r6,76(r31)
	ctx.r6.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82724f24
	if (!cr0.eq) goto loc_82724F24;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r28
	// addi r11,r6,128
	r11.s64 = ctx.r6.s64 + 128;
	// dcbt r11,r28
	// addi r11,r6,64
	r11.s64 = ctx.r6.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r28
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// addi r11,r6,32
	r11.s64 = ctx.r6.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r28
	// rlwinm r11,r6,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r6,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r6,r11
	r11.s64 = r11.s64 - ctx.r6.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// mr r11,r29
	r11.u64 = r29.u64;
loc_82724F24:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stw r11,-25012(r30)
	PPC_STORE_U32(r30.u32 + -25012, r11.u32);
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r4,128(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// lhz r6,76(r31)
	ctx.r6.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// lwz r7,132(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// srawi r11,r4,2
	xer.ca = (ctx.r4.s32 < 0) & ((ctx.r4.u32 & 0x3) != 0);
	r11.s64 = ctx.r4.s32 >> 2;
	// lwz r10,-25012(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + -25012);
	// mullw r9,r11,r6
	ctx.r9.s64 = int64_t(r11.s32) * int64_t(ctx.r6.s32);
	// srawi r8,r7,2
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x3) != 0);
	ctx.r8.s64 = ctx.r7.s32 >> 2;
	// rotlwi r11,r6,2
	r11.u64 = __builtin_rotateleft32(ctx.r6.u32, 2);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// srawi r8,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r8.s64 = ctx.r10.s32 >> 3;
	// add r9,r11,r9
	ctx.r9.u64 = r11.u64 + ctx.r9.u64;
	// addze r8,r8
	temp.s64 = ctx.r8.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r8.u32;
	ctx.r8.s64 = temp.s64;
	// rlwinm r8,r8,3,0,28
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r8,r8,r10
	ctx.r8.s64 = ctx.r10.s64 - ctx.r8.s64;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// add r8,r11,r23
	ctx.r8.u64 = r11.u64 + r23.u64;
	// add r11,r11,r25
	r11.u64 = r11.u64 + r25.u64;
	// addi r5,r8,4
	ctx.r5.s64 = ctx.r8.s64 + 4;
	// addi r25,r11,4
	r25.s64 = r11.s64 + 4;
	// add r11,r9,r21
	r11.u64 = ctx.r9.u64 + r21.u64;
	// add r9,r9,r20
	ctx.r9.u64 = ctx.r9.u64 + r20.u64;
	// addi r3,r11,4
	ctx.r3.s64 = r11.s64 + 4;
	// addi r28,r9,4
	r28.s64 = ctx.r9.s64 + 4;
	// bne 0x82725034
	if (!cr0.eq) goto loc_82725034;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r6,128
	r11.s64 = ctx.r6.s64 + 128;
	// dcbt r11,r3
	// addi r11,r6,64
	r11.s64 = ctx.r6.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r6,32
	r11.s64 = ctx.r6.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r6,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r6,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r6,r11
	r11.s64 = r11.s64 - ctx.r6.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// mr r10,r29
	ctx.r10.u64 = r29.u64;
loc_82725034:
	// addi r11,r10,1
	r11.s64 = ctx.r10.s64 + 1;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// clrlwi r27,r7,30
	r27.u64 = ctx.r7.u32 & 0x3;
	// clrlwi r26,r4,30
	r26.u64 = ctx.r4.u32 & 0x3;
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// stw r11,-25012(r30)
	PPC_STORE_U32(r30.u32 + -25012, r11.u32);
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,-25012(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -25012);
	// lhz r6,76(r31)
	ctx.r6.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82725104
	if (!cr0.eq) goto loc_82725104;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r28
	// addi r11,r6,128
	r11.s64 = ctx.r6.s64 + 128;
	// dcbt r11,r28
	// addi r11,r6,64
	r11.s64 = ctx.r6.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r28
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// addi r11,r6,32
	r11.s64 = ctx.r6.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r28
	// rlwinm r11,r6,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r6,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r6,r11
	r11.s64 = r11.s64 - ctx.r6.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// mr r11,r29
	r11.u64 = r29.u64;
loc_82725104:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stw r11,-25012(r30)
	PPC_STORE_U32(r30.u32 + -25012, r11.u32);
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// b 0x8239bd10
	return;
}

__attribute__((alias("__imp__sub_82725150"))) PPC_WEAK_FUNC(sub_82725150);
PPC_FUNC_IMPL(__imp__sub_82725150) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcc0
	// stwu r1,-288(r1)
	ea = -288 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// stw r10,364(r1)
	PPC_STORE_U32(ctx.r1.u32 + 364, ctx.r10.u32);
	// lis r11,-32244
	r11.s64 = -2113142784;
	// stw r7,340(r1)
	PPC_STORE_U32(ctx.r1.u32 + 340, ctx.r7.u32);
	// rlwinm r10,r5,16,0,15
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 16) & 0xFFFF0000;
	// stw r8,348(r1)
	PPC_STORE_U32(ctx.r1.u32 + 348, ctx.r8.u32);
	// addi r27,r11,30136
	r27.s64 = r11.s64 + 30136;
	// stw r6,332(r1)
	PPC_STORE_U32(ctx.r1.u32 + 332, ctx.r6.u32);
	// lis r11,115
	r11.s64 = 7536640;
	// lhz r25,50(r31)
	r25.u64 = PPC_LOAD_U16(r31.u32 + 50);
	// or r21,r10,r4
	r21.u64 = ctx.r10.u64 | ctx.r4.u64;
	// ori r30,r11,115
	r30.u64 = r11.u64 | 115;
	// lwz r24,188(r31)
	r24.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// mullw r11,r25,r5
	r11.s64 = int64_t(r25.s32) * int64_t(ctx.r5.s32);
	// lwz r29,1396(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 1396);
	// lwz r22,1404(r31)
	r22.u64 = PPC_LOAD_U32(r31.u32 + 1404);
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// mr r15,r9
	r15.u64 = ctx.r9.u64;
	// rlwinm r28,r21,6,0,25
	r28.u64 = __builtin_rotateleft64(r21.u32 | (r21.u64 << 32), 6) & 0xFFFFFFC0;
	// rlwinm r23,r11,1,0,30
	r23.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r11,r23,2,0,29
	r11.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 2) & 0xFFFFFFFC;
	// add r26,r11,r24
	r26.u64 = r11.u64 + r24.u64;
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// extsh r20,r11
	r20.s64 = r11.s16;
	// rlwinm r9,r11,1,15,15
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// clrlwi r10,r20,30
	ctx.r10.u64 = r20.u32 & 0x3;
	// srawi r19,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	r19.s64 = r11.s32 >> 16;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// subf r9,r9,r11
	ctx.r9.s64 = r11.s64 - ctx.r9.s64;
	// stw r20,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r20.u32);
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// subf r11,r11,r29
	r11.s64 = r29.s64 - r11.s64;
	// add r10,r10,r20
	ctx.r10.u64 = ctx.r10.u64 + r20.u64;
	// stw r19,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r19.u32);
	// subf r7,r28,r11
	ctx.r7.s64 = r11.s64 - r28.s64;
	// srawi r11,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	r11.s64 = ctx.r10.s32 >> 1;
	// add r9,r9,r28
	ctx.r9.u64 = ctx.r9.u64 + r28.u64;
	// rlwinm r8,r19,2,26,29
	ctx.r8.u64 = __builtin_rotateleft64(r19.u32 | (r19.u64 << 32), 2) & 0x3C;
	// add r9,r9,r30
	ctx.r9.u64 = ctx.r9.u64 + r30.u64;
	// srawi r10,r19,1
	xer.ca = (r19.s32 < 0) & ((r19.u32 & 0x1) != 0);
	ctx.r10.s64 = r19.s32 >> 1;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// or r9,r9,r7
	ctx.r9.u64 = ctx.r9.u64 | ctx.r7.u64;
	// rlwinm r10,r10,0,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFF8;
	// lwzx r11,r8,r27
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + r27.u32);
	// rlwinm r9,r9,0,0,16
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFF8000;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r9,r9,0,16,0
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// beq cr6,0x82725240
	if (cr6.eq) goto loc_82725240;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// addi r3,r1,108
	ctx.r3.s64 = ctx.r1.s64 + 108;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r20,108(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r19,104(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
loc_82725240:
	// lwz r11,4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// addi r28,r28,32
	r28.s64 = r28.s64 + 32;
	// extsh r18,r11
	r18.s64 = r11.s16;
	// rlwinm r9,r11,1,15,15
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// clrlwi r10,r18,30
	ctx.r10.u64 = r18.u32 & 0x3;
	// srawi r17,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	r17.s64 = r11.s32 >> 16;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// subf r9,r9,r11
	ctx.r9.s64 = r11.s64 - ctx.r9.s64;
	// stw r18,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r18.u32);
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// subf r11,r11,r29
	r11.s64 = r29.s64 - r11.s64;
	// add r10,r10,r18
	ctx.r10.u64 = ctx.r10.u64 + r18.u64;
	// stw r17,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r17.u32);
	// subf r7,r28,r11
	ctx.r7.s64 = r11.s64 - r28.s64;
	// srawi r11,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	r11.s64 = ctx.r10.s32 >> 1;
	// add r9,r9,r28
	ctx.r9.u64 = ctx.r9.u64 + r28.u64;
	// rlwinm r8,r17,2,26,29
	ctx.r8.u64 = __builtin_rotateleft64(r17.u32 | (r17.u64 << 32), 2) & 0x3C;
	// add r9,r9,r30
	ctx.r9.u64 = ctx.r9.u64 + r30.u64;
	// srawi r10,r17,1
	xer.ca = (r17.s32 < 0) & ((r17.u32 & 0x1) != 0);
	ctx.r10.s64 = r17.s32 >> 1;
	// stw r11,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r11.u32);
	// or r9,r9,r7
	ctx.r9.u64 = ctx.r9.u64 | ctx.r7.u64;
	// rlwinm r10,r10,0,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFF8;
	// lwzx r11,r8,r27
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + r27.u32);
	// rlwinm r9,r9,0,0,16
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFF8000;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r9,r9,0,16,0
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r11.u32);
	// beq cr6,0x827252d0
	if (cr6.eq) goto loc_827252D0;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r18,112(r1)
	r18.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lwz r17,116(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
loc_827252D0:
	// add r11,r25,r23
	r11.u64 = r25.u64 + r23.u64;
	// addis r28,r28,4
	r28.s64 = r28.s64 + 262144;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r28,r28,-32
	r28.s64 = r28.s64 + -32;
	// add r26,r11,r24
	r26.u64 = r11.u64 + r24.u64;
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// extsh r23,r11
	r23.s64 = r11.s16;
	// rlwinm r9,r11,1,15,15
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// clrlwi r10,r23,30
	ctx.r10.u64 = r23.u32 & 0x3;
	// srawi r16,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	r16.s64 = r11.s32 >> 16;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// subf r9,r9,r11
	ctx.r9.s64 = r11.s64 - ctx.r9.s64;
	// stw r23,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r23.u32);
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// add r9,r9,r28
	ctx.r9.u64 = ctx.r9.u64 + r28.u64;
	// add r10,r10,r23
	ctx.r10.u64 = ctx.r10.u64 + r23.u64;
	// stw r16,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r16.u32);
	// subf r11,r11,r29
	r11.s64 = r29.s64 - r11.s64;
	// rlwinm r8,r16,2,26,29
	ctx.r8.u64 = __builtin_rotateleft64(r16.u32 | (r16.u64 << 32), 2) & 0x3C;
	// srawi r25,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	r25.s64 = ctx.r10.s32 >> 1;
	// add r9,r9,r30
	ctx.r9.u64 = ctx.r9.u64 + r30.u64;
	// subf r7,r28,r11
	ctx.r7.s64 = r11.s64 - r28.s64;
	// srawi r10,r16,1
	xer.ca = (r16.s32 < 0) & ((r16.u32 & 0x1) != 0);
	ctx.r10.s64 = r16.s32 >> 1;
	// lwzx r11,r8,r27
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + r27.u32);
	// or r9,r9,r7
	ctx.r9.u64 = ctx.r9.u64 | ctx.r7.u64;
	// rlwinm r10,r10,0,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFF8;
	// stw r25,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r25.u32);
	// rlwinm r9,r9,0,0,16
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFF8000;
	// add r24,r11,r10
	r24.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r9,r9,0,16,0
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// stw r24,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r24.u32);
	// beq cr6,0x82725370
	if (cr6.eq) goto loc_82725370;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r23,116(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r16,112(r1)
	r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
loc_82725370:
	// lwz r11,4(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 4);
	// addi r5,r28,32
	ctx.r5.s64 = r28.s64 + 32;
	// extsh r14,r11
	r14.s64 = r11.s16;
	// rlwinm r9,r11,1,15,15
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// clrlwi r10,r14,30
	ctx.r10.u64 = r14.u32 & 0x3;
	// srawi r8,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	ctx.r8.s64 = r11.s32 >> 16;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// subf r9,r9,r11
	ctx.r9.s64 = r11.s64 - ctx.r9.s64;
	// stw r14,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r14.u32);
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// add r9,r9,r5
	ctx.r9.u64 = ctx.r9.u64 + ctx.r5.u64;
	// add r10,r10,r14
	ctx.r10.u64 = ctx.r10.u64 + r14.u64;
	// stw r8,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r8.u32);
	// subf r11,r11,r29
	r11.s64 = r29.s64 - r11.s64;
	// rlwinm r7,r8,2,26,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0x3C;
	// srawi r28,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	r28.s64 = ctx.r10.s32 >> 1;
	// add r9,r9,r30
	ctx.r9.u64 = ctx.r9.u64 + r30.u64;
	// subf r6,r5,r11
	ctx.r6.s64 = r11.s64 - ctx.r5.s64;
	// srawi r10,r8,1
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r8.s32 >> 1;
	// lwzx r11,r7,r27
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + r27.u32);
	// or r9,r9,r6
	ctx.r9.u64 = ctx.r9.u64 | ctx.r6.u64;
	// rlwinm r10,r10,0,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFF8;
	// stw r28,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r28.u32);
	// rlwinm r9,r9,0,0,16
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFF8000;
	// add r27,r11,r10
	r27.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r9,r9,0,16,0
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// stw r27,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r27.u32);
	// beq cr6,0x827253f8
	if (cr6.eq) goto loc_827253F8;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r14,116(r1)
	r14.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
loc_827253F8:
	// rlwinm r29,r21,5,0,26
	r29.u64 = __builtin_rotateleft64(r21.u32 | (r21.u64 << 32), 5) & 0xFFFFFFE0;
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r21,96(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lis r10,59
	ctx.r10.s64 = 3866624;
	// rlwimi r11,r21,16,0,15
	r11.u64 = (__builtin_rotateleft32(r21.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// ori r30,r10,59
	r30.u64 = ctx.r10.u64 | 59;
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r22
	ctx.r9.s64 = r22.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r29,r9
	ctx.r10.s64 = ctx.r9.s64 - r29.s64;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82725454
	if (cr6.eq) goto loc_82725454;
	// mr r6,r22
	ctx.r6.u64 = r22.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
	// lwz r21,96(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
loc_82725454:
	// lwz r10,104(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// addi r29,r29,16
	r29.s64 = r29.s64 + 16;
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// rlwimi r11,r10,16,0,15
	r11.u64 = (__builtin_rotateleft32(ctx.r10.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r22
	ctx.r9.s64 = r22.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r29,r9
	ctx.r10.s64 = ctx.r9.s64 - r29.s64;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x827254a4
	if (cr6.eq) goto loc_827254A4;
	// mr r6,r22
	ctx.r6.u64 = r22.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// addi r3,r1,108
	ctx.r3.s64 = ctx.r1.s64 + 108;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
loc_827254A4:
	// mr r11,r25
	r11.u64 = r25.u64;
	// addis r29,r29,4
	r29.s64 = r29.s64 + 262144;
	// rlwimi r11,r24,16,0,15
	r11.u64 = (__builtin_rotateleft32(r24.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// addi r29,r29,-16
	r29.s64 = r29.s64 + -16;
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r22
	ctx.r9.s64 = r22.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r29,r9
	ctx.r10.s64 = ctx.r9.s64 - r29.s64;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x827254f4
	if (cr6.eq) goto loc_827254F4;
	// mr r6,r22
	ctx.r6.u64 = r22.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
loc_827254F4:
	// mr r11,r28
	r11.u64 = r28.u64;
	// addi r5,r29,16
	ctx.r5.s64 = r29.s64 + 16;
	// rlwimi r11,r27,16,0,15
	r11.u64 = (__builtin_rotateleft32(r27.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r22
	ctx.r9.s64 = r22.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r5,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r5.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272553c
	if (cr6.eq) goto loc_8272553C;
	// mr r6,r22
	ctx.r6.u64 = r22.u64;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,132
	ctx.r3.s64 = ctx.r1.s64 + 132;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
loc_8272553C:
	// lis r28,-32126
	r28.s64 = -2105409536;
	// lhz r10,74(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 74);
	// srawi r9,r19,2
	xer.ca = (r19.s32 < 0) & ((r19.u32 & 0x3) != 0);
	ctx.r9.s64 = r19.s32 >> 2;
	// lwz r22,332(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 332);
	// srawi r8,r20,2
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x3) != 0);
	ctx.r8.s64 = r20.s32 >> 2;
	// mullw r9,r9,r10
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r10.s32);
	// lwz r11,-25016(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -25016);
	// srawi r7,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	ctx.r7.s64 = r11.s32 >> 2;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// addze r7,r7
	temp.s64 = ctx.r7.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r7.u32;
	ctx.r7.s64 = temp.s64;
	// rotlwi r30,r10,1
	r30.u64 = __builtin_rotateleft32(ctx.r10.u32, 1);
	// rlwinm r7,r7,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// add r29,r9,r22
	r29.u64 = ctx.r9.u64 + r22.u64;
	// subf. r7,r7,r11
	ctx.r7.s64 = r11.s64 - ctx.r7.s64;
	cr0.compare<int32_t>(ctx.r7.s32, 0, xer);
	// bne 0x827255e8
	if (!cr0.eq) goto loc_827255E8;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_827255E8:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// clrlwi r27,r20,30
	r27.u64 = r20.u32 & 0x3;
	// clrlwi r25,r19,30
	r25.u64 = r19.u32 & 0x3;
	// li r26,1
	r26.s64 = 1;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r11,-25016(r28)
	PPC_STORE_U32(r28.u32 + -25016, r11.u32);
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// add r11,r11,r25
	r11.u64 = r11.u64 + r25.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r5,r15
	ctx.r5.u64 = r15.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r9,r25
	ctx.r9.u64 = r25.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8272566c
	if (cr6.eq) goto loc_8272566C;
	// li r10,0
	ctx.r10.s64 = 0;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r15
	ctx.r5.u64 = r15.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_8272566C:
	// lhz r10,74(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 74);
	// srawi r9,r17,2
	xer.ca = (r17.s32 < 0) & ((r17.u32 & 0x3) != 0);
	ctx.r9.s64 = r17.s32 >> 2;
	// lwz r11,-25016(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -25016);
	// srawi r8,r18,2
	xer.ca = (r18.s32 < 0) & ((r18.u32 & 0x3) != 0);
	ctx.r8.s64 = r18.s32 >> 2;
	// mullw r9,r9,r10
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r10.s32);
	// srawi r7,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	ctx.r7.s64 = r11.s32 >> 2;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// addze r8,r7
	temp.s64 = ctx.r7.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r7.u32;
	ctx.r8.s64 = temp.s64;
	// add r9,r9,r22
	ctx.r9.u64 = ctx.r9.u64 + r22.u64;
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// rotlwi r30,r10,1
	r30.u64 = __builtin_rotateleft32(ctx.r10.u32, 1);
	// addi r24,r15,8
	r24.s64 = r15.s64 + 8;
	// addi r29,r9,8
	r29.s64 = ctx.r9.s64 + 8;
	// subf. r10,r8,r11
	ctx.r10.s64 = r11.s64 - ctx.r8.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82725718
	if (!cr0.eq) goto loc_82725718;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_82725718:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// clrlwi r27,r18,30
	r27.u64 = r18.u32 & 0x3;
	// clrlwi r25,r17,30
	r25.u64 = r17.u32 & 0x3;
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// stw r11,-25016(r28)
	PPC_STORE_U32(r28.u32 + -25016, r11.u32);
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// add r11,r11,r25
	r11.u64 = r11.u64 + r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r9,r25
	ctx.r9.u64 = r25.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82725798
	if (cr6.eq) goto loc_82725798;
	// li r10,0
	ctx.r10.s64 = 0;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_82725798:
	// srawi r9,r16,2
	xer.ca = (r16.s32 < 0) & ((r16.u32 & 0x3) != 0);
	ctx.r9.s64 = r16.s32 >> 2;
	// lhz r10,74(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 74);
	// lwz r11,-25016(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -25016);
	// srawi r8,r23,2
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x3) != 0);
	ctx.r8.s64 = r23.s32 >> 2;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// srawi r7,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	ctx.r7.s64 = r11.s32 >> 2;
	// mullw r9,r9,r10
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r10.s32);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// addze r8,r7
	temp.s64 = ctx.r7.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r7.u32;
	ctx.r8.s64 = temp.s64;
	// add r24,r10,r15
	r24.u64 = ctx.r10.u64 + r15.u64;
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// rotlwi r30,r10,1
	r30.u64 = __builtin_rotateleft32(ctx.r10.u32, 1);
	// add r29,r9,r22
	r29.u64 = ctx.r9.u64 + r22.u64;
	// subf. r10,r8,r11
	ctx.r10.s64 = r11.s64 - ctx.r8.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82725844
	if (!cr0.eq) goto loc_82725844;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_82725844:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// clrlwi r27,r23,30
	r27.u64 = r23.u32 & 0x3;
	// clrlwi r25,r16,30
	r25.u64 = r16.u32 & 0x3;
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// stw r11,-25016(r28)
	PPC_STORE_U32(r28.u32 + -25016, r11.u32);
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// add r11,r11,r25
	r11.u64 = r11.u64 + r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r9,r25
	ctx.r9.u64 = r25.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x827258c4
	if (cr6.eq) goto loc_827258C4;
	// li r10,0
	ctx.r10.s64 = 0;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_827258C4:
	// lwz r7,112(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lhz r10,74(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 74);
	// srawi r9,r7,2
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x3) != 0);
	ctx.r9.s64 = ctx.r7.s32 >> 2;
	// lwz r11,-25016(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + -25016);
	// srawi r8,r14,2
	xer.ca = (r14.s32 < 0) & ((r14.u32 & 0x3) != 0);
	ctx.r8.s64 = r14.s32 >> 2;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// srawi r6,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	ctx.r6.s64 = r11.s32 >> 2;
	// mullw r9,r9,r10
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r10.s32);
	// add r8,r9,r8
	ctx.r8.u64 = ctx.r9.u64 + ctx.r8.u64;
	// addze r6,r6
	temp.s64 = ctx.r6.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r6.u32;
	ctx.r6.s64 = temp.s64;
	// add r9,r10,r15
	ctx.r9.u64 = ctx.r10.u64 + r15.u64;
	// add r8,r8,r22
	ctx.r8.u64 = ctx.r8.u64 + r22.u64;
	// rlwinm r6,r6,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r24,r9,8
	r24.s64 = ctx.r9.s64 + 8;
	// addi r29,r8,8
	r29.s64 = ctx.r8.s64 + 8;
	// subf. r9,r6,r11
	ctx.r9.s64 = r11.s64 - ctx.r6.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// rotlwi r30,r10,1
	r30.u64 = __builtin_rotateleft32(ctx.r10.u32, 1);
	// bne 0x8272597c
	if (!cr0.eq) goto loc_8272597C;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_8272597C:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// clrlwi r27,r14,30
	r27.u64 = r14.u32 & 0x3;
	// clrlwi r25,r7,30
	r25.u64 = ctx.r7.u32 & 0x3;
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// stw r11,-25016(r28)
	PPC_STORE_U32(r28.u32 + -25016, r11.u32);
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// add r11,r11,r25
	r11.u64 = r11.u64 + r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r9,r25
	ctx.r9.u64 = r25.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x827259fc
	if (cr6.eq) goto loc_827259FC;
	// li r10,0
	ctx.r10.s64 = 0;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_827259FC:
	// lis r30,-32126
	r30.s64 = -2105409536;
	// lwz r7,100(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// srawi r9,r21,2
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x3) != 0);
	ctx.r9.s64 = r21.s32 >> 2;
	// lhz r10,76(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// srawi r8,r7,2
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x3) != 0);
	ctx.r8.s64 = ctx.r7.s32 >> 2;
	// lwz r22,340(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 340);
	// mullw r9,r9,r10
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r10.s32);
	// lwz r20,348(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 348);
	// lwz r11,-25012(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -25012);
	// srawi r6,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r6.s64 = r11.s32 >> 3;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// addze r6,r6
	temp.s64 = ctx.r6.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r6.u32;
	ctx.r6.s64 = temp.s64;
	// add r3,r9,r22
	ctx.r3.u64 = ctx.r9.u64 + r22.u64;
	// rlwinm r6,r6,3,0,28
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// add r29,r9,r20
	r29.u64 = ctx.r9.u64 + r20.u64;
	// subf. r6,r6,r11
	ctx.r6.s64 = r11.s64 - ctx.r6.s64;
	cr0.compare<int32_t>(ctx.r6.s32, 0, xer);
	// rotlwi r6,r10,1
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r10.u32, 1);
	// bne 0x82725ab4
	if (!cr0.eq) goto loc_82725AB4;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r6,128
	r11.s64 = ctx.r6.s64 + 128;
	// dcbt r11,r3
	// addi r11,r6,64
	r11.s64 = ctx.r6.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r6,32
	r11.s64 = ctx.r6.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r6,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r6,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r6,r11
	r11.s64 = r11.s64 - ctx.r6.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// li r11,0
	r11.s64 = 0;
loc_82725AB4:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r23,364(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 364);
	// clrlwi r28,r7,30
	r28.u64 = ctx.r7.u32 & 0x3;
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// clrlwi r27,r21,30
	r27.u64 = r21.u32 & 0x3;
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// stw r11,-25012(r30)
	PPC_STORE_U32(r30.u32 + -25012, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lhz r10,76(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// lwz r11,-25012(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -25012);
	// rotlwi r6,r10,1
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r10.u32, 1);
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82725b90
	if (!cr0.eq) goto loc_82725B90;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r6,128
	r11.s64 = ctx.r6.s64 + 128;
	// dcbt r11,r29
	// addi r11,r6,64
	r11.s64 = ctx.r6.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r6,32
	r11.s64 = ctx.r6.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r6,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r6,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r6,r11
	r11.s64 = r11.s64 - ctx.r6.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_82725B90:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r25,372(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 372);
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r11,-25012(r30)
	PPC_STORE_U32(r30.u32 + -25012, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r4,104(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lhz r10,76(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// addi r5,r23,4
	ctx.r5.s64 = r23.s64 + 4;
	// lwz r7,108(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// srawi r9,r4,2
	xer.ca = (ctx.r4.s32 < 0) & ((ctx.r4.u32 & 0x3) != 0);
	ctx.r9.s64 = ctx.r4.s32 >> 2;
	// lwz r11,-25012(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -25012);
	// rotlwi r6,r10,1
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r10.u32, 1);
	// mullw r9,r9,r10
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r10.s32);
	// srawi r8,r7,2
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x3) != 0);
	ctx.r8.s64 = ctx.r7.s32 >> 2;
	// addi r24,r25,4
	r24.s64 = r25.s64 + 4;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// srawi r8,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r8.s64 = r11.s32 >> 3;
	// addze r10,r8
	temp.s64 = ctx.r8.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r8.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// add r10,r9,r22
	ctx.r10.u64 = ctx.r9.u64 + r22.u64;
	// add r9,r9,r20
	ctx.r9.u64 = ctx.r9.u64 + r20.u64;
	// addi r3,r10,4
	ctx.r3.s64 = ctx.r10.s64 + 4;
	// addi r29,r9,4
	r29.s64 = ctx.r9.s64 + 4;
	// bne 0x82725c98
	if (!cr0.eq) goto loc_82725C98;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r6,128
	r11.s64 = ctx.r6.s64 + 128;
	// dcbt r11,r3
	// addi r11,r6,64
	r11.s64 = ctx.r6.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r6,32
	r11.s64 = ctx.r6.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r6,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r6,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r6,r11
	r11.s64 = r11.s64 - ctx.r6.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// li r11,0
	r11.s64 = 0;
loc_82725C98:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// clrlwi r28,r7,30
	r28.u64 = ctx.r7.u32 & 0x3;
	// clrlwi r27,r4,30
	r27.u64 = ctx.r4.u32 & 0x3;
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// stw r11,-25012(r30)
	PPC_STORE_U32(r30.u32 + -25012, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lhz r10,76(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// lwz r11,-25012(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -25012);
	// rotlwi r6,r10,1
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r10.u32, 1);
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82725d6c
	if (!cr0.eq) goto loc_82725D6C;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r6,128
	r11.s64 = ctx.r6.s64 + 128;
	// dcbt r11,r29
	// addi r11,r6,64
	r11.s64 = ctx.r6.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r6,32
	r11.s64 = ctx.r6.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r6,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r6,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r6,r11
	r11.s64 = r11.s64 - ctx.r6.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_82725D6C:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r11,-25012(r30)
	PPC_STORE_U32(r30.u32 + -25012, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r4,120(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// lhz r11,76(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// lwz r7,124(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// srawi r9,r4,2
	xer.ca = (ctx.r4.s32 < 0) & ((ctx.r4.u32 & 0x3) != 0);
	ctx.r9.s64 = ctx.r4.s32 >> 2;
	// lwz r10,-25012(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + -25012);
	// add r5,r11,r23
	ctx.r5.u64 = r11.u64 + r23.u64;
	// srawi r8,r7,2
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x3) != 0);
	ctx.r8.s64 = ctx.r7.s32 >> 2;
	// mullw r9,r9,r11
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(r11.s32);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// srawi r8,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r8.s64 = ctx.r10.s32 >> 3;
	// add r24,r11,r25
	r24.u64 = r11.u64 + r25.u64;
	// addze r8,r8
	temp.s64 = ctx.r8.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r8.u32;
	ctx.r8.s64 = temp.s64;
	// rotlwi r6,r11,1
	ctx.r6.u64 = __builtin_rotateleft32(r11.u32, 1);
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r8,r8,3,0,28
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// add r3,r11,r22
	ctx.r3.u64 = r11.u64 + r22.u64;
	// add r29,r11,r20
	r29.u64 = r11.u64 + r20.u64;
	// subf. r8,r8,r10
	ctx.r8.s64 = ctx.r10.s64 - ctx.r8.s64;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// bne 0x82725e6c
	if (!cr0.eq) goto loc_82725E6C;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r6,128
	r11.s64 = ctx.r6.s64 + 128;
	// dcbt r11,r3
	// addi r11,r6,64
	r11.s64 = ctx.r6.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r6,32
	r11.s64 = ctx.r6.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r6,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r6,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r6,r11
	r11.s64 = r11.s64 - ctx.r6.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// li r10,0
	ctx.r10.s64 = 0;
loc_82725E6C:
	// addi r11,r10,1
	r11.s64 = ctx.r10.s64 + 1;
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// clrlwi r28,r7,30
	r28.u64 = ctx.r7.u32 & 0x3;
	// clrlwi r27,r4,30
	r27.u64 = ctx.r4.u32 & 0x3;
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// stw r11,-25012(r30)
	PPC_STORE_U32(r30.u32 + -25012, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lhz r10,76(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// lwz r11,-25012(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -25012);
	// rotlwi r6,r10,1
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r10.u32, 1);
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82725f40
	if (!cr0.eq) goto loc_82725F40;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r6,128
	r11.s64 = ctx.r6.s64 + 128;
	// dcbt r11,r29
	// addi r11,r6,64
	r11.s64 = ctx.r6.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r6,32
	r11.s64 = ctx.r6.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r6,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r6,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r6,r11
	r11.s64 = r11.s64 - ctx.r6.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_82725F40:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r11,-25012(r30)
	PPC_STORE_U32(r30.u32 + -25012, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r27,128(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// lhz r11,76(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// lwz r4,132(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// srawi r9,r27,2
	xer.ca = (r27.s32 < 0) & ((r27.u32 & 0x3) != 0);
	ctx.r9.s64 = r27.s32 >> 2;
	// lwz r10,-25012(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + -25012);
	// add r7,r11,r25
	ctx.r7.u64 = r11.u64 + r25.u64;
	// mullw r9,r9,r11
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(r11.s32);
	// srawi r8,r4,2
	xer.ca = (ctx.r4.s32 < 0) & ((ctx.r4.u32 & 0x3) != 0);
	ctx.r8.s64 = ctx.r4.s32 >> 2;
	// srawi r6,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r6.s64 = ctx.r10.s32 >> 3;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// add r8,r11,r23
	ctx.r8.u64 = r11.u64 + r23.u64;
	// addze r6,r6
	temp.s64 = ctx.r6.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r6.u32;
	ctx.r6.s64 = temp.s64;
	// addi r5,r8,4
	ctx.r5.s64 = ctx.r8.s64 + 4;
	// rlwinm r8,r6,3,0,28
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// rotlwi r6,r11,1
	ctx.r6.u64 = __builtin_rotateleft32(r11.u32, 1);
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// addi r25,r7,4
	r25.s64 = ctx.r7.s64 + 4;
	// add r9,r11,r22
	ctx.r9.u64 = r11.u64 + r22.u64;
	// add r11,r11,r20
	r11.u64 = r11.u64 + r20.u64;
	// subf. r8,r8,r10
	ctx.r8.s64 = ctx.r10.s64 - ctx.r8.s64;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// addi r3,r9,4
	ctx.r3.s64 = ctx.r9.s64 + 4;
	// addi r29,r11,4
	r29.s64 = r11.s64 + 4;
	// bne 0x82726050
	if (!cr0.eq) goto loc_82726050;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r6,128
	r11.s64 = ctx.r6.s64 + 128;
	// dcbt r11,r3
	// addi r11,r6,64
	r11.s64 = ctx.r6.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r6,32
	r11.s64 = ctx.r6.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r6,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r6,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r6,r11
	r11.s64 = r11.s64 - ctx.r6.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// li r10,0
	ctx.r10.s64 = 0;
loc_82726050:
	// addi r11,r10,1
	r11.s64 = ctx.r10.s64 + 1;
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// clrlwi r28,r4,30
	r28.u64 = ctx.r4.u32 & 0x3;
	// clrlwi r27,r27,30
	r27.u64 = r27.u32 & 0x3;
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// stw r11,-25012(r30)
	PPC_STORE_U32(r30.u32 + -25012, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lhz r10,76(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 76);
	// lwz r11,-25012(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -25012);
	// rotlwi r6,r10,1
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r10.u32, 1);
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82726124
	if (!cr0.eq) goto loc_82726124;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r6,128
	r11.s64 = ctx.r6.s64 + 128;
	// dcbt r11,r29
	// addi r11,r6,64
	r11.s64 = ctx.r6.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r6,32
	r11.s64 = ctx.r6.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r6,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r6,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r6,r11
	r11.s64 = r11.s64 - ctx.r6.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_82726124:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r26.u32);
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r11,-25012(r30)
	PPC_STORE_U32(r30.u32 + -25012, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// b 0x8239bd10
	return;
}

__attribute__((alias("__imp__sub_82726170"))) PPC_WEAK_FUNC(sub_82726170);
PPC_FUNC_IMPL(__imp__sub_82726170) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcc0
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r23,r4
	r23.u64 = ctx.r4.u64;
	// mr r22,r3
	r22.u64 = ctx.r3.u64;
	// li r28,0
	r28.s64 = 0;
	// lhz r10,52(r23)
	ctx.r10.u64 = PPC_LOAD_U16(r23.u32 + 52);
	// lhz r6,50(r23)
	ctx.r6.u64 = PPC_LOAD_U16(r23.u32 + 50);
	// rlwinm r14,r10,31,1,31
	r14.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// lwz r9,220(r22)
	ctx.r9.u64 = PPC_LOAD_U32(r22.u32 + 220);
	// lwz r10,3720(r22)
	ctx.r10.u64 = PPC_LOAD_U32(r22.u32 + 3720);
	// rlwinm r6,r6,31,1,31
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 31) & 0x7FFFFFFF;
	// lwz r11,224(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 224);
	// cmplwi cr6,r14,0
	cr6.compare<uint32_t>(r14.u32, 0, xer);
	// add r20,r10,r9
	r20.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lwz r7,3724(r22)
	ctx.r7.u64 = PPC_LOAD_U32(r22.u32 + 3724);
	// lwz r8,3728(r22)
	ctx.r8.u64 = PPC_LOAD_U32(r22.u32 + 3728);
	// lwz r9,3736(r22)
	ctx.r9.u64 = PPC_LOAD_U32(r22.u32 + 3736);
	// add r21,r7,r11
	r21.u64 = ctx.r7.u64 + r11.u64;
	// lwz r10,3740(r22)
	ctx.r10.u64 = PPC_LOAD_U32(r22.u32 + 3740);
	// add r19,r8,r11
	r19.u64 = ctx.r8.u64 + r11.u64;
	// lwz r15,268(r22)
	r15.u64 = PPC_LOAD_U32(r22.u32 + 268);
	// add r17,r9,r11
	r17.u64 = ctx.r9.u64 + r11.u64;
	// lwz r18,3756(r22)
	r18.u64 = PPC_LOAD_U32(r22.u32 + 3756);
	// add r16,r10,r11
	r16.u64 = ctx.r10.u64 + r11.u64;
	// stw r6,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r6.u32);
	// beq cr6,0x827262c4
	if (cr6.eq) goto loc_827262C4;
loc_827261DC:
	// mr r30,r20
	r30.u64 = r20.u64;
	// li r29,0
	r29.s64 = 0;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x82726298
	if (cr6.eq) goto loc_82726298;
	// mr r31,r21
	r31.u64 = r21.u64;
	// subf r27,r21,r19
	r27.s64 = r19.s64 - r21.s64;
	// subf r26,r21,r16
	r26.s64 = r16.s64 - r21.s64;
	// subf r25,r21,r17
	r25.s64 = r17.s64 - r21.s64;
	// subf r24,r20,r18
	r24.s64 = r18.s64 - r20.s64;
loc_82726200:
	// lwz r11,0(r15)
	r11.u64 = PPC_LOAD_U32(r15.u32 + 0);
	// rlwinm r11,r11,24,29,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 24) & 0x7;
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// beq cr6,0x8272627c
	if (cr6.eq) goto loc_8272627C;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// mr r10,r31
	ctx.r10.u64 = r31.u64;
	// mr r9,r30
	ctx.r9.u64 = r30.u64;
	// add r8,r26,r31
	ctx.r8.u64 = r26.u64 + r31.u64;
	// add r7,r25,r31
	ctx.r7.u64 = r25.u64 + r31.u64;
	// add r6,r24,r30
	ctx.r6.u64 = r24.u64 + r30.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// blt cr6,0x82726270
	if (cr6.lt) goto loc_82726270;
	// beq cr6,0x82726260
	if (cr6.eq) goto loc_82726260;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// add r11,r27,r31
	r11.u64 = r27.u64 + r31.u64;
	// blt cr6,0x82726254
	if (cr6.lt) goto loc_82726254;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// bl 0x82725150
	sub_82725150(ctx, base);
	// b 0x8272627c
	goto loc_8272627C;
loc_82726254:
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// bl 0x82723920
	sub_82723920(ctx, base);
	// b 0x8272627c
	goto loc_8272627C;
loc_82726260:
	// add r11,r27,r31
	r11.u64 = r27.u64 + r31.u64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// bl 0x82724158
	sub_82724158(ctx, base);
	// b 0x8272627c
	goto loc_8272627C;
loc_82726270:
	// add r11,r27,r31
	r11.u64 = r27.u64 + r31.u64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// bl 0x82723480
	sub_82723480(ctx, base);
loc_8272627C:
	// lwz r6,96(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// addi r30,r30,16
	r30.s64 = r30.s64 + 16;
	// addi r31,r31,8
	r31.s64 = r31.s64 + 8;
	// addi r15,r15,20
	r15.s64 = r15.s64 + 20;
	// cmplw cr6,r29,r6
	cr6.compare<uint32_t>(r29.u32, ctx.r6.u32, xer);
	// blt cr6,0x82726200
	if (cr6.lt) goto loc_82726200;
loc_82726298:
	// lwz r11,232(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 232);
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// lwz r10,228(r22)
	ctx.r10.u64 = PPC_LOAD_U32(r22.u32 + 228);
	// add r21,r11,r21
	r21.u64 = r11.u64 + r21.u64;
	// add r20,r10,r20
	r20.u64 = ctx.r10.u64 + r20.u64;
	// add r19,r11,r19
	r19.u64 = r11.u64 + r19.u64;
	// add r18,r10,r18
	r18.u64 = ctx.r10.u64 + r18.u64;
	// add r17,r11,r17
	r17.u64 = r11.u64 + r17.u64;
	// add r16,r11,r16
	r16.u64 = r11.u64 + r16.u64;
	// cmplw cr6,r28,r14
	cr6.compare<uint32_t>(r28.u32, r14.u32, xer);
	// blt cr6,0x827261dc
	if (cr6.lt) goto loc_827261DC;
loc_827262C4:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// b 0x8239bd10
	return;
}

__attribute__((alias("__imp__sub_827262D0"))) PPC_WEAK_FUNC(sub_827262D0);
PPC_FUNC_IMPL(__imp__sub_827262D0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcc0
	// stwu r1,-2736(r1)
	ea = -2736 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r9,268(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 268);
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r23,r5
	r23.u64 = ctx.r5.u64;
	// addi r11,r31,74
	r11.s64 = r31.s64 + 74;
	// addi r10,r31,76
	ctx.r10.s64 = r31.s64 + 76;
	// li r6,0
	ctx.r6.s64 = 0;
	// stw r9,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r9.u32);
	// addi r9,r31,50
	ctx.r9.s64 = r31.s64 + 50;
	// lhz r7,52(r31)
	ctx.r7.u64 = PPC_LOAD_U16(r31.u32 + 52);
	// addi r8,r23,4
	ctx.r8.s64 = r23.s64 + 4;
	// lhz r11,0(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// mr r3,r6
	ctx.r3.u64 = ctx.r6.u64;
	// rlwinm r5,r7,31,1,31
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 31) & 0x7FFFFFFF;
	// lhz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// addi r7,r23,16
	ctx.r7.s64 = r23.s64 + 16;
	// stw r23,2772(r1)
	PPC_STORE_U32(ctx.r1.u32 + 2772, r23.u32);
	// lhz r9,0(r9)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// stw r6,0(r23)
	PPC_STORE_U32(r23.u32 + 0, ctx.r6.u32);
	// rlwinm r9,r9,31,1,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 31) & 0x7FFFFFFF;
	// stw r6,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r6.u32);
	// stw r5,1212(r1)
	PPC_STORE_U32(ctx.r1.u32 + 1212, ctx.r5.u32);
	// stw r6,668(r1)
	PPC_STORE_U32(ctx.r1.u32 + 668, ctx.r6.u32);
	// stw r6,672(r1)
	PPC_STORE_U32(ctx.r1.u32 + 672, ctx.r6.u32);
	// stw r6,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r6.u32);
	// stw r9,676(r1)
	PPC_STORE_U32(ctx.r1.u32 + 676, ctx.r9.u32);
	// sth r6,0(r7)
	PPC_STORE_U16(ctx.r7.u32 + 0, ctx.r6.u16);
	// bne cr6,0x82726350
	if (!cr6.eq) goto loc_82726350;
	// b 0x82732794
	goto loc_82732794;
loc_82726350:
	// rlwinm r11,r11,4,0,27
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// addi r7,r23,8
	ctx.r7.s64 = r23.s64 + 8;
	// addi r5,r23,12
	ctx.r5.s64 = r23.s64 + 12;
	// addi r9,r23,18
	ctx.r9.s64 = r23.s64 + 18;
	// stw r11,1208(r1)
	PPC_STORE_U32(ctx.r1.u32 + 1208, r11.u32);
	// rlwinm r11,r10,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// stw r11,1216(r1)
	PPC_STORE_U32(ctx.r1.u32 + 1216, r11.u32);
	// lis r11,-32244
	r11.s64 = -2113142784;
	// addi r11,r11,30136
	r11.s64 = r11.s64 + 30136;
	// stw r11,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, r11.u32);
	// lis r11,-32126
	r11.s64 = -2105409536;
	// addi r11,r11,-25004
	r11.s64 = r11.s64 + -25004;
	// stw r11,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, r11.u32);
	// lis r11,-32126
	r11.s64 = -2105409536;
	// addi r11,r11,-25008
	r11.s64 = r11.s64 + -25008;
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// b 0x82726398
	goto loc_82726398;
loc_82726394:
	// li r6,0
	ctx.r6.s64 = 0;
loc_82726398:
	// lwz r11,676(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 676);
	// stw r6,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r6.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lwz r11,668(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 668);
	// stw r11,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, r11.u32);
	// lwz r11,672(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 672);
	// stw r11,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, r11.u32);
	// sth r6,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r6.u16);
	// bne cr6,0x827263c0
	if (!cr6.eq) goto loc_827263C0;
	// b 0x82732734
	goto loc_82732734;
loc_827263C0:
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rlwinm r10,r11,24,29,31
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 24) & 0x7;
	// cmplwi cr6,r10,4
	cr6.compare<uint32_t>(ctx.r10.u32, 4, xer);
	// bne cr6,0x827263d8
	if (!cr6.eq) goto loc_827263D8;
	// b 0x827326c0
	goto loc_827326C0;
loc_827263D8:
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x8272a5d0
	if (!cr6.eq) goto loc_8272A5D0;
	// addi r22,r31,50
	r22.s64 = r31.s64 + 50;
	// lwz r10,160(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// addi r15,r31,74
	r15.s64 = r31.s64 + 74;
	// lwz r8,0(r23)
	ctx.r8.u64 = PPC_LOAD_U32(r23.u32 + 0);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// lhz r6,0(r22)
	ctx.r6.u64 = PPC_LOAD_U16(r22.u32 + 0);
	// lhz r30,0(r15)
	r30.u64 = PPC_LOAD_U16(r15.u32 + 0);
	// beq cr6,0x82726418
	if (cr6.eq) goto loc_82726418;
	// lwz r9,1240(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1240);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r9,r10
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// li r10,0
	ctx.r10.s64 = 0;
	// beq cr6,0x8272641c
	if (cr6.eq) goto loc_8272641C;
loc_82726418:
	// li r10,1
	ctx.r10.s64 = 1;
loc_8272641C:
	// rlwinm r9,r11,27,29,31
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x7;
	// stw r10,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, ctx.r10.u32);
	// lwz r11,0(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	// lwz r10,0(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// lwz r26,392(r31)
	r26.u64 = PPC_LOAD_U32(r31.u32 + 392);
	// lwz r25,408(r31)
	r25.u64 = PPC_LOAD_U32(r31.u32 + 408);
	// cmplwi cr6,r9,3
	cr6.compare<uint32_t>(ctx.r9.u32, 3, xer);
	// lwz r27,412(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + 412);
	// add r26,r26,r10
	r26.u64 = r26.u64 + ctx.r10.u64;
	// lwz r28,296(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 296);
	// add r25,r25,r11
	r25.u64 = r25.u64 + r11.u64;
	// lwz r29,312(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 312);
	// add r27,r27,r11
	r27.u64 = r27.u64 + r11.u64;
	// lwz r3,316(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 316);
	// add r28,r28,r10
	r28.u64 = r28.u64 + ctx.r10.u64;
	// lwz r4,344(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 344);
	// add r29,r29,r11
	r29.u64 = r29.u64 + r11.u64;
	// lwz r5,360(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 360);
	// add r3,r3,r11
	ctx.r3.u64 = ctx.r3.u64 + r11.u64;
	// lwz r7,364(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 364);
	// add r16,r4,r10
	r16.u64 = ctx.r4.u64 + ctx.r10.u64;
	// add r14,r5,r11
	r14.u64 = ctx.r5.u64 + r11.u64;
	// lhz r21,62(r31)
	r21.u64 = PPC_LOAD_U16(r31.u32 + 62);
	// add r20,r7,r11
	r20.u64 = ctx.r7.u64 + r11.u64;
	// lhz r18,66(r31)
	r18.u64 = PPC_LOAD_U16(r31.u32 + 66);
	// lhz r19,64(r31)
	r19.u64 = PPC_LOAD_U16(r31.u32 + 64);
	// lhz r17,68(r31)
	r17.u64 = PPC_LOAD_U16(r31.u32 + 68);
	// lwz r24,188(r31)
	r24.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// stw r25,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, r25.u32);
	// stw r26,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, r26.u32);
	// stw r27,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, r27.u32);
	// stw r28,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, r28.u32);
	// stw r29,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r29.u32);
	// stw r3,188(r1)
	PPC_STORE_U32(ctx.r1.u32 + 188, ctx.r3.u32);
	// stw r16,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, r16.u32);
	// stw r14,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, r14.u32);
	// stw r20,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r20.u32);
	// ble cr6,0x827264bc
	if (!cr6.gt) goto loc_827264BC;
	// b 0x827326bc
	goto loc_827326BC;
loc_827264BC:
	// lis r12,-32142
	r12.s64 = -2106458112;
	// addi r12,r12,25812
	r12.s64 = r12.s64 + 25812;
	// rlwinm r0,r9,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	return;
	// lwz r19,-32344(r18)
	r19.u64 = PPC_LOAD_U32(r18.u32 + -32344);
	// lwz r19,-28572(r18)
	r19.u64 = PPC_LOAD_U32(r18.u32 + -28572);
	// lwz r19,29492(r18)
	r19.u64 = PPC_LOAD_U32(r18.u32 + 29492);
	// lwz r19,25828(r18)
	r19.u64 = PPC_LOAD_U32(r18.u32 + 25828);
	// li r23,0
	r23.s64 = 0;
	// lwz r25,136(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// lwz r7,1492(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// srawi r26,r6,1
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x1) != 0);
	r26.s64 = ctx.r6.s32 >> 1;
	// lwz r10,1496(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// mr r11,r23
	r11.u64 = r23.u64;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// stw r23,232(r1)
	PPC_STORE_U32(ctx.r1.u32 + 232, r23.u32);
	// stw r23,228(r1)
	PPC_STORE_U32(ctx.r1.u32 + 228, r23.u32);
	// stw r23,224(r1)
	PPC_STORE_U32(ctx.r1.u32 + 224, r23.u32);
	// beq cr6,0x82726594
	if (cr6.eq) goto loc_82726594;
	// lwz r5,112(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// addi r9,r8,-2
	ctx.r9.s64 = ctx.r8.s64 + -2;
	// lwz r5,-20(r5)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r5.u32 + -20);
	// rlwinm r4,r5,0,14,14
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x82726594
	if (cr6.eq) goto loc_82726594;
	// rlwinm r11,r5,0,21,23
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 0) & 0x700;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82726544
	if (!cr6.eq) goto loc_82726544;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r5,r9,r7
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r9.u32 + ctx.r7.u32);
	// lhzx r9,r9,r10
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r9.u32 + ctx.r10.u32);
	// b 0x82726588
	goto loc_82726588;
loc_82726544:
	// add r11,r9,r6
	r11.u64 = ctx.r9.u64 + ctx.r6.u64;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r5,r11,1,0,30
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r4,r9,r7
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r9.u32 + ctx.r7.u32);
	// lhzx r29,r5,r7
	r29.u64 = PPC_LOAD_U16(ctx.r5.u32 + ctx.r7.u32);
	// extsh r3,r4
	ctx.r3.s64 = ctx.r4.s16;
	// lhzx r28,r5,r10
	r28.u64 = PPC_LOAD_U16(ctx.r5.u32 + ctx.r10.u32);
	// lhzx r4,r9,r10
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r9.u32 + ctx.r10.u32);
	// extsh r5,r29
	ctx.r5.s64 = r29.s16;
	// extsh r9,r28
	ctx.r9.s64 = r28.s16;
	// extsh r4,r4
	ctx.r4.s64 = ctx.r4.s16;
	// add r5,r5,r3
	ctx.r5.u64 = ctx.r5.u64 + ctx.r3.u64;
	// add r9,r9,r4
	ctx.r9.u64 = ctx.r9.u64 + ctx.r4.u64;
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// srawi r5,r5,1
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x1) != 0);
	ctx.r5.s64 = ctx.r5.s32 >> 1;
	// srawi r9,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 1;
loc_82726588:
	// sth r9,224(r1)
	PPC_STORE_U16(ctx.r1.u32 + 224, ctx.r9.u16);
	// li r11,1
	r11.s64 = 1;
	// sth r5,226(r1)
	PPC_STORE_U16(ctx.r1.u32 + 226, ctx.r5.u16);
loc_82726594:
	// lwz r9,152(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne cr6,0x82726738
	if (!cr6.eq) goto loc_82726738;
	// rlwinm r9,r26,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r5,r6,1,0,30
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r26,r9
	ctx.r9.u64 = r26.u64 + ctx.r9.u64;
	// subf r3,r5,r8
	ctx.r3.s64 = ctx.r8.s64 - ctx.r5.s64;
	// lwz r5,112(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r27,r9,r5
	r27.s64 = ctx.r5.s64 - ctx.r9.s64;
	// lwz r9,0(r27)
	ctx.r9.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// rlwinm r5,r9,0,14,14
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x82726654
	if (cr6.eq) goto loc_82726654;
	// rlwinm r9,r9,0,21,23
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x700;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// rlwinm r9,r3,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// bne cr6,0x827265fc
	if (!cr6.eq) goto loc_827265FC;
	// lhzx r28,r9,r7
	r28.u64 = PPC_LOAD_U16(ctx.r9.u32 + ctx.r7.u32);
	// rlwinm r5,r11,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r4,r1,226
	ctx.r4.s64 = ctx.r1.s64 + 226;
	// lhzx r9,r9,r10
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r9.u32 + ctx.r10.u32);
	// addi r29,r1,224
	r29.s64 = ctx.r1.s64 + 224;
	// sthx r28,r4,r5
	PPC_STORE_U16(ctx.r4.u32 + ctx.r5.u32, r28.u16);
	// sthx r9,r5,r29
	PPC_STORE_U16(ctx.r5.u32 + r29.u32, ctx.r9.u16);
	// b 0x82726650
	goto loc_82726650;
loc_827265FC:
	// add r5,r3,r6
	ctx.r5.u64 = ctx.r3.u64 + ctx.r6.u64;
	// lhzx r29,r9,r7
	r29.u64 = PPC_LOAD_U16(ctx.r9.u32 + ctx.r7.u32);
	// rlwinm r4,r11,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r5,r5,1,0,30
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 1) & 0xFFFFFFFE;
	// extsh r28,r29
	r28.s64 = r29.s16;
	// lhzx r29,r9,r10
	r29.u64 = PPC_LOAD_U16(ctx.r9.u32 + ctx.r10.u32);
	// addi r20,r1,226
	r20.s64 = ctx.r1.s64 + 226;
	// extsh r29,r29
	r29.s64 = r29.s16;
	// addi r16,r1,224
	r16.s64 = ctx.r1.s64 + 224;
	// lhzx r15,r5,r7
	r15.u64 = PPC_LOAD_U16(ctx.r5.u32 + ctx.r7.u32);
	// lhzx r14,r5,r10
	r14.u64 = PPC_LOAD_U16(ctx.r5.u32 + ctx.r10.u32);
	// extsh r5,r15
	ctx.r5.s64 = r15.s16;
	// extsh r9,r14
	ctx.r9.s64 = r14.s16;
	// add r5,r5,r28
	ctx.r5.u64 = ctx.r5.u64 + r28.u64;
	// add r9,r9,r29
	ctx.r9.u64 = ctx.r9.u64 + r29.u64;
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// srawi r5,r5,1
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x1) != 0);
	ctx.r5.s64 = ctx.r5.s32 >> 1;
	// srawi r9,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 1;
	// sthx r5,r20,r4
	PPC_STORE_U16(r20.u32 + ctx.r4.u32, ctx.r5.u16);
	// sthx r9,r4,r16
	PPC_STORE_U16(ctx.r4.u32 + r16.u32, ctx.r9.u16);
loc_82726650:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_82726654:
	// cmpwi cr6,r26,1
	cr6.compare<int32_t>(r26.s32, 1, xer);
	// beq cr6,0x82726738
	if (cr6.eq) goto loc_82726738;
	// addi r5,r26,-1
	ctx.r5.s64 = r26.s64 + -1;
	// li r9,1
	ctx.r9.s64 = 1;
	// cmpw cr6,r25,r5
	cr6.compare<int32_t>(r25.s32, ctx.r5.s32, xer);
	// blt cr6,0x82726670
	if (cr6.lt) goto loc_82726670;
	// mr r9,r23
	ctx.r9.u64 = r23.u64;
loc_82726670:
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpw cr6,r25,r5
	cr6.compare<int32_t>(r25.s32, ctx.r5.s32, xer);
	// add r9,r9,r3
	ctx.r9.u64 = ctx.r9.u64 + ctx.r3.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r9,r9,-2
	ctx.r9.s64 = ctx.r9.s64 + -2;
	// blt cr6,0x8272668c
	if (cr6.lt) goto loc_8272668C;
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
loc_8272668C:
	// rlwinm r4,r5,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// add r5,r5,r4
	ctx.r5.u64 = ctx.r5.u64 + ctx.r4.u64;
	// rlwinm r5,r5,3,0,28
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 3) & 0xFFFFFFF8;
	// add r5,r5,r27
	ctx.r5.u64 = ctx.r5.u64 + r27.u64;
	// lwz r5,-20(r5)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r5.u32 + -20);
	// rlwinm r4,r5,0,14,14
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x82726738
	if (cr6.eq) goto loc_82726738;
	// rlwinm r5,r5,0,21,23
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 0) & 0x700;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// bne cr6,0x827266dc
	if (!cr6.eq) goto loc_827266DC;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r5,r11,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r4,r1,226
	ctx.r4.s64 = ctx.r1.s64 + 226;
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// lhzx r29,r9,r7
	r29.u64 = PPC_LOAD_U16(ctx.r9.u32 + ctx.r7.u32);
	// lhzx r10,r9,r10
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r9.u32 + ctx.r10.u32);
	// sthx r29,r4,r5
	PPC_STORE_U16(ctx.r4.u32 + ctx.r5.u32, r29.u16);
	// sthx r10,r5,r3
	PPC_STORE_U16(ctx.r5.u32 + ctx.r3.u32, ctx.r10.u16);
	// b 0x82726734
	goto loc_82726734;
loc_827266DC:
	// add r5,r9,r6
	ctx.r5.u64 = ctx.r9.u64 + ctx.r6.u64;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r5,r5,1,0,30
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r4,r11,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r29,r1,226
	r29.s64 = ctx.r1.s64 + 226;
	// addi r28,r1,224
	r28.s64 = ctx.r1.s64 + 224;
	// lhzx r3,r9,r7
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r9.u32 + ctx.r7.u32);
	// lhzx r27,r5,r7
	r27.u64 = PPC_LOAD_U16(ctx.r5.u32 + ctx.r7.u32);
	// lhzx r5,r5,r10
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r5.u32 + ctx.r10.u32);
	// extsh r3,r3
	ctx.r3.s64 = ctx.r3.s16;
	// lhzx r26,r9,r10
	r26.u64 = PPC_LOAD_U16(ctx.r9.u32 + ctx.r10.u32);
	// extsh r9,r27
	ctx.r9.s64 = r27.s16;
	// extsh r10,r5
	ctx.r10.s64 = ctx.r5.s16;
	// extsh r5,r26
	ctx.r5.s64 = r26.s16;
	// add r9,r9,r3
	ctx.r9.u64 = ctx.r9.u64 + ctx.r3.u64;
	// add r10,r10,r5
	ctx.r10.u64 = ctx.r10.u64 + ctx.r5.u64;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// srawi r9,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 1;
	// srawi r10,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 1;
	// sthx r9,r29,r4
	PPC_STORE_U16(r29.u32 + ctx.r4.u32, ctx.r9.u16);
	// sthx r10,r4,r28
	PPC_STORE_U16(ctx.r4.u32 + r28.u32, ctx.r10.u16);
loc_82726734:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_82726738:
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// blt cr6,0x827267e4
	if (cr6.lt) goto loc_827267E4;
	// lhz r11,230(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 230);
	// lhz r10,226(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 226);
	// lhz r4,234(r1)
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r1.u32 + 234);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lhz r9,228(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 228);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// lhz r5,224(r1)
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r1.u32 + 224);
	// extsh r4,r4
	ctx.r4.s64 = ctx.r4.s16;
	// lhz r3,232(r1)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r1.u32 + 232);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// extsh r5,r5
	ctx.r5.s64 = ctx.r5.s16;
	// extsh r3,r3
	ctx.r3.s64 = ctx.r3.s16;
	// subf r29,r10,r11
	r29.s64 = r11.s64 - ctx.r10.s64;
	// subf r27,r4,r11
	r27.s64 = r11.s64 - ctx.r4.s64;
	// subf r26,r10,r4
	r26.s64 = ctx.r4.s64 - ctx.r10.s64;
	// subf r28,r5,r9
	r28.s64 = ctx.r9.s64 - ctx.r5.s64;
	// subf r25,r3,r9
	r25.s64 = ctx.r9.s64 - ctx.r3.s64;
	// subf r23,r5,r3
	r23.s64 = ctx.r3.s64 - ctx.r5.s64;
	// xor r27,r27,r29
	r27.u64 = r27.u64 ^ r29.u64;
	// xor r26,r26,r29
	r26.u64 = r26.u64 ^ r29.u64;
	// xor r25,r25,r28
	r25.u64 = r25.u64 ^ r28.u64;
	// srawi r29,r27,31
	xer.ca = (r27.s32 < 0) & ((r27.u32 & 0x7FFFFFFF) != 0);
	r29.s64 = r27.s32 >> 31;
	// xor r23,r23,r28
	r23.u64 = r23.u64 ^ r28.u64;
	// srawi r28,r26,31
	xer.ca = (r26.s32 < 0) & ((r26.u32 & 0x7FFFFFFF) != 0);
	r28.s64 = r26.s32 >> 31;
	// srawi r27,r25,31
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x7FFFFFFF) != 0);
	r27.s64 = r25.s32 >> 31;
	// srawi r26,r23,31
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x7FFFFFFF) != 0);
	r26.s64 = r23.s32 >> 31;
	// or r25,r29,r28
	r25.u64 = r29.u64 | r28.u64;
	// or r23,r27,r26
	r23.u64 = r27.u64 | r26.u64;
	// and r10,r28,r10
	ctx.r10.u64 = r28.u64 & ctx.r10.u64;
	// andc r4,r4,r25
	ctx.r4.u64 = ctx.r4.u64 & ~r25.u64;
	// andc r3,r3,r23
	ctx.r3.u64 = ctx.r3.u64 & ~r23.u64;
	// and r5,r26,r5
	ctx.r5.u64 = r26.u64 & ctx.r5.u64;
	// or r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 | ctx.r10.u64;
	// and r11,r29,r11
	r11.u64 = r29.u64 & r11.u64;
	// or r5,r3,r5
	ctx.r5.u64 = ctx.r3.u64 | ctx.r5.u64;
	// and r9,r27,r9
	ctx.r9.u64 = r27.u64 & ctx.r9.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// or r10,r5,r9
	ctx.r10.u64 = ctx.r5.u64 | ctx.r9.u64;
	// sth r11,494(r1)
	PPC_STORE_U16(ctx.r1.u32 + 494, r11.u16);
	// sth r10,492(r1)
	PPC_STORE_U16(ctx.r1.u32 + 492, ctx.r10.u16);
	// b 0x827267fc
	goto loc_827267FC;
loc_827267E4:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x827267f8
	if (!cr6.eq) goto loc_827267F8;
	// lwz r11,224(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 224);
	// stw r11,492(r1)
	PPC_STORE_U32(ctx.r1.u32 + 492, r11.u32);
	// b 0x827267fc
	goto loc_827267FC;
loc_827267F8:
	// stw r23,492(r1)
	PPC_STORE_U32(ctx.r1.u32 + 492, r23.u32);
loc_827267FC:
	// rlwinm r11,r8,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// lhz r9,494(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 494);
	// add r10,r6,r8
	ctx.r10.u64 = ctx.r6.u64 + ctx.r8.u64;
	// lwz r15,160(r1)
	r15.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// extsh r5,r9
	ctx.r5.s64 = ctx.r9.s16;
	// lwz r20,136(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// rlwinm r9,r8,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// lhz r8,492(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 492);
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// lwzx r11,r11,r24
	r11.u64 = PPC_LOAD_U32(r11.u32 + r24.u32);
	// extsh r6,r8
	ctx.r6.s64 = ctx.r8.s16;
	// add r7,r10,r7
	ctx.r7.u64 = ctx.r10.u64 + ctx.r7.u64;
	// add r8,r5,r11
	ctx.r8.u64 = ctx.r5.u64 + r11.u64;
	// rlwinm r11,r11,16,16,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF;
	// add r5,r8,r21
	ctx.r5.u64 = ctx.r8.u64 + r21.u64;
	// mr r8,r11
	ctx.r8.u64 = r11.u64;
	// and r11,r5,r18
	r11.u64 = ctx.r5.u64 & r18.u64;
	// lwz r18,112(r1)
	r18.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// subf r11,r21,r11
	r11.s64 = r11.s64 - r21.s64;
	// add r8,r6,r8
	ctx.r8.u64 = ctx.r6.u64 + ctx.r8.u64;
	// li r16,0
	r16.s64 = 0;
	// add r8,r8,r19
	ctx.r8.u64 = ctx.r8.u64 + r19.u64;
	// mr r4,r16
	ctx.r4.u64 = r16.u64;
	// sth r11,2(r7)
	PPC_STORE_U16(ctx.r7.u32 + 2, r11.u16);
	// and r8,r8,r17
	ctx.r8.u64 = ctx.r8.u64 & r17.u64;
	// lwz r11,1492(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// cmpwi cr6,r20,0
	cr6.compare<int32_t>(r20.s32, 0, xer);
	// subf r8,r19,r8
	ctx.r8.s64 = ctx.r8.s64 - r19.s64;
	// stw r16,648(r1)
	PPC_STORE_U32(ctx.r1.u32 + 648, r16.u32);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stw r16,644(r1)
	PPC_STORE_U32(ctx.r1.u32 + 644, r16.u32);
	// stw r16,640(r1)
	PPC_STORE_U32(ctx.r1.u32 + 640, r16.u32);
	// lhz r7,2(r11)
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r7,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r7.u16);
	// lwz r11,1492(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// lhzx r7,r10,r11
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r10.u32 + r11.u32);
	// add r11,r9,r11
	r11.u64 = ctx.r9.u64 + r11.u64;
	// sth r7,2(r11)
	PPC_STORE_U16(r11.u32 + 2, ctx.r7.u16);
	// lwz r11,1492(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// add r11,r9,r11
	r11.u64 = ctx.r9.u64 + r11.u64;
	// lhz r7,2(r11)
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r7,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r7.u16);
	// lwz r11,1496(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lwz r7,1492(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lhzx r7,r9,r7
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r9.u32 + ctx.r7.u32);
	// sth r8,2(r11)
	PPC_STORE_U16(r11.u32 + 2, ctx.r8.u16);
	// lwz r11,1496(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// extsh r23,r7
	r23.s64 = ctx.r7.s16;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lhz r8,2(r11)
	ctx.r8.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r8,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r8.u16);
	// lwz r11,1496(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lhzx r8,r10,r11
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r10.u32 + r11.u32);
	// add r11,r9,r11
	r11.u64 = ctx.r9.u64 + r11.u64;
	// sth r8,2(r11)
	PPC_STORE_U16(r11.u32 + 2, ctx.r8.u16);
	// lwz r11,1496(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// lhz r8,2(r11)
	ctx.r8.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r8,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r8.u16);
	// lwz r11,1496(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lhz r26,0(r22)
	r26.u64 = PPC_LOAD_U16(r22.u32 + 0);
	// lwz r25,1504(r31)
	r25.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lwz r24,1500(r31)
	r24.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// srawi r8,r26,1
	xer.ca = (r26.s32 < 0) & ((r26.u32 & 0x1) != 0);
	ctx.r8.s64 = r26.s32 >> 1;
	// lhzx r11,r11,r9
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r9.u32);
	// extsh r22,r11
	r22.s64 = r11.s16;
	// mullw r11,r26,r15
	r11.s64 = int64_t(r26.s32) * int64_t(r15.s32);
	// add r11,r11,r20
	r11.u64 = r11.u64 + r20.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// beq cr6,0x82726948
	if (cr6.eq) goto loc_82726948;
	// lwz r6,-20(r18)
	ctx.r6.u64 = PPC_LOAD_U32(r18.u32 + -20);
	// addi r7,r11,-2
	ctx.r7.s64 = r11.s64 + -2;
	// rlwinm r6,r6,0,14,14
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x82726948
	if (cr6.eq) goto loc_82726948;
	// rlwinm r7,r7,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0xFFFFFFFE;
	// li r4,1
	ctx.r4.s64 = 1;
	// lhzx r6,r7,r24
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r7.u32 + r24.u32);
	// lhzx r7,r7,r25
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r7.u32 + r25.u32);
	// sth r6,642(r1)
	PPC_STORE_U16(ctx.r1.u32 + 642, ctx.r6.u16);
	// sth r7,640(r1)
	PPC_STORE_U16(ctx.r1.u32 + 640, ctx.r7.u16);
loc_82726948:
	// lwz r17,152(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// bne cr6,0x82726a1c
	if (!cr6.eq) goto loc_82726A1C;
	// rlwinm r7,r26,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r6,r7,r11
	ctx.r6.s64 = r11.s64 - ctx.r7.s64;
	// rlwinm r11,r8,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r8,r11
	r11.u64 = ctx.r8.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r5,r11,r18
	ctx.r5.s64 = r18.s64 - r11.s64;
	// lwz r11,0(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	// rlwinm r11,r11,0,14,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x827269a0
	if (cr6.eq) goto loc_827269A0;
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r7,r4,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r3,r1,642
	ctx.r3.s64 = ctx.r1.s64 + 642;
	// addi r29,r1,640
	r29.s64 = ctx.r1.s64 + 640;
	// addi r4,r4,1
	ctx.r4.s64 = ctx.r4.s64 + 1;
	// lhzx r28,r11,r24
	r28.u64 = PPC_LOAD_U16(r11.u32 + r24.u32);
	// lhzx r11,r11,r25
	r11.u64 = PPC_LOAD_U16(r11.u32 + r25.u32);
	// sthx r28,r7,r3
	PPC_STORE_U16(ctx.r7.u32 + ctx.r3.u32, r28.u16);
	// sthx r11,r7,r29
	PPC_STORE_U16(ctx.r7.u32 + r29.u32, r11.u16);
loc_827269A0:
	// cmpwi cr6,r8,1
	cr6.compare<int32_t>(ctx.r8.s32, 1, xer);
	// beq cr6,0x82726a1c
	if (cr6.eq) goto loc_82726A1C;
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// li r11,1
	r11.s64 = 1;
	// cmpw cr6,r20,r8
	cr6.compare<int32_t>(r20.s32, ctx.r8.s32, xer);
	// blt cr6,0x827269bc
	if (cr6.lt) goto loc_827269BC;
	// mr r11,r16
	r11.u64 = r16.u64;
loc_827269BC:
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpw cr6,r20,r8
	cr6.compare<int32_t>(r20.s32, ctx.r8.s32, xer);
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// addi r7,r11,-2
	ctx.r7.s64 = r11.s64 + -2;
	// li r11,1
	r11.s64 = 1;
	// blt cr6,0x827269d8
	if (cr6.lt) goto loc_827269D8;
	// mr r11,r16
	r11.u64 = r16.u64;
loc_827269D8:
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// lwz r11,-20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -20);
	// rlwinm r11,r11,0,14,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82726a1c
	if (cr6.eq) goto loc_82726A1C;
	// rlwinm r11,r7,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r8,r4,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r7,r1,642
	ctx.r7.s64 = ctx.r1.s64 + 642;
	// addi r6,r1,640
	ctx.r6.s64 = ctx.r1.s64 + 640;
	// addi r4,r4,1
	ctx.r4.s64 = ctx.r4.s64 + 1;
	// lhzx r5,r11,r24
	ctx.r5.u64 = PPC_LOAD_U16(r11.u32 + r24.u32);
	// lhzx r11,r11,r25
	r11.u64 = PPC_LOAD_U16(r11.u32 + r25.u32);
	// sthx r5,r8,r7
	PPC_STORE_U16(ctx.r8.u32 + ctx.r7.u32, ctx.r5.u16);
	// sthx r11,r8,r6
	PPC_STORE_U16(ctx.r8.u32 + ctx.r6.u32, r11.u16);
loc_82726A1C:
	// mr r5,r16
	ctx.r5.u64 = r16.u64;
	// mr r3,r16
	ctx.r3.u64 = r16.u64;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// ble cr6,0x82726b58
	if (!cr6.gt) goto loc_82726B58;
	// addi r8,r1,2256
	ctx.r8.s64 = ctx.r1.s64 + 2256;
	// addi r11,r1,640
	r11.s64 = ctx.r1.s64 + 640;
	// addi r7,r1,2000
	ctx.r7.s64 = ctx.r1.s64 + 2000;
	// mr r6,r4
	ctx.r6.u64 = ctx.r4.u64;
loc_82726A3C:
	// lhz r29,0(r11)
	r29.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rlwinm r29,r29,0,29,29
	r29.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// lwz r29,0(r11)
	r29.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// beq cr6,0x82726a60
	if (cr6.eq) goto loc_82726A60;
	// stw r29,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, r29.u32);
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
	// addi r7,r7,4
	ctx.r7.s64 = ctx.r7.s64 + 4;
	// b 0x82726a6c
	goto loc_82726A6C;
loc_82726A60:
	// stw r29,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r29.u32);
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// addi r8,r8,4
	ctx.r8.s64 = ctx.r8.s64 + 4;
loc_82726A6C:
	// addi r6,r6,-1
	ctx.r6.s64 = ctx.r6.s64 + -1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// bne cr6,0x82726a3c
	if (!cr6.eq) goto loc_82726A3C;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// ble cr6,0x82726b58
	if (!cr6.gt) goto loc_82726B58;
	// cmpwi cr6,r5,3
	cr6.compare<int32_t>(ctx.r5.s32, 3, xer);
	// beq cr6,0x82726ab4
	if (cr6.eq) goto loc_82726AB4;
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// beq cr6,0x82726ab4
	if (cr6.eq) goto loc_82726AB4;
	// cmpw cr6,r5,r3
	cr6.compare<int32_t>(ctx.r5.s32, ctx.r3.s32, xer);
	// blt cr6,0x82726aa8
	if (cr6.lt) goto loc_82726AA8;
	// lwz r11,2256(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2256);
	// stw r11,440(r1)
	PPC_STORE_U32(ctx.r1.u32 + 440, r11.u32);
	// b 0x82726b5c
	goto loc_82726B5C;
loc_82726AA8:
	// lwz r11,2000(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2000);
	// stw r11,440(r1)
	PPC_STORE_U32(ctx.r1.u32 + 440, r11.u32);
	// b 0x82726b5c
	goto loc_82726B5C;
loc_82726AB4:
	// lhz r11,646(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 646);
	// lhz r8,642(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 642);
	// lhz r5,650(r1)
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r1.u32 + 650);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lhz r7,644(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 644);
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// lhz r6,640(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 640);
	// extsh r5,r5
	ctx.r5.s64 = ctx.r5.s16;
	// lhz r4,648(r1)
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r1.u32 + 648);
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// extsh r4,r4
	ctx.r4.s64 = ctx.r4.s16;
	// subf r3,r8,r11
	ctx.r3.s64 = r11.s64 - ctx.r8.s64;
	// subf r28,r5,r11
	r28.s64 = r11.s64 - ctx.r5.s64;
	// subf r27,r8,r5
	r27.s64 = ctx.r5.s64 - ctx.r8.s64;
	// subf r29,r6,r7
	r29.s64 = ctx.r7.s64 - ctx.r6.s64;
	// subf r21,r4,r7
	r21.s64 = ctx.r7.s64 - ctx.r4.s64;
	// subf r19,r6,r4
	r19.s64 = ctx.r4.s64 - ctx.r6.s64;
	// xor r28,r28,r3
	r28.u64 = r28.u64 ^ ctx.r3.u64;
	// xor r27,r27,r3
	r27.u64 = r27.u64 ^ ctx.r3.u64;
	// xor r21,r21,r29
	r21.u64 = r21.u64 ^ r29.u64;
	// srawi r3,r28,31
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r28.s32 >> 31;
	// xor r19,r19,r29
	r19.u64 = r19.u64 ^ r29.u64;
	// srawi r29,r27,31
	xer.ca = (r27.s32 < 0) & ((r27.u32 & 0x7FFFFFFF) != 0);
	r29.s64 = r27.s32 >> 31;
	// srawi r28,r21,31
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x7FFFFFFF) != 0);
	r28.s64 = r21.s32 >> 31;
	// srawi r27,r19,31
	xer.ca = (r19.s32 < 0) & ((r19.u32 & 0x7FFFFFFF) != 0);
	r27.s64 = r19.s32 >> 31;
	// and r11,r3,r11
	r11.u64 = ctx.r3.u64 & r11.u64;
	// or r21,r3,r29
	r21.u64 = ctx.r3.u64 | r29.u64;
	// or r3,r28,r27
	ctx.r3.u64 = r28.u64 | r27.u64;
	// andc r5,r5,r21
	ctx.r5.u64 = ctx.r5.u64 & ~r21.u64;
	// andc r4,r4,r3
	ctx.r4.u64 = ctx.r4.u64 & ~ctx.r3.u64;
	// and r6,r27,r6
	ctx.r6.u64 = r27.u64 & ctx.r6.u64;
	// and r8,r29,r8
	ctx.r8.u64 = r29.u64 & ctx.r8.u64;
	// or r11,r5,r11
	r11.u64 = ctx.r5.u64 | r11.u64;
	// or r6,r4,r6
	ctx.r6.u64 = ctx.r4.u64 | ctx.r6.u64;
	// and r7,r28,r7
	ctx.r7.u64 = r28.u64 & ctx.r7.u64;
	// or r11,r11,r8
	r11.u64 = r11.u64 | ctx.r8.u64;
	// or r8,r6,r7
	ctx.r8.u64 = ctx.r6.u64 | ctx.r7.u64;
	// sth r11,442(r1)
	PPC_STORE_U16(ctx.r1.u32 + 442, r11.u16);
	// sth r8,440(r1)
	PPC_STORE_U16(ctx.r1.u32 + 440, ctx.r8.u16);
	// b 0x82726b5c
	goto loc_82726B5C;
loc_82726B58:
	// stw r16,440(r1)
	PPC_STORE_U32(ctx.r1.u32 + 440, r16.u32);
loc_82726B5C:
	// lhz r11,442(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 442);
	// mullw r8,r26,r15
	ctx.r8.s64 = int64_t(r26.s32) * int64_t(r15.s32);
	// extsh r21,r11
	r21.s64 = r11.s16;
	// stw r16,200(r1)
	PPC_STORE_U32(ctx.r1.u32 + 200, r16.u32);
	// stw r16,196(r1)
	PPC_STORE_U32(ctx.r1.u32 + 196, r16.u32);
	// stw r16,192(r1)
	PPC_STORE_U32(ctx.r1.u32 + 192, r16.u32);
	// lhz r11,440(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 440);
	// add r8,r8,r20
	ctx.r8.u64 = ctx.r8.u64 + r20.u64;
	// extsh r19,r11
	r19.s64 = r11.s16;
	// mr r11,r16
	r11.u64 = r16.u64;
	// cmpwi cr6,r20,0
	cr6.compare<int32_t>(r20.s32, 0, xer);
	// srawi r5,r26,1
	xer.ca = (r26.s32 < 0) & ((r26.u32 & 0x1) != 0);
	ctx.r5.s64 = r26.s32 >> 1;
	// rlwinm r6,r8,1,0,30
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// beq cr6,0x82726bd0
	if (cr6.eq) goto loc_82726BD0;
	// lwz r7,-20(r18)
	ctx.r7.u64 = PPC_LOAD_U32(r18.u32 + -20);
	// addi r8,r6,-2
	ctx.r8.s64 = ctx.r6.s64 + -2;
	// rlwinm r4,r7,0,14,14
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x82726bd0
	if (cr6.eq) goto loc_82726BD0;
	// rlwinm r11,r7,0,21,23
	r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 0) & 0x700;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// beq cr6,0x82726bbc
	if (cr6.eq) goto loc_82726BBC;
	// add r8,r8,r26
	ctx.r8.u64 = ctx.r8.u64 + r26.u64;
loc_82726BBC:
	// rlwinm r8,r8,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r7,r24,r8
	ctx.r7.u64 = PPC_LOAD_U16(r24.u32 + ctx.r8.u32);
	// lhzx r8,r8,r25
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r8.u32 + r25.u32);
	// sth r7,194(r1)
	PPC_STORE_U16(ctx.r1.u32 + 194, ctx.r7.u16);
	// sth r8,192(r1)
	PPC_STORE_U16(ctx.r1.u32 + 192, ctx.r8.u16);
loc_82726BD0:
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// bne cr6,0x82726cf8
	if (!cr6.eq) goto loc_82726CF8;
	// rlwinm r8,r26,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r6,r8,r6
	ctx.r6.s64 = ctx.r6.s64 - ctx.r8.s64;
	// rlwinm r8,r5,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// add r8,r5,r8
	ctx.r8.u64 = ctx.r5.u64 + ctx.r8.u64;
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r4,r8,r18
	ctx.r4.s64 = r18.s64 - ctx.r8.s64;
	// lwz r8,0(r4)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// rlwinm r7,r8,0,14,14
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// beq cr6,0x82726c50
	if (cr6.eq) goto loc_82726C50;
	// rlwinm r8,r8,0,21,23
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x700;
	// addi r3,r1,194
	ctx.r3.s64 = ctx.r1.s64 + 194;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// addi r29,r1,192
	r29.s64 = ctx.r1.s64 + 192;
	// bne cr6,0x82726c30
	if (!cr6.eq) goto loc_82726C30;
	// rlwinm r8,r6,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r7,r11,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lhzx r28,r24,r8
	r28.u64 = PPC_LOAD_U16(r24.u32 + ctx.r8.u32);
	// lhzx r8,r8,r25
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r8.u32 + r25.u32);
	// sthx r28,r7,r3
	PPC_STORE_U16(ctx.r7.u32 + ctx.r3.u32, r28.u16);
	// sthx r8,r7,r29
	PPC_STORE_U16(ctx.r7.u32 + r29.u32, ctx.r8.u16);
	// b 0x82726c4c
	goto loc_82726C4C;
loc_82726C30:
	// add r7,r6,r26
	ctx.r7.u64 = ctx.r6.u64 + r26.u64;
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r7,r7,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r28,r24,r7
	r28.u64 = PPC_LOAD_U16(r24.u32 + ctx.r7.u32);
	// lhzx r7,r7,r25
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r7.u32 + r25.u32);
	// sthx r28,r8,r3
	PPC_STORE_U16(ctx.r8.u32 + ctx.r3.u32, r28.u16);
	// sthx r7,r8,r29
	PPC_STORE_U16(ctx.r8.u32 + r29.u32, ctx.r7.u16);
loc_82726C4C:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_82726C50:
	// cmpwi cr6,r5,1
	cr6.compare<int32_t>(ctx.r5.s32, 1, xer);
	// beq cr6,0x82726cf8
	if (cr6.eq) goto loc_82726CF8;
	// addi r7,r5,-1
	ctx.r7.s64 = ctx.r5.s64 + -1;
	// li r8,1
	ctx.r8.s64 = 1;
	// cmpw cr6,r20,r7
	cr6.compare<int32_t>(r20.s32, ctx.r7.s32, xer);
	// blt cr6,0x82726c6c
	if (cr6.lt) goto loc_82726C6C;
	// mr r8,r16
	ctx.r8.u64 = r16.u64;
loc_82726C6C:
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpw cr6,r20,r7
	cr6.compare<int32_t>(r20.s32, ctx.r7.s32, xer);
	// add r8,r8,r6
	ctx.r8.u64 = ctx.r8.u64 + ctx.r6.u64;
	// addi r7,r8,-2
	ctx.r7.s64 = ctx.r8.s64 + -2;
	// li r8,1
	ctx.r8.s64 = 1;
	// blt cr6,0x82726c88
	if (cr6.lt) goto loc_82726C88;
	// mr r8,r16
	ctx.r8.u64 = r16.u64;
loc_82726C88:
	// rlwinm r6,r8,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// add r8,r8,r6
	ctx.r8.u64 = ctx.r8.u64 + ctx.r6.u64;
	// rlwinm r8,r8,3,0,28
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// add r8,r8,r4
	ctx.r8.u64 = ctx.r8.u64 + ctx.r4.u64;
	// lwz r8,-20(r8)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + -20);
	// rlwinm r6,r8,0,14,14
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x82726cf8
	if (cr6.eq) goto loc_82726CF8;
	// rlwinm r8,r8,0,21,23
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x700;
	// addi r6,r1,194
	ctx.r6.s64 = ctx.r1.s64 + 194;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// addi r5,r1,192
	ctx.r5.s64 = ctx.r1.s64 + 192;
	// bne cr6,0x82726cd8
	if (!cr6.eq) goto loc_82726CD8;
	// rlwinm r8,r7,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r7,r11,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lhzx r4,r24,r8
	ctx.r4.u64 = PPC_LOAD_U16(r24.u32 + ctx.r8.u32);
	// lhzx r8,r8,r25
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r8.u32 + r25.u32);
	// sthx r4,r7,r6
	PPC_STORE_U16(ctx.r7.u32 + ctx.r6.u32, ctx.r4.u16);
	// sthx r8,r7,r5
	PPC_STORE_U16(ctx.r7.u32 + ctx.r5.u32, ctx.r8.u16);
	// b 0x82726cf4
	goto loc_82726CF4;
loc_82726CD8:
	// add r7,r7,r26
	ctx.r7.u64 = ctx.r7.u64 + r26.u64;
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r7,r7,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r4,r24,r7
	ctx.r4.u64 = PPC_LOAD_U16(r24.u32 + ctx.r7.u32);
	// lhzx r7,r7,r25
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r7.u32 + r25.u32);
	// sthx r4,r8,r6
	PPC_STORE_U16(ctx.r8.u32 + ctx.r6.u32, ctx.r4.u16);
	// sthx r7,r8,r5
	PPC_STORE_U16(ctx.r8.u32 + ctx.r5.u32, ctx.r7.u16);
loc_82726CF4:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_82726CF8:
	// mr r4,r16
	ctx.r4.u64 = r16.u64;
	// mr r3,r16
	ctx.r3.u64 = r16.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x82726e34
	if (!cr6.gt) goto loc_82726E34;
	// addi r7,r1,2288
	ctx.r7.s64 = ctx.r1.s64 + 2288;
	// addi r8,r1,192
	ctx.r8.s64 = ctx.r1.s64 + 192;
	// addi r6,r1,2032
	ctx.r6.s64 = ctx.r1.s64 + 2032;
	// mr r5,r11
	ctx.r5.u64 = r11.u64;
loc_82726D18:
	// lhz r29,0(r8)
	r29.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// rlwinm r29,r29,0,29,29
	r29.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// lwz r29,0(r8)
	r29.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// beq cr6,0x82726d3c
	if (cr6.eq) goto loc_82726D3C;
	// stw r29,0(r6)
	PPC_STORE_U32(ctx.r6.u32 + 0, r29.u32);
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
	// addi r6,r6,4
	ctx.r6.s64 = ctx.r6.s64 + 4;
	// b 0x82726d48
	goto loc_82726D48;
loc_82726D3C:
	// stw r29,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, r29.u32);
	// addi r4,r4,1
	ctx.r4.s64 = ctx.r4.s64 + 1;
	// addi r7,r7,4
	ctx.r7.s64 = ctx.r7.s64 + 4;
loc_82726D48:
	// addi r5,r5,-1
	ctx.r5.s64 = ctx.r5.s64 + -1;
	// addi r8,r8,4
	ctx.r8.s64 = ctx.r8.s64 + 4;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// bne cr6,0x82726d18
	if (!cr6.eq) goto loc_82726D18;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x82726e34
	if (!cr6.gt) goto loc_82726E34;
	// cmpwi cr6,r4,3
	cr6.compare<int32_t>(ctx.r4.s32, 3, xer);
	// beq cr6,0x82726d90
	if (cr6.eq) goto loc_82726D90;
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// beq cr6,0x82726d90
	if (cr6.eq) goto loc_82726D90;
	// cmpw cr6,r4,r3
	cr6.compare<int32_t>(ctx.r4.s32, ctx.r3.s32, xer);
	// blt cr6,0x82726d84
	if (cr6.lt) goto loc_82726D84;
	// lwz r11,2288(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2288);
	// stw r11,448(r1)
	PPC_STORE_U32(ctx.r1.u32 + 448, r11.u32);
	// b 0x82726e38
	goto loc_82726E38;
loc_82726D84:
	// lwz r11,2032(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2032);
	// stw r11,448(r1)
	PPC_STORE_U32(ctx.r1.u32 + 448, r11.u32);
	// b 0x82726e38
	goto loc_82726E38;
loc_82726D90:
	// lhz r11,198(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 198);
	// lhz r8,194(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 194);
	// lhz r5,202(r1)
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r1.u32 + 202);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lhz r7,196(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 196);
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// lhz r6,192(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 192);
	// extsh r5,r5
	ctx.r5.s64 = ctx.r5.s16;
	// lhz r4,200(r1)
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r1.u32 + 200);
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// extsh r4,r4
	ctx.r4.s64 = ctx.r4.s16;
	// subf r3,r8,r11
	ctx.r3.s64 = r11.s64 - ctx.r8.s64;
	// subf r28,r5,r11
	r28.s64 = r11.s64 - ctx.r5.s64;
	// subf r27,r8,r5
	r27.s64 = ctx.r5.s64 - ctx.r8.s64;
	// subf r29,r6,r7
	r29.s64 = ctx.r7.s64 - ctx.r6.s64;
	// subf r26,r4,r7
	r26.s64 = ctx.r7.s64 - ctx.r4.s64;
	// subf r25,r6,r4
	r25.s64 = ctx.r4.s64 - ctx.r6.s64;
	// xor r28,r28,r3
	r28.u64 = r28.u64 ^ ctx.r3.u64;
	// xor r27,r27,r3
	r27.u64 = r27.u64 ^ ctx.r3.u64;
	// xor r26,r26,r29
	r26.u64 = r26.u64 ^ r29.u64;
	// srawi r3,r28,31
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r28.s32 >> 31;
	// xor r25,r25,r29
	r25.u64 = r25.u64 ^ r29.u64;
	// srawi r29,r27,31
	xer.ca = (r27.s32 < 0) & ((r27.u32 & 0x7FFFFFFF) != 0);
	r29.s64 = r27.s32 >> 31;
	// srawi r28,r26,31
	xer.ca = (r26.s32 < 0) & ((r26.u32 & 0x7FFFFFFF) != 0);
	r28.s64 = r26.s32 >> 31;
	// srawi r27,r25,31
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x7FFFFFFF) != 0);
	r27.s64 = r25.s32 >> 31;
	// or r26,r3,r29
	r26.u64 = ctx.r3.u64 | r29.u64;
	// or r25,r28,r27
	r25.u64 = r28.u64 | r27.u64;
	// and r8,r29,r8
	ctx.r8.u64 = r29.u64 & ctx.r8.u64;
	// andc r5,r5,r26
	ctx.r5.u64 = ctx.r5.u64 & ~r26.u64;
	// andc r4,r4,r25
	ctx.r4.u64 = ctx.r4.u64 & ~r25.u64;
	// and r6,r27,r6
	ctx.r6.u64 = r27.u64 & ctx.r6.u64;
	// or r8,r5,r8
	ctx.r8.u64 = ctx.r5.u64 | ctx.r8.u64;
	// and r11,r3,r11
	r11.u64 = ctx.r3.u64 & r11.u64;
	// or r6,r4,r6
	ctx.r6.u64 = ctx.r4.u64 | ctx.r6.u64;
	// and r7,r28,r7
	ctx.r7.u64 = r28.u64 & ctx.r7.u64;
	// or r11,r8,r11
	r11.u64 = ctx.r8.u64 | r11.u64;
	// or r8,r6,r7
	ctx.r8.u64 = ctx.r6.u64 | ctx.r7.u64;
	// sth r11,450(r1)
	PPC_STORE_U16(ctx.r1.u32 + 450, r11.u16);
	// sth r8,448(r1)
	PPC_STORE_U16(ctx.r1.u32 + 448, ctx.r8.u16);
	// b 0x82726e38
	goto loc_82726E38;
loc_82726E34:
	// stw r16,448(r1)
	PPC_STORE_U32(ctx.r1.u32 + 448, r16.u32);
loc_82726E38:
	// rlwinm r7,r15,16,0,15
	ctx.r7.u64 = __builtin_rotateleft64(r15.u32 | (r15.u64 << 32), 16) & 0xFFFF0000;
	// add r8,r24,r9
	ctx.r8.u64 = r24.u64 + ctx.r9.u64;
	// or r6,r7,r20
	ctx.r6.u64 = ctx.r7.u64 | r20.u64;
	// clrlwi r7,r23,30
	ctx.r7.u64 = r23.u32 & 0x3;
	// rlwinm r29,r6,6,0,25
	r29.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 6) & 0xFFFFFFC0;
	// addi r6,r7,1
	ctx.r6.s64 = ctx.r7.s64 + 1;
	// sth r21,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, r21.u16);
	// clrlwi r7,r22,30
	ctx.r7.u64 = r22.u32 & 0x3;
	// lwz r8,1500(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// srawi r6,r6,2
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x3) != 0);
	ctx.r6.s64 = ctx.r6.s32 >> 2;
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// add r8,r8,r9
	ctx.r8.u64 = ctx.r8.u64 + ctx.r9.u64;
	// add r6,r6,r23
	ctx.r6.u64 = ctx.r6.u64 + r23.u64;
	// mr r11,r23
	r11.u64 = r23.u64;
	// srawi r25,r6,1
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x1) != 0);
	r25.s64 = ctx.r6.s32 >> 1;
	// srawi r7,r7,2
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x3) != 0);
	ctx.r7.s64 = ctx.r7.s32 >> 2;
	// lhz r6,2(r8)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r8.u32 + 2);
	// rlwimi r11,r22,16,0,15
	r11.u64 = (__builtin_rotateleft32(r22.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// add r7,r7,r22
	ctx.r7.u64 = ctx.r7.u64 + r22.u64;
	// mr r27,r22
	r27.u64 = r22.u64;
	// srawi r24,r7,1
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x1) != 0);
	r24.s64 = ctx.r7.s32 >> 1;
	// stw r25,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r25.u32);
	// rlwinm r7,r11,1,15,15
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// sth r6,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r6.u16);
	// mr r28,r23
	r28.u64 = r23.u64;
	// lwz r8,1504(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// subf r7,r7,r11
	ctx.r7.s64 = r11.s64 - ctx.r7.s64;
	// stw r27,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r27.u32);
	// add r8,r9,r8
	ctx.r8.u64 = ctx.r9.u64 + ctx.r8.u64;
	// stw r24,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r24.u32);
	// add r7,r7,r29
	ctx.r7.u64 = ctx.r7.u64 + r29.u64;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// addis r7,r7,115
	ctx.r7.s64 = ctx.r7.s64 + 7536640;
	// sth r19,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, r19.u16);
	// addi r7,r7,115
	ctx.r7.s64 = ctx.r7.s64 + 115;
	// lwz r8,1504(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// lhz r8,2(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 2);
	// sth r8,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r8.u16);
	// lwz r9,1500(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// lhz r8,450(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 450);
	// add r9,r9,r10
	ctx.r9.u64 = ctx.r9.u64 + ctx.r10.u64;
	// sth r8,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, ctx.r8.u16);
	// lwz r9,1500(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r9,r9,r10
	ctx.r9.u64 = ctx.r9.u64 + ctx.r10.u64;
	// lhz r8,2(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 2);
	// sth r8,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r8.u16);
	// lwz r9,1504(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lhz r8,448(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 448);
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// sth r8,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, ctx.r8.u16);
	// lwz r9,1504(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lhz r9,2(r10)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + 2);
	// sth r9,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r9.u16);
	// lwz r6,1396(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 1396);
	// lwz r26,1404(r31)
	r26.u64 = PPC_LOAD_U32(r31.u32 + 1404);
	// subf r11,r11,r6
	r11.s64 = ctx.r6.s64 - r11.s64;
	// subf r11,r29,r11
	r11.s64 = r11.s64 - r29.s64;
	// or r11,r7,r11
	r11.u64 = ctx.r7.u64 | r11.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82726f50
	if (cr6.eq) goto loc_82726F50;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r27,96(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r28,100(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
loc_82726F50:
	// mr r11,r25
	r11.u64 = r25.u64;
	// srawi r5,r29,1
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x1) != 0);
	ctx.r5.s64 = r29.s32 >> 1;
	// rlwimi r11,r24,16,0,15
	r11.u64 = (__builtin_rotateleft32(r24.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r26
	ctx.r9.s64 = r26.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r5,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r5.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// addis r11,r11,59
	r11.s64 = r11.s64 + 3866624;
	// addi r11,r11,59
	r11.s64 = r11.s64 + 59;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82726fa4
	if (cr6.eq) goto loc_82726FA4;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
	// lwz r25,104(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lwz r24,128(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
loc_82726FA4:
	// addi r10,r31,74
	ctx.r10.s64 = r31.s64 + 74;
	// lwz r8,124(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// srawi r7,r27,2
	xer.ca = (r27.s32 < 0) & ((r27.u32 & 0x3) != 0);
	ctx.r7.s64 = r27.s32 >> 2;
	// srawi r9,r28,2
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x3) != 0);
	ctx.r9.s64 = r28.s32 >> 2;
	// lhz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// lwz r11,0(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// mullw r10,r7,r10
	ctx.r10.s64 = int64_t(ctx.r7.s32) * int64_t(ctx.r10.s32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lwz r9,164(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// add r29,r10,r9
	r29.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82727050
	if (!cr0.eq) goto loc_82727050;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// mr r11,r16
	r11.u64 = r16.u64;
loc_82727050:
	// addi r10,r30,8
	ctx.r10.s64 = r30.s64 + 8;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// dcbt r10,r29
	// rlwinm r10,r30,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// add r10,r30,r10
	ctx.r10.u64 = r30.u64 + ctx.r10.u64;
	// addi r10,r10,64
	ctx.r10.s64 = ctx.r10.s64 + 64;
	// dcbt r10,r29
	// rlwinm r10,r30,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r30,r10
	ctx.r10.u64 = r30.u64 + ctx.r10.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r10,64
	ctx.r10.s64 = ctx.r10.s64 + 64;
	// dcbt r10,r29
	// mulli r10,r30,11
	ctx.r10.s64 = r30.s64 * 11;
	// addi r10,r10,64
	ctx.r10.s64 = ctx.r10.s64 + 64;
	// dcbt r10,r29
	// rlwinm r10,r30,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r30,r10
	ctx.r10.u64 = r30.u64 + ctx.r10.u64;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r10,64
	ctx.r10.s64 = ctx.r10.s64 + 64;
	// dcbt r10,r29
	// mulli r10,r30,13
	ctx.r10.s64 = r30.s64 * 13;
	// addi r10,r10,64
	ctx.r10.s64 = ctx.r10.s64 + 64;
	// dcbt r10,r29
	// rlwinm r10,r30,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r10,r30,r10
	ctx.r10.s64 = ctx.r10.s64 - r30.s64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r10,64
	ctx.r10.s64 = ctx.r10.s64 + 64;
	// dcbt r10,r29
	// rlwinm r10,r30,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 4) & 0xFFFFFFF0;
	// subf r10,r30,r10
	ctx.r10.s64 = ctx.r10.s64 - r30.s64;
	// addi r10,r10,64
	ctx.r10.s64 = ctx.r10.s64 + 64;
	// dcbt r10,r29
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r26,168(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// clrlwi r28,r28,30
	r28.u64 = r28.u32 & 0x3;
	// stw r16,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r16.u32);
	// clrlwi r27,r27,30
	r27.u64 = r27.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// stw r11,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82727154
	if (cr6.eq) goto loc_82727154;
	// li r10,1
	ctx.r10.s64 = 1;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// stw r16,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r16.u32);
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_82727154:
	// addi r10,r31,76
	ctx.r10.s64 = r31.s64 + 76;
	// lwz r26,156(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// srawi r8,r24,2
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x3) != 0);
	ctx.r8.s64 = r24.s32 >> 2;
	// srawi r9,r25,2
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x3) != 0);
	ctx.r9.s64 = r25.s32 >> 2;
	// srawi r30,r30,1
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x1) != 0);
	r30.s64 = r30.s32 >> 1;
	// lhz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// mullw r10,r8,r10
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// lwz r8,144(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r9,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r9.s64 = r11.s32 >> 4;
	// add r3,r10,r8
	ctx.r3.u64 = ctx.r10.u64 + ctx.r8.u64;
	// addze r9,r9
	temp.s64 = ctx.r9.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r9.u32;
	ctx.r9.s64 = temp.s64;
	// lwz r8,188(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// add r29,r10,r8
	r29.u64 = ctx.r10.u64 + ctx.r8.u64;
	// rlwinm r9,r9,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r9,r9,r11
	ctx.r9.s64 = r11.s64 - ctx.r9.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x8272720c
	if (!cr0.eq) goto loc_8272720C;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// mr r11,r16
	r11.u64 = r16.u64;
loc_8272720C:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r5,172(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// clrlwi r28,r25,30
	r28.u64 = r25.u32 & 0x3;
	// stw r16,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r16.u32);
	// clrlwi r27,r24,30
	r27.u64 = r24.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// stw r11,0(r26)
	PPC_STORE_U32(r26.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// srawi r10,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r10.s64 = r11.s32 >> 4;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x827272e0
	if (!cr0.eq) goto loc_827272E0;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// mr r11,r16
	r11.u64 = r16.u64;
loc_827272E0:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r5,180(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r16,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r16.u32);
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r11,0(r26)
	PPC_STORE_U32(r26.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r23,2772(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2772);
	// mr r3,r16
	ctx.r3.u64 = r16.u64;
	// b 0x827326c0
	goto loc_827326C0;
	// li r29,0
	r29.s64 = 0;
	// lwz r25,136(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// lwz r7,1500(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// srawi r26,r6,1
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x1) != 0);
	r26.s64 = ctx.r6.s32 >> 1;
	// lwz r10,1504(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// mr r11,r29
	r11.u64 = r29.u64;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// stw r29,264(r1)
	PPC_STORE_U32(ctx.r1.u32 + 264, r29.u32);
	// stw r29,260(r1)
	PPC_STORE_U32(ctx.r1.u32 + 260, r29.u32);
	// stw r29,256(r1)
	PPC_STORE_U32(ctx.r1.u32 + 256, r29.u32);
	// beq cr6,0x827273e4
	if (cr6.eq) goto loc_827273E4;
	// lwz r5,112(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// addi r9,r8,-2
	ctx.r9.s64 = ctx.r8.s64 + -2;
	// lwz r5,-20(r5)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r5.u32 + -20);
	// rlwinm r4,r5,0,14,14
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x827273e4
	if (cr6.eq) goto loc_827273E4;
	// rlwinm r11,r5,0,21,23
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 0) & 0x700;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82727394
	if (!cr6.eq) goto loc_82727394;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r5,r7,r9
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r9.u32);
	// lhzx r9,r10,r9
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r9.u32);
	// b 0x827273d8
	goto loc_827273D8;
loc_82727394:
	// add r11,r9,r6
	r11.u64 = ctx.r9.u64 + ctx.r6.u64;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r5,r11,1,0,30
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r4,r7,r9
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r9.u32);
	// lhzx r28,r5,r7
	r28.u64 = PPC_LOAD_U16(ctx.r5.u32 + ctx.r7.u32);
	// extsh r3,r4
	ctx.r3.s64 = ctx.r4.s16;
	// lhzx r27,r5,r10
	r27.u64 = PPC_LOAD_U16(ctx.r5.u32 + ctx.r10.u32);
	// lhzx r4,r10,r9
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r9.u32);
	// extsh r5,r28
	ctx.r5.s64 = r28.s16;
	// extsh r9,r27
	ctx.r9.s64 = r27.s16;
	// extsh r4,r4
	ctx.r4.s64 = ctx.r4.s16;
	// add r5,r5,r3
	ctx.r5.u64 = ctx.r5.u64 + ctx.r3.u64;
	// add r9,r9,r4
	ctx.r9.u64 = ctx.r9.u64 + ctx.r4.u64;
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// srawi r5,r5,1
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x1) != 0);
	ctx.r5.s64 = ctx.r5.s32 >> 1;
	// srawi r9,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 1;
loc_827273D8:
	// sth r9,256(r1)
	PPC_STORE_U16(ctx.r1.u32 + 256, ctx.r9.u16);
	// li r11,1
	r11.s64 = 1;
	// sth r5,258(r1)
	PPC_STORE_U16(ctx.r1.u32 + 258, ctx.r5.u16);
loc_827273E4:
	// lwz r9,152(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne cr6,0x8272759c
	if (!cr6.eq) goto loc_8272759C;
	// rlwinm r9,r26,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r5,r6,1,0,30
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r26,r9
	ctx.r9.u64 = r26.u64 + ctx.r9.u64;
	// subf r3,r5,r8
	ctx.r3.s64 = ctx.r8.s64 - ctx.r5.s64;
	// lwz r5,112(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r27,r9,r5
	r27.s64 = ctx.r5.s64 - ctx.r9.s64;
	// lwz r9,0(r27)
	ctx.r9.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// rlwinm r5,r9,0,14,14
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x827274b8
	if (cr6.eq) goto loc_827274B8;
	// rlwinm r9,r9,0,21,23
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x700;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// rlwinm r9,r3,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// bne cr6,0x8272744c
	if (!cr6.eq) goto loc_8272744C;
	// lhzx r23,r7,r9
	r23.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r9.u32);
	// rlwinm r5,r11,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r4,r1,258
	ctx.r4.s64 = ctx.r1.s64 + 258;
	// lhzx r9,r10,r9
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r9.u32);
	// addi r28,r1,256
	r28.s64 = ctx.r1.s64 + 256;
	// sthx r23,r5,r4
	PPC_STORE_U16(ctx.r5.u32 + ctx.r4.u32, r23.u16);
	// sthx r9,r5,r28
	PPC_STORE_U16(ctx.r5.u32 + r28.u32, ctx.r9.u16);
	// b 0x827274b4
	goto loc_827274B4;
loc_8272744C:
	// add r5,r3,r6
	ctx.r5.u64 = ctx.r3.u64 + ctx.r6.u64;
	// lhzx r29,r7,r9
	r29.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r9.u32);
	// rlwinm r4,r11,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r5,r5,1,0,30
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r23,r1,258
	r23.s64 = ctx.r1.s64 + 258;
	// addi r15,r1,256
	r15.s64 = ctx.r1.s64 + 256;
	// lhzx r28,r5,r7
	r28.u64 = PPC_LOAD_U16(ctx.r5.u32 + ctx.r7.u32);
	// lhzx r5,r5,r10
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r5.u32 + ctx.r10.u32);
	// sth r28,120(r1)
	PPC_STORE_U16(ctx.r1.u32 + 120, r28.u16);
	// extsh r28,r29
	r28.s64 = r29.s16;
	// lhzx r29,r10,r9
	r29.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r9.u32);
	// extsh r29,r29
	r29.s64 = r29.s16;
	// lhz r9,120(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 120);
	// sth r5,120(r1)
	PPC_STORE_U16(ctx.r1.u32 + 120, ctx.r5.u16);
	// extsh r5,r9
	ctx.r5.s64 = ctx.r9.s16;
	// add r5,r5,r28
	ctx.r5.u64 = ctx.r5.u64 + r28.u64;
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// srawi r5,r5,1
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x1) != 0);
	ctx.r5.s64 = ctx.r5.s32 >> 1;
	// sthx r5,r4,r23
	PPC_STORE_U16(ctx.r4.u32 + r23.u32, ctx.r5.u16);
	// lhz r9,120(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 120);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// add r9,r9,r29
	ctx.r9.u64 = ctx.r9.u64 + r29.u64;
	// li r29,0
	r29.s64 = 0;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// srawi r9,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 1;
	// sthx r9,r4,r15
	PPC_STORE_U16(ctx.r4.u32 + r15.u32, ctx.r9.u16);
loc_827274B4:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_827274B8:
	// cmpwi cr6,r26,1
	cr6.compare<int32_t>(r26.s32, 1, xer);
	// beq cr6,0x8272759c
	if (cr6.eq) goto loc_8272759C;
	// addi r5,r26,-1
	ctx.r5.s64 = r26.s64 + -1;
	// li r9,1
	ctx.r9.s64 = 1;
	// cmpw cr6,r25,r5
	cr6.compare<int32_t>(r25.s32, ctx.r5.s32, xer);
	// blt cr6,0x827274d4
	if (cr6.lt) goto loc_827274D4;
	// mr r9,r29
	ctx.r9.u64 = r29.u64;
loc_827274D4:
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpw cr6,r25,r5
	cr6.compare<int32_t>(r25.s32, ctx.r5.s32, xer);
	// add r9,r9,r3
	ctx.r9.u64 = ctx.r9.u64 + ctx.r3.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r9,r9,-2
	ctx.r9.s64 = ctx.r9.s64 + -2;
	// blt cr6,0x827274f0
	if (cr6.lt) goto loc_827274F0;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
loc_827274F0:
	// rlwinm r4,r5,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// add r5,r5,r4
	ctx.r5.u64 = ctx.r5.u64 + ctx.r4.u64;
	// rlwinm r5,r5,3,0,28
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 3) & 0xFFFFFFF8;
	// add r5,r5,r27
	ctx.r5.u64 = ctx.r5.u64 + r27.u64;
	// lwz r5,-20(r5)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r5.u32 + -20);
	// rlwinm r4,r5,0,14,14
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x8272759c
	if (cr6.eq) goto loc_8272759C;
	// rlwinm r5,r5,0,21,23
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 0) & 0x700;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// bne cr6,0x82727540
	if (!cr6.eq) goto loc_82727540;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r5,r11,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r4,r1,258
	ctx.r4.s64 = ctx.r1.s64 + 258;
	// addi r3,r1,256
	ctx.r3.s64 = ctx.r1.s64 + 256;
	// lhzx r28,r7,r9
	r28.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r9.u32);
	// lhzx r10,r10,r9
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r9.u32);
	// sthx r28,r5,r4
	PPC_STORE_U16(ctx.r5.u32 + ctx.r4.u32, r28.u16);
	// sthx r10,r5,r3
	PPC_STORE_U16(ctx.r5.u32 + ctx.r3.u32, ctx.r10.u16);
	// b 0x82727598
	goto loc_82727598;
loc_82727540:
	// add r5,r9,r6
	ctx.r5.u64 = ctx.r9.u64 + ctx.r6.u64;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r5,r5,1,0,30
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r4,r11,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r28,r1,258
	r28.s64 = ctx.r1.s64 + 258;
	// addi r27,r1,256
	r27.s64 = ctx.r1.s64 + 256;
	// lhzx r3,r7,r9
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r9.u32);
	// lhzx r26,r5,r7
	r26.u64 = PPC_LOAD_U16(ctx.r5.u32 + ctx.r7.u32);
	// lhzx r5,r5,r10
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r5.u32 + ctx.r10.u32);
	// extsh r3,r3
	ctx.r3.s64 = ctx.r3.s16;
	// lhzx r25,r10,r9
	r25.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r9.u32);
	// extsh r9,r26
	ctx.r9.s64 = r26.s16;
	// extsh r10,r5
	ctx.r10.s64 = ctx.r5.s16;
	// extsh r5,r25
	ctx.r5.s64 = r25.s16;
	// add r9,r9,r3
	ctx.r9.u64 = ctx.r9.u64 + ctx.r3.u64;
	// add r10,r10,r5
	ctx.r10.u64 = ctx.r10.u64 + ctx.r5.u64;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// srawi r9,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 1;
	// srawi r10,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 1;
	// sthx r9,r4,r28
	PPC_STORE_U16(ctx.r4.u32 + r28.u32, ctx.r9.u16);
	// sthx r10,r4,r27
	PPC_STORE_U16(ctx.r4.u32 + r27.u32, ctx.r10.u16);
loc_82727598:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_8272759C:
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// blt cr6,0x82727648
	if (cr6.lt) goto loc_82727648;
	// lhz r11,262(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 262);
	// lhz r10,258(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 258);
	// lhz r4,266(r1)
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r1.u32 + 266);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lhz r9,260(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 260);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// lhz r5,256(r1)
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r1.u32 + 256);
	// extsh r4,r4
	ctx.r4.s64 = ctx.r4.s16;
	// lhz r3,264(r1)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r1.u32 + 264);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// extsh r5,r5
	ctx.r5.s64 = ctx.r5.s16;
	// extsh r3,r3
	ctx.r3.s64 = ctx.r3.s16;
	// subf r29,r10,r11
	r29.s64 = r11.s64 - ctx.r10.s64;
	// subf r27,r4,r11
	r27.s64 = r11.s64 - ctx.r4.s64;
	// subf r26,r10,r4
	r26.s64 = ctx.r4.s64 - ctx.r10.s64;
	// subf r28,r5,r9
	r28.s64 = ctx.r9.s64 - ctx.r5.s64;
	// subf r25,r3,r9
	r25.s64 = ctx.r9.s64 - ctx.r3.s64;
	// subf r23,r5,r3
	r23.s64 = ctx.r3.s64 - ctx.r5.s64;
	// xor r27,r27,r29
	r27.u64 = r27.u64 ^ r29.u64;
	// xor r26,r26,r29
	r26.u64 = r26.u64 ^ r29.u64;
	// xor r25,r25,r28
	r25.u64 = r25.u64 ^ r28.u64;
	// srawi r29,r27,31
	xer.ca = (r27.s32 < 0) & ((r27.u32 & 0x7FFFFFFF) != 0);
	r29.s64 = r27.s32 >> 31;
	// xor r23,r23,r28
	r23.u64 = r23.u64 ^ r28.u64;
	// srawi r28,r26,31
	xer.ca = (r26.s32 < 0) & ((r26.u32 & 0x7FFFFFFF) != 0);
	r28.s64 = r26.s32 >> 31;
	// srawi r27,r25,31
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x7FFFFFFF) != 0);
	r27.s64 = r25.s32 >> 31;
	// srawi r26,r23,31
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x7FFFFFFF) != 0);
	r26.s64 = r23.s32 >> 31;
	// or r25,r29,r28
	r25.u64 = r29.u64 | r28.u64;
	// or r23,r27,r26
	r23.u64 = r27.u64 | r26.u64;
	// and r10,r28,r10
	ctx.r10.u64 = r28.u64 & ctx.r10.u64;
	// andc r4,r4,r25
	ctx.r4.u64 = ctx.r4.u64 & ~r25.u64;
	// andc r3,r3,r23
	ctx.r3.u64 = ctx.r3.u64 & ~r23.u64;
	// and r5,r26,r5
	ctx.r5.u64 = r26.u64 & ctx.r5.u64;
	// or r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 | ctx.r10.u64;
	// and r11,r29,r11
	r11.u64 = r29.u64 & r11.u64;
	// or r5,r3,r5
	ctx.r5.u64 = ctx.r3.u64 | ctx.r5.u64;
	// and r9,r27,r9
	ctx.r9.u64 = r27.u64 & ctx.r9.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// or r10,r5,r9
	ctx.r10.u64 = ctx.r5.u64 | ctx.r9.u64;
	// sth r11,502(r1)
	PPC_STORE_U16(ctx.r1.u32 + 502, r11.u16);
	// sth r10,500(r1)
	PPC_STORE_U16(ctx.r1.u32 + 500, ctx.r10.u16);
	// b 0x82727660
	goto loc_82727660;
loc_82727648:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x8272765c
	if (!cr6.eq) goto loc_8272765C;
	// lwz r11,256(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 256);
	// stw r11,500(r1)
	PPC_STORE_U32(ctx.r1.u32 + 500, r11.u32);
	// b 0x82727660
	goto loc_82727660;
loc_8272765C:
	// stw r29,500(r1)
	PPC_STORE_U32(ctx.r1.u32 + 500, r29.u32);
loc_82727660:
	// rlwinm r11,r8,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// lhz r9,502(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 502);
	// add r10,r6,r8
	ctx.r10.u64 = ctx.r6.u64 + ctx.r8.u64;
	// lwz r15,136(r1)
	r15.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// extsh r5,r9
	ctx.r5.s64 = ctx.r9.s16;
	// rlwinm r9,r8,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// lhz r8,500(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 500);
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// lwzx r11,r11,r24
	r11.u64 = PPC_LOAD_U32(r11.u32 + r24.u32);
	// extsh r6,r8
	ctx.r6.s64 = ctx.r8.s16;
	// add r7,r7,r10
	ctx.r7.u64 = ctx.r7.u64 + ctx.r10.u64;
	// add r8,r5,r11
	ctx.r8.u64 = ctx.r5.u64 + r11.u64;
	// rlwinm r11,r11,16,16,31
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF;
	// add r5,r8,r21
	ctx.r5.u64 = ctx.r8.u64 + r21.u64;
	// mr r8,r11
	ctx.r8.u64 = r11.u64;
	// and r11,r5,r18
	r11.u64 = ctx.r5.u64 & r18.u64;
	// lwz r18,112(r1)
	r18.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// subf r11,r21,r11
	r11.s64 = r11.s64 - r21.s64;
	// add r8,r8,r6
	ctx.r8.u64 = ctx.r8.u64 + ctx.r6.u64;
	// li r29,0
	r29.s64 = 0;
	// add r8,r8,r19
	ctx.r8.u64 = ctx.r8.u64 + r19.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// sth r11,2(r7)
	PPC_STORE_U16(ctx.r7.u32 + 2, r11.u16);
	// and r8,r8,r17
	ctx.r8.u64 = ctx.r8.u64 & r17.u64;
	// lwz r11,1500(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// cmpwi cr6,r15,0
	cr6.compare<int32_t>(r15.s32, 0, xer);
	// subf r8,r19,r8
	ctx.r8.s64 = ctx.r8.s64 - r19.s64;
	// stw r29,536(r1)
	PPC_STORE_U32(ctx.r1.u32 + 536, r29.u32);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r29,532(r1)
	PPC_STORE_U32(ctx.r1.u32 + 532, r29.u32);
	// stw r29,528(r1)
	PPC_STORE_U32(ctx.r1.u32 + 528, r29.u32);
	// lhz r7,2(r11)
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r7,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r7.u16);
	// lwz r11,1500(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// lhzx r7,r11,r10
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + ctx.r10.u32);
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// sth r7,2(r11)
	PPC_STORE_U16(r11.u32 + 2, ctx.r7.u16);
	// lwz r11,1500(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// lhz r7,2(r11)
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r7,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r7.u16);
	// lwz r11,1504(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lwz r7,1500(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lhzx r7,r7,r9
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r9.u32);
	// sth r8,2(r11)
	PPC_STORE_U16(r11.u32 + 2, ctx.r8.u16);
	// lwz r11,1504(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// extsh r23,r7
	r23.s64 = ctx.r7.s16;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lhz r8,2(r11)
	ctx.r8.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r8,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r8.u16);
	// lwz r11,1504(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lhzx r8,r11,r10
	ctx.r8.u64 = PPC_LOAD_U16(r11.u32 + ctx.r10.u32);
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// sth r8,2(r11)
	PPC_STORE_U16(r11.u32 + 2, ctx.r8.u16);
	// lwz r11,1504(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// add r11,r9,r11
	r11.u64 = ctx.r9.u64 + r11.u64;
	// lhz r8,2(r11)
	ctx.r8.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r8,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r8.u16);
	// lwz r11,1504(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lhz r26,0(r22)
	r26.u64 = PPC_LOAD_U16(r22.u32 + 0);
	// lwz r25,1496(r31)
	r25.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lwz r24,1492(r31)
	r24.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// srawi r8,r26,1
	xer.ca = (r26.s32 < 0) & ((r26.u32 & 0x1) != 0);
	ctx.r8.s64 = r26.s32 >> 1;
	// lhzx r11,r9,r11
	r11.u64 = PPC_LOAD_U16(ctx.r9.u32 + r11.u32);
	// extsh r22,r11
	r22.s64 = r11.s16;
	// lwz r11,160(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// mullw r11,r26,r11
	r11.s64 = int64_t(r26.s32) * int64_t(r11.s32);
	// add r11,r11,r15
	r11.u64 = r11.u64 + r15.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// beq cr6,0x827277ac
	if (cr6.eq) goto loc_827277AC;
	// lwz r6,-20(r18)
	ctx.r6.u64 = PPC_LOAD_U32(r18.u32 + -20);
	// addi r7,r11,-2
	ctx.r7.s64 = r11.s64 + -2;
	// rlwinm r6,r6,0,14,14
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x827277ac
	if (cr6.eq) goto loc_827277AC;
	// rlwinm r7,r7,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0xFFFFFFFE;
	// li r4,1
	ctx.r4.s64 = 1;
	// lhzx r6,r7,r24
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r7.u32 + r24.u32);
	// lhzx r7,r7,r25
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r7.u32 + r25.u32);
	// sth r6,530(r1)
	PPC_STORE_U16(ctx.r1.u32 + 530, ctx.r6.u16);
	// sth r7,528(r1)
	PPC_STORE_U16(ctx.r1.u32 + 528, ctx.r7.u16);
loc_827277AC:
	// lwz r17,152(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// bne cr6,0x82727880
	if (!cr6.eq) goto loc_82727880;
	// rlwinm r7,r26,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r6,r7,r11
	ctx.r6.s64 = r11.s64 - ctx.r7.s64;
	// rlwinm r11,r8,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r8,r11
	r11.u64 = ctx.r8.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r5,r11,r18
	ctx.r5.s64 = r18.s64 - r11.s64;
	// lwz r11,0(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	// rlwinm r11,r11,0,14,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82727804
	if (cr6.eq) goto loc_82727804;
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r7,r4,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r3,r1,530
	ctx.r3.s64 = ctx.r1.s64 + 530;
	// addi r28,r1,528
	r28.s64 = ctx.r1.s64 + 528;
	// addi r4,r4,1
	ctx.r4.s64 = ctx.r4.s64 + 1;
	// lhzx r27,r11,r24
	r27.u64 = PPC_LOAD_U16(r11.u32 + r24.u32);
	// lhzx r11,r11,r25
	r11.u64 = PPC_LOAD_U16(r11.u32 + r25.u32);
	// sthx r27,r7,r3
	PPC_STORE_U16(ctx.r7.u32 + ctx.r3.u32, r27.u16);
	// sthx r11,r7,r28
	PPC_STORE_U16(ctx.r7.u32 + r28.u32, r11.u16);
loc_82727804:
	// cmpwi cr6,r8,1
	cr6.compare<int32_t>(ctx.r8.s32, 1, xer);
	// beq cr6,0x82727880
	if (cr6.eq) goto loc_82727880;
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// li r11,1
	r11.s64 = 1;
	// cmpw cr6,r15,r8
	cr6.compare<int32_t>(r15.s32, ctx.r8.s32, xer);
	// blt cr6,0x82727820
	if (cr6.lt) goto loc_82727820;
	// mr r11,r29
	r11.u64 = r29.u64;
loc_82727820:
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpw cr6,r15,r8
	cr6.compare<int32_t>(r15.s32, ctx.r8.s32, xer);
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// addi r7,r11,-2
	ctx.r7.s64 = r11.s64 + -2;
	// li r11,1
	r11.s64 = 1;
	// blt cr6,0x8272783c
	if (cr6.lt) goto loc_8272783C;
	// mr r11,r29
	r11.u64 = r29.u64;
loc_8272783C:
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// lwz r11,-20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -20);
	// rlwinm r11,r11,0,14,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82727880
	if (cr6.eq) goto loc_82727880;
	// rlwinm r11,r7,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r8,r4,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r7,r1,530
	ctx.r7.s64 = ctx.r1.s64 + 530;
	// addi r6,r1,528
	ctx.r6.s64 = ctx.r1.s64 + 528;
	// addi r4,r4,1
	ctx.r4.s64 = ctx.r4.s64 + 1;
	// lhzx r5,r11,r24
	ctx.r5.u64 = PPC_LOAD_U16(r11.u32 + r24.u32);
	// lhzx r11,r11,r25
	r11.u64 = PPC_LOAD_U16(r11.u32 + r25.u32);
	// sthx r5,r8,r7
	PPC_STORE_U16(ctx.r8.u32 + ctx.r7.u32, ctx.r5.u16);
	// sthx r11,r8,r6
	PPC_STORE_U16(ctx.r8.u32 + ctx.r6.u32, r11.u16);
loc_82727880:
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// ble cr6,0x827279c0
	if (!cr6.gt) goto loc_827279C0;
	// addi r8,r1,2544
	ctx.r8.s64 = ctx.r1.s64 + 2544;
	// addi r11,r1,528
	r11.s64 = ctx.r1.s64 + 528;
	// addi r7,r1,2064
	ctx.r7.s64 = ctx.r1.s64 + 2064;
	// mr r6,r4
	ctx.r6.u64 = ctx.r4.u64;
loc_827278A0:
	// lhz r28,0(r11)
	r28.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rlwinm r28,r28,0,29,29
	r28.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// lwz r28,0(r11)
	r28.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// beq cr6,0x827278c4
	if (cr6.eq) goto loc_827278C4;
	// stw r28,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, r28.u32);
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
	// addi r7,r7,4
	ctx.r7.s64 = ctx.r7.s64 + 4;
	// b 0x827278d0
	goto loc_827278D0;
loc_827278C4:
	// stw r28,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r28.u32);
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// addi r8,r8,4
	ctx.r8.s64 = ctx.r8.s64 + 4;
loc_827278D0:
	// addi r6,r6,-1
	ctx.r6.s64 = ctx.r6.s64 + -1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// bne cr6,0x827278a0
	if (!cr6.eq) goto loc_827278A0;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// ble cr6,0x827279c0
	if (!cr6.gt) goto loc_827279C0;
	// cmpwi cr6,r5,3
	cr6.compare<int32_t>(ctx.r5.s32, 3, xer);
	// beq cr6,0x82727918
	if (cr6.eq) goto loc_82727918;
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// beq cr6,0x82727918
	if (cr6.eq) goto loc_82727918;
	// cmpw cr6,r5,r3
	cr6.compare<int32_t>(ctx.r5.s32, ctx.r3.s32, xer);
	// blt cr6,0x8272790c
	if (cr6.lt) goto loc_8272790C;
	// lwz r11,2544(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2544);
	// stw r11,456(r1)
	PPC_STORE_U32(ctx.r1.u32 + 456, r11.u32);
	// b 0x827279c4
	goto loc_827279C4;
loc_8272790C:
	// lwz r11,2064(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2064);
	// stw r11,456(r1)
	PPC_STORE_U32(ctx.r1.u32 + 456, r11.u32);
	// b 0x827279c4
	goto loc_827279C4;
loc_82727918:
	// lhz r11,534(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 534);
	// lhz r8,530(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 530);
	// lhz r5,538(r1)
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r1.u32 + 538);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lhz r7,532(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 532);
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// lhz r6,528(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 528);
	// extsh r5,r5
	ctx.r5.s64 = ctx.r5.s16;
	// lhz r4,536(r1)
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r1.u32 + 536);
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// extsh r4,r4
	ctx.r4.s64 = ctx.r4.s16;
	// subf r3,r8,r11
	ctx.r3.s64 = r11.s64 - ctx.r8.s64;
	// subf r28,r5,r11
	r28.s64 = r11.s64 - ctx.r5.s64;
	// subf r27,r8,r5
	r27.s64 = ctx.r5.s64 - ctx.r8.s64;
	// subf r29,r6,r7
	r29.s64 = ctx.r7.s64 - ctx.r6.s64;
	// subf r21,r4,r7
	r21.s64 = ctx.r7.s64 - ctx.r4.s64;
	// subf r19,r6,r4
	r19.s64 = ctx.r4.s64 - ctx.r6.s64;
	// xor r28,r28,r3
	r28.u64 = r28.u64 ^ ctx.r3.u64;
	// xor r27,r27,r3
	r27.u64 = r27.u64 ^ ctx.r3.u64;
	// xor r21,r21,r29
	r21.u64 = r21.u64 ^ r29.u64;
	// srawi r3,r28,31
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r28.s32 >> 31;
	// xor r19,r19,r29
	r19.u64 = r19.u64 ^ r29.u64;
	// srawi r29,r27,31
	xer.ca = (r27.s32 < 0) & ((r27.u32 & 0x7FFFFFFF) != 0);
	r29.s64 = r27.s32 >> 31;
	// srawi r28,r21,31
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x7FFFFFFF) != 0);
	r28.s64 = r21.s32 >> 31;
	// srawi r27,r19,31
	xer.ca = (r19.s32 < 0) & ((r19.u32 & 0x7FFFFFFF) != 0);
	r27.s64 = r19.s32 >> 31;
	// or r21,r3,r29
	r21.u64 = ctx.r3.u64 | r29.u64;
	// or r19,r28,r27
	r19.u64 = r28.u64 | r27.u64;
	// and r8,r29,r8
	ctx.r8.u64 = r29.u64 & ctx.r8.u64;
	// andc r5,r5,r21
	ctx.r5.u64 = ctx.r5.u64 & ~r21.u64;
	// andc r4,r4,r19
	ctx.r4.u64 = ctx.r4.u64 & ~r19.u64;
	// and r6,r27,r6
	ctx.r6.u64 = r27.u64 & ctx.r6.u64;
	// or r8,r5,r8
	ctx.r8.u64 = ctx.r5.u64 | ctx.r8.u64;
	// and r11,r3,r11
	r11.u64 = ctx.r3.u64 & r11.u64;
	// or r6,r4,r6
	ctx.r6.u64 = ctx.r4.u64 | ctx.r6.u64;
	// and r7,r28,r7
	ctx.r7.u64 = r28.u64 & ctx.r7.u64;
	// or r11,r8,r11
	r11.u64 = ctx.r8.u64 | r11.u64;
	// or r8,r6,r7
	ctx.r8.u64 = ctx.r6.u64 | ctx.r7.u64;
	// li r29,0
	r29.s64 = 0;
	// sth r11,458(r1)
	PPC_STORE_U16(ctx.r1.u32 + 458, r11.u16);
	// sth r8,456(r1)
	PPC_STORE_U16(ctx.r1.u32 + 456, ctx.r8.u16);
	// b 0x827279c4
	goto loc_827279C4;
loc_827279C0:
	// stw r29,456(r1)
	PPC_STORE_U32(ctx.r1.u32 + 456, r29.u32);
loc_827279C4:
	// lwz r8,160(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// cmpwi cr6,r15,0
	cr6.compare<int32_t>(r15.s32, 0, xer);
	// lhz r11,458(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 458);
	// srawi r5,r26,1
	xer.ca = (r26.s32 < 0) & ((r26.u32 & 0x1) != 0);
	ctx.r5.s64 = r26.s32 >> 1;
	// mullw r8,r26,r8
	ctx.r8.s64 = int64_t(r26.s32) * int64_t(ctx.r8.s32);
	// stw r29,392(r1)
	PPC_STORE_U32(ctx.r1.u32 + 392, r29.u32);
	// stw r29,388(r1)
	PPC_STORE_U32(ctx.r1.u32 + 388, r29.u32);
	// stw r29,384(r1)
	PPC_STORE_U32(ctx.r1.u32 + 384, r29.u32);
	// extsh r21,r11
	r21.s64 = r11.s16;
	// lhz r11,456(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 456);
	// add r8,r8,r15
	ctx.r8.u64 = ctx.r8.u64 + r15.u64;
	// extsh r19,r11
	r19.s64 = r11.s16;
	// mr r11,r29
	r11.u64 = r29.u64;
	// rlwinm r6,r8,1,0,30
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// beq cr6,0x82727a3c
	if (cr6.eq) goto loc_82727A3C;
	// lwz r7,-20(r18)
	ctx.r7.u64 = PPC_LOAD_U32(r18.u32 + -20);
	// addi r8,r6,-2
	ctx.r8.s64 = ctx.r6.s64 + -2;
	// rlwinm r4,r7,0,14,14
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x82727a3c
	if (cr6.eq) goto loc_82727A3C;
	// rlwinm r11,r7,0,21,23
	r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 0) & 0x700;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// beq cr6,0x82727a28
	if (cr6.eq) goto loc_82727A28;
	// add r8,r8,r26
	ctx.r8.u64 = ctx.r8.u64 + r26.u64;
loc_82727A28:
	// rlwinm r8,r8,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r7,r8,r24
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r8.u32 + r24.u32);
	// lhzx r8,r8,r25
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r8.u32 + r25.u32);
	// sth r7,386(r1)
	PPC_STORE_U16(ctx.r1.u32 + 386, ctx.r7.u16);
	// sth r8,384(r1)
	PPC_STORE_U16(ctx.r1.u32 + 384, ctx.r8.u16);
loc_82727A3C:
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// bne cr6,0x82727b64
	if (!cr6.eq) goto loc_82727B64;
	// rlwinm r8,r26,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r6,r8,r6
	ctx.r6.s64 = ctx.r6.s64 - ctx.r8.s64;
	// rlwinm r8,r5,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// add r8,r5,r8
	ctx.r8.u64 = ctx.r5.u64 + ctx.r8.u64;
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r4,r8,r18
	ctx.r4.s64 = r18.s64 - ctx.r8.s64;
	// lwz r8,0(r4)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// rlwinm r7,r8,0,14,14
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// beq cr6,0x82727abc
	if (cr6.eq) goto loc_82727ABC;
	// rlwinm r8,r8,0,21,23
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x700;
	// addi r3,r1,386
	ctx.r3.s64 = ctx.r1.s64 + 386;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// addi r28,r1,384
	r28.s64 = ctx.r1.s64 + 384;
	// bne cr6,0x82727a9c
	if (!cr6.eq) goto loc_82727A9C;
	// rlwinm r8,r6,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r7,r11,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lhzx r27,r8,r24
	r27.u64 = PPC_LOAD_U16(ctx.r8.u32 + r24.u32);
	// lhzx r8,r8,r25
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r8.u32 + r25.u32);
	// sthx r27,r7,r3
	PPC_STORE_U16(ctx.r7.u32 + ctx.r3.u32, r27.u16);
	// sthx r8,r7,r28
	PPC_STORE_U16(ctx.r7.u32 + r28.u32, ctx.r8.u16);
	// b 0x82727ab8
	goto loc_82727AB8;
loc_82727A9C:
	// add r7,r6,r26
	ctx.r7.u64 = ctx.r6.u64 + r26.u64;
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r7,r7,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r27,r7,r24
	r27.u64 = PPC_LOAD_U16(ctx.r7.u32 + r24.u32);
	// lhzx r7,r7,r25
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r7.u32 + r25.u32);
	// sthx r27,r8,r3
	PPC_STORE_U16(ctx.r8.u32 + ctx.r3.u32, r27.u16);
	// sthx r7,r8,r28
	PPC_STORE_U16(ctx.r8.u32 + r28.u32, ctx.r7.u16);
loc_82727AB8:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_82727ABC:
	// cmpwi cr6,r5,1
	cr6.compare<int32_t>(ctx.r5.s32, 1, xer);
	// beq cr6,0x82727b64
	if (cr6.eq) goto loc_82727B64;
	// addi r7,r5,-1
	ctx.r7.s64 = ctx.r5.s64 + -1;
	// li r8,1
	ctx.r8.s64 = 1;
	// cmpw cr6,r15,r7
	cr6.compare<int32_t>(r15.s32, ctx.r7.s32, xer);
	// blt cr6,0x82727ad8
	if (cr6.lt) goto loc_82727AD8;
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
loc_82727AD8:
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpw cr6,r15,r7
	cr6.compare<int32_t>(r15.s32, ctx.r7.s32, xer);
	// add r8,r8,r6
	ctx.r8.u64 = ctx.r8.u64 + ctx.r6.u64;
	// addi r7,r8,-2
	ctx.r7.s64 = ctx.r8.s64 + -2;
	// li r8,1
	ctx.r8.s64 = 1;
	// blt cr6,0x82727af4
	if (cr6.lt) goto loc_82727AF4;
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
loc_82727AF4:
	// rlwinm r6,r8,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// add r8,r8,r6
	ctx.r8.u64 = ctx.r8.u64 + ctx.r6.u64;
	// rlwinm r8,r8,3,0,28
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// add r8,r8,r4
	ctx.r8.u64 = ctx.r8.u64 + ctx.r4.u64;
	// lwz r8,-20(r8)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + -20);
	// rlwinm r6,r8,0,14,14
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x82727b64
	if (cr6.eq) goto loc_82727B64;
	// rlwinm r8,r8,0,21,23
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x700;
	// addi r6,r1,386
	ctx.r6.s64 = ctx.r1.s64 + 386;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// addi r5,r1,384
	ctx.r5.s64 = ctx.r1.s64 + 384;
	// bne cr6,0x82727b44
	if (!cr6.eq) goto loc_82727B44;
	// rlwinm r8,r7,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r7,r11,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lhzx r4,r8,r24
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r8.u32 + r24.u32);
	// lhzx r8,r8,r25
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r8.u32 + r25.u32);
	// sthx r4,r7,r6
	PPC_STORE_U16(ctx.r7.u32 + ctx.r6.u32, ctx.r4.u16);
	// sthx r8,r7,r5
	PPC_STORE_U16(ctx.r7.u32 + ctx.r5.u32, ctx.r8.u16);
	// b 0x82727b60
	goto loc_82727B60;
loc_82727B44:
	// add r7,r7,r26
	ctx.r7.u64 = ctx.r7.u64 + r26.u64;
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r7,r7,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r4,r7,r24
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r7.u32 + r24.u32);
	// lhzx r7,r7,r25
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r7.u32 + r25.u32);
	// sthx r4,r8,r6
	PPC_STORE_U16(ctx.r8.u32 + ctx.r6.u32, ctx.r4.u16);
	// sthx r7,r8,r5
	PPC_STORE_U16(ctx.r8.u32 + ctx.r5.u32, ctx.r7.u16);
loc_82727B60:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_82727B64:
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x82727ca0
	if (!cr6.gt) goto loc_82727CA0;
	// addi r7,r1,2320
	ctx.r7.s64 = ctx.r1.s64 + 2320;
	// addi r8,r1,384
	ctx.r8.s64 = ctx.r1.s64 + 384;
	// addi r6,r1,2096
	ctx.r6.s64 = ctx.r1.s64 + 2096;
	// mr r5,r11
	ctx.r5.u64 = r11.u64;
loc_82727B84:
	// lhz r28,0(r8)
	r28.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// rlwinm r28,r28,0,29,29
	r28.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// lwz r28,0(r8)
	r28.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// beq cr6,0x82727ba8
	if (cr6.eq) goto loc_82727BA8;
	// stw r28,0(r6)
	PPC_STORE_U32(ctx.r6.u32 + 0, r28.u32);
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
	// addi r6,r6,4
	ctx.r6.s64 = ctx.r6.s64 + 4;
	// b 0x82727bb4
	goto loc_82727BB4;
loc_82727BA8:
	// stw r28,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, r28.u32);
	// addi r4,r4,1
	ctx.r4.s64 = ctx.r4.s64 + 1;
	// addi r7,r7,4
	ctx.r7.s64 = ctx.r7.s64 + 4;
loc_82727BB4:
	// addi r5,r5,-1
	ctx.r5.s64 = ctx.r5.s64 + -1;
	// addi r8,r8,4
	ctx.r8.s64 = ctx.r8.s64 + 4;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// bne cr6,0x82727b84
	if (!cr6.eq) goto loc_82727B84;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x82727ca0
	if (!cr6.gt) goto loc_82727CA0;
	// cmpwi cr6,r4,3
	cr6.compare<int32_t>(ctx.r4.s32, 3, xer);
	// beq cr6,0x82727bfc
	if (cr6.eq) goto loc_82727BFC;
	// cmpwi cr6,r3,3
	cr6.compare<int32_t>(ctx.r3.s32, 3, xer);
	// beq cr6,0x82727bfc
	if (cr6.eq) goto loc_82727BFC;
	// cmpw cr6,r4,r3
	cr6.compare<int32_t>(ctx.r4.s32, ctx.r3.s32, xer);
	// blt cr6,0x82727bf0
	if (cr6.lt) goto loc_82727BF0;
	// lwz r11,2320(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2320);
	// stw r11,464(r1)
	PPC_STORE_U32(ctx.r1.u32 + 464, r11.u32);
	// b 0x82727ca4
	goto loc_82727CA4;
loc_82727BF0:
	// lwz r11,2096(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2096);
	// stw r11,464(r1)
	PPC_STORE_U32(ctx.r1.u32 + 464, r11.u32);
	// b 0x82727ca4
	goto loc_82727CA4;
loc_82727BFC:
	// lhz r11,390(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 390);
	// lhz r8,386(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 386);
	// lhz r5,394(r1)
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r1.u32 + 394);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lhz r7,388(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 388);
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// lhz r6,384(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 384);
	// extsh r5,r5
	ctx.r5.s64 = ctx.r5.s16;
	// lhz r4,392(r1)
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r1.u32 + 392);
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// extsh r4,r4
	ctx.r4.s64 = ctx.r4.s16;
	// subf r3,r8,r11
	ctx.r3.s64 = r11.s64 - ctx.r8.s64;
	// subf r28,r5,r11
	r28.s64 = r11.s64 - ctx.r5.s64;
	// subf r27,r8,r5
	r27.s64 = ctx.r5.s64 - ctx.r8.s64;
	// subf r29,r6,r7
	r29.s64 = ctx.r7.s64 - ctx.r6.s64;
	// subf r26,r4,r7
	r26.s64 = ctx.r7.s64 - ctx.r4.s64;
	// subf r25,r6,r4
	r25.s64 = ctx.r4.s64 - ctx.r6.s64;
	// xor r28,r28,r3
	r28.u64 = r28.u64 ^ ctx.r3.u64;
	// xor r27,r27,r3
	r27.u64 = r27.u64 ^ ctx.r3.u64;
	// xor r26,r26,r29
	r26.u64 = r26.u64 ^ r29.u64;
	// srawi r3,r28,31
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r28.s32 >> 31;
	// xor r25,r25,r29
	r25.u64 = r25.u64 ^ r29.u64;
	// srawi r29,r27,31
	xer.ca = (r27.s32 < 0) & ((r27.u32 & 0x7FFFFFFF) != 0);
	r29.s64 = r27.s32 >> 31;
	// srawi r28,r26,31
	xer.ca = (r26.s32 < 0) & ((r26.u32 & 0x7FFFFFFF) != 0);
	r28.s64 = r26.s32 >> 31;
	// srawi r27,r25,31
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x7FFFFFFF) != 0);
	r27.s64 = r25.s32 >> 31;
	// or r26,r3,r29
	r26.u64 = ctx.r3.u64 | r29.u64;
	// or r25,r28,r27
	r25.u64 = r28.u64 | r27.u64;
	// and r8,r29,r8
	ctx.r8.u64 = r29.u64 & ctx.r8.u64;
	// andc r5,r5,r26
	ctx.r5.u64 = ctx.r5.u64 & ~r26.u64;
	// andc r4,r4,r25
	ctx.r4.u64 = ctx.r4.u64 & ~r25.u64;
	// and r6,r27,r6
	ctx.r6.u64 = r27.u64 & ctx.r6.u64;
	// or r8,r5,r8
	ctx.r8.u64 = ctx.r5.u64 | ctx.r8.u64;
	// and r11,r3,r11
	r11.u64 = ctx.r3.u64 & r11.u64;
	// or r6,r4,r6
	ctx.r6.u64 = ctx.r4.u64 | ctx.r6.u64;
	// and r7,r28,r7
	ctx.r7.u64 = r28.u64 & ctx.r7.u64;
	// or r11,r8,r11
	r11.u64 = ctx.r8.u64 | r11.u64;
	// or r8,r6,r7
	ctx.r8.u64 = ctx.r6.u64 | ctx.r7.u64;
	// sth r11,466(r1)
	PPC_STORE_U16(ctx.r1.u32 + 466, r11.u16);
	// sth r8,464(r1)
	PPC_STORE_U16(ctx.r1.u32 + 464, ctx.r8.u16);
	// b 0x82727ca4
	goto loc_82727CA4;
loc_82727CA0:
	// stw r29,464(r1)
	PPC_STORE_U32(ctx.r1.u32 + 464, r29.u32);
loc_82727CA4:
	// lwz r7,160(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// add r8,r9,r24
	ctx.r8.u64 = ctx.r9.u64 + r24.u64;
	// mr r11,r23
	r11.u64 = r23.u64;
	// rlwinm r7,r7,16,0,15
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 16) & 0xFFFF0000;
	// rlwimi r11,r22,16,0,15
	r11.u64 = (__builtin_rotateleft32(r22.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// or r6,r7,r15
	ctx.r6.u64 = ctx.r7.u64 | r15.u64;
	// clrlwi r7,r23,30
	ctx.r7.u64 = r23.u32 & 0x3;
	// sth r21,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, r21.u16);
	// rlwinm r29,r6,6,0,25
	r29.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 6) & 0xFFFFFFC0;
	// lwz r8,1492(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// addi r6,r7,1
	ctx.r6.s64 = ctx.r7.s64 + 1;
	// add r8,r9,r8
	ctx.r8.u64 = ctx.r9.u64 + ctx.r8.u64;
	// srawi r6,r6,2
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x3) != 0);
	ctx.r6.s64 = ctx.r6.s32 >> 2;
	// clrlwi r7,r22,30
	ctx.r7.u64 = r22.u32 & 0x3;
	// add r6,r6,r23
	ctx.r6.u64 = ctx.r6.u64 + r23.u64;
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// srawi r25,r6,1
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x1) != 0);
	r25.s64 = ctx.r6.s32 >> 1;
	// lhz r6,2(r8)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r8.u32 + 2);
	// srawi r7,r7,2
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x3) != 0);
	ctx.r7.s64 = ctx.r7.s32 >> 2;
	// mr r27,r22
	r27.u64 = r22.u64;
	// add r7,r7,r22
	ctx.r7.u64 = ctx.r7.u64 + r22.u64;
	// mr r28,r23
	r28.u64 = r23.u64;
	// sth r6,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r6.u16);
	// srawi r24,r7,1
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x1) != 0);
	r24.s64 = ctx.r7.s32 >> 1;
	// lwz r8,1496(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// rlwinm r7,r11,1,15,15
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// stw r25,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r25.u32);
	// add r8,r8,r9
	ctx.r8.u64 = ctx.r8.u64 + ctx.r9.u64;
	// stw r27,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r27.u32);
	// subf r7,r7,r11
	ctx.r7.s64 = r11.s64 - ctx.r7.s64;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// stw r24,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, r24.u32);
	// add r7,r7,r29
	ctx.r7.u64 = ctx.r7.u64 + r29.u64;
	// sth r19,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, r19.u16);
	// addis r7,r7,115
	ctx.r7.s64 = ctx.r7.s64 + 7536640;
	// lwz r8,1496(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// addi r7,r7,115
	ctx.r7.s64 = ctx.r7.s64 + 115;
	// add r9,r8,r9
	ctx.r9.u64 = ctx.r8.u64 + ctx.r9.u64;
	// lhz r8,2(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 2);
	// sth r8,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r8.u16);
	// lwz r9,1492(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// lhz r8,466(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 466);
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// sth r8,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, ctx.r8.u16);
	// lwz r9,1492(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lhz r8,2(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 2);
	// sth r8,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r8.u16);
	// lwz r9,1496(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lhz r8,464(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 464);
	// add r9,r9,r10
	ctx.r9.u64 = ctx.r9.u64 + ctx.r10.u64;
	// sth r8,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, ctx.r8.u16);
	// lwz r9,1496(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// lhz r9,2(r10)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + 2);
	// sth r9,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r9.u16);
	// lwz r6,1396(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 1396);
	// lwz r26,1404(r31)
	r26.u64 = PPC_LOAD_U32(r31.u32 + 1404);
	// subf r11,r11,r6
	r11.s64 = ctx.r6.s64 - r11.s64;
	// subf r11,r29,r11
	r11.s64 = r11.s64 - r29.s64;
	// or r11,r7,r11
	r11.u64 = ctx.r7.u64 | r11.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82727dc0
	if (cr6.eq) goto loc_82727DC0;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r27,96(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r28,100(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
loc_82727DC0:
	// mr r11,r25
	r11.u64 = r25.u64;
	// srawi r5,r29,1
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x1) != 0);
	ctx.r5.s64 = r29.s32 >> 1;
	// rlwimi r11,r24,16,0,15
	r11.u64 = (__builtin_rotateleft32(r24.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r26
	ctx.r9.s64 = r26.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r5,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r5.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// addis r11,r11,59
	r11.s64 = r11.s64 + 3866624;
	// addi r11,r11,59
	r11.s64 = r11.s64 + 59;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82727e14
	if (cr6.eq) goto loc_82727E14;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// addi r4,r1,164
	ctx.r4.s64 = ctx.r1.s64 + 164;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
	// lwz r25,104(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lwz r24,164(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
loc_82727E14:
	// addi r10,r31,74
	ctx.r10.s64 = r31.s64 + 74;
	// lwz r8,124(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// srawi r7,r27,2
	xer.ca = (r27.s32 < 0) & ((r27.u32 & 0x3) != 0);
	ctx.r7.s64 = r27.s32 >> 2;
	// srawi r9,r28,2
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x3) != 0);
	ctx.r9.s64 = r28.s32 >> 2;
	// lhz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// lwz r11,0(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// mullw r10,r7,r10
	ctx.r10.s64 = int64_t(ctx.r7.s32) * int64_t(ctx.r10.s32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// add r29,r10,r16
	r29.u64 = ctx.r10.u64 + r16.u64;
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82727ec4
	if (!cr0.eq) goto loc_82727EC4;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r23,0
	r23.s64 = 0;
	// mr r11,r23
	r11.u64 = r23.u64;
	// b 0x82727ec8
	goto loc_82727EC8;
loc_82727EC4:
	// li r23,0
	r23.s64 = 0;
loc_82727EC8:
	// addi r10,r30,8
	ctx.r10.s64 = r30.s64 + 8;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// dcbt r10,r29
	// rlwinm r10,r30,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// add r10,r30,r10
	ctx.r10.u64 = r30.u64 + ctx.r10.u64;
	// addi r10,r10,64
	ctx.r10.s64 = ctx.r10.s64 + 64;
	// dcbt r10,r29
	// rlwinm r10,r30,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r30,r10
	ctx.r10.u64 = r30.u64 + ctx.r10.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r10,64
	ctx.r10.s64 = ctx.r10.s64 + 64;
	// dcbt r10,r29
	// mulli r10,r30,11
	ctx.r10.s64 = r30.s64 * 11;
	// addi r10,r10,64
	ctx.r10.s64 = ctx.r10.s64 + 64;
	// dcbt r10,r29
	// rlwinm r10,r30,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r30,r10
	ctx.r10.u64 = r30.u64 + ctx.r10.u64;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r10,64
	ctx.r10.s64 = ctx.r10.s64 + 64;
	// dcbt r10,r29
	// mulli r10,r30,13
	ctx.r10.s64 = r30.s64 * 13;
	// addi r10,r10,64
	ctx.r10.s64 = ctx.r10.s64 + 64;
	// dcbt r10,r29
	// rlwinm r10,r30,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r10,r30,r10
	ctx.r10.s64 = ctx.r10.s64 - r30.s64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r10,64
	ctx.r10.s64 = ctx.r10.s64 + 64;
	// dcbt r10,r29
	// rlwinm r10,r30,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 4) & 0xFFFFFFF0;
	// subf r10,r30,r10
	ctx.r10.s64 = ctx.r10.s64 - r30.s64;
	// addi r10,r10,64
	ctx.r10.s64 = ctx.r10.s64 + 64;
	// dcbt r10,r29
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r26,168(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// clrlwi r28,r28,30
	r28.u64 = r28.u32 & 0x3;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// clrlwi r27,r27,30
	r27.u64 = r27.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// stw r11,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82727fcc
	if (cr6.eq) goto loc_82727FCC;
	// li r10,1
	ctx.r10.s64 = 1;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_82727FCC:
	// addi r10,r31,76
	ctx.r10.s64 = r31.s64 + 76;
	// lwz r26,156(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// srawi r8,r24,2
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x3) != 0);
	ctx.r8.s64 = r24.s32 >> 2;
	// srawi r9,r25,2
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x3) != 0);
	ctx.r9.s64 = r25.s32 >> 2;
	// srawi r30,r30,1
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x1) != 0);
	r30.s64 = r30.s32 >> 1;
	// lhz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// mullw r10,r8,r10
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r9,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r9.s64 = r11.s32 >> 4;
	// add r3,r10,r14
	ctx.r3.u64 = ctx.r10.u64 + r14.u64;
	// addze r9,r9
	temp.s64 = ctx.r9.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r9.u32;
	ctx.r9.s64 = temp.s64;
	// add r29,r10,r20
	r29.u64 = ctx.r10.u64 + r20.u64;
	// rlwinm r9,r9,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r9,r9,r11
	ctx.r9.s64 = r11.s64 - ctx.r9.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x8272807c
	if (!cr0.eq) goto loc_8272807C;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// mr r11,r23
	r11.u64 = r23.u64;
loc_8272807C:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r5,172(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// clrlwi r28,r25,30
	r28.u64 = r25.u32 & 0x3;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// clrlwi r27,r24,30
	r27.u64 = r24.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// stw r11,0(r26)
	PPC_STORE_U32(r26.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + 0);
	// srawi r10,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r10.s64 = r11.s32 >> 4;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82728150
	if (!cr0.eq) goto loc_82728150;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// mr r11,r23
	r11.u64 = r23.u64;
loc_82728150:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r5,180(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r11,0(r26)
	PPC_STORE_U32(r26.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// li r16,0
	r16.s64 = 0;
	// lwz r23,2772(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2772);
	// mr r3,r16
	ctx.r3.u64 = r16.u64;
	// b 0x827326c0
	goto loc_827326C0;
	// lwz r7,216(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 216);
	// rlwinm r5,r8,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r6,r8
	r11.u64 = ctx.r6.u64 + ctx.r8.u64;
	// lwz r6,1492(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// rlwinm r10,r8,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r9,1472(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1472);
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lwzx r8,r5,r7
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r5.u32 + ctx.r7.u32);
	// add r4,r11,r6
	ctx.r4.u64 = r11.u64 + ctx.r6.u64;
	// addi r7,r9,-256
	ctx.r7.s64 = ctx.r9.s64 + -256;
	// mr r5,r8
	ctx.r5.u64 = ctx.r8.u64;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// srawi r6,r5,16
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0xFFFF) != 0);
	ctx.r6.s64 = ctx.r5.s32 >> 16;
	// mullw r5,r9,r8
	ctx.r5.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r8.s32);
	// addi r3,r5,128
	ctx.r3.s64 = ctx.r5.s64 + 128;
	// mullw r5,r9,r6
	ctx.r5.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r6.s32);
	// srawi r9,r3,8
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0xFF) != 0);
	ctx.r9.s64 = ctx.r3.s32 >> 8;
	// addi r3,r5,128
	ctx.r3.s64 = ctx.r5.s64 + 128;
	// mullw r5,r8,r7
	ctx.r5.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r7.s32);
	// sth r9,2(r4)
	PPC_STORE_U16(ctx.r4.u32 + 2, ctx.r9.u16);
	// mullw r7,r6,r7
	ctx.r7.s64 = int64_t(ctx.r6.s32) * int64_t(ctx.r7.s32);
	// addi r5,r5,128
	ctx.r5.s64 = ctx.r5.s64 + 128;
	// addi r7,r7,128
	ctx.r7.s64 = ctx.r7.s64 + 128;
	// srawi r8,r3,8
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0xFF) != 0);
	ctx.r8.s64 = ctx.r3.s32 >> 8;
	// srawi r25,r5,8
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0xFF) != 0);
	r25.s64 = ctx.r5.s32 >> 8;
	// srawi r24,r7,8
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0xFF) != 0);
	r24.s64 = ctx.r7.s32 >> 8;
	// lwz r5,136(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// lwz r7,1492(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// add r7,r11,r7
	ctx.r7.u64 = r11.u64 + ctx.r7.u64;
	// lhz r3,2(r7)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r7.u32 + 2);
	// sth r3,0(r7)
	PPC_STORE_U16(ctx.r7.u32 + 0, ctx.r3.u16);
	// lwz r7,1492(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// lhzx r3,r11,r7
	ctx.r3.u64 = PPC_LOAD_U16(r11.u32 + ctx.r7.u32);
	// add r7,r10,r7
	ctx.r7.u64 = ctx.r10.u64 + ctx.r7.u64;
	// sth r3,2(r7)
	PPC_STORE_U16(ctx.r7.u32 + 2, ctx.r3.u16);
	// lwz r7,1492(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// add r7,r10,r7
	ctx.r7.u64 = ctx.r10.u64 + ctx.r7.u64;
	// lhz r3,2(r7)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r7.u32 + 2);
	// sth r3,0(r7)
	PPC_STORE_U16(ctx.r7.u32 + 0, ctx.r3.u16);
	// lwz r7,1496(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// add r7,r7,r11
	ctx.r7.u64 = ctx.r7.u64 + r11.u64;
	// sth r8,2(r7)
	PPC_STORE_U16(ctx.r7.u32 + 2, ctx.r8.u16);
	// lwz r7,1496(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// add r7,r7,r11
	ctx.r7.u64 = ctx.r7.u64 + r11.u64;
	// lhz r6,2(r7)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r7.u32 + 2);
	// sth r6,0(r7)
	PPC_STORE_U16(ctx.r7.u32 + 0, ctx.r6.u16);
	// lwz r7,1496(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lhzx r6,r11,r7
	ctx.r6.u64 = PPC_LOAD_U16(r11.u32 + ctx.r7.u32);
	// add r7,r10,r7
	ctx.r7.u64 = ctx.r10.u64 + ctx.r7.u64;
	// sth r6,2(r7)
	PPC_STORE_U16(ctx.r7.u32 + 2, ctx.r6.u16);
	// lwz r7,1496(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// add r7,r7,r10
	ctx.r7.u64 = ctx.r7.u64 + ctx.r10.u64;
	// lhz r6,2(r7)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r7.u32 + 2);
	// sth r6,0(r7)
	PPC_STORE_U16(ctx.r7.u32 + 0, ctx.r6.u16);
	// lwz r7,1500(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r7,r7,r11
	ctx.r7.u64 = ctx.r7.u64 + r11.u64;
	// sth r25,2(r7)
	PPC_STORE_U16(ctx.r7.u32 + 2, r25.u16);
	// lwz r7,1500(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r7,r7,r11
	ctx.r7.u64 = ctx.r7.u64 + r11.u64;
	// lhz r6,2(r7)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r7.u32 + 2);
	// sth r6,0(r7)
	PPC_STORE_U16(ctx.r7.u32 + 0, ctx.r6.u16);
	// lwz r7,1500(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// lhzx r6,r7,r11
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r7.u32 + r11.u32);
	// add r7,r7,r10
	ctx.r7.u64 = ctx.r7.u64 + ctx.r10.u64;
	// sth r6,2(r7)
	PPC_STORE_U16(ctx.r7.u32 + 2, ctx.r6.u16);
	// lwz r7,1500(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r7,r7,r10
	ctx.r7.u64 = ctx.r7.u64 + ctx.r10.u64;
	// lhz r6,2(r7)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r7.u32 + 2);
	// sth r6,0(r7)
	PPC_STORE_U16(ctx.r7.u32 + 0, ctx.r6.u16);
	// lwz r7,1504(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// add r7,r11,r7
	ctx.r7.u64 = r11.u64 + ctx.r7.u64;
	// sth r24,2(r7)
	PPC_STORE_U16(ctx.r7.u32 + 2, r24.u16);
	// lwz r7,1504(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// add r6,r11,r7
	ctx.r6.u64 = r11.u64 + ctx.r7.u64;
	// lwz r7,160(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// rlwinm r7,r7,16,0,15
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 16) & 0xFFFF0000;
	// or r7,r7,r5
	ctx.r7.u64 = ctx.r7.u64 | ctx.r5.u64;
	// clrlwi r5,r9,30
	ctx.r5.u64 = ctx.r9.u32 & 0x3;
	// rlwinm r26,r7,6,0,25
	r26.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 6) & 0xFFFFFFC0;
	// mr r7,r9
	ctx.r7.u64 = ctx.r9.u64;
	// rlwimi r7,r8,16,0,15
	ctx.r7.u64 = (__builtin_rotateleft32(ctx.r8.u32, 16) & 0xFFFF0000) | (ctx.r7.u64 & 0xFFFFFFFF0000FFFF);
	// addi r4,r5,1
	ctx.r4.s64 = ctx.r5.s64 + 1;
	// mr r28,r9
	r28.u64 = ctx.r9.u64;
	// srawi r4,r4,2
	xer.ca = (ctx.r4.s32 < 0) & ((ctx.r4.u32 & 0x3) != 0);
	ctx.r4.s64 = ctx.r4.s32 >> 2;
	// clrlwi r5,r8,30
	ctx.r5.u64 = ctx.r8.u32 & 0x3;
	// add r4,r4,r9
	ctx.r4.u64 = ctx.r4.u64 + ctx.r9.u64;
	// lhz r9,2(r6)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r6.u32 + 2);
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// srawi r22,r4,1
	xer.ca = (ctx.r4.s32 < 0) & ((ctx.r4.u32 & 0x1) != 0);
	r22.s64 = ctx.r4.s32 >> 1;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// srawi r5,r5,2
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x3) != 0);
	ctx.r5.s64 = ctx.r5.s32 >> 2;
	// mr r23,r8
	r23.u64 = ctx.r8.u64;
	// sth r9,0(r6)
	PPC_STORE_U16(ctx.r6.u32 + 0, ctx.r9.u16);
	// add r8,r5,r8
	ctx.r8.u64 = ctx.r5.u64 + ctx.r8.u64;
	// lwz r9,1504(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// srawi r21,r8,1
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x1) != 0);
	r21.s64 = ctx.r8.s32 >> 1;
	// stw r22,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r22.u32);
	// rlwinm r8,r7,1,15,15
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0x10000;
	// stw r23,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r23.u32);
	// subf r8,r8,r7
	ctx.r8.s64 = ctx.r7.s64 - ctx.r8.s64;
	// lhzx r11,r9,r11
	r11.u64 = PPC_LOAD_U16(ctx.r9.u32 + r11.u32);
	// add r9,r9,r10
	ctx.r9.u64 = ctx.r9.u64 + ctx.r10.u64;
	// add r8,r8,r26
	ctx.r8.u64 = ctx.r8.u64 + r26.u64;
	// stw r21,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r21.u32);
	// addis r8,r8,115
	ctx.r8.s64 = ctx.r8.s64 + 7536640;
	// sth r11,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, r11.u16);
	// addi r8,r8,115
	ctx.r8.s64 = ctx.r8.s64 + 115;
	// lwz r11,1504(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lhz r10,2(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r10,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r10.u16);
	// lwz r6,1396(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 1396);
	// lwz r27,448(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + 448);
	// subf r11,r7,r6
	r11.s64 = ctx.r6.s64 - ctx.r7.s64;
	// lwz r29,1404(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 1404);
	// subf r11,r26,r11
	r11.s64 = r11.s64 - r26.s64;
	// or r11,r8,r11
	r11.u64 = ctx.r8.u64 | r11.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x827283a4
	if (cr6.eq) goto loc_827283A4;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r23,96(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r28,100(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
loc_827283A4:
	// mr r11,r22
	r11.u64 = r22.u64;
	// srawi r5,r26,1
	xer.ca = (r26.s32 < 0) & ((r26.u32 & 0x1) != 0);
	ctx.r5.s64 = r26.s32 >> 1;
	// rlwimi r11,r21,16,0,15
	r11.u64 = (__builtin_rotateleft32(r21.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r29
	ctx.r9.s64 = r29.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r5,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r5.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// addis r11,r11,59
	r11.s64 = r11.s64 + 3866624;
	// addi r11,r11,59
	r11.s64 = r11.s64 + 59;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x827283f8
	if (cr6.eq) goto loc_827283F8;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
	// lwz r22,104(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lwz r21,128(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
loc_827283F8:
	// lhz r10,0(r15)
	ctx.r10.u64 = PPC_LOAD_U16(r15.u32 + 0);
	// srawi r8,r23,2
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x3) != 0);
	ctx.r8.s64 = r23.s32 >> 2;
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// srawi r9,r28,2
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x3) != 0);
	ctx.r9.s64 = r28.s32 >> 2;
	// mullw r10,r8,r10
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lwz r9,164(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// add r29,r10,r9
	r29.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x827284a0
	if (!cr0.eq) goto loc_827284A0;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_827284A0:
	// addi r10,r30,8
	ctx.r10.s64 = r30.s64 + 8;
	// rlwinm r19,r10,3,0,28
	r19.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// dcbt r19,r29
	// rlwinm r10,r30,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// add r10,r30,r10
	ctx.r10.u64 = r30.u64 + ctx.r10.u64;
	// addi r18,r10,64
	r18.s64 = ctx.r10.s64 + 64;
	// dcbt r18,r29
	// rlwinm r10,r30,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r30,r10
	ctx.r10.u64 = r30.u64 + ctx.r10.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r17,r10,64
	r17.s64 = ctx.r10.s64 + 64;
	// dcbt r17,r29
	// mulli r10,r30,11
	ctx.r10.s64 = r30.s64 * 11;
	// addi r16,r10,64
	r16.s64 = ctx.r10.s64 + 64;
	// dcbt r16,r29
	// rlwinm r10,r30,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r30,r10
	ctx.r10.u64 = r30.u64 + ctx.r10.u64;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r15,r10,64
	r15.s64 = ctx.r10.s64 + 64;
	// dcbt r15,r29
	// mulli r10,r30,13
	ctx.r10.s64 = r30.s64 * 13;
	// addi r14,r10,64
	r14.s64 = ctx.r10.s64 + 64;
	// dcbt r14,r29
	// rlwinm r10,r30,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r10,r30,r10
	ctx.r10.s64 = ctx.r10.s64 - r30.s64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r20,r10,64
	r20.s64 = ctx.r10.s64 + 64;
	// dcbt r20,r29
	// rlwinm r10,r30,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 4) & 0xFFFFFFF0;
	// subf r10,r30,r10
	ctx.r10.s64 = ctx.r10.s64 - r30.s64;
	// addi r10,r10,64
	ctx.r10.s64 = ctx.r10.s64 + 64;
	// stw r10,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, ctx.r10.u32);
	// dcbt r10,r29
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r10,124(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// clrlwi r28,r28,30
	r28.u64 = r28.u32 & 0x3;
	// clrlwi r23,r23,30
	r23.u64 = r23.u32 & 0x3;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r9,r23
	ctx.r9.u64 = r23.u64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// add r11,r11,r23
	r11.u64 = r11.u64 + r23.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x827285b0
	if (cr6.eq) goto loc_827285B0;
	// li r11,0
	r11.s64 = 0;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r8,r23
	ctx.r8.u64 = r23.u64;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_827285B0:
	// addi r10,r31,76
	ctx.r10.s64 = r31.s64 + 76;
	// lwz r11,156(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// srawi r8,r21,2
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x3) != 0);
	ctx.r8.s64 = r21.s32 >> 2;
	// srawi r9,r22,2
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x3) != 0);
	ctx.r9.s64 = r22.s32 >> 2;
	// srawi r29,r30,1
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x1) != 0);
	r29.s64 = r30.s32 >> 1;
	// lhz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mullw r10,r8,r10
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// lwz r8,144(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r9,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r9.s64 = r11.s32 >> 4;
	// add r3,r10,r8
	ctx.r3.u64 = ctx.r10.u64 + ctx.r8.u64;
	// addze r9,r9
	temp.s64 = ctx.r9.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r9.u32;
	ctx.r9.s64 = temp.s64;
	// lwz r8,188(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// add r28,r10,r8
	r28.u64 = ctx.r10.u64 + ctx.r8.u64;
	// rlwinm r9,r9,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r9,r9,r11
	ctx.r9.s64 = r11.s64 - ctx.r9.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x82728668
	if (!cr0.eq) goto loc_82728668;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r29,128
	r11.s64 = r29.s64 + 128;
	// dcbt r11,r3
	// addi r11,r29,64
	r11.s64 = r29.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r29,1,0,30
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r29,32
	r11.s64 = r29.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r29,2,0,29
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r29,1,0,30
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r29,3,0,28
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r29,r11
	r11.s64 = r11.s64 - r29.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// li r11,0
	r11.s64 = 0;
loc_82728668:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r10,156(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// clrlwi r23,r22,30
	r23.u64 = r22.u32 & 0x3;
	// clrlwi r22,r21,30
	r22.u64 = r21.u32 & 0x3;
	// li r6,8
	ctx.r6.s64 = 8;
	// addi r5,r27,256
	ctx.r5.s64 = r27.s64 + 256;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r8,r22
	ctx.r8.u64 = r22.u64;
	// mr r7,r23
	ctx.r7.u64 = r23.u64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// rlwinm r11,r23,2,0,29
	r11.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r22
	r11.u64 = r11.u64 + r22.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,156(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// srawi r10,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r10.s64 = r11.s32 >> 4;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82728748
	if (!cr0.eq) goto loc_82728748;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r28
	// addi r11,r29,128
	r11.s64 = r29.s64 + 128;
	// dcbt r11,r28
	// addi r11,r29,64
	r11.s64 = r29.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r28
	// rlwinm r11,r29,1,0,30
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// addi r11,r29,32
	r11.s64 = r29.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r28
	// rlwinm r11,r29,2,0,29
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r29,1,0,30
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r29,3,0,28
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r29,r11
	r11.s64 = r11.s64 - r29.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// li r11,0
	r11.s64 = 0;
loc_82728748:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r10,156(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// li r6,8
	ctx.r6.s64 = 8;
	// addi r5,r27,320
	ctx.r5.s64 = r27.s64 + 320;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r8,r22
	ctx.r8.u64 = r22.u64;
	// mr r7,r23
	ctx.r7.u64 = r23.u64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// rlwinm r11,r23,2,0,29
	r11.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r22
	r11.u64 = r11.u64 + r22.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r10,r25,30
	ctx.r10.u64 = r25.u32 & 0x3;
	// mr r11,r25
	r11.u64 = r25.u64;
	// lwz r6,1396(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 1396);
	// addi r9,r10,1
	ctx.r9.s64 = ctx.r10.s64 + 1;
	// lwz r28,260(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// clrlwi r10,r24,30
	ctx.r10.u64 = r24.u32 & 0x3;
	// lwz r23,1404(r31)
	r23.u64 = PPC_LOAD_U32(r31.u32 + 1404);
	// srawi r9,r9,2
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 2;
	// stw r24,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r24.u32);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stw r25,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r25.u32);
	// add r9,r9,r25
	ctx.r9.u64 = ctx.r9.u64 + r25.u64;
	// rlwimi r11,r24,16,0,15
	r11.u64 = (__builtin_rotateleft32(r24.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// srawi r22,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	r22.s64 = ctx.r9.s32 >> 1;
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// subf r9,r11,r6
	ctx.r9.s64 = ctx.r6.s64 - r11.s64;
	// add r10,r10,r24
	ctx.r10.u64 = ctx.r10.u64 + r24.u64;
	// srawi r21,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	r21.s64 = ctx.r10.s32 >> 1;
	// stw r22,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r22.u32);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r26,r9
	ctx.r10.s64 = ctx.r9.s64 - r26.s64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// stw r21,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r21.u32);
	// addis r11,r11,115
	r11.s64 = r11.s64 + 7536640;
	// addi r11,r11,115
	r11.s64 = r11.s64 + 115;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272882c
	if (cr6.eq) goto loc_8272882C;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r24,96(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r25,100(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
loc_8272882C:
	// mr r11,r22
	r11.u64 = r22.u64;
	// srawi r5,r26,1
	xer.ca = (r26.s32 < 0) & ((r26.u32 & 0x1) != 0);
	ctx.r5.s64 = r26.s32 >> 1;
	// rlwimi r11,r21,16,0,15
	r11.u64 = (__builtin_rotateleft32(r21.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r23
	ctx.r9.s64 = r23.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r5,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r5.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// addis r11,r11,59
	r11.s64 = r11.s64 + 3866624;
	// addi r11,r11,59
	r11.s64 = r11.s64 + 59;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82728880
	if (cr6.eq) goto loc_82728880;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
	// lwz r22,104(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lwz r21,144(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
loc_82728880:
	// addi r10,r31,74
	ctx.r10.s64 = r31.s64 + 74;
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// srawi r8,r24,2
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x3) != 0);
	ctx.r8.s64 = r24.s32 >> 2;
	// srawi r9,r25,2
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x3) != 0);
	ctx.r9.s64 = r25.s32 >> 2;
	// lhz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mullw r10,r8,r10
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lwz r9,184(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// add r26,r10,r9
	r26.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8272892c
	if (!cr0.eq) goto loc_8272892C;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r26
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r26
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r26
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r26
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r26
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r26
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r26
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r26
	// li r11,0
	r11.s64 = 0;
loc_8272892C:
	// dcbt r19,r26
	// dcbt r18,r26
	// dcbt r17,r26
	// dcbt r16,r26
	// dcbt r15,r26
	// dcbt r14,r26
	// dcbt r20,r26
	// lwz r10,164(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// dcbt r10,r26
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r10,124(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// clrlwi r25,r25,30
	r25.u64 = r25.u32 & 0x3;
	// clrlwi r24,r24,30
	r24.u64 = r24.u32 & 0x3;
	// li r23,0
	r23.s64 = 0;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// li r6,16
	ctx.r6.s64 = 16;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// rlwinm r11,r25,2,0,29
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 2) & 0xFFFFFFFC;
	// li r10,1
	ctx.r10.s64 = 1;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// mr r9,r24
	ctx.r9.u64 = r24.u64;
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x827289d8
	if (cr6.eq) goto loc_827289D8;
	// li r10,1
	ctx.r10.s64 = 1;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r24
	ctx.r8.u64 = r24.u64;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// mr r7,r25
	ctx.r7.u64 = r25.u64;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_827289D8:
	// addi r10,r31,76
	ctx.r10.s64 = r31.s64 + 76;
	// lwz r20,156(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// srawi r8,r21,2
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x3) != 0);
	ctx.r8.s64 = r21.s32 >> 2;
	// srawi r9,r22,2
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x3) != 0);
	ctx.r9.s64 = r22.s32 >> 2;
	// lhz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// mullw r10,r8,r10
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// lwz r8,148(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r9,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r9.s64 = r11.s32 >> 4;
	// add r3,r10,r8
	ctx.r3.u64 = ctx.r10.u64 + ctx.r8.u64;
	// addze r9,r9
	temp.s64 = ctx.r9.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r9.u32;
	ctx.r9.s64 = temp.s64;
	// lwz r8,108(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// add r26,r10,r8
	r26.u64 = ctx.r10.u64 + ctx.r8.u64;
	// rlwinm r9,r9,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r9,r9,r11
	ctx.r9.s64 = r11.s64 - ctx.r9.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x82728a8c
	if (!cr0.eq) goto loc_82728A8C;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r29,128
	r11.s64 = r29.s64 + 128;
	// dcbt r11,r3
	// addi r11,r29,64
	r11.s64 = r29.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r29,1,0,30
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r29,32
	r11.s64 = r29.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r29,2,0,29
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r29,1,0,30
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r29,3,0,28
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r29,r11
	r11.s64 = r11.s64 - r29.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// mr r11,r23
	r11.u64 = r23.u64;
loc_82728A8C:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// clrlwi r25,r22,30
	r25.u64 = r22.u32 & 0x3;
	// clrlwi r24,r21,30
	r24.u64 = r21.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// li r6,8
	ctx.r6.s64 = 8;
	// stw r11,0(r20)
	PPC_STORE_U32(r20.u32 + 0, r11.u32);
	// rlwinm r11,r25,2,0,29
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// addi r5,r28,256
	ctx.r5.s64 = r28.s64 + 256;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r8,r24
	ctx.r8.u64 = r24.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r7,r25
	ctx.r7.u64 = r25.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// srawi r10,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r10.s64 = r11.s32 >> 4;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82728b60
	if (!cr0.eq) goto loc_82728B60;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r26
	// addi r11,r29,128
	r11.s64 = r29.s64 + 128;
	// dcbt r11,r26
	// addi r11,r29,64
	r11.s64 = r29.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r26
	// rlwinm r11,r29,1,0,30
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r26
	// addi r11,r29,32
	r11.s64 = r29.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r26
	// rlwinm r11,r29,2,0,29
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r26
	// rlwinm r11,r29,1,0,30
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r26
	// rlwinm r11,r29,3,0,28
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r29,r11
	r11.s64 = r11.s64 - r29.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r26
	// mr r11,r23
	r11.u64 = r23.u64;
loc_82728B60:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// li r6,8
	ctx.r6.s64 = 8;
	// addi r5,r28,320
	ctx.r5.s64 = r28.s64 + 320;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// stw r11,0(r20)
	PPC_STORE_U32(r20.u32 + 0, r11.u32);
	// rlwinm r11,r25,2,0,29
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// mr r8,r24
	ctx.r8.u64 = r24.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r25
	ctx.r7.u64 = r25.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r11,r27,16
	r11.s64 = r27.s64 + 16;
	// addi r10,r27,32
	ctx.r10.s64 = r27.s64 + 32;
	// lvx128 v13,r0,r28
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r27,48
	ctx.r9.s64 = r27.s64 + 48;
	// lvx128 v0,r0,r27
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r27,64
	ctx.r8.s64 = r27.s64 + 64;
	// addi r6,r27,80
	ctx.r6.s64 = r27.s64 + 80;
	// lvx128 v12,r0,r11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r27,112
	r11.s64 = r27.s64 + 112;
	// lvx128 v11,r0,r10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r28,16
	ctx.r10.s64 = r28.s64 + 16;
	// lvx128 v10,r0,r9
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r28,32
	ctx.r9.s64 = r28.s64 + 32;
	// addi r5,r27,96
	ctx.r5.s64 = r27.s64 + 96;
	// lvx128 v9,r0,r8
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v8,r0,r6
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r7,r30,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// lvx128 v6,r0,r11
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r28,48
	r11.s64 = r28.s64 + 48;
	// lvx128 v5,r0,r10
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r28,64
	ctx.r10.s64 = r28.s64 + 64;
	// lvx128 v4,r0,r9
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r28,80
	ctx.r9.s64 = r28.s64 + 80;
	// lvx128 v7,r0,r5
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r5.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r26,r28,96
	r26.s64 = r28.s64 + 96;
	// addi r25,r28,112
	r25.s64 = r28.s64 + 112;
	// lvx128 v3,r0,r11
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1264
	r11.s64 = ctx.r1.s64 + 1264;
	// rlwinm r8,r30,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r6,r7,r30
	ctx.r6.u64 = ctx.r7.u64 + r30.u64;
	// add r5,r8,r30
	ctx.r5.u64 = ctx.r8.u64 + r30.u64;
	// add r4,r8,r7
	ctx.r4.u64 = ctx.r8.u64 + ctx.r7.u64;
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1232
	r11.s64 = ctx.r1.s64 + 1232;
	// add r3,r6,r8
	ctx.r3.u64 = ctx.r6.u64 + ctx.r8.u64;
	// stvx v13,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1840
	r11.s64 = ctx.r1.s64 + 1840;
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1616
	r11.s64 = ctx.r1.s64 + 1616;
	// stvx v11,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1328
	r11.s64 = ctx.r1.s64 + 1328;
	// stvx v10,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1776
	r11.s64 = ctx.r1.s64 + 1776;
	// stvx v9,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1360
	r11.s64 = ctx.r1.s64 + 1360;
	// stvx v8,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1904
	r11.s64 = ctx.r1.s64 + 1904;
	// stvx v7,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1424
	r11.s64 = ctx.r1.s64 + 1424;
	// stvx v6,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1648
	r11.s64 = ctx.r1.s64 + 1648;
	// stvx v5,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1392
	r11.s64 = ctx.r1.s64 + 1392;
	// stvx v4,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r27,128
	r11.s64 = r27.s64 + 128;
	// lvx128 v2,r0,r10
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r28,128
	ctx.r10.s64 = r28.s64 + 128;
	// lvx128 v1,r0,r9
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r28,168(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// rlwinm r9,r30,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// lvx128 v31,r0,r26
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r26.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v30,r0,r25
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r25.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r9,r9,r28
	ctx.r9.u64 = ctx.r9.u64 + r28.u64;
	// vavgub v0,v0,v13
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// addi r27,r11,16
	r27.s64 = r11.s64 + 16;
	// vavgub v13,v12,v5
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// addi r26,r11,64
	r26.s64 = r11.s64 + 64;
	// vavgub v12,v11,v4
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v4.u8)));
	// addi r25,r11,80
	r25.s64 = r11.s64 + 80;
	// vavgub v11,v10,v3
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// addi r24,r10,16
	r24.s64 = ctx.r10.s64 + 16;
	// stvx v0,r0,r28
	_mm_store_si128((__m128i*)(base + ((r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v10,v9,v2
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v2.u8)));
	// stvx128 v13,r28,r30
	_mm_store_si128((__m128i*)(base + ((r28.u32 + r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v9,v8,v1
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// stvx128 v12,r7,r28
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32 + r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v8,v7,v31
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)v31.u8)));
	// stvx128 v11,r6,r28
	_mm_store_si128((__m128i*)(base + ((ctx.r6.u32 + r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v7,v6,v30
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)v30.u8)));
	// stvx128 v10,r8,r28
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32 + r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r23,r10,32
	r23.s64 = ctx.r10.s64 + 32;
	// stvx128 v9,r5,r28
	_mm_store_si128((__m128i*)(base + ((ctx.r5.u32 + r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v8,r4,r28
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32 + r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v7,r3,r28
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32 + r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r1,1264
	r28.s64 = ctx.r1.s64 + 1264;
	// lvx128 v0,r0,r11
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v0,r0,r28
	_mm_store_si128((__m128i*)(base + ((r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r1,1840
	r28.s64 = ctx.r1.s64 + 1840;
	// lvx128 v13,r0,r27
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r1,1232
	r27.s64 = ctx.r1.s64 + 1232;
	// stvx v13,r0,r28
	_mm_store_si128((__m128i*)(base + ((r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r11,32
	r28.s64 = r11.s64 + 32;
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v12,r0,r27
	_mm_store_si128((__m128i*)(base + ((r27.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r11,48
	r27.s64 = r11.s64 + 48;
	// vavgub v0,v0,v12
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v12.u8)));
	// lvx128 v11,r0,r28
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r1,1616
	r28.s64 = ctx.r1.s64 + 1616;
	// stvx v11,r0,r28
	_mm_store_si128((__m128i*)(base + ((r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r10,48
	r28.s64 = ctx.r10.s64 + 48;
	// lvx128 v10,r0,r27
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r1,1328
	r27.s64 = ctx.r1.s64 + 1328;
	// stvx v10,r0,r27
	_mm_store_si128((__m128i*)(base + ((r27.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r10,64
	r27.s64 = ctx.r10.s64 + 64;
	// lvx128 v9,r0,r26
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r26.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r26,r1,1776
	r26.s64 = ctx.r1.s64 + 1776;
	// stvx v9,r0,r26
	_mm_store_si128((__m128i*)(base + ((r26.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r26,r10,80
	r26.s64 = ctx.r10.s64 + 80;
	// lvx128 v8,r0,r25
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r25.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r25,r1,1360
	r25.s64 = ctx.r1.s64 + 1360;
	// stvx v8,r0,r25
	_mm_store_si128((__m128i*)(base + ((r25.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r25,r1,1648
	r25.s64 = ctx.r1.s64 + 1648;
	// lvx128 v7,r0,r24
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r24.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v13,v13,v7
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// stvx v7,r0,r25
	_mm_store_si128((__m128i*)(base + ((r25.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r25,r1,1392
	r25.s64 = ctx.r1.s64 + 1392;
	// lvx128 v6,r0,r23
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r23.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v12,v11,v6
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// stvx v6,r0,r25
	_mm_store_si128((__m128i*)(base + ((r25.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r25,r10,112
	r25.s64 = ctx.r10.s64 + 112;
	// lvx128 v5,r0,r28
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r10,96
	r28.s64 = ctx.r10.s64 + 96;
	// lvx128 v4,r0,r27
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r11,96
	r27.s64 = r11.s64 + 96;
	// lvx128 v3,r0,r26
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r26.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r26,r11,112
	r26.s64 = r11.s64 + 112;
	// vavgub v11,v10,v5
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// vavgub v10,v9,v4
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v4.u8)));
	// addi r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 128;
	// lvx128 v2,r0,r28
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r1,1904
	r28.s64 = ctx.r1.s64 + 1904;
	// lvx128 v1,r0,r27
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v9,v8,v3
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// vavgub v8,v1,v2
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)ctx.v2.u8)));
	// stvx v1,r0,r28
	_mm_store_si128((__m128i*)(base + ((r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r1,1424
	r28.s64 = ctx.r1.s64 + 1424;
	// lvx128 v31,r0,r26
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r26.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v31,r0,r28
	_mm_store_si128((__m128i*)(base + ((r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v30,r0,r25
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r25.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v0,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v7,v31,v30
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)v30.u8)));
	// stvx128 v13,r9,r30
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32 + r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v12,r7,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32 + ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v11,r6,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r6.u32 + ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r30,r11,48
	r30.s64 = r11.s64 + 48;
	// stvx128 v10,r8,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32 + ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r11,16
	ctx.r8.s64 = r11.s64 + 16;
	// stvx128 v9,r5,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r5.u32 + ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r5,r11,32
	ctx.r5.s64 = r11.s64 + 32;
	// stvx128 v8,r4,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32 + ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r11,64
	r28.s64 = r11.s64 + 64;
	// stvx128 v7,r3,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r11,80
	r27.s64 = r11.s64 + 80;
	// lvx128 v0,r0,r11
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r26,r11,96
	r26.s64 = r11.s64 + 96;
	// addi r25,r11,112
	r25.s64 = r11.s64 + 112;
	// lvx128 v13,r0,r8
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,976
	r11.s64 = ctx.r1.s64 + 976;
	// lvx128 v9,r0,r5
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r5.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v8,r0,r30
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r10,16
	ctx.r7.s64 = ctx.r10.s64 + 16;
	// lvx128 v7,r0,r28
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r6,r10,32
	ctx.r6.s64 = ctx.r10.s64 + 32;
	// lvx128 v6,r0,r27
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r24,r10,48
	r24.s64 = ctx.r10.s64 + 48;
	// lvx128 v5,r0,r26
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r26.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r23,r10,64
	r23.s64 = ctx.r10.s64 + 64;
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,784
	r11.s64 = ctx.r1.s64 + 784;
	// lvx128 v4,r0,r25
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r25.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r22,r10,80
	r22.s64 = ctx.r10.s64 + 80;
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r21,r10,96
	r21.s64 = ctx.r10.s64 + 96;
	// vavgub v0,v0,v12
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v12.u8)));
	// lvx128 v11,r0,r7
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r20,r10,112
	r20.s64 = ctx.r10.s64 + 112;
	// lwz r10,172(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// stvx v13,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1136
	r11.s64 = ctx.r1.s64 + 1136;
	// vavgub v13,v13,v11
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v11.u8)));
	// lvx128 v10,r0,r6
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v3,r0,r24
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r24.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v2,r0,r23
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r23.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v1,r0,r22
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r22.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v9,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,816
	r11.s64 = ctx.r1.s64 + 816;
	// lvx128 v31,r0,r21
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r21.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v30,r0,r20
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r20.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v8,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1008
	r11.s64 = ctx.r1.s64 + 1008;
	// stvx v7,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,848
	r11.s64 = ctx.r1.s64 + 848;
	// stvx v6,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1104
	r11.s64 = ctx.r1.s64 + 1104;
	// stvx v5,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,880
	r11.s64 = ctx.r1.s64 + 880;
	// stvx v4,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,976
	r11.s64 = ctx.r1.s64 + 976;
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,784
	r11.s64 = ctx.r1.s64 + 784;
	// vavgub v0,v9,v10
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v10.u8)));
	// stvx v13,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r29,r10
	r11.u64 = r29.u64 + ctx.r10.u64;
	// vavgub v13,v7,v2
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v2.u8)));
	// addi r30,r1,816
	r30.s64 = ctx.r1.s64 + 816;
	// lwz r9,976(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 976);
	// lwz r8,980(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 980);
	// lwz r7,984(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 984);
	// lwz r6,988(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 988);
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// stw r8,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r8.u32);
	// addi r10,r1,1136
	ctx.r10.s64 = ctx.r1.s64 + 1136;
	// lwz r9,180(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r5,784(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 784);
	// lwz r4,788(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 788);
	// lwz r8,792(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 792);
	// stvx v0,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v0,v8,v3
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// lwz r3,796(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 796);
	// add r10,r29,r9
	ctx.r10.u64 = r29.u64 + ctx.r9.u64;
	// stvx v0,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r30,r1,1008
	r30.s64 = ctx.r1.s64 + 1008;
	// vavgub v0,v6,v1
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// stvx v13,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r30,r1,848
	r30.s64 = ctx.r1.s64 + 848;
	// stw r7,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r7.u32);
	// stw r6,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r6.u32);
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// lwz r7,1136(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1136);
	// vavgub v13,v4,v30
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)v30.u8)));
	// lwz r6,1140(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1140);
	// lwz r28,1148(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1148);
	// stvx v0,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r30,r1,1104
	r30.s64 = ctx.r1.s64 + 1104;
	// stw r5,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r5.u32);
	// vavgub v0,v5,v31
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)v31.u8)));
	// stw r4,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r4.u32);
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// lwz r27,816(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 816);
	// lwz r26,820(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 820);
	// stvx v0,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r30,r1,880
	r30.s64 = ctx.r1.s64 + 880;
	// lwz r25,824(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 824);
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// stw r3,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r3.u32);
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// lwz r24,828(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 828);
	// stvx v13,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r30,1144(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1144);
	// lwz r23,1008(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1008);
	// lwz r22,1012(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1012);
	// stw r7,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r7.u32);
	// stw r6,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r6.u32);
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// lwz r21,1016(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1016);
	// lwz r20,1020(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1020);
	// stw r30,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r30.u32);
	// stw r28,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r28.u32);
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// stw r27,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r27.u32);
	// stw r26,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r26.u32);
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// stw r25,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r25.u32);
	// stw r24,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r24.u32);
	// add r11,r29,r10
	r11.u64 = r29.u64 + ctx.r10.u64;
	// stw r23,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r23.u32);
	// stw r22,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, r22.u32);
	// stw r21,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r21.u32);
	// stw r20,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r20.u32);
	// lwz r23,2772(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2772);
	// lwz r19,848(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 848);
	// lwz r18,852(r1)
	r18.u64 = PPC_LOAD_U32(ctx.r1.u32 + 852);
	// lwz r17,856(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 856);
	// lwz r16,860(r1)
	r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 860);
	// stw r19,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r19.u32);
	// stw r18,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r18.u32);
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// lwz r10,1104(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1104);
	// lwz r9,1108(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1108);
	// lwz r8,1112(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1112);
	// lwz r7,1116(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1116);
	// stw r17,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r17.u32);
	// stw r16,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r16.u32);
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// lwz r6,880(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 880);
	// li r16,0
	r16.s64 = 0;
	// lwz r5,884(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 884);
	// lwz r4,888(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 888);
	// lwz r3,892(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 892);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// stw r9,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r9.u32);
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// stw r7,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r7.u32);
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// stw r6,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r6.u32);
	// stw r5,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r5.u32);
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// stw r4,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r4.u32);
	// stw r3,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r3.u32);
	// mr r3,r16
	ctx.r3.u64 = r16.u64;
	// b 0x827326c0
	goto loc_827326C0;
	// li r23,0
	r23.s64 = 0;
	// lwz r25,136(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// lwz r7,1492(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// srawi r26,r6,1
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x1) != 0);
	r26.s64 = ctx.r6.s32 >> 1;
	// lwz r10,1496(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// mr r11,r23
	r11.u64 = r23.u64;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// stw r23,296(r1)
	PPC_STORE_U32(ctx.r1.u32 + 296, r23.u32);
	// stw r23,292(r1)
	PPC_STORE_U32(ctx.r1.u32 + 292, r23.u32);
	// stw r23,288(r1)
	PPC_STORE_U32(ctx.r1.u32 + 288, r23.u32);
	// beq cr6,0x82729114
	if (cr6.eq) goto loc_82729114;
	// lwz r5,112(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// addi r9,r8,-2
	ctx.r9.s64 = ctx.r8.s64 + -2;
	// lwz r5,-20(r5)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r5.u32 + -20);
	// rlwinm r4,r5,0,14,14
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x82729114
	if (cr6.eq) goto loc_82729114;
	// rlwinm r11,r5,0,21,23
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 0) & 0x700;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x827290c4
	if (!cr6.eq) goto loc_827290C4;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r5,r7,r9
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r9.u32);
	// lhzx r9,r10,r9
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r9.u32);
	// b 0x82729108
	goto loc_82729108;
loc_827290C4:
	// add r11,r9,r6
	r11.u64 = ctx.r9.u64 + ctx.r6.u64;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r5,r11,1,0,30
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r4,r7,r9
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r9.u32);
	// lhzx r29,r7,r5
	r29.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r5.u32);
	// extsh r3,r4
	ctx.r3.s64 = ctx.r4.s16;
	// lhzx r28,r10,r5
	r28.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r5.u32);
	// lhzx r4,r10,r9
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r9.u32);
	// extsh r5,r29
	ctx.r5.s64 = r29.s16;
	// extsh r9,r28
	ctx.r9.s64 = r28.s16;
	// extsh r4,r4
	ctx.r4.s64 = ctx.r4.s16;
	// add r5,r5,r3
	ctx.r5.u64 = ctx.r5.u64 + ctx.r3.u64;
	// add r9,r9,r4
	ctx.r9.u64 = ctx.r9.u64 + ctx.r4.u64;
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// srawi r5,r5,1
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x1) != 0);
	ctx.r5.s64 = ctx.r5.s32 >> 1;
	// srawi r9,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 1;
loc_82729108:
	// sth r9,288(r1)
	PPC_STORE_U16(ctx.r1.u32 + 288, ctx.r9.u16);
	// li r11,1
	r11.s64 = 1;
	// sth r5,290(r1)
	PPC_STORE_U16(ctx.r1.u32 + 290, ctx.r5.u16);
loc_82729114:
	// lwz r9,152(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne cr6,0x827292c0
	if (!cr6.eq) goto loc_827292C0;
	// rlwinm r9,r26,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r5,r6,1,0,30
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r26,r9
	ctx.r9.u64 = r26.u64 + ctx.r9.u64;
	// subf r3,r5,r8
	ctx.r3.s64 = ctx.r8.s64 - ctx.r5.s64;
	// lwz r5,112(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r27,r9,r5
	r27.s64 = ctx.r5.s64 - ctx.r9.s64;
	// lwz r9,0(r27)
	ctx.r9.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// rlwinm r5,r9,0,14,14
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x827291dc
	if (cr6.eq) goto loc_827291DC;
	// rlwinm r9,r9,0,21,23
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x700;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// rlwinm r9,r3,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// bne cr6,0x8272917c
	if (!cr6.eq) goto loc_8272917C;
	// lhzx r28,r7,r9
	r28.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r9.u32);
	// rlwinm r5,r11,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r4,r1,290
	ctx.r4.s64 = ctx.r1.s64 + 290;
	// lhzx r9,r10,r9
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r9.u32);
	// addi r29,r1,288
	r29.s64 = ctx.r1.s64 + 288;
	// sthx r28,r5,r4
	PPC_STORE_U16(ctx.r5.u32 + ctx.r4.u32, r28.u16);
	// sthx r9,r5,r29
	PPC_STORE_U16(ctx.r5.u32 + r29.u32, ctx.r9.u16);
	// b 0x827291d8
	goto loc_827291D8;
loc_8272917C:
	// add r5,r3,r6
	ctx.r5.u64 = ctx.r3.u64 + ctx.r6.u64;
	// lhzx r29,r7,r9
	r29.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r9.u32);
	// rlwinm r4,r11,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r5,r5,1,0,30
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 1) & 0xFFFFFFFE;
	// extsh r28,r29
	r28.s64 = r29.s16;
	// lhzx r29,r10,r9
	r29.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r9.u32);
	// addi r20,r1,290
	r20.s64 = ctx.r1.s64 + 290;
	// extsh r29,r29
	r29.s64 = r29.s16;
	// addi r16,r1,288
	r16.s64 = ctx.r1.s64 + 288;
	// lhzx r14,r7,r5
	r14.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r5.u32);
	// lhzx r5,r10,r5
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r5.u32);
	// sth r5,120(r1)
	PPC_STORE_U16(ctx.r1.u32 + 120, ctx.r5.u16);
	// extsh r5,r14
	ctx.r5.s64 = r14.s16;
	// add r5,r5,r28
	ctx.r5.u64 = ctx.r5.u64 + r28.u64;
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// srawi r5,r5,1
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x1) != 0);
	ctx.r5.s64 = ctx.r5.s32 >> 1;
	// sthx r5,r4,r20
	PPC_STORE_U16(ctx.r4.u32 + r20.u32, ctx.r5.u16);
	// lhz r14,120(r1)
	r14.u64 = PPC_LOAD_U16(ctx.r1.u32 + 120);
	// extsh r9,r14
	ctx.r9.s64 = r14.s16;
	// add r9,r9,r29
	ctx.r9.u64 = ctx.r9.u64 + r29.u64;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// srawi r9,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 1;
	// sthx r9,r4,r16
	PPC_STORE_U16(ctx.r4.u32 + r16.u32, ctx.r9.u16);
loc_827291D8:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_827291DC:
	// cmpwi cr6,r26,1
	cr6.compare<int32_t>(r26.s32, 1, xer);
	// beq cr6,0x827292c0
	if (cr6.eq) goto loc_827292C0;
	// addi r5,r26,-1
	ctx.r5.s64 = r26.s64 + -1;
	// li r9,1
	ctx.r9.s64 = 1;
	// cmpw cr6,r25,r5
	cr6.compare<int32_t>(r25.s32, ctx.r5.s32, xer);
	// blt cr6,0x827291f8
	if (cr6.lt) goto loc_827291F8;
	// mr r9,r23
	ctx.r9.u64 = r23.u64;
loc_827291F8:
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpw cr6,r25,r5
	cr6.compare<int32_t>(r25.s32, ctx.r5.s32, xer);
	// add r9,r9,r3
	ctx.r9.u64 = ctx.r9.u64 + ctx.r3.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r9,r9,-2
	ctx.r9.s64 = ctx.r9.s64 + -2;
	// blt cr6,0x82729214
	if (cr6.lt) goto loc_82729214;
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
loc_82729214:
	// rlwinm r4,r5,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// add r5,r5,r4
	ctx.r5.u64 = ctx.r5.u64 + ctx.r4.u64;
	// rlwinm r5,r5,3,0,28
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 3) & 0xFFFFFFF8;
	// add r5,r5,r27
	ctx.r5.u64 = ctx.r5.u64 + r27.u64;
	// lwz r5,-20(r5)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r5.u32 + -20);
	// rlwinm r4,r5,0,14,14
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x827292c0
	if (cr6.eq) goto loc_827292C0;
	// rlwinm r5,r5,0,21,23
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 0) & 0x700;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// bne cr6,0x82729264
	if (!cr6.eq) goto loc_82729264;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r5,r11,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r4,r1,290
	ctx.r4.s64 = ctx.r1.s64 + 290;
	// addi r3,r1,288
	ctx.r3.s64 = ctx.r1.s64 + 288;
	// lhzx r29,r7,r9
	r29.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r9.u32);
	// lhzx r10,r10,r9
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r9.u32);
	// sthx r29,r5,r4
	PPC_STORE_U16(ctx.r5.u32 + ctx.r4.u32, r29.u16);
	// sthx r10,r5,r3
	PPC_STORE_U16(ctx.r5.u32 + ctx.r3.u32, ctx.r10.u16);
	// b 0x827292bc
	goto loc_827292BC;
loc_82729264:
	// add r5,r9,r6
	ctx.r5.u64 = ctx.r9.u64 + ctx.r6.u64;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r5,r5,1,0,30
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r4,r11,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r29,r1,290
	r29.s64 = ctx.r1.s64 + 290;
	// addi r28,r1,288
	r28.s64 = ctx.r1.s64 + 288;
	// lhzx r3,r7,r9
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r9.u32);
	// lhzx r27,r7,r5
	r27.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r5.u32);
	// lhzx r5,r10,r5
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r5.u32);
	// extsh r3,r3
	ctx.r3.s64 = ctx.r3.s16;
	// lhzx r26,r10,r9
	r26.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r9.u32);
	// extsh r9,r27
	ctx.r9.s64 = r27.s16;
	// extsh r10,r5
	ctx.r10.s64 = ctx.r5.s16;
	// extsh r5,r26
	ctx.r5.s64 = r26.s16;
	// add r9,r9,r3
	ctx.r9.u64 = ctx.r9.u64 + ctx.r3.u64;
	// add r10,r10,r5
	ctx.r10.u64 = ctx.r10.u64 + ctx.r5.u64;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// srawi r9,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 1;
	// srawi r10,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 1;
	// sthx r9,r4,r29
	PPC_STORE_U16(ctx.r4.u32 + r29.u32, ctx.r9.u16);
	// sthx r10,r4,r28
	PPC_STORE_U16(ctx.r4.u32 + r28.u32, ctx.r10.u16);
loc_827292BC:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_827292C0:
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// blt cr6,0x8272936c
	if (cr6.lt) goto loc_8272936C;
	// lhz r11,294(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 294);
	// lhz r10,290(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 290);
	// lhz r4,298(r1)
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r1.u32 + 298);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lhz r9,292(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 292);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// lhz r5,288(r1)
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r1.u32 + 288);
	// extsh r4,r4
	ctx.r4.s64 = ctx.r4.s16;
	// lhz r3,296(r1)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r1.u32 + 296);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// extsh r5,r5
	ctx.r5.s64 = ctx.r5.s16;
	// extsh r3,r3
	ctx.r3.s64 = ctx.r3.s16;
	// subf r29,r10,r11
	r29.s64 = r11.s64 - ctx.r10.s64;
	// subf r27,r4,r11
	r27.s64 = r11.s64 - ctx.r4.s64;
	// subf r26,r10,r4
	r26.s64 = ctx.r4.s64 - ctx.r10.s64;
	// subf r28,r5,r9
	r28.s64 = ctx.r9.s64 - ctx.r5.s64;
	// subf r25,r3,r9
	r25.s64 = ctx.r9.s64 - ctx.r3.s64;
	// subf r23,r5,r3
	r23.s64 = ctx.r3.s64 - ctx.r5.s64;
	// xor r27,r27,r29
	r27.u64 = r27.u64 ^ r29.u64;
	// xor r26,r26,r29
	r26.u64 = r26.u64 ^ r29.u64;
	// xor r25,r25,r28
	r25.u64 = r25.u64 ^ r28.u64;
	// srawi r29,r27,31
	xer.ca = (r27.s32 < 0) & ((r27.u32 & 0x7FFFFFFF) != 0);
	r29.s64 = r27.s32 >> 31;
	// xor r23,r23,r28
	r23.u64 = r23.u64 ^ r28.u64;
	// srawi r28,r26,31
	xer.ca = (r26.s32 < 0) & ((r26.u32 & 0x7FFFFFFF) != 0);
	r28.s64 = r26.s32 >> 31;
	// srawi r27,r25,31
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x7FFFFFFF) != 0);
	r27.s64 = r25.s32 >> 31;
	// srawi r26,r23,31
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x7FFFFFFF) != 0);
	r26.s64 = r23.s32 >> 31;
	// or r25,r29,r28
	r25.u64 = r29.u64 | r28.u64;
	// or r23,r27,r26
	r23.u64 = r27.u64 | r26.u64;
	// and r10,r28,r10
	ctx.r10.u64 = r28.u64 & ctx.r10.u64;
	// andc r4,r4,r25
	ctx.r4.u64 = ctx.r4.u64 & ~r25.u64;
	// andc r3,r3,r23
	ctx.r3.u64 = ctx.r3.u64 & ~r23.u64;
	// and r5,r26,r5
	ctx.r5.u64 = r26.u64 & ctx.r5.u64;
	// or r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 | ctx.r10.u64;
	// and r11,r29,r11
	r11.u64 = r29.u64 & r11.u64;
	// or r5,r3,r5
	ctx.r5.u64 = ctx.r3.u64 | ctx.r5.u64;
	// and r9,r27,r9
	ctx.r9.u64 = r27.u64 & ctx.r9.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// or r10,r5,r9
	ctx.r10.u64 = ctx.r5.u64 | ctx.r9.u64;
	// sth r11,498(r1)
	PPC_STORE_U16(ctx.r1.u32 + 498, r11.u16);
	// sth r10,496(r1)
	PPC_STORE_U16(ctx.r1.u32 + 496, ctx.r10.u16);
	// b 0x82729384
	goto loc_82729384;
loc_8272936C:
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x82729380
	if (!cr6.eq) goto loc_82729380;
	// lwz r11,288(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 288);
	// stw r11,496(r1)
	PPC_STORE_U32(ctx.r1.u32 + 496, r11.u32);
	// b 0x82729384
	goto loc_82729384;
loc_82729380:
	// stw r23,496(r1)
	PPC_STORE_U32(ctx.r1.u32 + 496, r23.u32);
loc_82729384:
	// rlwinm r11,r8,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// lhz r9,496(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 496);
	// add r10,r6,r8
	ctx.r10.u64 = ctx.r6.u64 + ctx.r8.u64;
	// lwz r3,2772(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2772);
	// add r23,r11,r24
	r23.u64 = r11.u64 + r24.u64;
	// lwz r16,136(r1)
	r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// rlwinm r11,r10,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// lhz r10,498(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 498);
	// extsh r6,r9
	ctx.r6.s64 = ctx.r9.s16;
	// extsh r5,r10
	ctx.r5.s64 = ctx.r10.s16;
	// rlwinm r10,r8,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r8,0(r23)
	ctx.r8.u64 = PPC_LOAD_U32(r23.u32 + 0);
	// add r4,r11,r7
	ctx.r4.u64 = r11.u64 + ctx.r7.u64;
	// li r20,0
	r20.s64 = 0;
	// add r7,r5,r8
	ctx.r7.u64 = ctx.r5.u64 + ctx.r8.u64;
	// rlwinm r8,r8,16,16,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 16) & 0xFFFF;
	// add r5,r7,r21
	ctx.r5.u64 = ctx.r7.u64 + r21.u64;
	// mr r7,r8
	ctx.r7.u64 = ctx.r8.u64;
	// and r8,r5,r18
	ctx.r8.u64 = ctx.r5.u64 & r18.u64;
	// stw r20,360(r1)
	PPC_STORE_U32(ctx.r1.u32 + 360, r20.u32);
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// stw r20,356(r1)
	PPC_STORE_U32(ctx.r1.u32 + 356, r20.u32);
	// subf r8,r21,r8
	ctx.r8.s64 = ctx.r8.s64 - r21.s64;
	// stw r20,352(r1)
	PPC_STORE_U32(ctx.r1.u32 + 352, r20.u32);
	// add r7,r6,r7
	ctx.r7.u64 = ctx.r6.u64 + ctx.r7.u64;
	// mr r9,r20
	ctx.r9.u64 = r20.u64;
	// add r7,r7,r19
	ctx.r7.u64 = ctx.r7.u64 + r19.u64;
	// cmpwi cr6,r16,0
	cr6.compare<int32_t>(r16.s32, 0, xer);
	// sth r8,2(r4)
	PPC_STORE_U16(ctx.r4.u32 + 2, ctx.r8.u16);
	// and r7,r7,r17
	ctx.r7.u64 = ctx.r7.u64 & r17.u64;
	// lwz r8,1492(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// subf r7,r19,r7
	ctx.r7.s64 = ctx.r7.s64 - r19.s64;
	// add r8,r11,r8
	ctx.r8.u64 = r11.u64 + ctx.r8.u64;
	// lhz r6,2(r8)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r8.u32 + 2);
	// sth r6,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r6.u16);
	// lwz r8,1492(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// lhzx r6,r11,r8
	ctx.r6.u64 = PPC_LOAD_U16(r11.u32 + ctx.r8.u32);
	// add r8,r10,r8
	ctx.r8.u64 = ctx.r10.u64 + ctx.r8.u64;
	// sth r6,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, ctx.r6.u16);
	// lwz r8,1492(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// add r8,r10,r8
	ctx.r8.u64 = ctx.r10.u64 + ctx.r8.u64;
	// lhz r6,2(r8)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r8.u32 + 2);
	// sth r6,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r6.u16);
	// lwz r8,1496(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lwz r6,1492(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// add r8,r8,r11
	ctx.r8.u64 = ctx.r8.u64 + r11.u64;
	// lhzx r6,r10,r6
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r6.u32);
	// sth r7,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, ctx.r7.u16);
	// lwz r8,1496(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// add r8,r8,r11
	ctx.r8.u64 = ctx.r8.u64 + r11.u64;
	// lhz r7,2(r8)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r8.u32 + 2);
	// sth r7,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r7.u16);
	// lwz r8,1496(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lhzx r7,r11,r8
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + ctx.r8.u32);
	// add r8,r10,r8
	ctx.r8.u64 = ctx.r10.u64 + ctx.r8.u64;
	// sth r7,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, ctx.r7.u16);
	// lwz r8,1496(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// add r8,r8,r10
	ctx.r8.u64 = ctx.r8.u64 + ctx.r10.u64;
	// lhz r7,2(r8)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r8.u32 + 2);
	// sth r7,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r7.u16);
	// lwz r5,1496(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lhz r4,0(r22)
	ctx.r4.u64 = PPC_LOAD_U16(r22.u32 + 0);
	// lwz r8,1500(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// lwz r7,1504(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// srawi r24,r4,1
	xer.ca = (ctx.r4.s32 < 0) & ((ctx.r4.u32 & 0x1) != 0);
	r24.s64 = ctx.r4.s32 >> 1;
	// lwz r26,0(r3)
	r26.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lhzx r5,r5,r10
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r5.u32 + ctx.r10.u32);
	// extsh r5,r5
	ctx.r5.s64 = ctx.r5.s16;
	// beq cr6,0x82729520
	if (cr6.eq) goto loc_82729520;
	// lwz r29,112(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// addi r3,r26,-2
	ctx.r3.s64 = r26.s64 + -2;
	// lwz r29,-20(r29)
	r29.u64 = PPC_LOAD_U32(r29.u32 + -20);
	// rlwinm r28,r29,0,14,14
	r28.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x82729520
	if (cr6.eq) goto loc_82729520;
	// rlwinm r9,r29,0,21,23
	ctx.r9.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0x700;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x827294d0
	if (!cr6.eq) goto loc_827294D0;
	// rlwinm r3,r3,1,0,30
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r29,r8,r3
	r29.u64 = PPC_LOAD_U16(ctx.r8.u32 + ctx.r3.u32);
	// lhzx r3,r7,r3
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r3.u32);
	// b 0x82729514
	goto loc_82729514;
loc_827294D0:
	// add r9,r3,r4
	ctx.r9.u64 = ctx.r3.u64 + ctx.r4.u64;
	// rlwinm r3,r3,1,0,30
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r29,r9,1,0,30
	r29.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r28,r8,r3
	r28.u64 = PPC_LOAD_U16(ctx.r8.u32 + ctx.r3.u32);
	// lhzx r25,r8,r29
	r25.u64 = PPC_LOAD_U16(ctx.r8.u32 + r29.u32);
	// extsh r27,r28
	r27.s64 = r28.s16;
	// lhzx r22,r7,r29
	r22.u64 = PPC_LOAD_U16(ctx.r7.u32 + r29.u32);
	// lhzx r28,r7,r3
	r28.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r3.u32);
	// extsh r29,r25
	r29.s64 = r25.s16;
	// extsh r3,r22
	ctx.r3.s64 = r22.s16;
	// extsh r28,r28
	r28.s64 = r28.s16;
	// add r29,r29,r27
	r29.u64 = r29.u64 + r27.u64;
	// add r3,r3,r28
	ctx.r3.u64 = ctx.r3.u64 + r28.u64;
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
	// srawi r29,r29,1
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x1) != 0);
	r29.s64 = r29.s32 >> 1;
	// srawi r3,r3,1
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x1) != 0);
	ctx.r3.s64 = ctx.r3.s32 >> 1;
loc_82729514:
	// sth r3,352(r1)
	PPC_STORE_U16(ctx.r1.u32 + 352, ctx.r3.u16);
	// li r9,1
	ctx.r9.s64 = 1;
	// sth r29,354(r1)
	PPC_STORE_U16(ctx.r1.u32 + 354, r29.u16);
loc_82729520:
	// lwz r3,152(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x827296d8
	if (!cr6.eq) goto loc_827296D8;
	// rlwinm r3,r24,2,0,29
	ctx.r3.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r29,r4,1,0,30
	r29.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// add r3,r24,r3
	ctx.r3.u64 = r24.u64 + ctx.r3.u64;
	// subf r27,r29,r26
	r27.s64 = r26.s64 - r29.s64;
	// lwz r29,112(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// rlwinm r3,r3,2,0,29
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r22,r3,r29
	r22.s64 = r29.s64 - ctx.r3.s64;
	// lwz r3,0(r22)
	ctx.r3.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// rlwinm r29,r3,0,14,14
	r29.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x827295f4
	if (cr6.eq) goto loc_827295F4;
	// rlwinm r3,r3,0,21,23
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x700;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// rlwinm r3,r27,1,0,30
	ctx.r3.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 1) & 0xFFFFFFFE;
	// bne cr6,0x82729588
	if (!cr6.eq) goto loc_82729588;
	// lhzx r25,r8,r3
	r25.u64 = PPC_LOAD_U16(ctx.r8.u32 + ctx.r3.u32);
	// rlwinm r29,r9,2,0,29
	r29.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r28,r1,354
	r28.s64 = ctx.r1.s64 + 354;
	// lhzx r3,r7,r3
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r3.u32);
	// addi r26,r1,352
	r26.s64 = ctx.r1.s64 + 352;
	// sthx r25,r29,r28
	PPC_STORE_U16(r29.u32 + r28.u32, r25.u16);
	// sthx r3,r29,r26
	PPC_STORE_U16(r29.u32 + r26.u32, ctx.r3.u16);
	// b 0x827295f0
	goto loc_827295F0;
loc_82729588:
	// add r29,r27,r4
	r29.u64 = r27.u64 + ctx.r4.u64;
	// lhzx r26,r8,r3
	r26.u64 = PPC_LOAD_U16(ctx.r8.u32 + ctx.r3.u32);
	// rlwinm r28,r9,2,0,29
	r28.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r29,r29,1,0,30
	r29.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r20,r1,354
	r20.s64 = ctx.r1.s64 + 354;
	// addi r14,r1,352
	r14.s64 = ctx.r1.s64 + 352;
	// lhzx r25,r8,r29
	r25.u64 = PPC_LOAD_U16(ctx.r8.u32 + r29.u32);
	// lhzx r29,r7,r29
	r29.u64 = PPC_LOAD_U16(ctx.r7.u32 + r29.u32);
	// sth r25,120(r1)
	PPC_STORE_U16(ctx.r1.u32 + 120, r25.u16);
	// extsh r25,r26
	r25.s64 = r26.s16;
	// lhzx r26,r7,r3
	r26.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r3.u32);
	// extsh r26,r26
	r26.s64 = r26.s16;
	// lhz r3,120(r1)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r1.u32 + 120);
	// sth r29,120(r1)
	PPC_STORE_U16(ctx.r1.u32 + 120, r29.u16);
	// extsh r29,r3
	r29.s64 = ctx.r3.s16;
	// add r29,r29,r25
	r29.u64 = r29.u64 + r25.u64;
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// srawi r29,r29,1
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x1) != 0);
	r29.s64 = r29.s32 >> 1;
	// sthx r29,r28,r20
	PPC_STORE_U16(r28.u32 + r20.u32, r29.u16);
	// li r20,0
	r20.s64 = 0;
	// lhz r3,120(r1)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r1.u32 + 120);
	// extsh r3,r3
	ctx.r3.s64 = ctx.r3.s16;
	// add r3,r3,r26
	ctx.r3.u64 = ctx.r3.u64 + r26.u64;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
	// srawi r3,r3,1
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x1) != 0);
	ctx.r3.s64 = ctx.r3.s32 >> 1;
	// sthx r3,r28,r14
	PPC_STORE_U16(r28.u32 + r14.u32, ctx.r3.u16);
loc_827295F0:
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
loc_827295F4:
	// cmpwi cr6,r24,1
	cr6.compare<int32_t>(r24.s32, 1, xer);
	// beq cr6,0x827296d8
	if (cr6.eq) goto loc_827296D8;
	// addi r29,r24,-1
	r29.s64 = r24.s64 + -1;
	// li r3,1
	ctx.r3.s64 = 1;
	// cmpw cr6,r16,r29
	cr6.compare<int32_t>(r16.s32, r29.s32, xer);
	// blt cr6,0x82729610
	if (cr6.lt) goto loc_82729610;
	// mr r3,r20
	ctx.r3.u64 = r20.u64;
loc_82729610:
	// rlwinm r3,r3,2,0,29
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpw cr6,r16,r29
	cr6.compare<int32_t>(r16.s32, r29.s32, xer);
	// add r3,r3,r27
	ctx.r3.u64 = ctx.r3.u64 + r27.u64;
	// li r29,1
	r29.s64 = 1;
	// addi r3,r3,-2
	ctx.r3.s64 = ctx.r3.s64 + -2;
	// blt cr6,0x8272962c
	if (cr6.lt) goto loc_8272962C;
	// mr r29,r20
	r29.u64 = r20.u64;
loc_8272962C:
	// rlwinm r28,r29,2,0,29
	r28.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 2) & 0xFFFFFFFC;
	// add r29,r29,r28
	r29.u64 = r29.u64 + r28.u64;
	// rlwinm r29,r29,3,0,28
	r29.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 3) & 0xFFFFFFF8;
	// add r29,r29,r22
	r29.u64 = r29.u64 + r22.u64;
	// lwz r29,-20(r29)
	r29.u64 = PPC_LOAD_U32(r29.u32 + -20);
	// rlwinm r28,r29,0,14,14
	r28.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x827296d8
	if (cr6.eq) goto loc_827296D8;
	// rlwinm r29,r29,0,21,23
	r29.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 0) & 0x700;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x8272967c
	if (!cr6.eq) goto loc_8272967C;
	// rlwinm r4,r3,1,0,30
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r3,r9,2,0,29
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r29,r1,354
	r29.s64 = ctx.r1.s64 + 354;
	// addi r28,r1,352
	r28.s64 = ctx.r1.s64 + 352;
	// lhzx r27,r8,r4
	r27.u64 = PPC_LOAD_U16(ctx.r8.u32 + ctx.r4.u32);
	// lhzx r7,r7,r4
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r4.u32);
	// sthx r27,r3,r29
	PPC_STORE_U16(ctx.r3.u32 + r29.u32, r27.u16);
	// sthx r7,r3,r28
	PPC_STORE_U16(ctx.r3.u32 + r28.u32, ctx.r7.u16);
	// b 0x827296d4
	goto loc_827296D4;
loc_8272967C:
	// add r29,r3,r4
	r29.u64 = ctx.r3.u64 + ctx.r4.u64;
	// rlwinm r4,r3,1,0,30
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r3,r29,1,0,30
	ctx.r3.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r29,r9,2,0,29
	r29.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r27,r1,354
	r27.s64 = ctx.r1.s64 + 354;
	// addi r26,r1,352
	r26.s64 = ctx.r1.s64 + 352;
	// lhzx r28,r8,r4
	r28.u64 = PPC_LOAD_U16(ctx.r8.u32 + ctx.r4.u32);
	// lhzx r25,r8,r3
	r25.u64 = PPC_LOAD_U16(ctx.r8.u32 + ctx.r3.u32);
	// lhzx r3,r7,r3
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r3.u32);
	// extsh r28,r28
	r28.s64 = r28.s16;
	// lhzx r24,r7,r4
	r24.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r4.u32);
	// extsh r4,r25
	ctx.r4.s64 = r25.s16;
	// extsh r7,r3
	ctx.r7.s64 = ctx.r3.s16;
	// extsh r3,r24
	ctx.r3.s64 = r24.s16;
	// add r4,r4,r28
	ctx.r4.u64 = ctx.r4.u64 + r28.u64;
	// add r7,r7,r3
	ctx.r7.u64 = ctx.r7.u64 + ctx.r3.u64;
	// addi r4,r4,1
	ctx.r4.s64 = ctx.r4.s64 + 1;
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// srawi r4,r4,1
	xer.ca = (ctx.r4.s32 < 0) & ((ctx.r4.u32 & 0x1) != 0);
	ctx.r4.s64 = ctx.r4.s32 >> 1;
	// srawi r7,r7,1
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x1) != 0);
	ctx.r7.s64 = ctx.r7.s32 >> 1;
	// sthx r4,r29,r27
	PPC_STORE_U16(r29.u32 + r27.u32, ctx.r4.u16);
	// sthx r7,r29,r26
	PPC_STORE_U16(r29.u32 + r26.u32, ctx.r7.u16);
loc_827296D4:
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
loc_827296D8:
	// cmpwi cr6,r9,2
	cr6.compare<int32_t>(ctx.r9.s32, 2, xer);
	// blt cr6,0x82729784
	if (cr6.lt) goto loc_82729784;
	// lhz r9,358(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 358);
	// lhz r7,354(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 354);
	// lhz r29,362(r1)
	r29.u64 = PPC_LOAD_U16(ctx.r1.u32 + 362);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// lhz r4,356(r1)
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r1.u32 + 356);
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// lhz r3,352(r1)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r1.u32 + 352);
	// extsh r29,r29
	r29.s64 = r29.s16;
	// lhz r28,360(r1)
	r28.u64 = PPC_LOAD_U16(ctx.r1.u32 + 360);
	// extsh r4,r4
	ctx.r4.s64 = ctx.r4.s16;
	// extsh r3,r3
	ctx.r3.s64 = ctx.r3.s16;
	// extsh r28,r28
	r28.s64 = r28.s16;
	// subf r27,r7,r9
	r27.s64 = ctx.r9.s64 - ctx.r7.s64;
	// subf r25,r29,r9
	r25.s64 = ctx.r9.s64 - r29.s64;
	// subf r24,r7,r29
	r24.s64 = r29.s64 - ctx.r7.s64;
	// subf r26,r3,r4
	r26.s64 = ctx.r4.s64 - ctx.r3.s64;
	// subf r22,r28,r4
	r22.s64 = ctx.r4.s64 - r28.s64;
	// subf r14,r3,r28
	r14.s64 = r28.s64 - ctx.r3.s64;
	// xor r25,r25,r27
	r25.u64 = r25.u64 ^ r27.u64;
	// xor r24,r24,r27
	r24.u64 = r24.u64 ^ r27.u64;
	// xor r22,r22,r26
	r22.u64 = r22.u64 ^ r26.u64;
	// srawi r27,r25,31
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x7FFFFFFF) != 0);
	r27.s64 = r25.s32 >> 31;
	// xor r14,r14,r26
	r14.u64 = r14.u64 ^ r26.u64;
	// srawi r26,r24,31
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x7FFFFFFF) != 0);
	r26.s64 = r24.s32 >> 31;
	// srawi r25,r22,31
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x7FFFFFFF) != 0);
	r25.s64 = r22.s32 >> 31;
	// srawi r24,r14,31
	xer.ca = (r14.s32 < 0) & ((r14.u32 & 0x7FFFFFFF) != 0);
	r24.s64 = r14.s32 >> 31;
	// or r22,r27,r26
	r22.u64 = r27.u64 | r26.u64;
	// or r14,r25,r24
	r14.u64 = r25.u64 | r24.u64;
	// and r7,r26,r7
	ctx.r7.u64 = r26.u64 & ctx.r7.u64;
	// andc r29,r29,r22
	r29.u64 = r29.u64 & ~r22.u64;
	// andc r28,r28,r14
	r28.u64 = r28.u64 & ~r14.u64;
	// and r3,r24,r3
	ctx.r3.u64 = r24.u64 & ctx.r3.u64;
	// or r7,r29,r7
	ctx.r7.u64 = r29.u64 | ctx.r7.u64;
	// and r9,r27,r9
	ctx.r9.u64 = r27.u64 & ctx.r9.u64;
	// or r3,r28,r3
	ctx.r3.u64 = r28.u64 | ctx.r3.u64;
	// and r4,r25,r4
	ctx.r4.u64 = r25.u64 & ctx.r4.u64;
	// or r9,r7,r9
	ctx.r9.u64 = ctx.r7.u64 | ctx.r9.u64;
	// or r7,r3,r4
	ctx.r7.u64 = ctx.r3.u64 | ctx.r4.u64;
	// sth r9,506(r1)
	PPC_STORE_U16(ctx.r1.u32 + 506, ctx.r9.u16);
	// sth r7,504(r1)
	PPC_STORE_U16(ctx.r1.u32 + 504, ctx.r7.u16);
	// b 0x8272979c
	goto loc_8272979C;
loc_82729784:
	// cmpwi cr6,r9,1
	cr6.compare<int32_t>(ctx.r9.s32, 1, xer);
	// bne cr6,0x82729798
	if (!cr6.eq) goto loc_82729798;
	// lwz r9,352(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 352);
	// stw r9,504(r1)
	PPC_STORE_U32(ctx.r1.u32 + 504, ctx.r9.u32);
	// b 0x8272979c
	goto loc_8272979C;
loc_82729798:
	// stw r20,504(r1)
	PPC_STORE_U32(ctx.r1.u32 + 504, r20.u32);
loc_8272979C:
	// lhz r9,506(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 506);
	// add r27,r8,r11
	r27.u64 = ctx.r8.u64 + r11.u64;
	// clrlwi r29,r6,30
	r29.u64 = ctx.r6.u32 & 0x3;
	// lwz r7,4(r23)
	ctx.r7.u64 = PPC_LOAD_U32(r23.u32 + 4);
	// extsh r3,r9
	ctx.r3.s64 = ctx.r9.s16;
	// lhz r9,504(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 504);
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// extsh r4,r9
	ctx.r4.s64 = ctx.r9.s16;
	// lwz r9,160(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// mr r25,r5
	r25.u64 = ctx.r5.u64;
	// rlwinm r9,r9,16,0,15
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 16) & 0xFFFF0000;
	// or r8,r9,r16
	ctx.r8.u64 = ctx.r9.u64 | r16.u64;
	// mr r9,r6
	ctx.r9.u64 = ctx.r6.u64;
	// rlwinm r26,r8,6,0,25
	r26.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 6) & 0xFFFFFFC0;
	// stw r25,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r25.u32);
	// clrlwi r8,r5,30
	ctx.r8.u64 = ctx.r5.u32 & 0x3;
	// rlwimi r9,r5,16,0,15
	ctx.r9.u64 = (__builtin_rotateleft32(ctx.r5.u32, 16) & 0xFFFF0000) | (ctx.r9.u64 & 0xFFFFFFFF0000FFFF);
	// addi r28,r8,1
	r28.s64 = ctx.r8.s64 + 1;
	// srawi r8,r29,2
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x3) != 0);
	ctx.r8.s64 = r29.s32 >> 2;
	// add r8,r8,r6
	ctx.r8.u64 = ctx.r8.u64 + ctx.r6.u64;
	// srawi r24,r8,1
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x1) != 0);
	r24.s64 = ctx.r8.s32 >> 1;
	// srawi r8,r28,2
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x3) != 0);
	ctx.r8.s64 = r28.s32 >> 2;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// add r8,r8,r5
	ctx.r8.u64 = ctx.r8.u64 + ctx.r5.u64;
	// rlwinm r6,r9,1,15,15
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0x10000;
	// srawi r23,r8,1
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x1) != 0);
	r23.s64 = ctx.r8.s32 >> 1;
	// stw r24,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r24.u32);
	// add r8,r3,r7
	ctx.r8.u64 = ctx.r3.u64 + ctx.r7.u64;
	// subf r6,r6,r9
	ctx.r6.s64 = ctx.r9.s64 - ctx.r6.s64;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r28.u32);
	// add r8,r8,r21
	ctx.r8.u64 = ctx.r8.u64 + r21.u64;
	// add r6,r6,r26
	ctx.r6.u64 = ctx.r6.u64 + r26.u64;
	// and r8,r8,r18
	ctx.r8.u64 = ctx.r8.u64 & r18.u64;
	// stw r23,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r23.u32);
	// addis r5,r6,115
	ctx.r5.s64 = ctx.r6.s64 + 7536640;
	// subf r8,r21,r8
	ctx.r8.s64 = ctx.r8.s64 - r21.s64;
	// rlwinm r7,r7,16,16,31
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 16) & 0xFFFF;
	// addi r5,r5,115
	ctx.r5.s64 = ctx.r5.s64 + 115;
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// sth r8,2(r27)
	PPC_STORE_U16(r27.u32 + 2, ctx.r8.u16);
	// add r7,r7,r4
	ctx.r7.u64 = ctx.r7.u64 + ctx.r4.u64;
	// lwz r8,1500(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r7,r7,r19
	ctx.r7.u64 = ctx.r7.u64 + r19.u64;
	// add r8,r8,r11
	ctx.r8.u64 = ctx.r8.u64 + r11.u64;
	// and r7,r7,r17
	ctx.r7.u64 = ctx.r7.u64 & r17.u64;
	// subf r7,r19,r7
	ctx.r7.s64 = ctx.r7.s64 - r19.s64;
	// lhz r6,2(r8)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r8.u32 + 2);
	// sth r6,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r6.u16);
	// lwz r8,1500(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// lhzx r6,r8,r11
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r8.u32 + r11.u32);
	// add r8,r8,r10
	ctx.r8.u64 = ctx.r8.u64 + ctx.r10.u64;
	// sth r6,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, ctx.r6.u16);
	// lwz r8,1500(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r8,r8,r10
	ctx.r8.u64 = ctx.r8.u64 + ctx.r10.u64;
	// lhz r6,2(r8)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r8.u32 + 2);
	// sth r6,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r6.u16);
	// lwz r8,1504(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lwz r6,1500(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r8,r11,r8
	ctx.r8.u64 = r11.u64 + ctx.r8.u64;
	// lhzx r6,r6,r10
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r6.u32 + ctx.r10.u32);
	// sth r7,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, ctx.r7.u16);
	// lwz r8,1504(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// extsh r22,r6
	r22.s64 = ctx.r6.s16;
	// add r8,r11,r8
	ctx.r8.u64 = r11.u64 + ctx.r8.u64;
	// lhz r7,2(r8)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r8.u32 + 2);
	// sth r7,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r7.u16);
	// lwz r8,1504(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lhzx r11,r8,r11
	r11.u64 = PPC_LOAD_U16(ctx.r8.u32 + r11.u32);
	// add r8,r8,r10
	ctx.r8.u64 = ctx.r8.u64 + ctx.r10.u64;
	// sth r11,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, r11.u16);
	// lwz r11,1504(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// lhz r8,2(r11)
	ctx.r8.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r8,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r8.u16);
	// lwz r11,1504(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lwz r6,1396(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 1396);
	// lwz r27,448(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + 448);
	// lwz r29,1404(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 1404);
	// lhzx r11,r10,r11
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + r11.u32);
	// extsh r21,r11
	r21.s64 = r11.s16;
	// subf r11,r9,r6
	r11.s64 = ctx.r6.s64 - ctx.r9.s64;
	// subf r11,r26,r11
	r11.s64 = r11.s64 - r26.s64;
	// or r11,r5,r11
	r11.u64 = ctx.r5.u64 | r11.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82729910
	if (cr6.eq) goto loc_82729910;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r25,96(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r28,100(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
loc_82729910:
	// mr r11,r24
	r11.u64 = r24.u64;
	// srawi r5,r26,1
	xer.ca = (r26.s32 < 0) & ((r26.u32 & 0x1) != 0);
	ctx.r5.s64 = r26.s32 >> 1;
	// rlwimi r11,r23,16,0,15
	r11.u64 = (__builtin_rotateleft32(r23.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r29
	ctx.r9.s64 = r29.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r5,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r5.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// addis r11,r11,59
	r11.s64 = r11.s64 + 3866624;
	// addi r11,r11,59
	r11.s64 = r11.s64 + 59;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82729964
	if (cr6.eq) goto loc_82729964;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
	// lwz r24,104(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lwz r23,128(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
loc_82729964:
	// lhz r10,0(r15)
	ctx.r10.u64 = PPC_LOAD_U16(r15.u32 + 0);
	// srawi r7,r25,2
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x3) != 0);
	ctx.r7.s64 = r25.s32 >> 2;
	// lwz r8,124(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// srawi r9,r28,2
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x3) != 0);
	ctx.r9.s64 = r28.s32 >> 2;
	// mullw r10,r7,r10
	ctx.r10.s64 = int64_t(ctx.r7.s32) * int64_t(ctx.r10.s32);
	// lwz r11,0(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lwz r9,164(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// add r29,r10,r9
	r29.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82729a0c
	if (!cr0.eq) goto loc_82729A0C;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// mr r11,r20
	r11.u64 = r20.u64;
loc_82729A0C:
	// addi r10,r30,8
	ctx.r10.s64 = r30.s64 + 8;
	// rlwinm r19,r10,3,0,28
	r19.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// dcbt r19,r29
	// rlwinm r10,r30,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// add r10,r30,r10
	ctx.r10.u64 = r30.u64 + ctx.r10.u64;
	// addi r18,r10,64
	r18.s64 = ctx.r10.s64 + 64;
	// dcbt r18,r29
	// rlwinm r10,r30,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r30,r10
	ctx.r10.u64 = r30.u64 + ctx.r10.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r17,r10,64
	r17.s64 = ctx.r10.s64 + 64;
	// dcbt r17,r29
	// mulli r10,r30,11
	ctx.r10.s64 = r30.s64 * 11;
	// addi r16,r10,64
	r16.s64 = ctx.r10.s64 + 64;
	// dcbt r16,r29
	// rlwinm r10,r30,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r30,r10
	ctx.r10.u64 = r30.u64 + ctx.r10.u64;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r15,r10,64
	r15.s64 = ctx.r10.s64 + 64;
	// dcbt r15,r29
	// mulli r10,r30,13
	ctx.r10.s64 = r30.s64 * 13;
	// addi r14,r10,64
	r14.s64 = ctx.r10.s64 + 64;
	// dcbt r14,r29
	// rlwinm r10,r30,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r10,r30,r10
	ctx.r10.s64 = ctx.r10.s64 - r30.s64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r10,64
	ctx.r10.s64 = ctx.r10.s64 + 64;
	// stw r10,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r10.u32);
	// dcbt r10,r29
	// rlwinm r10,r30,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 4) & 0xFFFFFFF0;
	// subf r10,r30,r10
	ctx.r10.s64 = ctx.r10.s64 - r30.s64;
	// addi r10,r10,64
	ctx.r10.s64 = ctx.r10.s64 + 64;
	// stw r10,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, ctx.r10.u32);
	// dcbt r10,r29
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// clrlwi r28,r28,30
	r28.u64 = r28.u32 & 0x3;
	// stw r20,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r20.u32);
	// clrlwi r25,r25,30
	r25.u64 = r25.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// stw r11,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// li r6,16
	ctx.r6.s64 = 16;
	// add r11,r11,r25
	r11.u64 = r11.u64 + r25.u64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r9,r25
	ctx.r9.u64 = r25.u64;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82729b14
	if (cr6.eq) goto loc_82729B14;
	// li r10,1
	ctx.r10.s64 = 1;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// stw r20,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r20.u32);
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_82729B14:
	// addi r10,r31,76
	ctx.r10.s64 = r31.s64 + 76;
	// lwz r20,156(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// srawi r8,r23,2
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x3) != 0);
	ctx.r8.s64 = r23.s32 >> 2;
	// srawi r9,r24,2
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x3) != 0);
	ctx.r9.s64 = r24.s32 >> 2;
	// srawi r29,r30,1
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x1) != 0);
	r29.s64 = r30.s32 >> 1;
	// lhz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// mullw r10,r8,r10
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// lwz r8,144(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r9,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r9.s64 = r11.s32 >> 4;
	// add r3,r10,r8
	ctx.r3.u64 = ctx.r10.u64 + ctx.r8.u64;
	// addze r9,r9
	temp.s64 = ctx.r9.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r9.u32;
	ctx.r9.s64 = temp.s64;
	// lwz r8,188(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// add r28,r10,r8
	r28.u64 = ctx.r10.u64 + ctx.r8.u64;
	// rlwinm r9,r9,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r9,r9,r11
	ctx.r9.s64 = r11.s64 - ctx.r9.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x82729bcc
	if (!cr0.eq) goto loc_82729BCC;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r29,128
	r11.s64 = r29.s64 + 128;
	// dcbt r11,r3
	// addi r11,r29,64
	r11.s64 = r29.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r29,1,0,30
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r29,32
	r11.s64 = r29.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r29,2,0,29
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r29,1,0,30
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r29,3,0,28
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r29,r11
	r11.s64 = r11.s64 - r29.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// li r11,0
	r11.s64 = 0;
loc_82729BCC:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// clrlwi r25,r24,30
	r25.u64 = r24.u32 & 0x3;
	// clrlwi r24,r23,30
	r24.u64 = r23.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// li r6,8
	ctx.r6.s64 = 8;
	// stw r11,0(r20)
	PPC_STORE_U32(r20.u32 + 0, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// addi r5,r27,256
	ctx.r5.s64 = r27.s64 + 256;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r8,r24
	ctx.r8.u64 = r24.u64;
	// mr r7,r25
	ctx.r7.u64 = r25.u64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// rlwinm r11,r25,2,0,29
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// srawi r10,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r10.s64 = r11.s32 >> 4;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82729ca4
	if (!cr0.eq) goto loc_82729CA4;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r28
	// addi r11,r29,128
	r11.s64 = r29.s64 + 128;
	// dcbt r11,r28
	// addi r11,r29,64
	r11.s64 = r29.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r28
	// rlwinm r11,r29,1,0,30
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// addi r11,r29,32
	r11.s64 = r29.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r28
	// rlwinm r11,r29,2,0,29
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r29,1,0,30
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r29,3,0,28
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r29,r11
	r11.s64 = r11.s64 - r29.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// li r11,0
	r11.s64 = 0;
loc_82729CA4:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r10,156(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// li r6,8
	ctx.r6.s64 = 8;
	// addi r5,r27,320
	ctx.r5.s64 = r27.s64 + 320;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// li r11,0
	r11.s64 = 0;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r8,r24
	ctx.r8.u64 = r24.u64;
	// mr r7,r25
	ctx.r7.u64 = r25.u64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// rlwinm r11,r25,2,0,29
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r10,r22,30
	ctx.r10.u64 = r22.u32 & 0x3;
	// mr r11,r22
	r11.u64 = r22.u64;
	// lwz r6,1396(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 1396);
	// addi r9,r10,1
	ctx.r9.s64 = ctx.r10.s64 + 1;
	// lwz r28,260(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// clrlwi r10,r21,30
	ctx.r10.u64 = r21.u32 & 0x3;
	// lwz r23,1404(r31)
	r23.u64 = PPC_LOAD_U32(r31.u32 + 1404);
	// srawi r9,r9,2
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 2;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// add r9,r9,r22
	ctx.r9.u64 = ctx.r9.u64 + r22.u64;
	// rlwimi r11,r21,16,0,15
	r11.u64 = (__builtin_rotateleft32(r21.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// srawi r20,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	r20.s64 = ctx.r9.s32 >> 1;
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// mr r25,r22
	r25.u64 = r22.u64;
	// add r10,r10,r21
	ctx.r10.u64 = ctx.r10.u64 + r21.u64;
	// subf r9,r11,r6
	ctx.r9.s64 = ctx.r6.s64 - r11.s64;
	// srawi r22,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	r22.s64 = ctx.r10.s32 >> 1;
	// stw r20,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r20.u32);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// mr r24,r21
	r24.u64 = r21.u64;
	// stw r25,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r25.u32);
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r26,r9
	ctx.r10.s64 = ctx.r9.s64 - r26.s64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// stw r22,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r22.u32);
	// addis r11,r11,115
	r11.s64 = r11.s64 + 7536640;
	// stw r24,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r24.u32);
	// addi r11,r11,115
	r11.s64 = r11.s64 + 115;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82729d90
	if (cr6.eq) goto loc_82729D90;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r24,96(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r25,100(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
loc_82729D90:
	// mr r11,r20
	r11.u64 = r20.u64;
	// srawi r5,r26,1
	xer.ca = (r26.s32 < 0) & ((r26.u32 & 0x1) != 0);
	ctx.r5.s64 = r26.s32 >> 1;
	// rlwimi r11,r22,16,0,15
	r11.u64 = (__builtin_rotateleft32(r22.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r23
	ctx.r9.s64 = r23.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r5,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r5.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// addis r11,r11,59
	r11.s64 = r11.s64 + 3866624;
	// addi r11,r11,59
	r11.s64 = r11.s64 + 59;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82729de4
	if (cr6.eq) goto loc_82729DE4;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
	// lwz r20,104(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lwz r22,144(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
loc_82729DE4:
	// addi r10,r31,74
	ctx.r10.s64 = r31.s64 + 74;
	// lwz r8,124(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// srawi r7,r24,2
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x3) != 0);
	ctx.r7.s64 = r24.s32 >> 2;
	// srawi r9,r25,2
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x3) != 0);
	ctx.r9.s64 = r25.s32 >> 2;
	// lhz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// lwz r11,0(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// mullw r10,r7,r10
	ctx.r10.s64 = int64_t(ctx.r7.s32) * int64_t(ctx.r10.s32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lwz r9,184(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// add r26,r10,r9
	r26.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82729e98
	if (!cr0.eq) goto loc_82729E98;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r26
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r26
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r26
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r26
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r26
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r26
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r26
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r26
	// li r23,0
	r23.s64 = 0;
	// mr r11,r23
	r11.u64 = r23.u64;
	// b 0x82729e9c
	goto loc_82729E9C;
loc_82729E98:
	// li r23,0
	r23.s64 = 0;
loc_82729E9C:
	// dcbt r19,r26
	// dcbt r18,r26
	// dcbt r17,r26
	// dcbt r16,r26
	// dcbt r15,r26
	// dcbt r14,r26
	// lwz r10,132(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// dcbt r10,r26
	// lwz r10,164(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// dcbt r10,r26
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// clrlwi r25,r25,30
	r25.u64 = r25.u32 & 0x3;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// clrlwi r24,r24,30
	r24.u64 = r24.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// stw r11,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r11.u32);
	// rlwinm r11,r25,2,0,29
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 2) & 0xFFFFFFFC;
	// li r6,16
	ctx.r6.s64 = 16;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// mr r9,r24
	ctx.r9.u64 = r24.u64;
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82729f44
	if (cr6.eq) goto loc_82729F44;
	// li r10,1
	ctx.r10.s64 = 1;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r24
	ctx.r8.u64 = r24.u64;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// mr r7,r25
	ctx.r7.u64 = r25.u64;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_82729F44:
	// addi r10,r31,76
	ctx.r10.s64 = r31.s64 + 76;
	// lwz r21,156(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// srawi r8,r22,2
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x3) != 0);
	ctx.r8.s64 = r22.s32 >> 2;
	// srawi r9,r20,2
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x3) != 0);
	ctx.r9.s64 = r20.s32 >> 2;
	// lhz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// lwz r11,0(r21)
	r11.u64 = PPC_LOAD_U32(r21.u32 + 0);
	// mullw r10,r8,r10
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// lwz r8,148(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r9,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r9.s64 = r11.s32 >> 4;
	// add r3,r10,r8
	ctx.r3.u64 = ctx.r10.u64 + ctx.r8.u64;
	// addze r9,r9
	temp.s64 = ctx.r9.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r9.u32;
	ctx.r9.s64 = temp.s64;
	// lwz r8,108(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// add r26,r10,r8
	r26.u64 = ctx.r10.u64 + ctx.r8.u64;
	// rlwinm r9,r9,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r9,r9,r11
	ctx.r9.s64 = r11.s64 - ctx.r9.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x82729ff8
	if (!cr0.eq) goto loc_82729FF8;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r29,128
	r11.s64 = r29.s64 + 128;
	// dcbt r11,r3
	// addi r11,r29,64
	r11.s64 = r29.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r29,1,0,30
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r29,32
	r11.s64 = r29.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r29,2,0,29
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r29,1,0,30
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r29,3,0,28
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r29,r11
	r11.s64 = r11.s64 - r29.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// mr r11,r23
	r11.u64 = r23.u64;
loc_82729FF8:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// clrlwi r25,r20,30
	r25.u64 = r20.u32 & 0x3;
	// clrlwi r24,r22,30
	r24.u64 = r22.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// li r6,8
	ctx.r6.s64 = 8;
	// stw r11,0(r21)
	PPC_STORE_U32(r21.u32 + 0, r11.u32);
	// rlwinm r11,r25,2,0,29
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// addi r5,r28,256
	ctx.r5.s64 = r28.s64 + 256;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r8,r24
	ctx.r8.u64 = r24.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r7,r25
	ctx.r7.u64 = r25.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r21)
	r11.u64 = PPC_LOAD_U32(r21.u32 + 0);
	// srawi r10,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r10.s64 = r11.s32 >> 4;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8272a0cc
	if (!cr0.eq) goto loc_8272A0CC;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r26
	// addi r11,r29,128
	r11.s64 = r29.s64 + 128;
	// dcbt r11,r26
	// addi r11,r29,64
	r11.s64 = r29.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r26
	// rlwinm r11,r29,1,0,30
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r26
	// addi r11,r29,32
	r11.s64 = r29.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r26
	// rlwinm r11,r29,2,0,29
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r26
	// rlwinm r11,r29,1,0,30
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r26
	// rlwinm r11,r29,3,0,28
	r11.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r29,r11
	r11.s64 = r11.s64 - r29.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r26
	// mr r11,r23
	r11.u64 = r23.u64;
loc_8272A0CC:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// li r6,8
	ctx.r6.s64 = 8;
	// addi r5,r28,320
	ctx.r5.s64 = r28.s64 + 320;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// stw r11,0(r21)
	PPC_STORE_U32(r21.u32 + 0, r11.u32);
	// rlwinm r11,r25,2,0,29
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// mr r8,r24
	ctx.r8.u64 = r24.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r25
	ctx.r7.u64 = r25.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r11,r27,16
	r11.s64 = r27.s64 + 16;
	// addi r10,r27,32
	ctx.r10.s64 = r27.s64 + 32;
	// lvx128 v13,r0,r28
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r27,48
	ctx.r9.s64 = r27.s64 + 48;
	// lvx128 v0,r0,r27
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r27,64
	ctx.r8.s64 = r27.s64 + 64;
	// addi r6,r27,80
	ctx.r6.s64 = r27.s64 + 80;
	// lvx128 v12,r0,r11
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r27,112
	r11.s64 = r27.s64 + 112;
	// lvx128 v11,r0,r10
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r28,16
	ctx.r10.s64 = r28.s64 + 16;
	// lvx128 v10,r0,r9
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r28,32
	ctx.r9.s64 = r28.s64 + 32;
	// addi r5,r27,96
	ctx.r5.s64 = r27.s64 + 96;
	// lvx128 v9,r0,r8
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v8,r0,r6
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r7,r30,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// lvx128 v6,r0,r11
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r28,48
	r11.s64 = r28.s64 + 48;
	// lvx128 v5,r0,r10
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r28,64
	ctx.r10.s64 = r28.s64 + 64;
	// lvx128 v4,r0,r9
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r28,80
	ctx.r9.s64 = r28.s64 + 80;
	// lvx128 v7,r0,r5
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r5.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r26,r28,96
	r26.s64 = r28.s64 + 96;
	// addi r25,r28,112
	r25.s64 = r28.s64 + 112;
	// lvx128 v3,r0,r11
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1680
	r11.s64 = ctx.r1.s64 + 1680;
	// rlwinm r8,r30,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r6,r7,r30
	ctx.r6.u64 = ctx.r7.u64 + r30.u64;
	// add r5,r8,r30
	ctx.r5.u64 = ctx.r8.u64 + r30.u64;
	// add r4,r8,r7
	ctx.r4.u64 = ctx.r8.u64 + ctx.r7.u64;
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1808
	r11.s64 = ctx.r1.s64 + 1808;
	// add r3,r6,r8
	ctx.r3.u64 = ctx.r6.u64 + ctx.r8.u64;
	// stvx v13,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1456
	r11.s64 = ctx.r1.s64 + 1456;
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1488
	r11.s64 = ctx.r1.s64 + 1488;
	// stvx v11,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1712
	r11.s64 = ctx.r1.s64 + 1712;
	// stvx v10,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1520
	r11.s64 = ctx.r1.s64 + 1520;
	// stvx v9,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1872
	r11.s64 = ctx.r1.s64 + 1872;
	// stvx v8,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1584
	r11.s64 = ctx.r1.s64 + 1584;
	// stvx v7,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1248
	r11.s64 = ctx.r1.s64 + 1248;
	// stvx v6,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1552
	r11.s64 = ctx.r1.s64 + 1552;
	// stvx v5,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1744
	r11.s64 = ctx.r1.s64 + 1744;
	// stvx v4,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r27,128
	r11.s64 = r27.s64 + 128;
	// lvx128 v2,r0,r10
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r28,128
	ctx.r10.s64 = r28.s64 + 128;
	// lvx128 v1,r0,r9
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r28,168(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// rlwinm r9,r30,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// lvx128 v31,r0,r26
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r26.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v30,r0,r25
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r25.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r9,r9,r28
	ctx.r9.u64 = ctx.r9.u64 + r28.u64;
	// vavgub v0,v0,v13
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v13.u8)));
	// addi r27,r11,16
	r27.s64 = r11.s64 + 16;
	// vavgub v13,v12,v5
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// addi r26,r11,64
	r26.s64 = r11.s64 + 64;
	// vavgub v12,v11,v4
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v4.u8)));
	// addi r25,r11,80
	r25.s64 = r11.s64 + 80;
	// vavgub v11,v10,v3
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// addi r24,r10,16
	r24.s64 = ctx.r10.s64 + 16;
	// stvx v0,r0,r28
	_mm_store_si128((__m128i*)(base + ((r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v10,v9,v2
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v2.u8)));
	// stvx128 v13,r28,r30
	_mm_store_si128((__m128i*)(base + ((r28.u32 + r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v9,v8,v1
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// stvx128 v12,r7,r28
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32 + r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v8,v7,v31
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)v31.u8)));
	// stvx128 v11,r6,r28
	_mm_store_si128((__m128i*)(base + ((ctx.r6.u32 + r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v7,v6,v30
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)v30.u8)));
	// stvx128 v10,r8,r28
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32 + r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r23,r10,32
	r23.s64 = ctx.r10.s64 + 32;
	// stvx128 v9,r5,r28
	_mm_store_si128((__m128i*)(base + ((ctx.r5.u32 + r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v8,r4,r28
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32 + r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v7,r3,r28
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32 + r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r1,1680
	r28.s64 = ctx.r1.s64 + 1680;
	// lvx128 v0,r0,r11
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v0,r0,r28
	_mm_store_si128((__m128i*)(base + ((r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r1,1456
	r28.s64 = ctx.r1.s64 + 1456;
	// lvx128 v13,r0,r27
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r1,1808
	r27.s64 = ctx.r1.s64 + 1808;
	// stvx v13,r0,r28
	_mm_store_si128((__m128i*)(base + ((r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r11,32
	r28.s64 = r11.s64 + 32;
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v12,r0,r27
	_mm_store_si128((__m128i*)(base + ((r27.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r11,48
	r27.s64 = r11.s64 + 48;
	// vavgub v0,v0,v12
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v12.u8)));
	// lvx128 v11,r0,r28
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r1,1488
	r28.s64 = ctx.r1.s64 + 1488;
	// stvx v11,r0,r28
	_mm_store_si128((__m128i*)(base + ((r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r10,48
	r28.s64 = ctx.r10.s64 + 48;
	// lvx128 v10,r0,r27
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r1,1712
	r27.s64 = ctx.r1.s64 + 1712;
	// stvx v10,r0,r27
	_mm_store_si128((__m128i*)(base + ((r27.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r10,64
	r27.s64 = ctx.r10.s64 + 64;
	// lvx128 v9,r0,r26
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r26.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r26,r1,1520
	r26.s64 = ctx.r1.s64 + 1520;
	// stvx v9,r0,r26
	_mm_store_si128((__m128i*)(base + ((r26.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r26,r10,80
	r26.s64 = ctx.r10.s64 + 80;
	// lvx128 v8,r0,r25
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r25.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r25,r1,1872
	r25.s64 = ctx.r1.s64 + 1872;
	// stvx v8,r0,r25
	_mm_store_si128((__m128i*)(base + ((r25.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r25,r1,1552
	r25.s64 = ctx.r1.s64 + 1552;
	// lvx128 v7,r0,r24
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r24.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v13,v13,v7
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// stvx v7,r0,r25
	_mm_store_si128((__m128i*)(base + ((r25.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r25,r1,1744
	r25.s64 = ctx.r1.s64 + 1744;
	// lvx128 v6,r0,r23
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r23.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v12,v11,v6
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// stvx v6,r0,r25
	_mm_store_si128((__m128i*)(base + ((r25.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r25,r10,112
	r25.s64 = ctx.r10.s64 + 112;
	// lvx128 v5,r0,r28
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r10,96
	r28.s64 = ctx.r10.s64 + 96;
	// lvx128 v4,r0,r27
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r11,96
	r27.s64 = r11.s64 + 96;
	// lvx128 v3,r0,r26
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r26.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r26,r11,112
	r26.s64 = r11.s64 + 112;
	// vavgub v11,v10,v5
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// vavgub v10,v9,v4
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v4.u8)));
	// addi r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 128;
	// lvx128 v2,r0,r28
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r1,1584
	r28.s64 = ctx.r1.s64 + 1584;
	// lvx128 v1,r0,r27
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v9,v8,v3
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// vavgub v8,v1,v2
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)ctx.v2.u8)));
	// stvx v1,r0,r28
	_mm_store_si128((__m128i*)(base + ((r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r1,1248
	r28.s64 = ctx.r1.s64 + 1248;
	// lvx128 v31,r0,r26
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r26.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v31,r0,r28
	_mm_store_si128((__m128i*)(base + ((r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v30,r0,r25
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r25.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v0,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v7,v31,v30
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)v30.u8)));
	// stvx128 v13,r9,r30
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32 + r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v12,r9,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32 + ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v11,r9,r6
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32 + ctx.r6.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r30,r11,48
	r30.s64 = r11.s64 + 48;
	// stvx128 v10,r9,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32 + ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r11,16
	ctx.r8.s64 = r11.s64 + 16;
	// stvx128 v9,r9,r5
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32 + ctx.r5.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r5,r11,32
	ctx.r5.s64 = r11.s64 + 32;
	// stvx128 v8,r9,r4
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32 + ctx.r4.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r28,r11,64
	r28.s64 = r11.s64 + 64;
	// stvx128 v7,r9,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32 + ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r11,80
	r27.s64 = r11.s64 + 80;
	// lvx128 v0,r0,r11
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r26,r11,96
	r26.s64 = r11.s64 + 96;
	// addi r25,r11,112
	r25.s64 = r11.s64 + 112;
	// lvx128 v13,r0,r8
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1040
	r11.s64 = ctx.r1.s64 + 1040;
	// lvx128 v9,r0,r5
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r5.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v8,r0,r30
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r10,16
	ctx.r7.s64 = ctx.r10.s64 + 16;
	// lvx128 v7,r0,r28
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r28.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r6,r10,32
	ctx.r6.s64 = ctx.r10.s64 + 32;
	// lvx128 v6,r0,r27
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r24,r10,48
	r24.s64 = ctx.r10.s64 + 48;
	// lvx128 v5,r0,r26
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r26.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r23,r10,64
	r23.s64 = ctx.r10.s64 + 64;
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,912
	r11.s64 = ctx.r1.s64 + 912;
	// lvx128 v4,r0,r25
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r25.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r22,r10,80
	r22.s64 = ctx.r10.s64 + 80;
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r21,r10,96
	r21.s64 = ctx.r10.s64 + 96;
	// vavgub v0,v0,v12
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v12.u8)));
	// lvx128 v11,r0,r7
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r20,r10,112
	r20.s64 = ctx.r10.s64 + 112;
	// lwz r10,172(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// stvx v13,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1168
	r11.s64 = ctx.r1.s64 + 1168;
	// vavgub v13,v13,v11
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v11.u8)));
	// lvx128 v10,r0,r6
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v3,r0,r24
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r24.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v2,r0,r23
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r23.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v1,r0,r22
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r22.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v9,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,944
	r11.s64 = ctx.r1.s64 + 944;
	// lvx128 v31,r0,r21
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r21.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v30,r0,r20
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r20.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v8,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1072
	r11.s64 = ctx.r1.s64 + 1072;
	// stvx v7,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,704
	r11.s64 = ctx.r1.s64 + 704;
	// stvx v6,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,720
	r11.s64 = ctx.r1.s64 + 720;
	// stvx v5,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,736
	r11.s64 = ctx.r1.s64 + 736;
	// stvx v4,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1040
	r11.s64 = ctx.r1.s64 + 1040;
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,912
	r11.s64 = ctx.r1.s64 + 912;
	// vavgub v0,v9,v10
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v10.u8)));
	// stvx v13,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r11,r29,r10
	r11.u64 = r29.u64 + ctx.r10.u64;
	// vavgub v13,v7,v2
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v2.u8)));
	// addi r30,r1,944
	r30.s64 = ctx.r1.s64 + 944;
	// lwz r9,1040(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1040);
	// lwz r8,1044(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1044);
	// lwz r7,1048(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1048);
	// lwz r6,1052(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1052);
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// stw r8,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r8.u32);
	// addi r10,r1,1168
	ctx.r10.s64 = ctx.r1.s64 + 1168;
	// lwz r9,180(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r5,912(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 912);
	// lwz r4,916(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 916);
	// lwz r8,920(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 920);
	// stvx v0,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v0,v8,v3
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// lwz r3,924(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 924);
	// add r10,r29,r9
	ctx.r10.u64 = r29.u64 + ctx.r9.u64;
	// stvx v0,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r30,r1,1072
	r30.s64 = ctx.r1.s64 + 1072;
	// vavgub v0,v6,v1
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// stvx v13,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r30,r1,704
	r30.s64 = ctx.r1.s64 + 704;
	// stw r7,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r7.u32);
	// stw r6,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r6.u32);
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// lwz r7,1168(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1168);
	// vavgub v13,v4,v30
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)v30.u8)));
	// lwz r6,1172(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1172);
	// lwz r28,1180(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1180);
	// stvx v0,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r30,r1,720
	r30.s64 = ctx.r1.s64 + 720;
	// stw r5,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r5.u32);
	// vavgub v0,v5,v31
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)v31.u8)));
	// stw r4,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r4.u32);
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// lwz r27,944(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 944);
	// lwz r26,948(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 948);
	// stvx v0,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r30,r1,736
	r30.s64 = ctx.r1.s64 + 736;
	// lwz r25,952(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 952);
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// stw r3,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r3.u32);
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// lwz r24,956(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 956);
	// stvx v13,r0,r30
	_mm_store_si128((__m128i*)(base + ((r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r30,1176(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1176);
	// lwz r23,1072(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1072);
	// lwz r22,1076(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1076);
	// stw r7,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r7.u32);
	// stw r6,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r6.u32);
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// lwz r21,1080(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1080);
	// lwz r20,1084(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1084);
	// stw r30,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r30.u32);
	// stw r28,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r28.u32);
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// stw r27,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r27.u32);
	// stw r26,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r26.u32);
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// stw r25,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r25.u32);
	// stw r24,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r24.u32);
	// add r11,r10,r29
	r11.u64 = ctx.r10.u64 + r29.u64;
	// stw r23,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r23.u32);
	// stw r22,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, r22.u32);
	// stw r21,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r21.u32);
	// stw r20,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r20.u32);
	// lwz r23,2772(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2772);
	// lwz r19,704(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 704);
	// lwz r18,708(r1)
	r18.u64 = PPC_LOAD_U32(ctx.r1.u32 + 708);
	// lwz r17,712(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 712);
	// lwz r16,716(r1)
	r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 716);
	// stw r19,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r19.u32);
	// stw r18,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r18.u32);
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// lwz r10,720(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 720);
	// lwz r9,724(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 724);
	// lwz r8,728(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 728);
	// lwz r7,732(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 732);
	// stw r17,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r17.u32);
	// stw r16,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r16.u32);
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// lwz r6,736(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 736);
	// li r16,0
	r16.s64 = 0;
	// lwz r5,740(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 740);
	// lwz r4,744(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 744);
	// lwz r3,748(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 748);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// stw r9,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r9.u32);
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// stw r7,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r7.u32);
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// stw r6,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r6.u32);
	// stw r5,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r5.u32);
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// stw r4,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r4.u32);
	// stw r3,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r3.u32);
	// mr r3,r16
	ctx.r3.u64 = r16.u64;
	// b 0x827326c0
	goto loc_827326C0;
loc_8272A5D0:
	// addi r10,r31,74
	ctx.r10.s64 = r31.s64 + 74;
	// lwz r18,160(r1)
	r18.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// cmpwi cr6,r18,0
	cr6.compare<int32_t>(r18.s32, 0, xer);
	// lhz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// rotlwi r14,r10,1
	r14.u64 = __builtin_rotateleft32(ctx.r10.u32, 1);
	// stw r14,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r14.u32);
	// beq cr6,0x8272a60c
	if (cr6.eq) goto loc_8272A60C;
	// lwz r10,1240(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1240);
	// rlwinm r9,r18,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r18.u32 | (r18.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r10,r9
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x8272a60c
	if (!cr6.eq) goto loc_8272A60C;
	// li r20,0
	r20.s64 = 0;
	// mr r16,r20
	r16.u64 = r20.u64;
	// b 0x8272a614
	goto loc_8272A614;
loc_8272A60C:
	// li r16,1
	r16.s64 = 1;
	// li r20,0
	r20.s64 = 0;
loc_8272A614:
	// lwz r10,0(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// addi r8,r31,50
	ctx.r8.s64 = r31.s64 + 50;
	// lwz r29,392(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 392);
	// rlwinm r9,r11,27,29,31
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 27) & 0x7;
	// lwz r3,296(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 296);
	// lwz r6,344(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 344);
	// add r29,r29,r10
	r29.u64 = r29.u64 + ctx.r10.u64;
	// add r3,r3,r10
	ctx.r3.u64 = ctx.r3.u64 + ctx.r10.u64;
	// lwz r11,0(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	// add r10,r6,r10
	ctx.r10.u64 = ctx.r6.u64 + ctx.r10.u64;
	// lhz r17,0(r8)
	r17.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// lwz r28,408(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 408);
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// lwz r30,412(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 412);
	// lwz r4,312(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 312);
	// add r28,r28,r11
	r28.u64 = r28.u64 + r11.u64;
	// lwz r5,316(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 316);
	// add r30,r30,r11
	r30.u64 = r30.u64 + r11.u64;
	// lwz r7,360(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 360);
	// add r4,r4,r11
	ctx.r4.u64 = ctx.r4.u64 + r11.u64;
	// lwz r8,364(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 364);
	// add r5,r5,r11
	ctx.r5.u64 = ctx.r5.u64 + r11.u64;
	// stw r10,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, ctx.r10.u32);
	// add r10,r7,r11
	ctx.r10.u64 = ctx.r7.u64 + r11.u64;
	// lwz r15,188(r31)
	r15.u64 = PPC_LOAD_U32(r31.u32 + 188);
	// add r11,r8,r11
	r11.u64 = ctx.r8.u64 + r11.u64;
	// lwz r26,0(r23)
	r26.u64 = PPC_LOAD_U32(r23.u32 + 0);
	// cmplwi cr6,r9,6
	cr6.compare<uint32_t>(ctx.r9.u32, 6, xer);
	// stw r16,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, r16.u32);
	// stw r28,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, r28.u32);
	// stw r29,188(r1)
	PPC_STORE_U32(ctx.r1.u32 + 188, r29.u32);
	// stw r15,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r15.u32);
	// stw r30,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, r30.u32);
	// stw r3,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, ctx.r3.u32);
	// stw r4,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, ctx.r4.u32);
	// stw r5,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r5.u32);
	// stw r10,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, ctx.r10.u32);
	// stw r11,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r11.u32);
	// ble cr6,0x8272a6b4
	if (!cr6.gt) goto loc_8272A6B4;
	// b 0x827326bc
	goto loc_827326BC;
loc_8272A6B4:
	// lis r12,-32141
	r12.s64 = -2106392576;
	// addi r12,r12,-22836
	r12.s64 = r12.s64 + -22836;
	// rlwinm r0,r9,2,0,29
	r0.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r9.u64) {
	case 0:
		goto loc_8272CF4C;
	case 1:
		goto loc_8272E57C;
	case 2:
		goto loc_8272BB14;
	case 3:
		goto loc_8272A6E8;
	case 4:
		goto loc_827326BC;
	case 5:
		goto loc_82730818;
	case 6:
		goto loc_82731768;
	default:
		__builtin_unreachable();
	}
	// lwz r19,-12468(r18)
	r19.u64 = PPC_LOAD_U32(r18.u32 + -12468);
	// lwz r19,-6788(r18)
	r19.u64 = PPC_LOAD_U32(r18.u32 + -6788);
	// lwz r19,-17644(r18)
	r19.u64 = PPC_LOAD_U32(r18.u32 + -17644);
	// lwz r19,-22808(r18)
	r19.u64 = PPC_LOAD_U32(r18.u32 + -22808);
	// lwz r19,9916(r19)
	r19.u64 = PPC_LOAD_U32(r19.u32 + 9916);
	// lwz r19,2072(r19)
	r19.u64 = PPC_LOAD_U32(r19.u32 + 2072);
	// lwz r19,5992(r19)
	r19.u64 = PPC_LOAD_U32(r19.u32 + 5992);
loc_8272A6E8:
	// lwz r23,136(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// mullw r11,r17,r18
	r11.s64 = int64_t(r17.s32) * int64_t(r18.s32);
	// add r11,r11,r23
	r11.u64 = r11.u64 + r23.u64;
	// lwz r28,1492(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// lwz r27,1496(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lwz r21,1500(r31)
	r21.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// lwz r19,1504(r31)
	r19.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lwz r22,112(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// stw r20,552(r1)
	PPC_STORE_U32(ctx.r1.u32 + 552, r20.u32);
	// stw r20,548(r1)
	PPC_STORE_U32(ctx.r1.u32 + 548, r20.u32);
	// stw r20,544(r1)
	PPC_STORE_U32(ctx.r1.u32 + 544, r20.u32);
	// mr r10,r20
	ctx.r10.u64 = r20.u64;
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// srawi r7,r17,1
	xer.ca = (r17.s32 < 0) & ((r17.u32 & 0x1) != 0);
	ctx.r7.s64 = r17.s32 >> 1;
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// beq cr6,0x8272a754
	if (cr6.eq) goto loc_8272A754;
	// lwz r8,-20(r22)
	ctx.r8.u64 = PPC_LOAD_U32(r22.u32 + -20);
	// addi r11,r9,-2
	r11.s64 = ctx.r9.s64 + -2;
	// rlwinm r8,r8,0,14,14
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x8272a754
	if (cr6.eq) goto loc_8272A754;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// li r10,1
	ctx.r10.s64 = 1;
	// lhzx r8,r11,r28
	ctx.r8.u64 = PPC_LOAD_U16(r11.u32 + r28.u32);
	// lhzx r11,r11,r27
	r11.u64 = PPC_LOAD_U16(r11.u32 + r27.u32);
	// sth r8,546(r1)
	PPC_STORE_U16(ctx.r1.u32 + 546, ctx.r8.u16);
	// sth r11,544(r1)
	PPC_STORE_U16(ctx.r1.u32 + 544, r11.u16);
loc_8272A754:
	// cmpwi cr6,r16,0
	cr6.compare<int32_t>(r16.s32, 0, xer);
	// bne cr6,0x8272a824
	if (!cr6.eq) goto loc_8272A824;
	// rlwinm r11,r17,1,0,30
	r11.u64 = __builtin_rotateleft64(r17.u32 | (r17.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r8,r11,r9
	ctx.r8.s64 = ctx.r9.s64 - r11.s64;
	// rlwinm r11,r7,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r7,r11
	r11.u64 = ctx.r7.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r6,r11,r22
	ctx.r6.s64 = r22.s64 - r11.s64;
	// lwz r11,0(r6)
	r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + 0);
	// rlwinm r11,r11,0,14,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272a7a8
	if (cr6.eq) goto loc_8272A7A8;
	// rlwinm r11,r8,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r5,r1,546
	ctx.r5.s64 = ctx.r1.s64 + 546;
	// addi r4,r1,544
	ctx.r4.s64 = ctx.r1.s64 + 544;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// lhzx r3,r11,r28
	ctx.r3.u64 = PPC_LOAD_U16(r11.u32 + r28.u32);
	// lhzx r11,r11,r27
	r11.u64 = PPC_LOAD_U16(r11.u32 + r27.u32);
	// sthx r3,r9,r5
	PPC_STORE_U16(ctx.r9.u32 + ctx.r5.u32, ctx.r3.u16);
	// sthx r11,r9,r4
	PPC_STORE_U16(ctx.r9.u32 + ctx.r4.u32, r11.u16);
loc_8272A7A8:
	// cmpwi cr6,r7,1
	cr6.compare<int32_t>(ctx.r7.s32, 1, xer);
	// beq cr6,0x8272a824
	if (cr6.eq) goto loc_8272A824;
	// addi r9,r7,-1
	ctx.r9.s64 = ctx.r7.s64 + -1;
	// li r11,1
	r11.s64 = 1;
	// cmpw cr6,r23,r9
	cr6.compare<int32_t>(r23.s32, ctx.r9.s32, xer);
	// blt cr6,0x8272a7c4
	if (cr6.lt) goto loc_8272A7C4;
	// mr r11,r20
	r11.u64 = r20.u64;
loc_8272A7C4:
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpw cr6,r23,r9
	cr6.compare<int32_t>(r23.s32, ctx.r9.s32, xer);
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// addi r8,r11,-2
	ctx.r8.s64 = r11.s64 + -2;
	// li r11,1
	r11.s64 = 1;
	// blt cr6,0x8272a7e0
	if (cr6.lt) goto loc_8272A7E0;
	// mr r11,r20
	r11.u64 = r20.u64;
loc_8272A7E0:
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// lwz r11,-20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -20);
	// rlwinm r11,r11,0,14,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272a824
	if (cr6.eq) goto loc_8272A824;
	// rlwinm r11,r8,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r1,546
	ctx.r8.s64 = ctx.r1.s64 + 546;
	// addi r7,r1,544
	ctx.r7.s64 = ctx.r1.s64 + 544;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// lhzx r6,r11,r28
	ctx.r6.u64 = PPC_LOAD_U16(r11.u32 + r28.u32);
	// lhzx r11,r11,r27
	r11.u64 = PPC_LOAD_U16(r11.u32 + r27.u32);
	// sthx r6,r9,r8
	PPC_STORE_U16(ctx.r9.u32 + ctx.r8.u32, ctx.r6.u16);
	// sthx r11,r9,r7
	PPC_STORE_U16(ctx.r9.u32 + ctx.r7.u32, r11.u16);
loc_8272A824:
	// mr r6,r20
	ctx.r6.u64 = r20.u64;
	// mr r5,r20
	ctx.r5.u64 = r20.u64;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x8272a960
	if (!cr6.gt) goto loc_8272A960;
	// addi r9,r1,2448
	ctx.r9.s64 = ctx.r1.s64 + 2448;
	// addi r11,r1,544
	r11.s64 = ctx.r1.s64 + 544;
	// addi r8,r1,2128
	ctx.r8.s64 = ctx.r1.s64 + 2128;
	// mr r7,r10
	ctx.r7.u64 = ctx.r10.u64;
loc_8272A844:
	// lhz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rlwinm r4,r4,0,29,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// beq cr6,0x8272a868
	if (cr6.eq) goto loc_8272A868;
	// stw r4,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r4.u32);
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// addi r8,r8,4
	ctx.r8.s64 = ctx.r8.s64 + 4;
	// b 0x8272a874
	goto loc_8272A874;
loc_8272A868:
	// stw r4,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r4.u32);
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
loc_8272A874:
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// bne cr6,0x8272a844
	if (!cr6.eq) goto loc_8272A844;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x8272a960
	if (!cr6.gt) goto loc_8272A960;
	// cmpwi cr6,r6,3
	cr6.compare<int32_t>(ctx.r6.s32, 3, xer);
	// beq cr6,0x8272a8bc
	if (cr6.eq) goto loc_8272A8BC;
	// cmpwi cr6,r5,3
	cr6.compare<int32_t>(ctx.r5.s32, 3, xer);
	// beq cr6,0x8272a8bc
	if (cr6.eq) goto loc_8272A8BC;
	// cmpw cr6,r6,r5
	cr6.compare<int32_t>(ctx.r6.s32, ctx.r5.s32, xer);
	// blt cr6,0x8272a8b0
	if (cr6.lt) goto loc_8272A8B0;
	// lwz r11,2448(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2448);
	// stw r11,472(r1)
	PPC_STORE_U32(ctx.r1.u32 + 472, r11.u32);
	// b 0x8272a964
	goto loc_8272A964;
loc_8272A8B0:
	// lwz r11,2128(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2128);
	// stw r11,472(r1)
	PPC_STORE_U32(ctx.r1.u32 + 472, r11.u32);
	// b 0x8272a964
	goto loc_8272A964;
loc_8272A8BC:
	// lhz r11,550(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 550);
	// lhz r10,546(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 546);
	// lhz r7,554(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 554);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lhz r9,548(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 548);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// lhz r8,544(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 544);
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// lhz r6,552(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 552);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// subf r5,r10,r11
	ctx.r5.s64 = r11.s64 - ctx.r10.s64;
	// subf r3,r7,r11
	ctx.r3.s64 = r11.s64 - ctx.r7.s64;
	// subf r30,r10,r7
	r30.s64 = ctx.r7.s64 - ctx.r10.s64;
	// subf r4,r8,r9
	ctx.r4.s64 = ctx.r9.s64 - ctx.r8.s64;
	// subf r29,r6,r9
	r29.s64 = ctx.r9.s64 - ctx.r6.s64;
	// subf r25,r8,r6
	r25.s64 = ctx.r6.s64 - ctx.r8.s64;
	// xor r3,r3,r5
	ctx.r3.u64 = ctx.r3.u64 ^ ctx.r5.u64;
	// xor r30,r30,r5
	r30.u64 = r30.u64 ^ ctx.r5.u64;
	// xor r29,r29,r4
	r29.u64 = r29.u64 ^ ctx.r4.u64;
	// srawi r5,r3,31
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = ctx.r3.s32 >> 31;
	// xor r25,r25,r4
	r25.u64 = r25.u64 ^ ctx.r4.u64;
	// srawi r4,r30,31
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x7FFFFFFF) != 0);
	ctx.r4.s64 = r30.s32 >> 31;
	// srawi r3,r29,31
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r29.s32 >> 31;
	// srawi r30,r25,31
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x7FFFFFFF) != 0);
	r30.s64 = r25.s32 >> 31;
	// or r29,r5,r4
	r29.u64 = ctx.r5.u64 | ctx.r4.u64;
	// or r25,r3,r30
	r25.u64 = ctx.r3.u64 | r30.u64;
	// and r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 & ctx.r10.u64;
	// andc r7,r7,r29
	ctx.r7.u64 = ctx.r7.u64 & ~r29.u64;
	// andc r6,r6,r25
	ctx.r6.u64 = ctx.r6.u64 & ~r25.u64;
	// and r8,r30,r8
	ctx.r8.u64 = r30.u64 & ctx.r8.u64;
	// or r10,r7,r10
	ctx.r10.u64 = ctx.r7.u64 | ctx.r10.u64;
	// and r11,r5,r11
	r11.u64 = ctx.r5.u64 & r11.u64;
	// or r8,r6,r8
	ctx.r8.u64 = ctx.r6.u64 | ctx.r8.u64;
	// and r9,r3,r9
	ctx.r9.u64 = ctx.r3.u64 & ctx.r9.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// or r10,r8,r9
	ctx.r10.u64 = ctx.r8.u64 | ctx.r9.u64;
	// sth r11,474(r1)
	PPC_STORE_U16(ctx.r1.u32 + 474, r11.u16);
	// sth r10,472(r1)
	PPC_STORE_U16(ctx.r1.u32 + 472, ctx.r10.u16);
	// b 0x8272a964
	goto loc_8272A964;
loc_8272A960:
	// stw r20,472(r1)
	PPC_STORE_U32(ctx.r1.u32 + 472, r20.u32);
loc_8272A964:
	// rlwinm r11,r26,2,0,29
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 2) & 0xFFFFFFFC;
	// lhz r10,474(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 474);
	// lhz r8,66(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 66);
	// rlwinm r29,r26,1,0,30
	r29.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 1) & 0xFFFFFFFE;
	// extsh r7,r10
	ctx.r7.s64 = ctx.r10.s16;
	// lhz r10,472(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 472);
	// extsh r3,r8
	ctx.r3.s64 = ctx.r8.s16;
	// stw r20,568(r1)
	PPC_STORE_U32(ctx.r1.u32 + 568, r20.u32);
	// extsh r6,r10
	ctx.r6.s64 = ctx.r10.s16;
	// lhz r10,62(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 62);
	// lwzx r11,r11,r15
	r11.u64 = PPC_LOAD_U32(r11.u32 + r15.u32);
	// add r9,r28,r29
	ctx.r9.u64 = r28.u64 + r29.u64;
	// add r8,r27,r29
	ctx.r8.u64 = r27.u64 + r29.u64;
	// stw r20,564(r1)
	PPC_STORE_U32(ctx.r1.u32 + 564, r20.u32);
	// rlwinm r5,r11,16,16,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF;
	// stw r20,560(r1)
	PPC_STORE_U32(ctx.r1.u32 + 560, r20.u32);
	// add r11,r7,r11
	r11.u64 = ctx.r7.u64 + r11.u64;
	// mr r7,r5
	ctx.r7.u64 = ctx.r5.u64;
	// extsh r5,r10
	ctx.r5.s64 = ctx.r10.s16;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// and r11,r11,r3
	r11.u64 = r11.u64 & ctx.r3.u64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// extsh r10,r7
	ctx.r10.s64 = ctx.r7.s16;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// add r10,r10,r6
	ctx.r10.u64 = ctx.r10.u64 + ctx.r6.u64;
	// mr r24,r11
	r24.u64 = r11.u64;
	// sth r11,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, r11.u16);
	// sth r11,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, r11.u16);
	// lhz r9,68(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 68);
	// lhz r11,64(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 64);
	// extsh r7,r9
	ctx.r7.s64 = ctx.r9.s16;
	// extsh r9,r11
	ctx.r9.s64 = r11.s16;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// and r10,r10,r7
	ctx.r10.u64 = ctx.r10.u64 & ctx.r7.u64;
	// subf r11,r11,r10
	r11.s64 = ctx.r10.s64 - r11.s64;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// mr r25,r11
	r25.u64 = r11.u64;
	// sth r11,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, r11.u16);
	// sth r11,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, r11.u16);
	// addi r11,r31,50
	r11.s64 = r31.s64 + 50;
	// lhz r11,0(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// mullw r10,r11,r18
	ctx.r10.s64 = int64_t(r11.s32) * int64_t(r18.s32);
	// add r10,r10,r23
	ctx.r10.u64 = ctx.r10.u64 + r23.u64;
	// srawi r9,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r9.s64 = r11.s32 >> 1;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// beq cr6,0x8272aa50
	if (cr6.eq) goto loc_8272AA50;
	// lwz r7,-20(r22)
	ctx.r7.u64 = PPC_LOAD_U32(r22.u32 + -20);
	// addi r8,r10,-2
	ctx.r8.s64 = ctx.r10.s64 + -2;
	// rlwinm r7,r7,0,14,14
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// beq cr6,0x8272aa50
	if (cr6.eq) goto loc_8272AA50;
	// rlwinm r8,r8,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// li r4,1
	ctx.r4.s64 = 1;
	// lhzx r7,r21,r8
	ctx.r7.u64 = PPC_LOAD_U16(r21.u32 + ctx.r8.u32);
	// lhzx r8,r19,r8
	ctx.r8.u64 = PPC_LOAD_U16(r19.u32 + ctx.r8.u32);
	// sth r7,562(r1)
	PPC_STORE_U16(ctx.r1.u32 + 562, ctx.r7.u16);
	// sth r8,560(r1)
	PPC_STORE_U16(ctx.r1.u32 + 560, ctx.r8.u16);
loc_8272AA50:
	// cmpwi cr6,r16,0
	cr6.compare<int32_t>(r16.s32, 0, xer);
	// bne cr6,0x8272ab20
	if (!cr6.eq) goto loc_8272AB20;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r8,r11,r10
	ctx.r8.s64 = ctx.r10.s64 - r11.s64;
	// rlwinm r11,r9,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r9,r11
	r11.u64 = ctx.r9.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r7,r11,r22
	ctx.r7.s64 = r22.s64 - r11.s64;
	// lwz r11,0(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// rlwinm r11,r11,0,14,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272aaa4
	if (cr6.eq) goto loc_8272AAA4;
	// rlwinm r11,r8,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r10,r4,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r6,r1,562
	ctx.r6.s64 = ctx.r1.s64 + 562;
	// addi r5,r1,560
	ctx.r5.s64 = ctx.r1.s64 + 560;
	// addi r4,r4,1
	ctx.r4.s64 = ctx.r4.s64 + 1;
	// lhzx r3,r21,r11
	ctx.r3.u64 = PPC_LOAD_U16(r21.u32 + r11.u32);
	// lhzx r11,r19,r11
	r11.u64 = PPC_LOAD_U16(r19.u32 + r11.u32);
	// sthx r3,r6,r10
	PPC_STORE_U16(ctx.r6.u32 + ctx.r10.u32, ctx.r3.u16);
	// sthx r11,r10,r5
	PPC_STORE_U16(ctx.r10.u32 + ctx.r5.u32, r11.u16);
loc_8272AAA4:
	// cmpwi cr6,r9,1
	cr6.compare<int32_t>(ctx.r9.s32, 1, xer);
	// beq cr6,0x8272ab20
	if (cr6.eq) goto loc_8272AB20;
	// addi r10,r9,-1
	ctx.r10.s64 = ctx.r9.s64 + -1;
	// li r11,1
	r11.s64 = 1;
	// cmpw cr6,r23,r10
	cr6.compare<int32_t>(r23.s32, ctx.r10.s32, xer);
	// blt cr6,0x8272aac0
	if (cr6.lt) goto loc_8272AAC0;
	// mr r11,r20
	r11.u64 = r20.u64;
loc_8272AAC0:
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpw cr6,r23,r10
	cr6.compare<int32_t>(r23.s32, ctx.r10.s32, xer);
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// addi r9,r11,-2
	ctx.r9.s64 = r11.s64 + -2;
	// li r11,1
	r11.s64 = 1;
	// blt cr6,0x8272aadc
	if (cr6.lt) goto loc_8272AADC;
	// mr r11,r20
	r11.u64 = r20.u64;
loc_8272AADC:
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// lwz r11,-20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -20);
	// rlwinm r11,r11,0,14,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272ab20
	if (cr6.eq) goto loc_8272AB20;
	// rlwinm r11,r9,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r10,r4,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r9,r1,562
	ctx.r9.s64 = ctx.r1.s64 + 562;
	// addi r8,r1,560
	ctx.r8.s64 = ctx.r1.s64 + 560;
	// addi r4,r4,1
	ctx.r4.s64 = ctx.r4.s64 + 1;
	// lhzx r7,r21,r11
	ctx.r7.u64 = PPC_LOAD_U16(r21.u32 + r11.u32);
	// lhzx r11,r19,r11
	r11.u64 = PPC_LOAD_U16(r19.u32 + r11.u32);
	// sthx r7,r9,r10
	PPC_STORE_U16(ctx.r9.u32 + ctx.r10.u32, ctx.r7.u16);
	// sthx r11,r10,r8
	PPC_STORE_U16(ctx.r10.u32 + ctx.r8.u32, r11.u16);
loc_8272AB20:
	// mr r7,r20
	ctx.r7.u64 = r20.u64;
	// mr r6,r20
	ctx.r6.u64 = r20.u64;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// ble cr6,0x8272ac64
	if (!cr6.gt) goto loc_8272AC64;
	// addi r10,r1,2352
	ctx.r10.s64 = ctx.r1.s64 + 2352;
	// addi r11,r1,560
	r11.s64 = ctx.r1.s64 + 560;
	// addi r9,r1,2160
	ctx.r9.s64 = ctx.r1.s64 + 2160;
	// mr r8,r4
	ctx.r8.u64 = ctx.r4.u64;
loc_8272AB40:
	// lhz r5,0(r11)
	ctx.r5.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rlwinm r5,r5,0,29,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// lwz r5,0(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// beq cr6,0x8272ab64
	if (cr6.eq) goto loc_8272AB64;
	// stw r5,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r5.u32);
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// b 0x8272ab70
	goto loc_8272AB70;
loc_8272AB64:
	// stw r5,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r5.u32);
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
loc_8272AB70:
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// bne cr6,0x8272ab40
	if (!cr6.eq) goto loc_8272AB40;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// ble cr6,0x8272ac64
	if (!cr6.gt) goto loc_8272AC64;
	// cmpwi cr6,r7,3
	cr6.compare<int32_t>(ctx.r7.s32, 3, xer);
	// beq cr6,0x8272abb8
	if (cr6.eq) goto loc_8272ABB8;
	// cmpwi cr6,r6,3
	cr6.compare<int32_t>(ctx.r6.s32, 3, xer);
	// beq cr6,0x8272abb8
	if (cr6.eq) goto loc_8272ABB8;
	// cmpw cr6,r7,r6
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r6.s32, xer);
	// blt cr6,0x8272abac
	if (cr6.lt) goto loc_8272ABAC;
	// lwz r11,2352(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2352);
	// stw r11,420(r1)
	PPC_STORE_U32(ctx.r1.u32 + 420, r11.u32);
	// b 0x8272ac68
	goto loc_8272AC68;
loc_8272ABAC:
	// lwz r11,2160(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2160);
	// stw r11,420(r1)
	PPC_STORE_U32(ctx.r1.u32 + 420, r11.u32);
	// b 0x8272ac68
	goto loc_8272AC68;
loc_8272ABB8:
	// lhz r11,566(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 566);
	// lhz r10,562(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 562);
	// lhz r7,570(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 570);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lhz r9,564(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 564);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// lhz r8,560(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 560);
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// lhz r6,568(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 568);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// subf r5,r10,r11
	ctx.r5.s64 = r11.s64 - ctx.r10.s64;
	// subf r3,r7,r11
	ctx.r3.s64 = r11.s64 - ctx.r7.s64;
	// subf r30,r10,r7
	r30.s64 = ctx.r7.s64 - ctx.r10.s64;
	// subf r4,r8,r9
	ctx.r4.s64 = ctx.r9.s64 - ctx.r8.s64;
	// subf r16,r6,r9
	r16.s64 = ctx.r9.s64 - ctx.r6.s64;
	// subf r15,r8,r6
	r15.s64 = ctx.r6.s64 - ctx.r8.s64;
	// xor r3,r3,r5
	ctx.r3.u64 = ctx.r3.u64 ^ ctx.r5.u64;
	// xor r30,r30,r5
	r30.u64 = r30.u64 ^ ctx.r5.u64;
	// xor r16,r16,r4
	r16.u64 = r16.u64 ^ ctx.r4.u64;
	// srawi r5,r3,31
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = ctx.r3.s32 >> 31;
	// xor r15,r15,r4
	r15.u64 = r15.u64 ^ ctx.r4.u64;
	// srawi r4,r30,31
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x7FFFFFFF) != 0);
	ctx.r4.s64 = r30.s32 >> 31;
	// srawi r3,r16,31
	xer.ca = (r16.s32 < 0) & ((r16.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r16.s32 >> 31;
	// srawi r30,r15,31
	xer.ca = (r15.s32 < 0) & ((r15.u32 & 0x7FFFFFFF) != 0);
	r30.s64 = r15.s32 >> 31;
	// or r16,r5,r4
	r16.u64 = ctx.r5.u64 | ctx.r4.u64;
	// or r15,r3,r30
	r15.u64 = ctx.r3.u64 | r30.u64;
	// andc r7,r7,r16
	ctx.r7.u64 = ctx.r7.u64 & ~r16.u64;
	// lwz r16,148(r1)
	r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// and r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 & ctx.r10.u64;
	// andc r6,r6,r15
	ctx.r6.u64 = ctx.r6.u64 & ~r15.u64;
	// lwz r15,132(r1)
	r15.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// and r8,r30,r8
	ctx.r8.u64 = r30.u64 & ctx.r8.u64;
	// or r10,r7,r10
	ctx.r10.u64 = ctx.r7.u64 | ctx.r10.u64;
	// and r11,r5,r11
	r11.u64 = ctx.r5.u64 & r11.u64;
	// or r8,r6,r8
	ctx.r8.u64 = ctx.r6.u64 | ctx.r8.u64;
	// and r9,r3,r9
	ctx.r9.u64 = ctx.r3.u64 & ctx.r9.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// or r10,r8,r9
	ctx.r10.u64 = ctx.r8.u64 | ctx.r9.u64;
	// sth r11,422(r1)
	PPC_STORE_U16(ctx.r1.u32 + 422, r11.u16);
	// sth r10,420(r1)
	PPC_STORE_U16(ctx.r1.u32 + 420, ctx.r10.u16);
	// b 0x8272ac68
	goto loc_8272AC68;
loc_8272AC64:
	// stw r20,420(r1)
	PPC_STORE_U32(ctx.r1.u32 + 420, r20.u32);
loc_8272AC68:
	// lhz r8,422(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 422);
	// add r10,r21,r29
	ctx.r10.u64 = r21.u64 + r29.u64;
	// add r9,r19,r29
	ctx.r9.u64 = r19.u64 + r29.u64;
	// stw r20,216(r1)
	PPC_STORE_U32(ctx.r1.u32 + 216, r20.u32);
	// add r29,r17,r26
	r29.u64 = r17.u64 + r26.u64;
	// stw r20,212(r1)
	PPC_STORE_U32(ctx.r1.u32 + 212, r20.u32);
	// mr r11,r20
	r11.u64 = r20.u64;
	// stw r20,208(r1)
	PPC_STORE_U32(ctx.r1.u32 + 208, r20.u32);
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// sth r8,2(r10)
	PPC_STORE_U16(ctx.r10.u32 + 2, ctx.r8.u16);
	// sth r8,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r8.u16);
	// lhz r10,420(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 420);
	// sth r10,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, ctx.r10.u16);
	// sth r10,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r10.u16);
	// addi r10,r31,50
	ctx.r10.s64 = r31.s64 + 50;
	// lhz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// mullw r9,r10,r18
	ctx.r9.s64 = int64_t(ctx.r10.s32) * int64_t(r18.s32);
	// add r9,r9,r23
	ctx.r9.u64 = ctx.r9.u64 + r23.u64;
	// srawi r6,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r6.s64 = ctx.r10.s32 >> 1;
	// rlwinm r8,r9,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// beq cr6,0x8272acf8
	if (cr6.eq) goto loc_8272ACF8;
	// lwz r7,-20(r22)
	ctx.r7.u64 = PPC_LOAD_U32(r22.u32 + -20);
	// addi r9,r8,-2
	ctx.r9.s64 = ctx.r8.s64 + -2;
	// rlwinm r5,r7,0,14,14
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x8272acf8
	if (cr6.eq) goto loc_8272ACF8;
	// rlwinm r11,r7,0,21,23
	r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 0) & 0x700;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// beq cr6,0x8272ace4
	if (cr6.eq) goto loc_8272ACE4;
	// add r9,r9,r10
	ctx.r9.u64 = ctx.r9.u64 + ctx.r10.u64;
loc_8272ACE4:
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r7,r28,r9
	ctx.r7.u64 = PPC_LOAD_U16(r28.u32 + ctx.r9.u32);
	// lhzx r9,r27,r9
	ctx.r9.u64 = PPC_LOAD_U16(r27.u32 + ctx.r9.u32);
	// sth r7,210(r1)
	PPC_STORE_U16(ctx.r1.u32 + 210, ctx.r7.u16);
	// sth r9,208(r1)
	PPC_STORE_U16(ctx.r1.u32 + 208, ctx.r9.u16);
loc_8272ACF8:
	// cmpwi cr6,r16,0
	cr6.compare<int32_t>(r16.s32, 0, xer);
	// bne cr6,0x8272ae24
	if (!cr6.eq) goto loc_8272AE24;
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r7,r9,r8
	ctx.r7.s64 = ctx.r8.s64 - ctx.r9.s64;
	// rlwinm r9,r6,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r6,r9
	ctx.r9.u64 = ctx.r6.u64 + ctx.r9.u64;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r5,r9,r22
	ctx.r5.s64 = r22.s64 - ctx.r9.s64;
	// lwz r9,0(r5)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	// rlwinm r8,r9,0,14,14
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x8272ad78
	if (cr6.eq) goto loc_8272AD78;
	// rlwinm r9,r9,0,21,23
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x700;
	// addi r4,r1,210
	ctx.r4.s64 = ctx.r1.s64 + 210;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bne cr6,0x8272ad58
	if (!cr6.eq) goto loc_8272AD58;
	// rlwinm r9,r7,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lhzx r30,r28,r9
	r30.u64 = PPC_LOAD_U16(r28.u32 + ctx.r9.u32);
	// lhzx r9,r27,r9
	ctx.r9.u64 = PPC_LOAD_U16(r27.u32 + ctx.r9.u32);
	// sthx r30,r4,r8
	PPC_STORE_U16(ctx.r4.u32 + ctx.r8.u32, r30.u16);
	// sthx r9,r8,r3
	PPC_STORE_U16(ctx.r8.u32 + ctx.r3.u32, ctx.r9.u16);
	// b 0x8272ad74
	goto loc_8272AD74;
loc_8272AD58:
	// add r8,r7,r10
	ctx.r8.u64 = ctx.r7.u64 + ctx.r10.u64;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r8,r8,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r30,r28,r8
	r30.u64 = PPC_LOAD_U16(r28.u32 + ctx.r8.u32);
	// lhzx r8,r27,r8
	ctx.r8.u64 = PPC_LOAD_U16(r27.u32 + ctx.r8.u32);
	// sthx r30,r4,r9
	PPC_STORE_U16(ctx.r4.u32 + ctx.r9.u32, r30.u16);
	// sthx r8,r9,r3
	PPC_STORE_U16(ctx.r9.u32 + ctx.r3.u32, ctx.r8.u16);
loc_8272AD74:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_8272AD78:
	// cmpwi cr6,r6,1
	cr6.compare<int32_t>(ctx.r6.s32, 1, xer);
	// beq cr6,0x8272ae24
	if (cr6.eq) goto loc_8272AE24;
	// addi r8,r6,-1
	ctx.r8.s64 = ctx.r6.s64 + -1;
	// li r9,1
	ctx.r9.s64 = 1;
	// cmpw cr6,r23,r8
	cr6.compare<int32_t>(r23.s32, ctx.r8.s32, xer);
	// blt cr6,0x8272ad94
	if (cr6.lt) goto loc_8272AD94;
	// mr r9,r20
	ctx.r9.u64 = r20.u64;
loc_8272AD94:
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpw cr6,r23,r8
	cr6.compare<int32_t>(r23.s32, ctx.r8.s32, xer);
	// add r9,r9,r7
	ctx.r9.u64 = ctx.r9.u64 + ctx.r7.u64;
	// addi r8,r9,-2
	ctx.r8.s64 = ctx.r9.s64 + -2;
	// li r9,1
	ctx.r9.s64 = 1;
	// blt cr6,0x8272adb0
	if (cr6.lt) goto loc_8272ADB0;
	// mr r9,r20
	ctx.r9.u64 = r20.u64;
loc_8272ADB0:
	// rlwinm r7,r9,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r9,r7
	ctx.r9.u64 = ctx.r9.u64 + ctx.r7.u64;
	// rlwinm r9,r9,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 3) & 0xFFFFFFF8;
	// add r9,r9,r5
	ctx.r9.u64 = ctx.r9.u64 + ctx.r5.u64;
	// lwz r9,-20(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + -20);
	// rlwinm r7,r9,0,14,14
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// beq cr6,0x8272ae24
	if (cr6.eq) goto loc_8272AE24;
	// rlwinm r9,r9,0,21,23
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x700;
	// addi r7,r1,208
	ctx.r7.s64 = ctx.r1.s64 + 208;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x8272ae00
	if (!cr6.eq) goto loc_8272AE00;
	// rlwinm r10,r8,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r1,210
	ctx.r8.s64 = ctx.r1.s64 + 210;
	// lhzx r6,r28,r10
	ctx.r6.u64 = PPC_LOAD_U16(r28.u32 + ctx.r10.u32);
	// lhzx r10,r27,r10
	ctx.r10.u64 = PPC_LOAD_U16(r27.u32 + ctx.r10.u32);
	// sthx r6,r8,r9
	PPC_STORE_U16(ctx.r8.u32 + ctx.r9.u32, ctx.r6.u16);
	// sthx r10,r9,r7
	PPC_STORE_U16(ctx.r9.u32 + ctx.r7.u32, ctx.r10.u16);
	// b 0x8272ae20
	goto loc_8272AE20;
loc_8272AE00:
	// add r9,r8,r10
	ctx.r9.u64 = ctx.r8.u64 + ctx.r10.u64;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r8,r1,210
	ctx.r8.s64 = ctx.r1.s64 + 210;
	// lhzx r6,r28,r9
	ctx.r6.u64 = PPC_LOAD_U16(r28.u32 + ctx.r9.u32);
	// lhzx r9,r27,r9
	ctx.r9.u64 = PPC_LOAD_U16(r27.u32 + ctx.r9.u32);
	// sthx r6,r8,r10
	PPC_STORE_U16(ctx.r8.u32 + ctx.r10.u32, ctx.r6.u16);
	// sthx r9,r10,r7
	PPC_STORE_U16(ctx.r10.u32 + ctx.r7.u32, ctx.r9.u16);
loc_8272AE20:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_8272AE24:
	// mr r6,r20
	ctx.r6.u64 = r20.u64;
	// mr r5,r20
	ctx.r5.u64 = r20.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x8272af60
	if (!cr6.gt) goto loc_8272AF60;
	// addi r9,r1,2512
	ctx.r9.s64 = ctx.r1.s64 + 2512;
	// addi r10,r1,208
	ctx.r10.s64 = ctx.r1.s64 + 208;
	// addi r8,r1,2192
	ctx.r8.s64 = ctx.r1.s64 + 2192;
	// mr r7,r11
	ctx.r7.u64 = r11.u64;
loc_8272AE44:
	// lhz r4,0(r10)
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// rlwinm r4,r4,0,29,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// lwz r4,0(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// beq cr6,0x8272ae68
	if (cr6.eq) goto loc_8272AE68;
	// stw r4,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r4.u32);
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// addi r8,r8,4
	ctx.r8.s64 = ctx.r8.s64 + 4;
	// b 0x8272ae74
	goto loc_8272AE74;
loc_8272AE68:
	// stw r4,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r4.u32);
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
loc_8272AE74:
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// bne cr6,0x8272ae44
	if (!cr6.eq) goto loc_8272AE44;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x8272af60
	if (!cr6.gt) goto loc_8272AF60;
	// cmpwi cr6,r6,3
	cr6.compare<int32_t>(ctx.r6.s32, 3, xer);
	// beq cr6,0x8272aebc
	if (cr6.eq) goto loc_8272AEBC;
	// cmpwi cr6,r5,3
	cr6.compare<int32_t>(ctx.r5.s32, 3, xer);
	// beq cr6,0x8272aebc
	if (cr6.eq) goto loc_8272AEBC;
	// cmpw cr6,r6,r5
	cr6.compare<int32_t>(ctx.r6.s32, ctx.r5.s32, xer);
	// blt cr6,0x8272aeb0
	if (cr6.lt) goto loc_8272AEB0;
	// lwz r11,2512(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2512);
	// stw r11,484(r1)
	PPC_STORE_U32(ctx.r1.u32 + 484, r11.u32);
	// b 0x8272af64
	goto loc_8272AF64;
loc_8272AEB0:
	// lwz r11,2192(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2192);
	// stw r11,484(r1)
	PPC_STORE_U32(ctx.r1.u32 + 484, r11.u32);
	// b 0x8272af64
	goto loc_8272AF64;
loc_8272AEBC:
	// lhz r11,214(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 214);
	// lhz r10,210(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 210);
	// lhz r7,218(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 218);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lhz r9,212(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 212);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// lhz r8,208(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 208);
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// lhz r6,216(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 216);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// subf r5,r10,r11
	ctx.r5.s64 = r11.s64 - ctx.r10.s64;
	// subf r3,r7,r11
	ctx.r3.s64 = r11.s64 - ctx.r7.s64;
	// subf r30,r10,r7
	r30.s64 = ctx.r7.s64 - ctx.r10.s64;
	// subf r4,r8,r9
	ctx.r4.s64 = ctx.r9.s64 - ctx.r8.s64;
	// subf r26,r6,r9
	r26.s64 = ctx.r9.s64 - ctx.r6.s64;
	// subf r23,r8,r6
	r23.s64 = ctx.r6.s64 - ctx.r8.s64;
	// xor r3,r3,r5
	ctx.r3.u64 = ctx.r3.u64 ^ ctx.r5.u64;
	// xor r30,r30,r5
	r30.u64 = r30.u64 ^ ctx.r5.u64;
	// xor r26,r26,r4
	r26.u64 = r26.u64 ^ ctx.r4.u64;
	// srawi r5,r3,31
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = ctx.r3.s32 >> 31;
	// xor r23,r23,r4
	r23.u64 = r23.u64 ^ ctx.r4.u64;
	// srawi r4,r30,31
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x7FFFFFFF) != 0);
	ctx.r4.s64 = r30.s32 >> 31;
	// srawi r3,r26,31
	xer.ca = (r26.s32 < 0) & ((r26.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r26.s32 >> 31;
	// srawi r30,r23,31
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x7FFFFFFF) != 0);
	r30.s64 = r23.s32 >> 31;
	// or r26,r5,r4
	r26.u64 = ctx.r5.u64 | ctx.r4.u64;
	// or r23,r3,r30
	r23.u64 = ctx.r3.u64 | r30.u64;
	// and r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 & ctx.r10.u64;
	// andc r7,r7,r26
	ctx.r7.u64 = ctx.r7.u64 & ~r26.u64;
	// andc r6,r6,r23
	ctx.r6.u64 = ctx.r6.u64 & ~r23.u64;
	// and r8,r30,r8
	ctx.r8.u64 = r30.u64 & ctx.r8.u64;
	// or r10,r7,r10
	ctx.r10.u64 = ctx.r7.u64 | ctx.r10.u64;
	// and r11,r5,r11
	r11.u64 = ctx.r5.u64 & r11.u64;
	// or r8,r6,r8
	ctx.r8.u64 = ctx.r6.u64 | ctx.r8.u64;
	// and r9,r3,r9
	ctx.r9.u64 = ctx.r3.u64 & ctx.r9.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// or r10,r8,r9
	ctx.r10.u64 = ctx.r8.u64 | ctx.r9.u64;
	// sth r11,486(r1)
	PPC_STORE_U16(ctx.r1.u32 + 486, r11.u16);
	// sth r10,484(r1)
	PPC_STORE_U16(ctx.r1.u32 + 484, ctx.r10.u16);
	// b 0x8272af64
	goto loc_8272AF64;
loc_8272AF60:
	// stw r20,484(r1)
	PPC_STORE_U32(ctx.r1.u32 + 484, r20.u32);
loc_8272AF64:
	// lhz r9,66(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 66);
	// rlwinm r10,r29,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 2) & 0xFFFFFFFC;
	// lhz r8,486(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 486);
	// rlwinm r29,r29,1,0,30
	r29.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// extsh r30,r9
	r30.s64 = ctx.r9.s16;
	// lhz r9,484(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 484);
	// lhz r11,62(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 62);
	// extsh r4,r8
	ctx.r4.s64 = ctx.r8.s16;
	// extsh r6,r9
	ctx.r6.s64 = ctx.r9.s16;
	// lwz r26,136(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// lwzx r9,r10,r15
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + r15.u32);
	// mr r23,r11
	r23.u64 = r11.u64;
	// extsh r5,r11
	ctx.r5.s64 = r11.s16;
	// add r11,r4,r9
	r11.u64 = ctx.r4.u64 + ctx.r9.u64;
	// add r8,r28,r29
	ctx.r8.u64 = r28.u64 + r29.u64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// rlwinm r28,r9,16,16,31
	r28.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 16) & 0xFFFF;
	// and r11,r11,r30
	r11.u64 = r11.u64 & r30.u64;
	// extsh r9,r28
	ctx.r9.s64 = r28.s16;
	// lwz r28,160(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// subf r11,r23,r11
	r11.s64 = r11.s64 - r23.s64;
	// add r9,r9,r6
	ctx.r9.u64 = ctx.r9.u64 + ctx.r6.u64;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// add r7,r27,r29
	ctx.r7.u64 = r27.u64 + r29.u64;
	// mr r23,r11
	r23.u64 = r11.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// sth r11,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, r11.u16);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// sth r11,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, r11.u16);
	// lhz r8,68(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 68);
	// lhz r11,64(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 64);
	// extsh r6,r8
	ctx.r6.s64 = ctx.r8.s16;
	// stw r3,248(r1)
	PPC_STORE_U32(ctx.r1.u32 + 248, ctx.r3.u32);
	// extsh r8,r11
	ctx.r8.s64 = r11.s16;
	// stw r3,244(r1)
	PPC_STORE_U32(ctx.r1.u32 + 244, ctx.r3.u32);
	// stw r3,240(r1)
	PPC_STORE_U32(ctx.r1.u32 + 240, ctx.r3.u32);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// and r9,r9,r6
	ctx.r9.u64 = ctx.r9.u64 & ctx.r6.u64;
	// subf r11,r11,r9
	r11.s64 = ctx.r9.s64 - r11.s64;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// mr r22,r11
	r22.u64 = r11.u64;
	// sth r11,2(r7)
	PPC_STORE_U16(ctx.r7.u32 + 2, r11.u16);
	// sth r11,0(r7)
	PPC_STORE_U16(ctx.r7.u32 + 0, r11.u16);
	// addi r11,r31,50
	r11.s64 = r31.s64 + 50;
	// lhz r11,0(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// mullw r9,r11,r28
	ctx.r9.s64 = int64_t(r11.s32) * int64_t(r28.s32);
	// add r9,r9,r26
	ctx.r9.u64 = ctx.r9.u64 + r26.u64;
	// srawi r6,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r6.s64 = r11.s32 >> 1;
	// rlwinm r8,r9,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// beq cr6,0x8272b090
	if (cr6.eq) goto loc_8272B090;
	// lwz r7,112(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// addi r9,r8,-2
	ctx.r9.s64 = ctx.r8.s64 + -2;
	// lwz r7,-20(r7)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r7.u32 + -20);
	// rlwinm r5,r7,0,14,14
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x8272b090
	if (cr6.eq) goto loc_8272B090;
	// rlwinm r10,r7,0,21,23
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 0) & 0x700;
	// li r15,1
	r15.s64 = 1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// mr r10,r15
	ctx.r10.u64 = r15.u64;
	// bne cr6,0x8272b074
	if (!cr6.eq) goto loc_8272B074;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r7,r21,r9
	ctx.r7.u64 = PPC_LOAD_U16(r21.u32 + ctx.r9.u32);
	// lhzx r9,r19,r9
	ctx.r9.u64 = PPC_LOAD_U16(r19.u32 + ctx.r9.u32);
	// sth r7,242(r1)
	PPC_STORE_U16(ctx.r1.u32 + 242, ctx.r7.u16);
	// sth r9,240(r1)
	PPC_STORE_U16(ctx.r1.u32 + 240, ctx.r9.u16);
	// b 0x8272b094
	goto loc_8272B094;
loc_8272B074:
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r7,r21,r9
	ctx.r7.u64 = PPC_LOAD_U16(r21.u32 + ctx.r9.u32);
	// lhzx r9,r19,r9
	ctx.r9.u64 = PPC_LOAD_U16(r19.u32 + ctx.r9.u32);
	// sth r7,242(r1)
	PPC_STORE_U16(ctx.r1.u32 + 242, ctx.r7.u16);
	// sth r9,240(r1)
	PPC_STORE_U16(ctx.r1.u32 + 240, ctx.r9.u16);
	// b 0x8272b094
	goto loc_8272B094;
loc_8272B090:
	// li r15,1
	r15.s64 = 1;
loc_8272B094:
	// cmpwi cr6,r16,0
	cr6.compare<int32_t>(r16.s32, 0, xer);
	// bne cr6,0x8272b1c4
	if (!cr6.eq) goto loc_8272B1C4;
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r7,r9,r8
	ctx.r7.s64 = ctx.r8.s64 - ctx.r9.s64;
	// lwz r8,112(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// rlwinm r9,r6,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r6,r9
	ctx.r9.u64 = ctx.r6.u64 + ctx.r9.u64;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r5,r9,r8
	ctx.r5.s64 = ctx.r8.s64 - ctx.r9.s64;
	// lwz r9,0(r5)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	// rlwinm r8,r9,0,14,14
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x8272b118
	if (cr6.eq) goto loc_8272B118;
	// rlwinm r9,r9,0,21,23
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x700;
	// addi r4,r1,242
	ctx.r4.s64 = ctx.r1.s64 + 242;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// addi r30,r1,240
	r30.s64 = ctx.r1.s64 + 240;
	// bne cr6,0x8272b0f8
	if (!cr6.eq) goto loc_8272B0F8;
	// rlwinm r9,r7,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r8,r10,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lhzx r27,r21,r9
	r27.u64 = PPC_LOAD_U16(r21.u32 + ctx.r9.u32);
	// lhzx r9,r19,r9
	ctx.r9.u64 = PPC_LOAD_U16(r19.u32 + ctx.r9.u32);
	// sthx r27,r8,r4
	PPC_STORE_U16(ctx.r8.u32 + ctx.r4.u32, r27.u16);
	// sthx r9,r8,r30
	PPC_STORE_U16(ctx.r8.u32 + r30.u32, ctx.r9.u16);
	// b 0x8272b114
	goto loc_8272B114;
loc_8272B0F8:
	// add r8,r7,r11
	ctx.r8.u64 = ctx.r7.u64 + r11.u64;
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r8,r8,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r27,r21,r8
	r27.u64 = PPC_LOAD_U16(r21.u32 + ctx.r8.u32);
	// lhzx r8,r19,r8
	ctx.r8.u64 = PPC_LOAD_U16(r19.u32 + ctx.r8.u32);
	// sthx r27,r9,r4
	PPC_STORE_U16(ctx.r9.u32 + ctx.r4.u32, r27.u16);
	// sthx r8,r9,r30
	PPC_STORE_U16(ctx.r9.u32 + r30.u32, ctx.r8.u16);
loc_8272B114:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
loc_8272B118:
	// cmpwi cr6,r6,1
	cr6.compare<int32_t>(ctx.r6.s32, 1, xer);
	// beq cr6,0x8272b1c4
	if (cr6.eq) goto loc_8272B1C4;
	// addi r8,r6,-1
	ctx.r8.s64 = ctx.r6.s64 + -1;
	// mr r9,r15
	ctx.r9.u64 = r15.u64;
	// cmpw cr6,r26,r8
	cr6.compare<int32_t>(r26.s32, ctx.r8.s32, xer);
	// blt cr6,0x8272b134
	if (cr6.lt) goto loc_8272B134;
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
loc_8272B134:
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpw cr6,r26,r8
	cr6.compare<int32_t>(r26.s32, ctx.r8.s32, xer);
	// add r9,r9,r7
	ctx.r9.u64 = ctx.r9.u64 + ctx.r7.u64;
	// addi r8,r9,-2
	ctx.r8.s64 = ctx.r9.s64 + -2;
	// mr r9,r15
	ctx.r9.u64 = r15.u64;
	// blt cr6,0x8272b150
	if (cr6.lt) goto loc_8272B150;
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
loc_8272B150:
	// rlwinm r7,r9,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r9,r7
	ctx.r9.u64 = ctx.r9.u64 + ctx.r7.u64;
	// rlwinm r9,r9,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 3) & 0xFFFFFFF8;
	// add r9,r9,r5
	ctx.r9.u64 = ctx.r9.u64 + ctx.r5.u64;
	// lwz r9,-20(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + -20);
	// rlwinm r7,r9,0,14,14
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// beq cr6,0x8272b1c4
	if (cr6.eq) goto loc_8272B1C4;
	// rlwinm r9,r9,0,21,23
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x700;
	// addi r7,r1,240
	ctx.r7.s64 = ctx.r1.s64 + 240;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x8272b1a0
	if (!cr6.eq) goto loc_8272B1A0;
	// rlwinm r11,r8,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r1,242
	ctx.r8.s64 = ctx.r1.s64 + 242;
	// lhzx r6,r21,r11
	ctx.r6.u64 = PPC_LOAD_U16(r21.u32 + r11.u32);
	// lhzx r11,r19,r11
	r11.u64 = PPC_LOAD_U16(r19.u32 + r11.u32);
	// sthx r6,r9,r8
	PPC_STORE_U16(ctx.r9.u32 + ctx.r8.u32, ctx.r6.u16);
	// sthx r11,r9,r7
	PPC_STORE_U16(ctx.r9.u32 + ctx.r7.u32, r11.u16);
	// b 0x8272b1c0
	goto loc_8272B1C0;
loc_8272B1A0:
	// add r9,r8,r11
	ctx.r9.u64 = ctx.r8.u64 + r11.u64;
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r8,r1,242
	ctx.r8.s64 = ctx.r1.s64 + 242;
	// lhzx r6,r21,r9
	ctx.r6.u64 = PPC_LOAD_U16(r21.u32 + ctx.r9.u32);
	// lhzx r9,r19,r9
	ctx.r9.u64 = PPC_LOAD_U16(r19.u32 + ctx.r9.u32);
	// sthx r6,r11,r8
	PPC_STORE_U16(r11.u32 + ctx.r8.u32, ctx.r6.u16);
	// sthx r9,r11,r7
	PPC_STORE_U16(r11.u32 + ctx.r7.u32, ctx.r9.u16);
loc_8272B1C0:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
loc_8272B1C4:
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x8272b300
	if (!cr6.gt) goto loc_8272B300;
	// addi r9,r1,2384
	ctx.r9.s64 = ctx.r1.s64 + 2384;
	// addi r11,r1,240
	r11.s64 = ctx.r1.s64 + 240;
	// addi r8,r1,2224
	ctx.r8.s64 = ctx.r1.s64 + 2224;
	// mr r7,r10
	ctx.r7.u64 = ctx.r10.u64;
loc_8272B1E4:
	// lhz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rlwinm r4,r4,0,29,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// beq cr6,0x8272b208
	if (cr6.eq) goto loc_8272B208;
	// stw r4,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r4.u32);
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// addi r8,r8,4
	ctx.r8.s64 = ctx.r8.s64 + 4;
	// b 0x8272b214
	goto loc_8272B214;
loc_8272B208:
	// stw r4,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r4.u32);
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
loc_8272B214:
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// bne cr6,0x8272b1e4
	if (!cr6.eq) goto loc_8272B1E4;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x8272b300
	if (!cr6.gt) goto loc_8272B300;
	// cmpwi cr6,r6,3
	cr6.compare<int32_t>(ctx.r6.s32, 3, xer);
	// beq cr6,0x8272b25c
	if (cr6.eq) goto loc_8272B25C;
	// cmpwi cr6,r5,3
	cr6.compare<int32_t>(ctx.r5.s32, 3, xer);
	// beq cr6,0x8272b25c
	if (cr6.eq) goto loc_8272B25C;
	// cmpw cr6,r6,r5
	cr6.compare<int32_t>(ctx.r6.s32, ctx.r5.s32, xer);
	// blt cr6,0x8272b250
	if (cr6.lt) goto loc_8272B250;
	// lwz r11,2384(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2384);
	// stw r11,428(r1)
	PPC_STORE_U32(ctx.r1.u32 + 428, r11.u32);
	// b 0x8272b304
	goto loc_8272B304;
loc_8272B250:
	// lwz r11,2224(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2224);
	// stw r11,428(r1)
	PPC_STORE_U32(ctx.r1.u32 + 428, r11.u32);
	// b 0x8272b304
	goto loc_8272B304;
loc_8272B25C:
	// lhz r11,246(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 246);
	// lhz r10,242(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 242);
	// lhz r7,250(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 250);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lhz r9,244(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 244);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// lhz r8,240(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 240);
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// lhz r6,248(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 248);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// subf r5,r10,r11
	ctx.r5.s64 = r11.s64 - ctx.r10.s64;
	// subf r3,r7,r11
	ctx.r3.s64 = r11.s64 - ctx.r7.s64;
	// subf r30,r10,r7
	r30.s64 = ctx.r7.s64 - ctx.r10.s64;
	// subf r4,r8,r9
	ctx.r4.s64 = ctx.r9.s64 - ctx.r8.s64;
	// subf r27,r6,r9
	r27.s64 = ctx.r9.s64 - ctx.r6.s64;
	// subf r20,r8,r6
	r20.s64 = ctx.r6.s64 - ctx.r8.s64;
	// xor r3,r3,r5
	ctx.r3.u64 = ctx.r3.u64 ^ ctx.r5.u64;
	// xor r30,r30,r5
	r30.u64 = r30.u64 ^ ctx.r5.u64;
	// xor r27,r27,r4
	r27.u64 = r27.u64 ^ ctx.r4.u64;
	// srawi r5,r3,31
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = ctx.r3.s32 >> 31;
	// xor r20,r20,r4
	r20.u64 = r20.u64 ^ ctx.r4.u64;
	// srawi r4,r30,31
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x7FFFFFFF) != 0);
	ctx.r4.s64 = r30.s32 >> 31;
	// srawi r3,r27,31
	xer.ca = (r27.s32 < 0) & ((r27.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r27.s32 >> 31;
	// srawi r30,r20,31
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x7FFFFFFF) != 0);
	r30.s64 = r20.s32 >> 31;
	// or r27,r5,r4
	r27.u64 = ctx.r5.u64 | ctx.r4.u64;
	// or r20,r3,r30
	r20.u64 = ctx.r3.u64 | r30.u64;
	// and r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 & ctx.r10.u64;
	// andc r7,r7,r27
	ctx.r7.u64 = ctx.r7.u64 & ~r27.u64;
	// andc r6,r6,r20
	ctx.r6.u64 = ctx.r6.u64 & ~r20.u64;
	// and r8,r30,r8
	ctx.r8.u64 = r30.u64 & ctx.r8.u64;
	// or r10,r7,r10
	ctx.r10.u64 = ctx.r7.u64 | ctx.r10.u64;
	// and r11,r5,r11
	r11.u64 = ctx.r5.u64 & r11.u64;
	// or r8,r6,r8
	ctx.r8.u64 = ctx.r6.u64 | ctx.r8.u64;
	// and r9,r3,r9
	ctx.r9.u64 = ctx.r3.u64 & ctx.r9.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// or r10,r8,r9
	ctx.r10.u64 = ctx.r8.u64 | ctx.r9.u64;
	// sth r11,430(r1)
	PPC_STORE_U16(ctx.r1.u32 + 430, r11.u16);
	// sth r10,428(r1)
	PPC_STORE_U16(ctx.r1.u32 + 428, ctx.r10.u16);
	// b 0x8272b304
	goto loc_8272B304;
loc_8272B300:
	// stw r3,428(r1)
	PPC_STORE_U32(ctx.r1.u32 + 428, ctx.r3.u32);
loc_8272B304:
	// lis r7,115
	ctx.r7.s64 = 7536640;
	// lwz r17,176(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// add r10,r21,r29
	ctx.r10.u64 = r21.u64 + r29.u64;
	// stw r22,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r22.u32);
	// ori r20,r7,115
	r20.u64 = ctx.r7.u64 | 115;
	// lhz r7,430(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 430);
	// clrlwi r8,r24,30
	ctx.r8.u64 = r24.u32 & 0x3;
	// stw r23,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r23.u32);
	// srawi r30,r14,1
	xer.ca = (r14.s32 < 0) & ((r14.u32 & 0x1) != 0);
	r30.s64 = r14.s32 >> 1;
	// stw r25,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r25.u32);
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// stw r24,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r24.u32);
	// add r9,r19,r29
	ctx.r9.u64 = r19.u64 + r29.u64;
	// sth r7,2(r10)
	PPC_STORE_U16(ctx.r10.u32 + 2, ctx.r7.u16);
	// srawi r8,r8,2
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x3) != 0);
	ctx.r8.s64 = ctx.r8.s32 >> 2;
	// sth r7,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r7.u16);
	// rlwinm r11,r28,16,0,15
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 16) & 0xFFFF0000;
	// lhz r10,428(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 428);
	// add r8,r8,r24
	ctx.r8.u64 = ctx.r8.u64 + r24.u64;
	// rlwinm r6,r25,2,26,29
	ctx.r6.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 2) & 0x3C;
	// srawi r21,r8,1
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x1) != 0);
	r21.s64 = ctx.r8.s32 >> 1;
	// or r27,r11,r26
	r27.u64 = r11.u64 | r26.u64;
	// srawi r8,r25,1
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x1) != 0);
	ctx.r8.s64 = r25.s32 >> 1;
	// sth r10,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, ctx.r10.u16);
	// mr r11,r24
	r11.u64 = r24.u64;
	// sth r10,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r10.u16);
	// rlwinm r8,r8,0,0,28
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0xFFFFFFF8;
	// lwzx r10,r6,r17
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r6.u32 + r17.u32);
	// rlwimi r11,r25,16,0,15
	r11.u64 = (__builtin_rotateleft32(r25.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// lwz r28,1396(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 1396);
	// rlwinm r29,r27,6,0,25
	r29.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 6) & 0xFFFFFFC0;
	// add r19,r10,r8
	r19.u64 = ctx.r10.u64 + ctx.r8.u64;
	// lwz r26,1404(r31)
	r26.u64 = PPC_LOAD_U32(r31.u32 + 1404);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// stw r21,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, r21.u32);
	// subf r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	// subf r11,r11,r28
	r11.s64 = r28.s64 - r11.s64;
	// add r10,r10,r29
	ctx.r10.u64 = ctx.r10.u64 + r29.u64;
	// stw r19,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r19.u32);
	// subf r11,r29,r11
	r11.s64 = r11.s64 - r29.s64;
	// add r10,r10,r20
	ctx.r10.u64 = ctx.r10.u64 + r20.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272b3d8
	if (cr6.eq) goto loc_8272B3D8;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r1,108
	ctx.r4.s64 = ctx.r1.s64 + 108;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r25,108(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r24,96(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
loc_8272B3D8:
	// clrlwi r10,r23,30
	ctx.r10.u64 = r23.u32 & 0x3;
	// rlwinm r9,r22,2,26,29
	ctx.r9.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 2) & 0x3C;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// mr r11,r23
	r11.u64 = r23.u64;
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// rlwimi r11,r22,16,0,15
	r11.u64 = (__builtin_rotateleft32(r22.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// add r10,r10,r23
	ctx.r10.u64 = ctx.r10.u64 + r23.u64;
	// lis r16,4
	r16.s64 = 262144;
	// srawi r18,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	r18.s64 = ctx.r10.s32 >> 1;
	// lwzx r10,r9,r17
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + r17.u32);
	// srawi r8,r22,1
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x1) != 0);
	ctx.r8.s64 = r22.s32 >> 1;
	// add r5,r29,r16
	ctx.r5.u64 = r29.u64 + r16.u64;
	// rlwinm r9,r8,0,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0xFFFFFFF8;
	// add r17,r10,r9
	r17.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r18,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r18.u32);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r28
	ctx.r9.s64 = r28.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r5,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r5.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// stw r17,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r17.u32);
	// add r11,r11,r20
	r11.u64 = r11.u64 + r20.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272b45c
	if (cr6.eq) goto loc_8272B45C;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// addi r4,r1,100
	ctx.r4.s64 = ctx.r1.s64 + 100;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r22,100(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r23,104(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
loc_8272B45C:
	// mr r11,r21
	r11.u64 = r21.u64;
	// lis r10,59
	ctx.r10.s64 = 3866624;
	// rlwimi r11,r19,16,0,15
	r11.u64 = (__builtin_rotateleft32(r19.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// ori r28,r10,59
	r28.u64 = ctx.r10.u64 | 59;
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r26
	ctx.r9.s64 = r26.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// rlwinm r29,r27,5,0,26
	r29.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 5) & 0xFFFFFFE0;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// subf r10,r29,r9
	ctx.r10.s64 = ctx.r9.s64 - r29.s64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272b4b8
	if (cr6.eq) goto loc_8272B4B8;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// addi r3,r1,172
	ctx.r3.s64 = ctx.r1.s64 + 172;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
	// lwz r21,172(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// lwz r19,144(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
loc_8272B4B8:
	// mr r11,r18
	r11.u64 = r18.u64;
	// add r5,r29,r16
	ctx.r5.u64 = r29.u64 + r16.u64;
	// rlwimi r11,r17,16,0,15
	r11.u64 = (__builtin_rotateleft32(r17.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r26
	ctx.r9.s64 = r26.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r5,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r5.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272b508
	if (cr6.eq) goto loc_8272B508;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,108
	ctx.r3.s64 = ctx.r1.s64 + 108;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
	// lwz r18,108(r1)
	r18.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r17,96(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
loc_8272B508:
	// addi r26,r31,74
	r26.s64 = r31.s64 + 74;
	// lwz r20,124(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// srawi r8,r25,2
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x3) != 0);
	ctx.r8.s64 = r25.s32 >> 2;
	// srawi r9,r24,2
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x3) != 0);
	ctx.r9.s64 = r24.s32 >> 2;
	// lhz r10,0(r26)
	ctx.r10.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// mullw r10,r8,r10
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lwz r9,152(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// add r29,r10,r9
	r29.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8272b5b4
	if (!cr0.eq) goto loc_8272B5B4;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r14,128
	r11.s64 = r14.s64 + 128;
	// dcbt r11,r29
	// addi r11,r14,64
	r11.s64 = r14.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r14,1,0,30
	r11.u64 = __builtin_rotateleft64(r14.u32 | (r14.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r14,r11
	r11.u64 = r14.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r14,32
	r11.s64 = r14.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r14,2,0,29
	r11.u64 = __builtin_rotateleft64(r14.u32 | (r14.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r14,r11
	r11.u64 = r14.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r14,1,0,30
	r11.u64 = __builtin_rotateleft64(r14.u32 | (r14.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r14,r11
	r11.u64 = r14.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r14,3,0,28
	r11.u64 = __builtin_rotateleft64(r14.u32 | (r14.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r14,r11
	r11.s64 = r11.s64 - r14.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_8272B5B4:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r15,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r15.u32);
	// clrlwi r28,r24,30
	r28.u64 = r24.u32 & 0x3;
	// clrlwi r27,r25,30
	r27.u64 = r25.u32 & 0x3;
	// lwz r25,188(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// stw r11,0(r20)
	PPC_STORE_U32(r20.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r6,r14
	ctx.r6.u64 = r14.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r4,r14
	ctx.r4.u64 = r14.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8272b638
	if (cr6.eq) goto loc_8272B638;
	// li r10,1
	ctx.r10.s64 = 1;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// stw r15,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r15.u32);
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// mr r6,r14
	ctx.r6.u64 = r14.u64;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// mr r4,r14
	ctx.r4.u64 = r14.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_8272B638:
	// srawi r10,r22,2
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x3) != 0);
	ctx.r10.s64 = r22.s32 >> 2;
	// lhz r8,0(r26)
	ctx.r8.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// srawi r9,r23,2
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x3) != 0);
	ctx.r9.s64 = r23.s32 >> 2;
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// add r26,r30,r25
	r26.u64 = r30.u64 + r25.u64;
	// mullw r10,r10,r8
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r8.s32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lwz r9,152(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// add r29,r10,r9
	r29.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8272b6e4
	if (!cr0.eq) goto loc_8272B6E4;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r14,128
	r11.s64 = r14.s64 + 128;
	// dcbt r11,r29
	// addi r11,r14,64
	r11.s64 = r14.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r14,1,0,30
	r11.u64 = __builtin_rotateleft64(r14.u32 | (r14.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r14,r11
	r11.u64 = r14.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r14,32
	r11.s64 = r14.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r14,2,0,29
	r11.u64 = __builtin_rotateleft64(r14.u32 | (r14.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r14,r11
	r11.u64 = r14.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r14,1,0,30
	r11.u64 = __builtin_rotateleft64(r14.u32 | (r14.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r14,r11
	r11.u64 = r14.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r14,3,0,28
	r11.u64 = __builtin_rotateleft64(r14.u32 | (r14.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r14,r11
	r11.s64 = r11.s64 - r14.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_8272B6E4:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r15,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r15.u32);
	// clrlwi r28,r23,30
	r28.u64 = r23.u32 & 0x3;
	// clrlwi r27,r22,30
	r27.u64 = r22.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// stw r11,0(r20)
	PPC_STORE_U32(r20.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r6,r14
	ctx.r6.u64 = r14.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r4,r14
	ctx.r4.u64 = r14.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8272b764
	if (cr6.eq) goto loc_8272B764;
	// li r10,1
	ctx.r10.s64 = 1;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// stw r15,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r15.u32);
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// mr r6,r14
	ctx.r6.u64 = r14.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r14
	ctx.r4.u64 = r14.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_8272B764:
	// addi r26,r31,76
	r26.s64 = r31.s64 + 76;
	// lwz r25,156(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// srawi r8,r19,2
	xer.ca = (r19.s32 < 0) & ((r19.u32 & 0x3) != 0);
	ctx.r8.s64 = r19.s32 >> 2;
	// lwz r22,168(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// srawi r9,r21,2
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x3) != 0);
	ctx.r9.s64 = r21.s32 >> 2;
	// lwz r20,128(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// lhz r10,0(r26)
	ctx.r10.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// mullw r10,r8,r10
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r9,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r9.s64 = r11.s32 >> 4;
	// add r3,r10,r22
	ctx.r3.u64 = ctx.r10.u64 + r22.u64;
	// addze r9,r9
	temp.s64 = ctx.r9.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r9.u32;
	ctx.r9.s64 = temp.s64;
	// add r29,r10,r20
	r29.u64 = ctx.r10.u64 + r20.u64;
	// rlwinm r9,r9,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r9,r9,r11
	ctx.r9.s64 = r11.s64 - ctx.r9.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x8272b818
	if (!cr0.eq) goto loc_8272B818;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// li r11,0
	r11.s64 = 0;
loc_8272B818:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r23,164(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// clrlwi r28,r21,30
	r28.u64 = r21.u32 & 0x3;
	// stw r15,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r15.u32);
	// clrlwi r27,r19,30
	r27.u64 = r19.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// stw r11,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// srawi r10,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r10.s64 = r11.s32 >> 4;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8272b8f0
	if (!cr0.eq) goto loc_8272B8F0;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_8272B8F0:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r24,180(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r15,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r15.u32);
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// stw r11,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lhz r10,0(r26)
	ctx.r10.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// srawi r8,r17,2
	xer.ca = (r17.s32 < 0) & ((r17.u32 & 0x3) != 0);
	ctx.r8.s64 = r17.s32 >> 2;
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// srawi r7,r18,2
	xer.ca = (r18.s32 < 0) & ((r18.u32 & 0x3) != 0);
	ctx.r7.s64 = r18.s32 >> 2;
	// mullw r8,r8,r10
	ctx.r8.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// srawi r9,r30,1
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x1) != 0);
	ctx.r9.s64 = r30.s32 >> 1;
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// srawi r7,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r7.s64 = r11.s32 >> 4;
	// add r5,r9,r23
	ctx.r5.u64 = ctx.r9.u64 + r23.u64;
	// add r26,r9,r24
	r26.u64 = ctx.r9.u64 + r24.u64;
	// addze r9,r7
	temp.s64 = ctx.r7.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r7.u32;
	ctx.r9.s64 = temp.s64;
	// add r10,r8,r10
	ctx.r10.u64 = ctx.r8.u64 + ctx.r10.u64;
	// rlwinm r9,r9,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 4) & 0xFFFFFFF0;
	// add r3,r10,r22
	ctx.r3.u64 = ctx.r10.u64 + r22.u64;
	// add r29,r10,r20
	r29.u64 = ctx.r10.u64 + r20.u64;
	// subf. r9,r9,r11
	ctx.r9.s64 = r11.s64 - ctx.r9.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x8272b9f0
	if (!cr0.eq) goto loc_8272B9F0;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// li r11,0
	r11.s64 = 0;
loc_8272B9F0:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r15,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r15.u32);
	// clrlwi r28,r18,30
	r28.u64 = r18.u32 & 0x3;
	// clrlwi r27,r17,30
	r27.u64 = r17.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// stw r11,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// srawi r10,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r10.s64 = r11.s32 >> 4;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8272bac0
	if (!cr0.eq) goto loc_8272BAC0;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_8272BAC0:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r15,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r15.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// stw r11,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r23,2772(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2772);
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x827326c0
	goto loc_827326C0;
loc_8272BB14:
	// lwz r23,136(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// mullw r11,r17,r18
	r11.s64 = int64_t(r17.s32) * int64_t(r18.s32);
	// add r11,r11,r23
	r11.u64 = r11.u64 + r23.u64;
	// lwz r28,1500(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// lwz r27,1504(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lwz r21,1492(r31)
	r21.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// lwz r19,1496(r31)
	r19.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lwz r22,112(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// stw r20,600(r1)
	PPC_STORE_U32(ctx.r1.u32 + 600, r20.u32);
	// stw r20,596(r1)
	PPC_STORE_U32(ctx.r1.u32 + 596, r20.u32);
	// stw r20,592(r1)
	PPC_STORE_U32(ctx.r1.u32 + 592, r20.u32);
	// mr r10,r20
	ctx.r10.u64 = r20.u64;
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// srawi r7,r17,1
	xer.ca = (r17.s32 < 0) & ((r17.u32 & 0x1) != 0);
	ctx.r7.s64 = r17.s32 >> 1;
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// beq cr6,0x8272bb80
	if (cr6.eq) goto loc_8272BB80;
	// lwz r8,-20(r22)
	ctx.r8.u64 = PPC_LOAD_U32(r22.u32 + -20);
	// addi r11,r9,-2
	r11.s64 = ctx.r9.s64 + -2;
	// rlwinm r8,r8,0,14,14
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x8272bb80
	if (cr6.eq) goto loc_8272BB80;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// li r10,1
	ctx.r10.s64 = 1;
	// lhzx r8,r11,r28
	ctx.r8.u64 = PPC_LOAD_U16(r11.u32 + r28.u32);
	// lhzx r11,r11,r27
	r11.u64 = PPC_LOAD_U16(r11.u32 + r27.u32);
	// sth r8,594(r1)
	PPC_STORE_U16(ctx.r1.u32 + 594, ctx.r8.u16);
	// sth r11,592(r1)
	PPC_STORE_U16(ctx.r1.u32 + 592, r11.u16);
loc_8272BB80:
	// cmpwi cr6,r16,0
	cr6.compare<int32_t>(r16.s32, 0, xer);
	// bne cr6,0x8272bc50
	if (!cr6.eq) goto loc_8272BC50;
	// rlwinm r11,r17,1,0,30
	r11.u64 = __builtin_rotateleft64(r17.u32 | (r17.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r8,r11,r9
	ctx.r8.s64 = ctx.r9.s64 - r11.s64;
	// rlwinm r11,r7,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r7,r11
	r11.u64 = ctx.r7.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r6,r11,r22
	ctx.r6.s64 = r22.s64 - r11.s64;
	// lwz r11,0(r6)
	r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + 0);
	// rlwinm r11,r11,0,14,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272bbd4
	if (cr6.eq) goto loc_8272BBD4;
	// rlwinm r11,r8,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r5,r1,594
	ctx.r5.s64 = ctx.r1.s64 + 594;
	// addi r4,r1,592
	ctx.r4.s64 = ctx.r1.s64 + 592;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// lhzx r3,r11,r28
	ctx.r3.u64 = PPC_LOAD_U16(r11.u32 + r28.u32);
	// lhzx r11,r11,r27
	r11.u64 = PPC_LOAD_U16(r11.u32 + r27.u32);
	// sthx r3,r9,r5
	PPC_STORE_U16(ctx.r9.u32 + ctx.r5.u32, ctx.r3.u16);
	// sthx r11,r9,r4
	PPC_STORE_U16(ctx.r9.u32 + ctx.r4.u32, r11.u16);
loc_8272BBD4:
	// cmpwi cr6,r7,1
	cr6.compare<int32_t>(ctx.r7.s32, 1, xer);
	// beq cr6,0x8272bc50
	if (cr6.eq) goto loc_8272BC50;
	// addi r9,r7,-1
	ctx.r9.s64 = ctx.r7.s64 + -1;
	// li r11,1
	r11.s64 = 1;
	// cmpw cr6,r23,r9
	cr6.compare<int32_t>(r23.s32, ctx.r9.s32, xer);
	// blt cr6,0x8272bbf0
	if (cr6.lt) goto loc_8272BBF0;
	// mr r11,r20
	r11.u64 = r20.u64;
loc_8272BBF0:
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpw cr6,r23,r9
	cr6.compare<int32_t>(r23.s32, ctx.r9.s32, xer);
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// addi r8,r11,-2
	ctx.r8.s64 = r11.s64 + -2;
	// li r11,1
	r11.s64 = 1;
	// blt cr6,0x8272bc0c
	if (cr6.lt) goto loc_8272BC0C;
	// mr r11,r20
	r11.u64 = r20.u64;
loc_8272BC0C:
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// lwz r11,-20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -20);
	// rlwinm r11,r11,0,14,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272bc50
	if (cr6.eq) goto loc_8272BC50;
	// rlwinm r11,r8,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r1,594
	ctx.r8.s64 = ctx.r1.s64 + 594;
	// addi r7,r1,592
	ctx.r7.s64 = ctx.r1.s64 + 592;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// lhzx r6,r11,r28
	ctx.r6.u64 = PPC_LOAD_U16(r11.u32 + r28.u32);
	// lhzx r11,r11,r27
	r11.u64 = PPC_LOAD_U16(r11.u32 + r27.u32);
	// sthx r6,r9,r8
	PPC_STORE_U16(ctx.r9.u32 + ctx.r8.u32, ctx.r6.u16);
	// sthx r11,r9,r7
	PPC_STORE_U16(ctx.r9.u32 + ctx.r7.u32, r11.u16);
loc_8272BC50:
	// mr r6,r20
	ctx.r6.u64 = r20.u64;
	// mr r5,r20
	ctx.r5.u64 = r20.u64;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x8272bd8c
	if (!cr6.gt) goto loc_8272BD8C;
	// addi r9,r1,2480
	ctx.r9.s64 = ctx.r1.s64 + 2480;
	// addi r11,r1,592
	r11.s64 = ctx.r1.s64 + 592;
	// addi r8,r1,1936
	ctx.r8.s64 = ctx.r1.s64 + 1936;
	// mr r7,r10
	ctx.r7.u64 = ctx.r10.u64;
loc_8272BC70:
	// lhz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rlwinm r4,r4,0,29,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// beq cr6,0x8272bc94
	if (cr6.eq) goto loc_8272BC94;
	// stw r4,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r4.u32);
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// addi r8,r8,4
	ctx.r8.s64 = ctx.r8.s64 + 4;
	// b 0x8272bca0
	goto loc_8272BCA0;
loc_8272BC94:
	// stw r4,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r4.u32);
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
loc_8272BCA0:
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// bne cr6,0x8272bc70
	if (!cr6.eq) goto loc_8272BC70;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x8272bd8c
	if (!cr6.gt) goto loc_8272BD8C;
	// cmpwi cr6,r6,3
	cr6.compare<int32_t>(ctx.r6.s32, 3, xer);
	// beq cr6,0x8272bce8
	if (cr6.eq) goto loc_8272BCE8;
	// cmpwi cr6,r5,3
	cr6.compare<int32_t>(ctx.r5.s32, 3, xer);
	// beq cr6,0x8272bce8
	if (cr6.eq) goto loc_8272BCE8;
	// cmpw cr6,r6,r5
	cr6.compare<int32_t>(ctx.r6.s32, ctx.r5.s32, xer);
	// blt cr6,0x8272bcdc
	if (cr6.lt) goto loc_8272BCDC;
	// lwz r11,2480(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2480);
	// stw r11,468(r1)
	PPC_STORE_U32(ctx.r1.u32 + 468, r11.u32);
	// b 0x8272bd90
	goto loc_8272BD90;
loc_8272BCDC:
	// lwz r11,1936(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1936);
	// stw r11,468(r1)
	PPC_STORE_U32(ctx.r1.u32 + 468, r11.u32);
	// b 0x8272bd90
	goto loc_8272BD90;
loc_8272BCE8:
	// lhz r11,598(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 598);
	// lhz r10,594(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 594);
	// lhz r7,602(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 602);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lhz r9,596(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 596);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// lhz r8,592(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 592);
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// lhz r6,600(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 600);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// subf r5,r10,r11
	ctx.r5.s64 = r11.s64 - ctx.r10.s64;
	// subf r3,r7,r11
	ctx.r3.s64 = r11.s64 - ctx.r7.s64;
	// subf r30,r10,r7
	r30.s64 = ctx.r7.s64 - ctx.r10.s64;
	// subf r4,r8,r9
	ctx.r4.s64 = ctx.r9.s64 - ctx.r8.s64;
	// subf r29,r6,r9
	r29.s64 = ctx.r9.s64 - ctx.r6.s64;
	// subf r25,r8,r6
	r25.s64 = ctx.r6.s64 - ctx.r8.s64;
	// xor r3,r3,r5
	ctx.r3.u64 = ctx.r3.u64 ^ ctx.r5.u64;
	// xor r30,r30,r5
	r30.u64 = r30.u64 ^ ctx.r5.u64;
	// xor r29,r29,r4
	r29.u64 = r29.u64 ^ ctx.r4.u64;
	// srawi r5,r3,31
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = ctx.r3.s32 >> 31;
	// xor r25,r25,r4
	r25.u64 = r25.u64 ^ ctx.r4.u64;
	// srawi r4,r30,31
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x7FFFFFFF) != 0);
	ctx.r4.s64 = r30.s32 >> 31;
	// srawi r3,r29,31
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r29.s32 >> 31;
	// srawi r30,r25,31
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x7FFFFFFF) != 0);
	r30.s64 = r25.s32 >> 31;
	// or r29,r5,r4
	r29.u64 = ctx.r5.u64 | ctx.r4.u64;
	// or r25,r3,r30
	r25.u64 = ctx.r3.u64 | r30.u64;
	// and r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 & ctx.r10.u64;
	// andc r7,r7,r29
	ctx.r7.u64 = ctx.r7.u64 & ~r29.u64;
	// andc r6,r6,r25
	ctx.r6.u64 = ctx.r6.u64 & ~r25.u64;
	// and r8,r30,r8
	ctx.r8.u64 = r30.u64 & ctx.r8.u64;
	// or r10,r7,r10
	ctx.r10.u64 = ctx.r7.u64 | ctx.r10.u64;
	// and r11,r5,r11
	r11.u64 = ctx.r5.u64 & r11.u64;
	// or r8,r6,r8
	ctx.r8.u64 = ctx.r6.u64 | ctx.r8.u64;
	// and r9,r3,r9
	ctx.r9.u64 = ctx.r3.u64 & ctx.r9.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// or r10,r8,r9
	ctx.r10.u64 = ctx.r8.u64 | ctx.r9.u64;
	// sth r11,470(r1)
	PPC_STORE_U16(ctx.r1.u32 + 470, r11.u16);
	// sth r10,468(r1)
	PPC_STORE_U16(ctx.r1.u32 + 468, ctx.r10.u16);
	// b 0x8272bd90
	goto loc_8272BD90;
loc_8272BD8C:
	// stw r20,468(r1)
	PPC_STORE_U32(ctx.r1.u32 + 468, r20.u32);
loc_8272BD90:
	// rlwinm r11,r26,2,0,29
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 2) & 0xFFFFFFFC;
	// lhz r10,470(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 470);
	// lhz r8,66(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 66);
	// rlwinm r29,r26,1,0,30
	r29.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 1) & 0xFFFFFFFE;
	// extsh r7,r10
	ctx.r7.s64 = ctx.r10.s16;
	// lhz r10,468(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 468);
	// extsh r3,r8
	ctx.r3.s64 = ctx.r8.s16;
	// stw r20,632(r1)
	PPC_STORE_U32(ctx.r1.u32 + 632, r20.u32);
	// extsh r6,r10
	ctx.r6.s64 = ctx.r10.s16;
	// lhz r10,62(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 62);
	// lwzx r11,r11,r15
	r11.u64 = PPC_LOAD_U32(r11.u32 + r15.u32);
	// add r9,r28,r29
	ctx.r9.u64 = r28.u64 + r29.u64;
	// add r8,r27,r29
	ctx.r8.u64 = r27.u64 + r29.u64;
	// stw r20,628(r1)
	PPC_STORE_U32(ctx.r1.u32 + 628, r20.u32);
	// rlwinm r5,r11,16,16,31
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF;
	// stw r20,624(r1)
	PPC_STORE_U32(ctx.r1.u32 + 624, r20.u32);
	// add r11,r7,r11
	r11.u64 = ctx.r7.u64 + r11.u64;
	// mr r7,r5
	ctx.r7.u64 = ctx.r5.u64;
	// extsh r5,r10
	ctx.r5.s64 = ctx.r10.s16;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// and r11,r11,r3
	r11.u64 = r11.u64 & ctx.r3.u64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// extsh r10,r7
	ctx.r10.s64 = ctx.r7.s16;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// add r10,r6,r10
	ctx.r10.u64 = ctx.r6.u64 + ctx.r10.u64;
	// mr r24,r11
	r24.u64 = r11.u64;
	// sth r11,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, r11.u16);
	// sth r11,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, r11.u16);
	// lhz r9,68(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 68);
	// lhz r11,64(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 64);
	// extsh r7,r9
	ctx.r7.s64 = ctx.r9.s16;
	// extsh r9,r11
	ctx.r9.s64 = r11.s16;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// and r10,r10,r7
	ctx.r10.u64 = ctx.r10.u64 & ctx.r7.u64;
	// subf r11,r11,r10
	r11.s64 = ctx.r10.s64 - r11.s64;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// mr r25,r11
	r25.u64 = r11.u64;
	// sth r11,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, r11.u16);
	// sth r11,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, r11.u16);
	// addi r11,r31,50
	r11.s64 = r31.s64 + 50;
	// lhz r11,0(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// mullw r10,r11,r18
	ctx.r10.s64 = int64_t(r11.s32) * int64_t(r18.s32);
	// add r10,r10,r23
	ctx.r10.u64 = ctx.r10.u64 + r23.u64;
	// srawi r9,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r9.s64 = r11.s32 >> 1;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// beq cr6,0x8272be7c
	if (cr6.eq) goto loc_8272BE7C;
	// lwz r7,-20(r22)
	ctx.r7.u64 = PPC_LOAD_U32(r22.u32 + -20);
	// addi r8,r10,-2
	ctx.r8.s64 = ctx.r10.s64 + -2;
	// rlwinm r7,r7,0,14,14
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// beq cr6,0x8272be7c
	if (cr6.eq) goto loc_8272BE7C;
	// rlwinm r8,r8,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// li r4,1
	ctx.r4.s64 = 1;
	// lhzx r7,r8,r21
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r8.u32 + r21.u32);
	// lhzx r8,r8,r19
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r8.u32 + r19.u32);
	// sth r7,626(r1)
	PPC_STORE_U16(ctx.r1.u32 + 626, ctx.r7.u16);
	// sth r8,624(r1)
	PPC_STORE_U16(ctx.r1.u32 + 624, ctx.r8.u16);
loc_8272BE7C:
	// cmpwi cr6,r16,0
	cr6.compare<int32_t>(r16.s32, 0, xer);
	// bne cr6,0x8272bf4c
	if (!cr6.eq) goto loc_8272BF4C;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r8,r11,r10
	ctx.r8.s64 = ctx.r10.s64 - r11.s64;
	// rlwinm r11,r9,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r9,r11
	r11.u64 = ctx.r9.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r7,r11,r22
	ctx.r7.s64 = r22.s64 - r11.s64;
	// lwz r11,0(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// rlwinm r11,r11,0,14,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272bed0
	if (cr6.eq) goto loc_8272BED0;
	// rlwinm r11,r8,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r10,r4,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r6,r1,626
	ctx.r6.s64 = ctx.r1.s64 + 626;
	// addi r5,r1,624
	ctx.r5.s64 = ctx.r1.s64 + 624;
	// addi r4,r4,1
	ctx.r4.s64 = ctx.r4.s64 + 1;
	// lhzx r3,r11,r21
	ctx.r3.u64 = PPC_LOAD_U16(r11.u32 + r21.u32);
	// lhzx r11,r11,r19
	r11.u64 = PPC_LOAD_U16(r11.u32 + r19.u32);
	// sthx r3,r10,r6
	PPC_STORE_U16(ctx.r10.u32 + ctx.r6.u32, ctx.r3.u16);
	// sthx r11,r10,r5
	PPC_STORE_U16(ctx.r10.u32 + ctx.r5.u32, r11.u16);
loc_8272BED0:
	// cmpwi cr6,r9,1
	cr6.compare<int32_t>(ctx.r9.s32, 1, xer);
	// beq cr6,0x8272bf4c
	if (cr6.eq) goto loc_8272BF4C;
	// addi r10,r9,-1
	ctx.r10.s64 = ctx.r9.s64 + -1;
	// li r11,1
	r11.s64 = 1;
	// cmpw cr6,r23,r10
	cr6.compare<int32_t>(r23.s32, ctx.r10.s32, xer);
	// blt cr6,0x8272beec
	if (cr6.lt) goto loc_8272BEEC;
	// mr r11,r20
	r11.u64 = r20.u64;
loc_8272BEEC:
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpw cr6,r23,r10
	cr6.compare<int32_t>(r23.s32, ctx.r10.s32, xer);
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// addi r9,r11,-2
	ctx.r9.s64 = r11.s64 + -2;
	// li r11,1
	r11.s64 = 1;
	// blt cr6,0x8272bf08
	if (cr6.lt) goto loc_8272BF08;
	// mr r11,r20
	r11.u64 = r20.u64;
loc_8272BF08:
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// lwz r11,-20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -20);
	// rlwinm r11,r11,0,14,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272bf4c
	if (cr6.eq) goto loc_8272BF4C;
	// rlwinm r11,r9,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r10,r4,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r9,r1,626
	ctx.r9.s64 = ctx.r1.s64 + 626;
	// addi r8,r1,624
	ctx.r8.s64 = ctx.r1.s64 + 624;
	// addi r4,r4,1
	ctx.r4.s64 = ctx.r4.s64 + 1;
	// lhzx r7,r11,r21
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + r21.u32);
	// lhzx r11,r11,r19
	r11.u64 = PPC_LOAD_U16(r11.u32 + r19.u32);
	// sthx r7,r10,r9
	PPC_STORE_U16(ctx.r10.u32 + ctx.r9.u32, ctx.r7.u16);
	// sthx r11,r10,r8
	PPC_STORE_U16(ctx.r10.u32 + ctx.r8.u32, r11.u16);
loc_8272BF4C:
	// mr r7,r20
	ctx.r7.u64 = r20.u64;
	// mr r6,r20
	ctx.r6.u64 = r20.u64;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// ble cr6,0x8272c08c
	if (!cr6.gt) goto loc_8272C08C;
	// addi r10,r1,1952
	ctx.r10.s64 = ctx.r1.s64 + 1952;
	// addi r11,r1,624
	r11.s64 = ctx.r1.s64 + 624;
	// addi r9,r1,1984
	ctx.r9.s64 = ctx.r1.s64 + 1984;
	// mr r8,r4
	ctx.r8.u64 = ctx.r4.u64;
loc_8272BF6C:
	// lhz r5,0(r11)
	ctx.r5.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rlwinm r5,r5,0,29,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// lwz r5,0(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// beq cr6,0x8272bf90
	if (cr6.eq) goto loc_8272BF90;
	// stw r5,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r5.u32);
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// b 0x8272bf9c
	goto loc_8272BF9C;
loc_8272BF90:
	// stw r5,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r5.u32);
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
loc_8272BF9C:
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// bne cr6,0x8272bf6c
	if (!cr6.eq) goto loc_8272BF6C;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// ble cr6,0x8272c08c
	if (!cr6.gt) goto loc_8272C08C;
	// cmpwi cr6,r7,3
	cr6.compare<int32_t>(ctx.r7.s32, 3, xer);
	// beq cr6,0x8272bfe4
	if (cr6.eq) goto loc_8272BFE4;
	// cmpwi cr6,r6,3
	cr6.compare<int32_t>(ctx.r6.s32, 3, xer);
	// beq cr6,0x8272bfe4
	if (cr6.eq) goto loc_8272BFE4;
	// cmpw cr6,r7,r6
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r6.s32, xer);
	// blt cr6,0x8272bfd8
	if (cr6.lt) goto loc_8272BFD8;
	// lwz r11,1952(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1952);
	// stw r11,436(r1)
	PPC_STORE_U32(ctx.r1.u32 + 436, r11.u32);
	// b 0x8272c090
	goto loc_8272C090;
loc_8272BFD8:
	// lwz r11,1984(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1984);
	// stw r11,436(r1)
	PPC_STORE_U32(ctx.r1.u32 + 436, r11.u32);
	// b 0x8272c090
	goto loc_8272C090;
loc_8272BFE4:
	// lhz r11,630(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 630);
	// lhz r10,626(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 626);
	// lhz r7,634(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 634);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lhz r9,628(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 628);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// lhz r8,624(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 624);
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// lhz r6,632(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 632);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// subf r5,r10,r11
	ctx.r5.s64 = r11.s64 - ctx.r10.s64;
	// subf r3,r7,r11
	ctx.r3.s64 = r11.s64 - ctx.r7.s64;
	// subf r30,r10,r7
	r30.s64 = ctx.r7.s64 - ctx.r10.s64;
	// subf r4,r8,r9
	ctx.r4.s64 = ctx.r9.s64 - ctx.r8.s64;
	// subf r16,r6,r9
	r16.s64 = ctx.r9.s64 - ctx.r6.s64;
	// subf r14,r8,r6
	r14.s64 = ctx.r6.s64 - ctx.r8.s64;
	// xor r3,r3,r5
	ctx.r3.u64 = ctx.r3.u64 ^ ctx.r5.u64;
	// xor r30,r30,r5
	r30.u64 = r30.u64 ^ ctx.r5.u64;
	// xor r16,r16,r4
	r16.u64 = r16.u64 ^ ctx.r4.u64;
	// srawi r5,r3,31
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = ctx.r3.s32 >> 31;
	// xor r14,r14,r4
	r14.u64 = r14.u64 ^ ctx.r4.u64;
	// srawi r4,r30,31
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x7FFFFFFF) != 0);
	ctx.r4.s64 = r30.s32 >> 31;
	// srawi r3,r16,31
	xer.ca = (r16.s32 < 0) & ((r16.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r16.s32 >> 31;
	// srawi r30,r14,31
	xer.ca = (r14.s32 < 0) & ((r14.u32 & 0x7FFFFFFF) != 0);
	r30.s64 = r14.s32 >> 31;
	// or r16,r5,r4
	r16.u64 = ctx.r5.u64 | ctx.r4.u64;
	// or r14,r3,r30
	r14.u64 = ctx.r3.u64 | r30.u64;
	// andc r7,r7,r16
	ctx.r7.u64 = ctx.r7.u64 & ~r16.u64;
	// lwz r16,148(r1)
	r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// and r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 & ctx.r10.u64;
	// andc r6,r6,r14
	ctx.r6.u64 = ctx.r6.u64 & ~r14.u64;
	// and r8,r30,r8
	ctx.r8.u64 = r30.u64 & ctx.r8.u64;
	// or r10,r7,r10
	ctx.r10.u64 = ctx.r7.u64 | ctx.r10.u64;
	// and r11,r5,r11
	r11.u64 = ctx.r5.u64 & r11.u64;
	// or r8,r6,r8
	ctx.r8.u64 = ctx.r6.u64 | ctx.r8.u64;
	// and r9,r3,r9
	ctx.r9.u64 = ctx.r3.u64 & ctx.r9.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// or r10,r8,r9
	ctx.r10.u64 = ctx.r8.u64 | ctx.r9.u64;
	// sth r11,438(r1)
	PPC_STORE_U16(ctx.r1.u32 + 438, r11.u16);
	// sth r10,436(r1)
	PPC_STORE_U16(ctx.r1.u32 + 436, ctx.r10.u16);
	// b 0x8272c090
	goto loc_8272C090;
loc_8272C08C:
	// stw r20,436(r1)
	PPC_STORE_U32(ctx.r1.u32 + 436, r20.u32);
loc_8272C090:
	// lhz r8,438(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 438);
	// add r10,r21,r29
	ctx.r10.u64 = r21.u64 + r29.u64;
	// add r9,r19,r29
	ctx.r9.u64 = r19.u64 + r29.u64;
	// stw r20,280(r1)
	PPC_STORE_U32(ctx.r1.u32 + 280, r20.u32);
	// add r29,r17,r26
	r29.u64 = r17.u64 + r26.u64;
	// stw r20,276(r1)
	PPC_STORE_U32(ctx.r1.u32 + 276, r20.u32);
	// mr r11,r20
	r11.u64 = r20.u64;
	// stw r20,272(r1)
	PPC_STORE_U32(ctx.r1.u32 + 272, r20.u32);
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// sth r8,2(r10)
	PPC_STORE_U16(ctx.r10.u32 + 2, ctx.r8.u16);
	// sth r8,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r8.u16);
	// lhz r10,436(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 436);
	// sth r10,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, ctx.r10.u16);
	// sth r10,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r10.u16);
	// addi r10,r31,50
	ctx.r10.s64 = r31.s64 + 50;
	// lhz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// mullw r9,r10,r18
	ctx.r9.s64 = int64_t(ctx.r10.s32) * int64_t(r18.s32);
	// add r9,r9,r23
	ctx.r9.u64 = ctx.r9.u64 + r23.u64;
	// srawi r6,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r6.s64 = ctx.r10.s32 >> 1;
	// rlwinm r8,r9,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// beq cr6,0x8272c120
	if (cr6.eq) goto loc_8272C120;
	// lwz r7,-20(r22)
	ctx.r7.u64 = PPC_LOAD_U32(r22.u32 + -20);
	// addi r9,r8,-2
	ctx.r9.s64 = ctx.r8.s64 + -2;
	// rlwinm r5,r7,0,14,14
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x8272c120
	if (cr6.eq) goto loc_8272C120;
	// rlwinm r11,r7,0,21,23
	r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 0) & 0x700;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// beq cr6,0x8272c10c
	if (cr6.eq) goto loc_8272C10C;
	// add r9,r9,r10
	ctx.r9.u64 = ctx.r9.u64 + ctx.r10.u64;
loc_8272C10C:
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r7,r9,r28
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r9.u32 + r28.u32);
	// lhzx r9,r9,r27
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r9.u32 + r27.u32);
	// sth r7,274(r1)
	PPC_STORE_U16(ctx.r1.u32 + 274, ctx.r7.u16);
	// sth r9,272(r1)
	PPC_STORE_U16(ctx.r1.u32 + 272, ctx.r9.u16);
loc_8272C120:
	// cmpwi cr6,r16,0
	cr6.compare<int32_t>(r16.s32, 0, xer);
	// bne cr6,0x8272c24c
	if (!cr6.eq) goto loc_8272C24C;
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r7,r9,r8
	ctx.r7.s64 = ctx.r8.s64 - ctx.r9.s64;
	// rlwinm r9,r6,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r6,r9
	ctx.r9.u64 = ctx.r6.u64 + ctx.r9.u64;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r5,r9,r22
	ctx.r5.s64 = r22.s64 - ctx.r9.s64;
	// lwz r9,0(r5)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	// rlwinm r8,r9,0,14,14
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x8272c1a0
	if (cr6.eq) goto loc_8272C1A0;
	// rlwinm r9,r9,0,21,23
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x700;
	// addi r4,r1,274
	ctx.r4.s64 = ctx.r1.s64 + 274;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// addi r3,r1,272
	ctx.r3.s64 = ctx.r1.s64 + 272;
	// bne cr6,0x8272c180
	if (!cr6.eq) goto loc_8272C180;
	// rlwinm r9,r7,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lhzx r30,r9,r28
	r30.u64 = PPC_LOAD_U16(ctx.r9.u32 + r28.u32);
	// lhzx r9,r9,r27
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r9.u32 + r27.u32);
	// sthx r30,r8,r4
	PPC_STORE_U16(ctx.r8.u32 + ctx.r4.u32, r30.u16);
	// sthx r9,r8,r3
	PPC_STORE_U16(ctx.r8.u32 + ctx.r3.u32, ctx.r9.u16);
	// b 0x8272c19c
	goto loc_8272C19C;
loc_8272C180:
	// add r8,r7,r10
	ctx.r8.u64 = ctx.r7.u64 + ctx.r10.u64;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r8,r8,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r30,r8,r28
	r30.u64 = PPC_LOAD_U16(ctx.r8.u32 + r28.u32);
	// lhzx r8,r8,r27
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r8.u32 + r27.u32);
	// sthx r30,r9,r4
	PPC_STORE_U16(ctx.r9.u32 + ctx.r4.u32, r30.u16);
	// sthx r8,r9,r3
	PPC_STORE_U16(ctx.r9.u32 + ctx.r3.u32, ctx.r8.u16);
loc_8272C19C:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_8272C1A0:
	// cmpwi cr6,r6,1
	cr6.compare<int32_t>(ctx.r6.s32, 1, xer);
	// beq cr6,0x8272c24c
	if (cr6.eq) goto loc_8272C24C;
	// addi r8,r6,-1
	ctx.r8.s64 = ctx.r6.s64 + -1;
	// li r9,1
	ctx.r9.s64 = 1;
	// cmpw cr6,r23,r8
	cr6.compare<int32_t>(r23.s32, ctx.r8.s32, xer);
	// blt cr6,0x8272c1bc
	if (cr6.lt) goto loc_8272C1BC;
	// mr r9,r20
	ctx.r9.u64 = r20.u64;
loc_8272C1BC:
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpw cr6,r23,r8
	cr6.compare<int32_t>(r23.s32, ctx.r8.s32, xer);
	// add r9,r9,r7
	ctx.r9.u64 = ctx.r9.u64 + ctx.r7.u64;
	// addi r8,r9,-2
	ctx.r8.s64 = ctx.r9.s64 + -2;
	// li r9,1
	ctx.r9.s64 = 1;
	// blt cr6,0x8272c1d8
	if (cr6.lt) goto loc_8272C1D8;
	// mr r9,r20
	ctx.r9.u64 = r20.u64;
loc_8272C1D8:
	// rlwinm r7,r9,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r9,r7
	ctx.r9.u64 = ctx.r9.u64 + ctx.r7.u64;
	// rlwinm r9,r9,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 3) & 0xFFFFFFF8;
	// add r9,r9,r5
	ctx.r9.u64 = ctx.r9.u64 + ctx.r5.u64;
	// lwz r9,-20(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + -20);
	// rlwinm r7,r9,0,14,14
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// beq cr6,0x8272c24c
	if (cr6.eq) goto loc_8272C24C;
	// rlwinm r9,r9,0,21,23
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x700;
	// addi r7,r1,272
	ctx.r7.s64 = ctx.r1.s64 + 272;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x8272c228
	if (!cr6.eq) goto loc_8272C228;
	// rlwinm r10,r8,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r1,274
	ctx.r8.s64 = ctx.r1.s64 + 274;
	// lhzx r6,r10,r28
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r10.u32 + r28.u32);
	// lhzx r10,r10,r27
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + r27.u32);
	// sthx r6,r9,r8
	PPC_STORE_U16(ctx.r9.u32 + ctx.r8.u32, ctx.r6.u16);
	// sthx r10,r9,r7
	PPC_STORE_U16(ctx.r9.u32 + ctx.r7.u32, ctx.r10.u16);
	// b 0x8272c248
	goto loc_8272C248;
loc_8272C228:
	// add r9,r8,r10
	ctx.r9.u64 = ctx.r8.u64 + ctx.r10.u64;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r8,r1,274
	ctx.r8.s64 = ctx.r1.s64 + 274;
	// lhzx r6,r9,r28
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r9.u32 + r28.u32);
	// lhzx r9,r9,r27
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r9.u32 + r27.u32);
	// sthx r6,r10,r8
	PPC_STORE_U16(ctx.r10.u32 + ctx.r8.u32, ctx.r6.u16);
	// sthx r9,r10,r7
	PPC_STORE_U16(ctx.r10.u32 + ctx.r7.u32, ctx.r9.u16);
loc_8272C248:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_8272C24C:
	// mr r6,r20
	ctx.r6.u64 = r20.u64;
	// mr r5,r20
	ctx.r5.u64 = r20.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x8272c388
	if (!cr6.gt) goto loc_8272C388;
	// addi r9,r1,2016
	ctx.r9.s64 = ctx.r1.s64 + 2016;
	// addi r10,r1,272
	ctx.r10.s64 = ctx.r1.s64 + 272;
	// addi r8,r1,2048
	ctx.r8.s64 = ctx.r1.s64 + 2048;
	// mr r7,r11
	ctx.r7.u64 = r11.u64;
loc_8272C26C:
	// lhz r4,0(r10)
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// rlwinm r4,r4,0,29,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// lwz r4,0(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// beq cr6,0x8272c290
	if (cr6.eq) goto loc_8272C290;
	// stw r4,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r4.u32);
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// addi r8,r8,4
	ctx.r8.s64 = ctx.r8.s64 + 4;
	// b 0x8272c29c
	goto loc_8272C29C;
loc_8272C290:
	// stw r4,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r4.u32);
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
loc_8272C29C:
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// bne cr6,0x8272c26c
	if (!cr6.eq) goto loc_8272C26C;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x8272c388
	if (!cr6.gt) goto loc_8272C388;
	// cmpwi cr6,r6,3
	cr6.compare<int32_t>(ctx.r6.s32, 3, xer);
	// beq cr6,0x8272c2e4
	if (cr6.eq) goto loc_8272C2E4;
	// cmpwi cr6,r5,3
	cr6.compare<int32_t>(ctx.r5.s32, 3, xer);
	// beq cr6,0x8272c2e4
	if (cr6.eq) goto loc_8272C2E4;
	// cmpw cr6,r6,r5
	cr6.compare<int32_t>(ctx.r6.s32, ctx.r5.s32, xer);
	// blt cr6,0x8272c2d8
	if (cr6.lt) goto loc_8272C2D8;
	// lwz r11,2016(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2016);
	// stw r11,480(r1)
	PPC_STORE_U32(ctx.r1.u32 + 480, r11.u32);
	// b 0x8272c38c
	goto loc_8272C38C;
loc_8272C2D8:
	// lwz r11,2048(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2048);
	// stw r11,480(r1)
	PPC_STORE_U32(ctx.r1.u32 + 480, r11.u32);
	// b 0x8272c38c
	goto loc_8272C38C;
loc_8272C2E4:
	// lhz r11,278(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 278);
	// lhz r10,274(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 274);
	// lhz r7,282(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 282);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lhz r9,276(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 276);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// lhz r8,272(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 272);
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// lhz r6,280(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 280);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// subf r5,r10,r11
	ctx.r5.s64 = r11.s64 - ctx.r10.s64;
	// subf r3,r7,r11
	ctx.r3.s64 = r11.s64 - ctx.r7.s64;
	// subf r30,r10,r7
	r30.s64 = ctx.r7.s64 - ctx.r10.s64;
	// subf r4,r8,r9
	ctx.r4.s64 = ctx.r9.s64 - ctx.r8.s64;
	// subf r26,r6,r9
	r26.s64 = ctx.r9.s64 - ctx.r6.s64;
	// subf r23,r8,r6
	r23.s64 = ctx.r6.s64 - ctx.r8.s64;
	// xor r3,r3,r5
	ctx.r3.u64 = ctx.r3.u64 ^ ctx.r5.u64;
	// xor r30,r30,r5
	r30.u64 = r30.u64 ^ ctx.r5.u64;
	// xor r26,r26,r4
	r26.u64 = r26.u64 ^ ctx.r4.u64;
	// srawi r5,r3,31
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = ctx.r3.s32 >> 31;
	// xor r23,r23,r4
	r23.u64 = r23.u64 ^ ctx.r4.u64;
	// srawi r4,r30,31
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x7FFFFFFF) != 0);
	ctx.r4.s64 = r30.s32 >> 31;
	// srawi r3,r26,31
	xer.ca = (r26.s32 < 0) & ((r26.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r26.s32 >> 31;
	// srawi r30,r23,31
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x7FFFFFFF) != 0);
	r30.s64 = r23.s32 >> 31;
	// or r26,r5,r4
	r26.u64 = ctx.r5.u64 | ctx.r4.u64;
	// or r23,r3,r30
	r23.u64 = ctx.r3.u64 | r30.u64;
	// and r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 & ctx.r10.u64;
	// andc r7,r7,r26
	ctx.r7.u64 = ctx.r7.u64 & ~r26.u64;
	// andc r6,r6,r23
	ctx.r6.u64 = ctx.r6.u64 & ~r23.u64;
	// and r8,r30,r8
	ctx.r8.u64 = r30.u64 & ctx.r8.u64;
	// or r10,r7,r10
	ctx.r10.u64 = ctx.r7.u64 | ctx.r10.u64;
	// and r11,r5,r11
	r11.u64 = ctx.r5.u64 & r11.u64;
	// or r8,r6,r8
	ctx.r8.u64 = ctx.r6.u64 | ctx.r8.u64;
	// and r9,r3,r9
	ctx.r9.u64 = ctx.r3.u64 & ctx.r9.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// or r10,r8,r9
	ctx.r10.u64 = ctx.r8.u64 | ctx.r9.u64;
	// sth r11,482(r1)
	PPC_STORE_U16(ctx.r1.u32 + 482, r11.u16);
	// sth r10,480(r1)
	PPC_STORE_U16(ctx.r1.u32 + 480, ctx.r10.u16);
	// b 0x8272c38c
	goto loc_8272C38C;
loc_8272C388:
	// stw r20,480(r1)
	PPC_STORE_U32(ctx.r1.u32 + 480, r20.u32);
loc_8272C38C:
	// lhz r9,66(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 66);
	// rlwinm r10,r29,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 2) & 0xFFFFFFFC;
	// lhz r8,482(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 482);
	// rlwinm r29,r29,1,0,30
	r29.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// extsh r3,r9
	ctx.r3.s64 = ctx.r9.s16;
	// lhz r9,480(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 480);
	// lhz r11,62(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 62);
	// extsh r4,r8
	ctx.r4.s64 = ctx.r8.s16;
	// extsh r6,r9
	ctx.r6.s64 = ctx.r9.s16;
	// lwz r26,136(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// lwzx r9,r10,r15
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + r15.u32);
	// extsh r5,r11
	ctx.r5.s64 = r11.s16;
	// mr r30,r11
	r30.u64 = r11.u64;
	// add r11,r4,r9
	r11.u64 = ctx.r4.u64 + ctx.r9.u64;
	// add r8,r28,r29
	ctx.r8.u64 = r28.u64 + r29.u64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// rlwinm r28,r9,16,16,31
	r28.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 16) & 0xFFFF;
	// and r11,r11,r3
	r11.u64 = r11.u64 & ctx.r3.u64;
	// extsh r9,r28
	ctx.r9.s64 = r28.s16;
	// lwz r28,160(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// add r9,r9,r6
	ctx.r9.u64 = ctx.r9.u64 + ctx.r6.u64;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// add r7,r27,r29
	ctx.r7.u64 = r27.u64 + r29.u64;
	// mr r23,r11
	r23.u64 = r11.u64;
	// li r14,0
	r14.s64 = 0;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// sth r11,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, r11.u16);
	// mr r10,r14
	ctx.r10.u64 = r14.u64;
	// sth r11,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, r11.u16);
	// lhz r8,68(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 68);
	// lhz r11,64(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 64);
	// extsh r6,r8
	ctx.r6.s64 = ctx.r8.s16;
	// stw r14,312(r1)
	PPC_STORE_U32(ctx.r1.u32 + 312, r14.u32);
	// extsh r8,r11
	ctx.r8.s64 = r11.s16;
	// stw r14,308(r1)
	PPC_STORE_U32(ctx.r1.u32 + 308, r14.u32);
	// stw r14,304(r1)
	PPC_STORE_U32(ctx.r1.u32 + 304, r14.u32);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// and r9,r9,r6
	ctx.r9.u64 = ctx.r9.u64 & ctx.r6.u64;
	// subf r11,r11,r9
	r11.s64 = ctx.r9.s64 - r11.s64;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// mr r22,r11
	r22.u64 = r11.u64;
	// sth r11,2(r7)
	PPC_STORE_U16(ctx.r7.u32 + 2, r11.u16);
	// sth r11,0(r7)
	PPC_STORE_U16(ctx.r7.u32 + 0, r11.u16);
	// addi r11,r31,50
	r11.s64 = r31.s64 + 50;
	// lhz r11,0(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// mullw r9,r11,r28
	ctx.r9.s64 = int64_t(r11.s32) * int64_t(r28.s32);
	// add r9,r9,r26
	ctx.r9.u64 = ctx.r9.u64 + r26.u64;
	// srawi r6,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r6.s64 = r11.s32 >> 1;
	// rlwinm r8,r9,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// beq cr6,0x8272c4b8
	if (cr6.eq) goto loc_8272C4B8;
	// lwz r7,112(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// addi r9,r8,-2
	ctx.r9.s64 = ctx.r8.s64 + -2;
	// lwz r7,-20(r7)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r7.u32 + -20);
	// rlwinm r5,r7,0,14,14
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x8272c4b8
	if (cr6.eq) goto loc_8272C4B8;
	// rlwinm r10,r7,0,21,23
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 0) & 0x700;
	// li r15,1
	r15.s64 = 1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// mr r10,r15
	ctx.r10.u64 = r15.u64;
	// bne cr6,0x8272c49c
	if (!cr6.eq) goto loc_8272C49C;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r7,r9,r21
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r9.u32 + r21.u32);
	// lhzx r9,r9,r19
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r9.u32 + r19.u32);
	// sth r7,306(r1)
	PPC_STORE_U16(ctx.r1.u32 + 306, ctx.r7.u16);
	// sth r9,304(r1)
	PPC_STORE_U16(ctx.r1.u32 + 304, ctx.r9.u16);
	// b 0x8272c4bc
	goto loc_8272C4BC;
loc_8272C49C:
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r7,r9,r21
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r9.u32 + r21.u32);
	// lhzx r9,r9,r19
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r9.u32 + r19.u32);
	// sth r7,306(r1)
	PPC_STORE_U16(ctx.r1.u32 + 306, ctx.r7.u16);
	// sth r9,304(r1)
	PPC_STORE_U16(ctx.r1.u32 + 304, ctx.r9.u16);
	// b 0x8272c4bc
	goto loc_8272C4BC;
loc_8272C4B8:
	// li r15,1
	r15.s64 = 1;
loc_8272C4BC:
	// cmpwi cr6,r16,0
	cr6.compare<int32_t>(r16.s32, 0, xer);
	// bne cr6,0x8272c5ec
	if (!cr6.eq) goto loc_8272C5EC;
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r7,r9,r8
	ctx.r7.s64 = ctx.r8.s64 - ctx.r9.s64;
	// lwz r8,112(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// rlwinm r9,r6,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r6,r9
	ctx.r9.u64 = ctx.r6.u64 + ctx.r9.u64;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r5,r9,r8
	ctx.r5.s64 = ctx.r8.s64 - ctx.r9.s64;
	// lwz r9,0(r5)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	// rlwinm r8,r9,0,14,14
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x8272c540
	if (cr6.eq) goto loc_8272C540;
	// rlwinm r9,r9,0,21,23
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x700;
	// addi r4,r1,306
	ctx.r4.s64 = ctx.r1.s64 + 306;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bne cr6,0x8272c520
	if (!cr6.eq) goto loc_8272C520;
	// rlwinm r9,r7,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r8,r10,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lhzx r30,r9,r21
	r30.u64 = PPC_LOAD_U16(ctx.r9.u32 + r21.u32);
	// lhzx r9,r9,r19
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r9.u32 + r19.u32);
	// sthx r30,r8,r4
	PPC_STORE_U16(ctx.r8.u32 + ctx.r4.u32, r30.u16);
	// sthx r9,r8,r3
	PPC_STORE_U16(ctx.r8.u32 + ctx.r3.u32, ctx.r9.u16);
	// b 0x8272c53c
	goto loc_8272C53C;
loc_8272C520:
	// add r8,r7,r11
	ctx.r8.u64 = ctx.r7.u64 + r11.u64;
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r8,r8,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r30,r8,r21
	r30.u64 = PPC_LOAD_U16(ctx.r8.u32 + r21.u32);
	// lhzx r8,r8,r19
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r8.u32 + r19.u32);
	// sthx r30,r9,r4
	PPC_STORE_U16(ctx.r9.u32 + ctx.r4.u32, r30.u16);
	// sthx r8,r9,r3
	PPC_STORE_U16(ctx.r9.u32 + ctx.r3.u32, ctx.r8.u16);
loc_8272C53C:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
loc_8272C540:
	// cmpwi cr6,r6,1
	cr6.compare<int32_t>(ctx.r6.s32, 1, xer);
	// beq cr6,0x8272c5ec
	if (cr6.eq) goto loc_8272C5EC;
	// addi r8,r6,-1
	ctx.r8.s64 = ctx.r6.s64 + -1;
	// mr r9,r15
	ctx.r9.u64 = r15.u64;
	// cmpw cr6,r26,r8
	cr6.compare<int32_t>(r26.s32, ctx.r8.s32, xer);
	// blt cr6,0x8272c55c
	if (cr6.lt) goto loc_8272C55C;
	// mr r9,r14
	ctx.r9.u64 = r14.u64;
loc_8272C55C:
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpw cr6,r26,r8
	cr6.compare<int32_t>(r26.s32, ctx.r8.s32, xer);
	// add r9,r9,r7
	ctx.r9.u64 = ctx.r9.u64 + ctx.r7.u64;
	// addi r8,r9,-2
	ctx.r8.s64 = ctx.r9.s64 + -2;
	// mr r9,r15
	ctx.r9.u64 = r15.u64;
	// blt cr6,0x8272c578
	if (cr6.lt) goto loc_8272C578;
	// mr r9,r14
	ctx.r9.u64 = r14.u64;
loc_8272C578:
	// rlwinm r7,r9,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r9,r7
	ctx.r9.u64 = ctx.r9.u64 + ctx.r7.u64;
	// rlwinm r9,r9,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 3) & 0xFFFFFFF8;
	// add r9,r9,r5
	ctx.r9.u64 = ctx.r9.u64 + ctx.r5.u64;
	// lwz r9,-20(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + -20);
	// rlwinm r7,r9,0,14,14
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// beq cr6,0x8272c5ec
	if (cr6.eq) goto loc_8272C5EC;
	// rlwinm r9,r9,0,21,23
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x700;
	// addi r7,r1,304
	ctx.r7.s64 = ctx.r1.s64 + 304;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x8272c5c8
	if (!cr6.eq) goto loc_8272C5C8;
	// rlwinm r11,r8,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r1,306
	ctx.r8.s64 = ctx.r1.s64 + 306;
	// lhzx r6,r11,r21
	ctx.r6.u64 = PPC_LOAD_U16(r11.u32 + r21.u32);
	// lhzx r11,r11,r19
	r11.u64 = PPC_LOAD_U16(r11.u32 + r19.u32);
	// sthx r6,r9,r8
	PPC_STORE_U16(ctx.r9.u32 + ctx.r8.u32, ctx.r6.u16);
	// sthx r11,r9,r7
	PPC_STORE_U16(ctx.r9.u32 + ctx.r7.u32, r11.u16);
	// b 0x8272c5e8
	goto loc_8272C5E8;
loc_8272C5C8:
	// add r9,r8,r11
	ctx.r9.u64 = ctx.r8.u64 + r11.u64;
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r8,r1,306
	ctx.r8.s64 = ctx.r1.s64 + 306;
	// lhzx r6,r9,r21
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r9.u32 + r21.u32);
	// lhzx r9,r9,r19
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r9.u32 + r19.u32);
	// sthx r6,r11,r8
	PPC_STORE_U16(r11.u32 + ctx.r8.u32, ctx.r6.u16);
	// sthx r9,r11,r7
	PPC_STORE_U16(r11.u32 + ctx.r7.u32, ctx.r9.u16);
loc_8272C5E8:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
loc_8272C5EC:
	// mr r6,r14
	ctx.r6.u64 = r14.u64;
	// mr r5,r14
	ctx.r5.u64 = r14.u64;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x8272c728
	if (!cr6.gt) goto loc_8272C728;
	// addi r9,r1,2080
	ctx.r9.s64 = ctx.r1.s64 + 2080;
	// addi r11,r1,304
	r11.s64 = ctx.r1.s64 + 304;
	// addi r8,r1,2112
	ctx.r8.s64 = ctx.r1.s64 + 2112;
	// mr r7,r10
	ctx.r7.u64 = ctx.r10.u64;
loc_8272C60C:
	// lhz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rlwinm r4,r4,0,29,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// beq cr6,0x8272c630
	if (cr6.eq) goto loc_8272C630;
	// stw r4,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r4.u32);
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// addi r8,r8,4
	ctx.r8.s64 = ctx.r8.s64 + 4;
	// b 0x8272c63c
	goto loc_8272C63C;
loc_8272C630:
	// stw r4,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r4.u32);
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
loc_8272C63C:
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// bne cr6,0x8272c60c
	if (!cr6.eq) goto loc_8272C60C;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x8272c728
	if (!cr6.gt) goto loc_8272C728;
	// cmpwi cr6,r6,3
	cr6.compare<int32_t>(ctx.r6.s32, 3, xer);
	// beq cr6,0x8272c684
	if (cr6.eq) goto loc_8272C684;
	// cmpwi cr6,r5,3
	cr6.compare<int32_t>(ctx.r5.s32, 3, xer);
	// beq cr6,0x8272c684
	if (cr6.eq) goto loc_8272C684;
	// cmpw cr6,r6,r5
	cr6.compare<int32_t>(ctx.r6.s32, ctx.r5.s32, xer);
	// blt cr6,0x8272c678
	if (cr6.lt) goto loc_8272C678;
	// lwz r11,2080(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2080);
	// stw r11,444(r1)
	PPC_STORE_U32(ctx.r1.u32 + 444, r11.u32);
	// b 0x8272c72c
	goto loc_8272C72C;
loc_8272C678:
	// lwz r11,2112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2112);
	// stw r11,444(r1)
	PPC_STORE_U32(ctx.r1.u32 + 444, r11.u32);
	// b 0x8272c72c
	goto loc_8272C72C;
loc_8272C684:
	// lhz r11,310(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 310);
	// lhz r10,306(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 306);
	// lhz r7,314(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 314);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lhz r9,308(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 308);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// lhz r8,304(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 304);
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// lhz r6,312(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 312);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// subf r5,r10,r11
	ctx.r5.s64 = r11.s64 - ctx.r10.s64;
	// subf r3,r7,r11
	ctx.r3.s64 = r11.s64 - ctx.r7.s64;
	// subf r30,r10,r7
	r30.s64 = ctx.r7.s64 - ctx.r10.s64;
	// subf r4,r8,r9
	ctx.r4.s64 = ctx.r9.s64 - ctx.r8.s64;
	// subf r27,r6,r9
	r27.s64 = ctx.r9.s64 - ctx.r6.s64;
	// subf r20,r8,r6
	r20.s64 = ctx.r6.s64 - ctx.r8.s64;
	// xor r3,r3,r5
	ctx.r3.u64 = ctx.r3.u64 ^ ctx.r5.u64;
	// xor r30,r30,r5
	r30.u64 = r30.u64 ^ ctx.r5.u64;
	// xor r27,r27,r4
	r27.u64 = r27.u64 ^ ctx.r4.u64;
	// srawi r5,r3,31
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = ctx.r3.s32 >> 31;
	// xor r20,r20,r4
	r20.u64 = r20.u64 ^ ctx.r4.u64;
	// srawi r4,r30,31
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x7FFFFFFF) != 0);
	ctx.r4.s64 = r30.s32 >> 31;
	// srawi r3,r27,31
	xer.ca = (r27.s32 < 0) & ((r27.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r27.s32 >> 31;
	// srawi r30,r20,31
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x7FFFFFFF) != 0);
	r30.s64 = r20.s32 >> 31;
	// or r27,r5,r4
	r27.u64 = ctx.r5.u64 | ctx.r4.u64;
	// or r20,r3,r30
	r20.u64 = ctx.r3.u64 | r30.u64;
	// and r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 & ctx.r10.u64;
	// andc r7,r7,r27
	ctx.r7.u64 = ctx.r7.u64 & ~r27.u64;
	// andc r6,r6,r20
	ctx.r6.u64 = ctx.r6.u64 & ~r20.u64;
	// and r8,r30,r8
	ctx.r8.u64 = r30.u64 & ctx.r8.u64;
	// or r10,r7,r10
	ctx.r10.u64 = ctx.r7.u64 | ctx.r10.u64;
	// and r11,r5,r11
	r11.u64 = ctx.r5.u64 & r11.u64;
	// or r8,r6,r8
	ctx.r8.u64 = ctx.r6.u64 | ctx.r8.u64;
	// and r9,r3,r9
	ctx.r9.u64 = ctx.r3.u64 & ctx.r9.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// or r10,r8,r9
	ctx.r10.u64 = ctx.r8.u64 | ctx.r9.u64;
	// sth r11,446(r1)
	PPC_STORE_U16(ctx.r1.u32 + 446, r11.u16);
	// sth r10,444(r1)
	PPC_STORE_U16(ctx.r1.u32 + 444, ctx.r10.u16);
	// b 0x8272c72c
	goto loc_8272C72C;
loc_8272C728:
	// stw r14,444(r1)
	PPC_STORE_U32(ctx.r1.u32 + 444, r14.u32);
loc_8272C72C:
	// lwz r8,120(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// lis r7,115
	ctx.r7.s64 = 7536640;
	// add r10,r21,r29
	ctx.r10.u64 = r21.u64 + r29.u64;
	// lwz r17,176(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// srawi r30,r8,1
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x1) != 0);
	r30.s64 = ctx.r8.s32 >> 1;
	// stw r22,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r22.u32);
	// ori r20,r7,115
	r20.u64 = ctx.r7.u64 | 115;
	// lhz r7,446(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 446);
	// clrlwi r8,r24,30
	ctx.r8.u64 = r24.u32 & 0x3;
	// stw r23,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r23.u32);
	// add r9,r19,r29
	ctx.r9.u64 = r19.u64 + r29.u64;
	// stw r25,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r25.u32);
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// stw r24,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r24.u32);
	// rlwinm r11,r28,16,0,15
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 16) & 0xFFFF0000;
	// sth r7,2(r10)
	PPC_STORE_U16(ctx.r10.u32 + 2, ctx.r7.u16);
	// srawi r8,r8,2
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x3) != 0);
	ctx.r8.s64 = ctx.r8.s32 >> 2;
	// sth r7,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r7.u16);
	// rlwinm r6,r25,2,26,29
	ctx.r6.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 2) & 0x3C;
	// lhz r10,444(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 444);
	// add r8,r8,r24
	ctx.r8.u64 = ctx.r8.u64 + r24.u64;
	// or r27,r11,r26
	r27.u64 = r11.u64 | r26.u64;
	// srawi r21,r8,1
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x1) != 0);
	r21.s64 = ctx.r8.s32 >> 1;
	// srawi r8,r25,1
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x1) != 0);
	ctx.r8.s64 = r25.s32 >> 1;
	// mr r11,r24
	r11.u64 = r24.u64;
	// sth r10,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, ctx.r10.u16);
	// rlwinm r8,r8,0,0,28
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0xFFFFFFF8;
	// sth r10,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r10.u16);
	// rlwimi r11,r25,16,0,15
	r11.u64 = (__builtin_rotateleft32(r25.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// lwzx r10,r6,r17
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r6.u32 + r17.u32);
	// rlwinm r29,r27,6,0,25
	r29.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 6) & 0xFFFFFFC0;
	// lwz r28,1396(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 1396);
	// add r19,r10,r8
	r19.u64 = ctx.r10.u64 + ctx.r8.u64;
	// lwz r26,1404(r31)
	r26.u64 = PPC_LOAD_U32(r31.u32 + 1404);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// stw r21,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, r21.u32);
	// subf r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	// subf r11,r11,r28
	r11.s64 = r28.s64 - r11.s64;
	// add r10,r10,r29
	ctx.r10.u64 = ctx.r10.u64 + r29.u64;
	// stw r19,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r19.u32);
	// subf r11,r29,r11
	r11.s64 = r11.s64 - r29.s64;
	// add r10,r10,r20
	ctx.r10.u64 = ctx.r10.u64 + r20.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272c804
	if (cr6.eq) goto loc_8272C804;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r1,108
	ctx.r4.s64 = ctx.r1.s64 + 108;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r25,108(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r24,96(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
loc_8272C804:
	// clrlwi r10,r23,30
	ctx.r10.u64 = r23.u32 & 0x3;
	// rlwinm r9,r22,2,26,29
	ctx.r9.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 2) & 0x3C;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// mr r11,r23
	r11.u64 = r23.u64;
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// rlwimi r11,r22,16,0,15
	r11.u64 = (__builtin_rotateleft32(r22.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// add r10,r10,r23
	ctx.r10.u64 = ctx.r10.u64 + r23.u64;
	// lis r16,4
	r16.s64 = 262144;
	// srawi r18,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	r18.s64 = ctx.r10.s32 >> 1;
	// lwzx r10,r9,r17
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + r17.u32);
	// srawi r8,r22,1
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x1) != 0);
	ctx.r8.s64 = r22.s32 >> 1;
	// add r5,r29,r16
	ctx.r5.u64 = r29.u64 + r16.u64;
	// rlwinm r9,r8,0,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0xFFFFFFF8;
	// add r17,r10,r9
	r17.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r18,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r18.u32);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r28
	ctx.r9.s64 = r28.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r5,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r5.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// stw r17,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r17.u32);
	// add r11,r11,r20
	r11.u64 = r11.u64 + r20.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272c888
	if (cr6.eq) goto loc_8272C888;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// addi r4,r1,100
	ctx.r4.s64 = ctx.r1.s64 + 100;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r22,100(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r23,104(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
loc_8272C888:
	// mr r11,r21
	r11.u64 = r21.u64;
	// lis r10,59
	ctx.r10.s64 = 3866624;
	// rlwimi r11,r19,16,0,15
	r11.u64 = (__builtin_rotateleft32(r19.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// ori r28,r10,59
	r28.u64 = ctx.r10.u64 | 59;
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r26
	ctx.r9.s64 = r26.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// rlwinm r29,r27,5,0,26
	r29.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 5) & 0xFFFFFFE0;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// subf r10,r29,r9
	ctx.r10.s64 = ctx.r9.s64 - r29.s64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272c8e4
	if (cr6.eq) goto loc_8272C8E4;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
	// lwz r21,168(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// lwz r19,128(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
loc_8272C8E4:
	// mr r11,r18
	r11.u64 = r18.u64;
	// add r5,r29,r16
	ctx.r5.u64 = r29.u64 + r16.u64;
	// rlwimi r11,r17,16,0,15
	r11.u64 = (__builtin_rotateleft32(r17.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r26
	ctx.r9.s64 = r26.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r5,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r5.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272c934
	if (cr6.eq) goto loc_8272C934;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,108
	ctx.r3.s64 = ctx.r1.s64 + 108;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
	// lwz r18,108(r1)
	r18.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r17,96(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
loc_8272C934:
	// addi r26,r31,74
	r26.s64 = r31.s64 + 74;
	// lwz r20,124(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// srawi r8,r25,2
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x3) != 0);
	ctx.r8.s64 = r25.s32 >> 2;
	// srawi r9,r24,2
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x3) != 0);
	ctx.r9.s64 = r24.s32 >> 2;
	// lhz r10,0(r26)
	ctx.r10.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// mullw r10,r8,r10
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lwz r9,184(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// add r29,r10,r9
	r29.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8272c9e4
	if (!cr0.eq) goto loc_8272C9E4;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// lwz r10,120(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// addi r11,r10,128
	r11.s64 = ctx.r10.s64 + 128;
	// dcbt r11,r29
	// addi r11,r10,64
	r11.s64 = ctx.r10.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r10,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r10,32
	r11.s64 = ctx.r10.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r10,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r10,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// mr r11,r14
	r11.u64 = r14.u64;
loc_8272C9E4:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r15,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r15.u32);
	// clrlwi r28,r24,30
	r28.u64 = r24.u32 & 0x3;
	// lwz r24,188(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// clrlwi r27,r25,30
	r27.u64 = r25.u32 & 0x3;
	// lwz r25,120(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// stw r11,0(r20)
	PPC_STORE_U32(r20.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8272ca6c
	if (cr6.eq) goto loc_8272CA6C;
	// li r10,1
	ctx.r10.s64 = 1;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// stw r15,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r15.u32);
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_8272CA6C:
	// srawi r10,r22,2
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x3) != 0);
	ctx.r10.s64 = r22.s32 >> 2;
	// lhz r8,0(r26)
	ctx.r8.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// srawi r9,r23,2
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x3) != 0);
	ctx.r9.s64 = r23.s32 >> 2;
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// add r26,r30,r24
	r26.u64 = r30.u64 + r24.u64;
	// mullw r10,r10,r8
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r8.s32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lwz r9,184(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// add r29,r10,r9
	r29.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8272cb18
	if (!cr0.eq) goto loc_8272CB18;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r25,128
	r11.s64 = r25.s64 + 128;
	// dcbt r11,r29
	// addi r11,r25,64
	r11.s64 = r25.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r25,1,0,30
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r25,r11
	r11.u64 = r25.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r25,32
	r11.s64 = r25.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r25,2,0,29
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r25,r11
	r11.u64 = r25.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r25,1,0,30
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r25,r11
	r11.u64 = r25.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r25,3,0,28
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r25,r11
	r11.s64 = r11.s64 - r25.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// mr r11,r14
	r11.u64 = r14.u64;
loc_8272CB18:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r15,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r15.u32);
	// clrlwi r28,r23,30
	r28.u64 = r23.u32 & 0x3;
	// clrlwi r27,r22,30
	r27.u64 = r22.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// stw r11,0(r20)
	PPC_STORE_U32(r20.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8272cb98
	if (cr6.eq) goto loc_8272CB98;
	// li r10,1
	ctx.r10.s64 = 1;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// stw r15,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r15.u32);
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_8272CB98:
	// addi r26,r31,76
	r26.s64 = r31.s64 + 76;
	// lwz r25,156(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// srawi r8,r19,2
	xer.ca = (r19.s32 < 0) & ((r19.u32 & 0x3) != 0);
	ctx.r8.s64 = r19.s32 >> 2;
	// lwz r22,172(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// srawi r9,r21,2
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x3) != 0);
	ctx.r9.s64 = r21.s32 >> 2;
	// lwz r20,144(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// lhz r10,0(r26)
	ctx.r10.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// mullw r10,r8,r10
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r9,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r9.s64 = r11.s32 >> 4;
	// add r3,r22,r10
	ctx.r3.u64 = r22.u64 + ctx.r10.u64;
	// addze r9,r9
	temp.s64 = ctx.r9.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r9.u32;
	ctx.r9.s64 = temp.s64;
	// add r29,r20,r10
	r29.u64 = r20.u64 + ctx.r10.u64;
	// rlwinm r9,r9,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r9,r9,r11
	ctx.r9.s64 = r11.s64 - ctx.r9.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x8272cc4c
	if (!cr0.eq) goto loc_8272CC4C;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// mr r11,r14
	r11.u64 = r14.u64;
loc_8272CC4C:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r23,164(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// clrlwi r28,r21,30
	r28.u64 = r21.u32 & 0x3;
	// stw r15,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r15.u32);
	// clrlwi r27,r19,30
	r27.u64 = r19.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// stw r11,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// srawi r10,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r10.s64 = r11.s32 >> 4;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8272cd24
	if (!cr0.eq) goto loc_8272CD24;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// mr r11,r14
	r11.u64 = r14.u64;
loc_8272CD24:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r24,180(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r15,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r15.u32);
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// stw r11,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lhz r11,0(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// srawi r8,r17,2
	xer.ca = (r17.s32 < 0) & ((r17.u32 & 0x3) != 0);
	ctx.r8.s64 = r17.s32 >> 2;
	// lwz r10,0(r25)
	ctx.r10.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// srawi r7,r18,2
	xer.ca = (r18.s32 < 0) & ((r18.u32 & 0x3) != 0);
	ctx.r7.s64 = r18.s32 >> 2;
	// mullw r8,r8,r11
	ctx.r8.s64 = int64_t(ctx.r8.s32) * int64_t(r11.s32);
	// srawi r9,r30,1
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x1) != 0);
	ctx.r9.s64 = r30.s32 >> 1;
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// srawi r7,r10,4
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xF) != 0);
	ctx.r7.s64 = ctx.r10.s32 >> 4;
	// add r5,r23,r9
	ctx.r5.u64 = r23.u64 + ctx.r9.u64;
	// addze r7,r7
	temp.s64 = ctx.r7.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r7.u32;
	ctx.r7.s64 = temp.s64;
	// add r26,r24,r9
	r26.u64 = r24.u64 + ctx.r9.u64;
	// rlwinm r9,r7,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 4) & 0xFFFFFFF0;
	// add r7,r22,r8
	ctx.r7.u64 = r22.u64 + ctx.r8.u64;
	// subf. r9,r9,r10
	ctx.r9.s64 = ctx.r10.s64 - ctx.r9.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// add r9,r20,r8
	ctx.r9.u64 = r20.u64 + ctx.r8.u64;
	// add r3,r7,r11
	ctx.r3.u64 = ctx.r7.u64 + r11.u64;
	// add r29,r9,r11
	r29.u64 = ctx.r9.u64 + r11.u64;
	// bne 0x8272ce28
	if (!cr0.eq) goto loc_8272CE28;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// mr r10,r14
	ctx.r10.u64 = r14.u64;
loc_8272CE28:
	// addi r11,r10,1
	r11.s64 = ctx.r10.s64 + 1;
	// stw r15,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r15.u32);
	// clrlwi r28,r18,30
	r28.u64 = r18.u32 & 0x3;
	// clrlwi r27,r17,30
	r27.u64 = r17.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// stw r11,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// srawi r10,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r10.s64 = r11.s32 >> 4;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8272cef8
	if (!cr0.eq) goto loc_8272CEF8;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// mr r11,r14
	r11.u64 = r14.u64;
loc_8272CEF8:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r15,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r15.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// stw r11,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r23,2772(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2772);
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x827326c0
	goto loc_827326C0;
loc_8272CF4C:
	// add r6,r17,r26
	ctx.r6.u64 = r17.u64 + r26.u64;
	// lwz r9,216(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 216);
	// rlwinm r8,r26,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r5,1492(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// rlwinm r4,r6,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r10,1472(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1472);
	// rlwinm r11,r26,1,0,30
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r7,r10,-256
	ctx.r7.s64 = ctx.r10.s64 + -256;
	// add r28,r11,r5
	r28.u64 = r11.u64 + ctx.r5.u64;
	// lwzx r8,r8,r9
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r9.u32);
	// lwzx r9,r4,r9
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r4.u32 + ctx.r9.u32);
	// mr r4,r8
	ctx.r4.u64 = ctx.r8.u64;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// srawi r5,r4,16
	xer.ca = (ctx.r4.s32 < 0) & ((ctx.r4.u32 & 0xFFFF) != 0);
	ctx.r5.s64 = ctx.r4.s32 >> 16;
	// srawi r4,r9,16
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0xFFFF) != 0);
	ctx.r4.s64 = ctx.r9.s32 >> 16;
	// mullw r30,r10,r5
	r30.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r5.s32);
	// extsh r3,r9
	ctx.r3.s64 = ctx.r9.s16;
	// mullw r9,r10,r8
	ctx.r9.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r8.s32);
	// addi r29,r30,128
	r29.s64 = r30.s64 + 128;
	// mullw r30,r8,r7
	r30.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r7.s32);
	// addi r9,r9,128
	ctx.r9.s64 = ctx.r9.s64 + 128;
	// addi r30,r30,128
	r30.s64 = r30.s64 + 128;
	// mullw r5,r5,r7
	ctx.r5.s64 = int64_t(ctx.r5.s32) * int64_t(ctx.r7.s32);
	// srawi r9,r9,8
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0xFF) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 8;
	// srawi r8,r29,8
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0xFF) != 0);
	ctx.r8.s64 = r29.s32 >> 8;
	// srawi r22,r30,8
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0xFF) != 0);
	r22.s64 = r30.s32 >> 8;
	// addi r30,r5,128
	r30.s64 = ctx.r5.s64 + 128;
	// mullw r5,r3,r10
	ctx.r5.s64 = int64_t(ctx.r3.s32) * int64_t(ctx.r10.s32);
	// sth r9,2(r28)
	PPC_STORE_U16(r28.u32 + 2, ctx.r9.u16);
	// srawi r21,r30,8
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0xFF) != 0);
	r21.s64 = r30.s32 >> 8;
	// mullw r30,r4,r10
	r30.s64 = int64_t(ctx.r4.s32) * int64_t(ctx.r10.s32);
	// lwz r10,1492(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// addi r5,r5,128
	ctx.r5.s64 = ctx.r5.s64 + 128;
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// srawi r29,r5,8
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0xFF) != 0);
	r29.s64 = ctx.r5.s32 >> 8;
	// mullw r5,r3,r7
	ctx.r5.s64 = int64_t(ctx.r3.s32) * int64_t(ctx.r7.s32);
	// addi r3,r30,128
	ctx.r3.s64 = r30.s64 + 128;
	// mullw r7,r4,r7
	ctx.r7.s64 = int64_t(ctx.r4.s32) * int64_t(ctx.r7.s32);
	// srawi r28,r3,8
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0xFF) != 0);
	r28.s64 = ctx.r3.s32 >> 8;
	// lhz r3,2(r10)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r10.u32 + 2);
	// addi r5,r5,128
	ctx.r5.s64 = ctx.r5.s64 + 128;
	// addi r7,r7,128
	ctx.r7.s64 = ctx.r7.s64 + 128;
	// srawi r16,r5,8
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0xFF) != 0);
	r16.s64 = ctx.r5.s32 >> 8;
	// srawi r15,r7,8
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0xFF) != 0);
	r15.s64 = ctx.r7.s32 >> 8;
	// sth r3,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r3.u16);
	// lwz r10,1496(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// sth r8,2(r10)
	PPC_STORE_U16(ctx.r10.u32 + 2, ctx.r8.u16);
	// lwz r10,1496(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lhz r4,2(r10)
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r10.u32 + 2);
	// sth r4,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r4.u16);
	// lwz r10,1500(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// sth r22,2(r10)
	PPC_STORE_U16(ctx.r10.u32 + 2, r22.u16);
	// lwz r10,1500(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lhz r4,2(r10)
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r10.u32 + 2);
	// sth r4,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r4.u16);
	// lwz r10,1504(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// sth r21,2(r10)
	PPC_STORE_U16(ctx.r10.u32 + 2, r21.u16);
	// lwz r10,1504(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r6,120(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// srawi r30,r6,1
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x1) != 0);
	r30.s64 = ctx.r6.s32 >> 1;
	// clrlwi r6,r9,30
	ctx.r6.u64 = ctx.r9.u32 & 0x3;
	// lhz r7,2(r10)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r10.u32 + 2);
	// sth r7,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r7.u16);
	// lwz r10,1492(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// lwz r7,160(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r7,r7,16,0,15
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 16) & 0xFFFF0000;
	// sth r29,2(r10)
	PPC_STORE_U16(ctx.r10.u32 + 2, r29.u16);
	// lwz r10,136(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// or r26,r7,r10
	r26.u64 = ctx.r7.u64 | ctx.r10.u64;
	// lwz r10,1492(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// add r7,r11,r10
	ctx.r7.u64 = r11.u64 + ctx.r10.u64;
	// mr r10,r9
	ctx.r10.u64 = ctx.r9.u64;
	// rlwimi r10,r8,16,0,15
	ctx.r10.u64 = (__builtin_rotateleft32(ctx.r8.u32, 16) & 0xFFFF0000) | (ctx.r10.u64 & 0xFFFFFFFF0000FFFF);
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// mr r19,r9
	r19.u64 = ctx.r9.u64;
	// srawi r6,r6,2
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x3) != 0);
	ctx.r6.s64 = ctx.r6.s32 >> 2;
	// rlwinm r5,r8,2,26,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0x3C;
	// add r6,r6,r9
	ctx.r6.u64 = ctx.r6.u64 + ctx.r9.u64;
	// lhz r9,2(r7)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r7.u32 + 2);
	// mr r20,r8
	r20.u64 = ctx.r8.u64;
	// srawi r14,r6,1
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x1) != 0);
	r14.s64 = ctx.r6.s32 >> 1;
	// stw r19,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r19.u32);
	// srawi r6,r8,1
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x1) != 0);
	ctx.r6.s64 = ctx.r8.s32 >> 1;
	// rlwinm r8,r10,1,15,15
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x10000;
	// sth r9,0(r7)
	PPC_STORE_U16(ctx.r7.u32 + 0, ctx.r9.u16);
	// rlwinm r6,r6,0,0,28
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 0) & 0xFFFFFFF8;
	// lwz r9,1496(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// subf r8,r8,r10
	ctx.r8.s64 = ctx.r10.s64 - ctx.r8.s64;
	// rlwinm r24,r26,6,0,25
	r24.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 6) & 0xFFFFFFC0;
	// stw r14,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r14.u32);
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// stw r20,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r20.u32);
	// add r8,r8,r24
	ctx.r8.u64 = ctx.r8.u64 + r24.u64;
	// mr r18,r28
	r18.u64 = r28.u64;
	// addis r8,r8,115
	ctx.r8.s64 = ctx.r8.s64 + 7536640;
	// mr r17,r29
	r17.u64 = r29.u64;
	// sth r28,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, r28.u16);
	// addi r8,r8,115
	ctx.r8.s64 = ctx.r8.s64 + 115;
	// lwz r9,1496(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// stw r18,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, r18.u32);
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// stw r17,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r17.u32);
	// lhz r7,2(r9)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r9.u32 + 2);
	// sth r7,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r7.u16);
	// lwz r9,1500(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// sth r16,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, r16.u16);
	// lwz r9,1500(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// lhz r7,2(r9)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r9.u32 + 2);
	// sth r7,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r7.u16);
	// lwz r9,1504(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// add r9,r11,r9
	ctx.r9.u64 = r11.u64 + ctx.r9.u64;
	// sth r15,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, r15.u16);
	// lwz r9,1504(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// lhz r9,2(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r9,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r9.u16);
	// lwz r11,176(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// lwz r27,1396(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + 1396);
	// lwz r25,448(r31)
	r25.u64 = PPC_LOAD_U32(r31.u32 + 448);
	// lwz r23,1404(r31)
	r23.u64 = PPC_LOAD_U32(r31.u32 + 1404);
	// lwzx r11,r5,r11
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + r11.u32);
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r11.u32);
	// subf r11,r10,r27
	r11.s64 = r27.s64 - ctx.r10.s64;
	// subf r11,r24,r11
	r11.s64 = r11.s64 - r24.s64;
	// or r11,r8,r11
	r11.u64 = ctx.r8.u64 | r11.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272d198
	if (cr6.eq) goto loc_8272D198;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// addi r4,r1,108
	ctx.r4.s64 = ctx.r1.s64 + 108;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r20,108(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r19,96(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
loc_8272D198:
	// clrlwi r10,r29,30
	ctx.r10.u64 = r29.u32 & 0x3;
	// rlwinm r9,r28,2,26,29
	ctx.r9.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0x3C;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// mr r11,r29
	r11.u64 = r29.u64;
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// rlwimi r11,r28,16,0,15
	r11.u64 = (__builtin_rotateleft32(r28.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// add r10,r10,r29
	ctx.r10.u64 = ctx.r10.u64 + r29.u64;
	// addis r5,r24,4
	ctx.r5.s64 = r24.s64 + 262144;
	// srawi r10,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 1;
	// srawi r8,r28,1
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x1) != 0);
	ctx.r8.s64 = r28.s32 >> 1;
	// stw r10,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r10.u32);
	// lwz r10,176(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// lwzx r10,r9,r10
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// rlwinm r9,r8,0,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0xFFFFFFF8;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// subf r9,r11,r27
	ctx.r9.s64 = r27.s64 - r11.s64;
	// stw r10,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r10.u32);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r5,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r5.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// addis r11,r11,115
	r11.s64 = r11.s64 + 7536640;
	// addi r11,r11,115
	r11.s64 = r11.s64 + 115;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272d220
	if (cr6.eq) goto loc_8272D220;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// addi r4,r1,148
	ctx.r4.s64 = ctx.r1.s64 + 148;
	// addi r3,r1,140
	ctx.r3.s64 = ctx.r1.s64 + 140;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r18,148(r1)
	r18.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// lwz r17,140(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
loc_8272D220:
	// lwz r9,104(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// mr r11,r14
	r11.u64 = r14.u64;
	// rlwinm r10,r26,5,0,26
	ctx.r10.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 5) & 0xFFFFFFE0;
	// rlwimi r11,r9,16,0,15
	r11.u64 = (__builtin_rotateleft32(ctx.r9.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// rlwinm r9,r11,1,15,15
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r8,r11,r23
	ctx.r8.s64 = r23.s64 - r11.s64;
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// stw r10,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r10.u32);
	// subf r9,r10,r8
	ctx.r9.s64 = ctx.r8.s64 - ctx.r10.s64;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addis r11,r11,59
	r11.s64 = r11.s64 + 3866624;
	// addi r11,r11,59
	r11.s64 = r11.s64 + 59;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272d280
	if (cr6.eq) goto loc_8272D280;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// rotlwi r5,r10,0
	ctx.r5.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
	// lwz r14,116(r1)
	r14.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r10,148(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
loc_8272D280:
	// lwz r9,100(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// addis r5,r10,4
	ctx.r5.s64 = ctx.r10.s64 + 262144;
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// rlwimi r11,r9,16,0,15
	r11.u64 = (__builtin_rotateleft32(ctx.r9.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r23
	ctx.r9.s64 = r23.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r5,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r5.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// addis r11,r11,59
	r11.s64 = r11.s64 + 3866624;
	// addi r11,r11,59
	r11.s64 = r11.s64 + 59;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272d2d0
	if (cr6.eq) goto loc_8272D2D0;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// addi r4,r1,100
	ctx.r4.s64 = ctx.r1.s64 + 100;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
loc_8272D2D0:
	// addi r10,r31,74
	ctx.r10.s64 = r31.s64 + 74;
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// srawi r8,r20,2
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x3) != 0);
	ctx.r8.s64 = r20.s32 >> 2;
	// srawi r9,r19,2
	xer.ca = (r19.s32 < 0) & ((r19.u32 & 0x3) != 0);
	ctx.r9.s64 = r19.s32 >> 2;
	// lhz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mullw r10,r8,r10
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lwz r9,152(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// add r29,r10,r9
	r29.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8272d380
	if (!cr0.eq) goto loc_8272D380;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// lwz r10,120(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// addi r11,r10,128
	r11.s64 = ctx.r10.s64 + 128;
	// dcbt r11,r29
	// addi r11,r10,64
	r11.s64 = ctx.r10.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r10,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r10,32
	r11.s64 = ctx.r10.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r10,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r10,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_8272D380:
	// clrlwi r27,r20,30
	r27.u64 = r20.u32 & 0x3;
	// lwz r20,124(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r23,120(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// clrlwi r28,r19,30
	r28.u64 = r19.u32 & 0x3;
	// li r19,1
	r19.s64 = 1;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// stw r11,0(r20)
	PPC_STORE_U32(r20.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// li r6,32
	ctx.r6.s64 = 32;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// stw r19,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r19.u32);
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8272d40c
	if (cr6.eq) goto loc_8272D40C;
	// li r10,1
	ctx.r10.s64 = 1;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// stw r19,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r19.u32);
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// li r6,32
	ctx.r6.s64 = 32;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_8272D40C:
	// addi r10,r31,74
	ctx.r10.s64 = r31.s64 + 74;
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// addi r26,r25,16
	r26.s64 = r25.s64 + 16;
	// lhz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// srawi r10,r18,2
	xer.ca = (r18.s32 < 0) & ((r18.u32 & 0x3) != 0);
	ctx.r10.s64 = r18.s32 >> 2;
	// srawi r9,r17,2
	xer.ca = (r17.s32 < 0) & ((r17.u32 & 0x3) != 0);
	ctx.r9.s64 = r17.s32 >> 2;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// mullw r10,r10,r8
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r8.s32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lwz r9,152(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// add r29,r10,r9
	r29.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8272d4bc
	if (!cr0.eq) goto loc_8272D4BC;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r23,128
	r11.s64 = r23.s64 + 128;
	// dcbt r11,r29
	// addi r11,r23,64
	r11.s64 = r23.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r23,1,0,30
	r11.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r23,r11
	r11.u64 = r23.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r23,32
	r11.s64 = r23.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r23,2,0,29
	r11.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r23,r11
	r11.u64 = r23.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r23,1,0,30
	r11.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r23,r11
	r11.u64 = r23.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r23,3,0,28
	r11.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r23,r11
	r11.s64 = r11.s64 - r23.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_8272D4BC:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r19,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r19.u32);
	// clrlwi r28,r17,30
	r28.u64 = r17.u32 & 0x3;
	// clrlwi r27,r18,30
	r27.u64 = r18.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// stw r11,0(r20)
	PPC_STORE_U32(r20.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// li r6,32
	ctx.r6.s64 = 32;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8272d53c
	if (cr6.eq) goto loc_8272D53C;
	// li r10,1
	ctx.r10.s64 = 1;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// stw r19,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r19.u32);
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// li r6,32
	ctx.r6.s64 = 32;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_8272D53C:
	// addi r10,r31,76
	ctx.r10.s64 = r31.s64 + 76;
	// lwz r8,104(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lwz r20,156(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// srawi r7,r8,2
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x3) != 0);
	ctx.r7.s64 = ctx.r8.s32 >> 2;
	// lwz r17,168(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// srawi r9,r14,2
	xer.ca = (r14.s32 < 0) & ((r14.u32 & 0x3) != 0);
	ctx.r9.s64 = r14.s32 >> 2;
	// stw r10,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, ctx.r10.u32);
	// lhz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// mullw r10,r7,r10
	ctx.r10.s64 = int64_t(ctx.r7.s32) * int64_t(ctx.r10.s32);
	// lwz r7,128(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r9,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r9.s64 = r11.s32 >> 4;
	// add r3,r10,r17
	ctx.r3.u64 = ctx.r10.u64 + r17.u64;
	// addze r9,r9
	temp.s64 = ctx.r9.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r9.u32;
	ctx.r9.s64 = temp.s64;
	// add r29,r10,r7
	r29.u64 = ctx.r10.u64 + ctx.r7.u64;
	// rlwinm r9,r9,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r9,r9,r11
	ctx.r9.s64 = r11.s64 - ctx.r9.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x8272d5f8
	if (!cr0.eq) goto loc_8272D5F8;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// li r11,0
	r11.s64 = 0;
loc_8272D5F8:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r19,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r19.u32);
	// clrlwi r28,r14,30
	r28.u64 = r14.u32 & 0x3;
	// clrlwi r27,r8,30
	r27.u64 = ctx.r8.u32 & 0x3;
	// addi r18,r25,256
	r18.s64 = r25.s64 + 256;
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r11,0(r20)
	PPC_STORE_U32(r20.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// li r6,16
	ctx.r6.s64 = 16;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r5,r18
	ctx.r5.u64 = r18.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// srawi r10,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r10.s64 = r11.s32 >> 4;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8272d6d0
	if (!cr0.eq) goto loc_8272D6D0;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_8272D6D0:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r19,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r19.u32);
	// addi r26,r25,320
	r26.s64 = r25.s64 + 320;
	// li r10,1
	ctx.r10.s64 = 1;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// stw r11,0(r20)
	PPC_STORE_U32(r20.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,152(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// lwz r6,100(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// addi r5,r18,8
	ctx.r5.s64 = r18.s64 + 8;
	// lwz r7,96(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// addi r26,r26,8
	r26.s64 = r26.s64 + 8;
	// srawi r9,r6,2
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x3) != 0);
	ctx.r9.s64 = ctx.r6.s32 >> 2;
	// srawi r8,r7,2
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x3) != 0);
	ctx.r8.s64 = ctx.r7.s32 >> 2;
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// mullw r9,r9,r10
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r10.s32);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// srawi r8,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r8.s64 = r11.s32 >> 4;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addze r8,r8
	temp.s64 = ctx.r8.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r8.u32;
	ctx.r8.s64 = temp.s64;
	// lwz r9,128(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// add r3,r17,r10
	ctx.r3.u64 = r17.u64 + ctx.r10.u64;
	// rlwinm r8,r8,4,0,27
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 4) & 0xFFFFFFF0;
	// add r29,r9,r10
	r29.u64 = ctx.r9.u64 + ctx.r10.u64;
	// subf. r8,r8,r11
	ctx.r8.s64 = r11.s64 - ctx.r8.s64;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// bne 0x8272d7dc
	if (!cr0.eq) goto loc_8272D7DC;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// li r11,0
	r11.s64 = 0;
loc_8272D7DC:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r19,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r19.u32);
	// clrlwi r28,r7,30
	r28.u64 = ctx.r7.u32 & 0x3;
	// clrlwi r27,r6,30
	r27.u64 = ctx.r6.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// li r6,16
	ctx.r6.s64 = 16;
	// stw r11,0(r20)
	PPC_STORE_U32(r20.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// srawi r10,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r10.s64 = r11.s32 >> 4;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8272d8ac
	if (!cr0.eq) goto loc_8272D8AC;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_8272D8AC:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r19,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r19.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// stw r11,0(r20)
	PPC_STORE_U32(r20.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// clrlwi r10,r22,30
	ctx.r10.u64 = r22.u32 & 0x3;
	// lis r9,115
	ctx.r9.s64 = 7536640;
	// lwz r18,176(r1)
	r18.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// lwz r28,1396(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 1396);
	// ori r26,r9,115
	r26.u64 = ctx.r9.u64 | 115;
	// lwz r29,260(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// lwz r27,1404(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + 1404);
	// rlwinm r9,r21,2,26,29
	ctx.r9.u64 = __builtin_rotateleft64(r21.u32 | (r21.u64 << 32), 2) & 0x3C;
	// stw r15,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r15.u32);
	// add r10,r10,r22
	ctx.r10.u64 = ctx.r10.u64 + r22.u64;
	// stw r16,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, r16.u32);
	// mr r11,r22
	r11.u64 = r22.u64;
	// stw r21,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r21.u32);
	// srawi r17,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	r17.s64 = ctx.r10.s32 >> 1;
	// stw r22,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r22.u32);
	// srawi r8,r21,1
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x1) != 0);
	ctx.r8.s64 = r21.s32 >> 1;
	// lwzx r10,r9,r18
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + r18.u32);
	// rlwimi r11,r21,16,0,15
	r11.u64 = (__builtin_rotateleft32(r21.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// rlwinm r9,r8,0,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0xFFFFFFF8;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r17,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r17.u32);
	// subf r9,r11,r28
	ctx.r9.s64 = r28.s64 - r11.s64;
	// stw r10,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r10.u32);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r24,r9
	ctx.r10.s64 = ctx.r9.s64 - r24.s64;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272d99c
	if (cr6.eq) goto loc_8272D99C;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// addi r3,r1,140
	ctx.r3.s64 = ctx.r1.s64 + 140;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r21,116(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r22,140(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
loc_8272D99C:
	// clrlwi r10,r16,30
	ctx.r10.u64 = r16.u32 & 0x3;
	// rlwinm r9,r15,2,26,29
	ctx.r9.u64 = __builtin_rotateleft64(r15.u32 | (r15.u64 << 32), 2) & 0x3C;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// mr r11,r16
	r11.u64 = r16.u64;
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// rlwimi r11,r15,16,0,15
	r11.u64 = (__builtin_rotateleft32(r15.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// add r10,r10,r16
	ctx.r10.u64 = ctx.r10.u64 + r16.u64;
	// lis r14,4
	r14.s64 = 262144;
	// srawi r10,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 1;
	// srawi r8,r15,1
	xer.ca = (r15.s32 < 0) & ((r15.u32 & 0x1) != 0);
	ctx.r8.s64 = r15.s32 >> 1;
	// add r5,r24,r14
	ctx.r5.u64 = r24.u64 + r14.u64;
	// stw r10,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r10.u32);
	// lwzx r10,r9,r18
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + r18.u32);
	// rlwinm r9,r8,0,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0xFFFFFFF8;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// subf r9,r11,r28
	ctx.r9.s64 = r28.s64 - r11.s64;
	// stw r10,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r10.u32);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r5,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r5.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272da20
	if (cr6.eq) goto loc_8272DA20;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// addi r4,r1,108
	ctx.r4.s64 = ctx.r1.s64 + 108;
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r15,108(r1)
	r15.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r16,168(r1)
	r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
loc_8272DA20:
	// lwz r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// mr r11,r17
	r11.u64 = r17.u64;
	// lwz r26,148(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// rlwimi r11,r10,16,0,15
	r11.u64 = (__builtin_rotateleft32(ctx.r10.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// lis r10,59
	ctx.r10.s64 = 3866624;
	// subf r9,r11,r27
	ctx.r9.s64 = r27.s64 - r11.s64;
	// ori r28,r10,59
	r28.u64 = ctx.r10.u64 | 59;
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r26,r9
	ctx.r10.s64 = ctx.r9.s64 - r26.s64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272da7c
	if (cr6.eq) goto loc_8272DA7C;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
	// lwz r17,128(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
loc_8272DA7C:
	// lwz r10,100(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// add r5,r26,r14
	ctx.r5.u64 = r26.u64 + r14.u64;
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// rlwimi r11,r10,16,0,15
	r11.u64 = (__builtin_rotateleft32(ctx.r10.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r27
	ctx.r9.s64 = r27.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r5,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r5.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272dac8
	if (cr6.eq) goto loc_8272DAC8;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// addi r4,r1,100
	ctx.r4.s64 = ctx.r1.s64 + 100;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
loc_8272DAC8:
	// addi r18,r31,74
	r18.s64 = r31.s64 + 74;
	// lwz r24,124(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// srawi r8,r21,2
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x3) != 0);
	ctx.r8.s64 = r21.s32 >> 2;
	// lwz r14,184(r1)
	r14.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// srawi r9,r22,2
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x3) != 0);
	ctx.r9.s64 = r22.s32 >> 2;
	// lhz r10,0(r18)
	ctx.r10.u64 = PPC_LOAD_U16(r18.u32 + 0);
	// lwz r11,0(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// mullw r10,r8,r10
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// add r28,r10,r14
	r28.u64 = ctx.r10.u64 + r14.u64;
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8272db74
	if (!cr0.eq) goto loc_8272DB74;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r28
	// addi r11,r23,128
	r11.s64 = r23.s64 + 128;
	// dcbt r11,r28
	// addi r11,r23,64
	r11.s64 = r23.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r28
	// rlwinm r11,r23,1,0,30
	r11.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r23,r11
	r11.u64 = r23.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// addi r11,r23,32
	r11.s64 = r23.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r28
	// rlwinm r11,r23,2,0,29
	r11.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r23,r11
	r11.u64 = r23.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r23,1,0,30
	r11.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r23,r11
	r11.u64 = r23.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r23,3,0,28
	r11.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r23,r11
	r11.s64 = r11.s64 - r23.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// li r11,0
	r11.s64 = 0;
loc_8272DB74:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r19,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r19.u32);
	// clrlwi r27,r22,30
	r27.u64 = r22.u32 & 0x3;
	// clrlwi r26,r21,30
	r26.u64 = r21.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// stw r11,0(r24)
	PPC_STORE_U32(r24.u32 + 0, r11.u32);
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// li r6,32
	ctx.r6.s64 = 32;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// mr r9,r26
	ctx.r9.u64 = r26.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8272dbf4
	if (cr6.eq) goto loc_8272DBF4;
	// li r10,1
	ctx.r10.s64 = 1;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// stw r19,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r19.u32);
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// li r6,32
	ctx.r6.s64 = 32;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_8272DBF4:
	// srawi r10,r15,2
	xer.ca = (r15.s32 < 0) & ((r15.u32 & 0x3) != 0);
	ctx.r10.s64 = r15.s32 >> 2;
	// lhz r8,0(r18)
	ctx.r8.u64 = PPC_LOAD_U16(r18.u32 + 0);
	// srawi r9,r16,2
	xer.ca = (r16.s32 < 0) & ((r16.u32 & 0x3) != 0);
	ctx.r9.s64 = r16.s32 >> 2;
	// lwz r11,0(r24)
	r11.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// addi r21,r29,16
	r21.s64 = r29.s64 + 16;
	// mullw r10,r10,r8
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r8.s32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// add r28,r10,r14
	r28.u64 = ctx.r10.u64 + r14.u64;
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8272dc9c
	if (!cr0.eq) goto loc_8272DC9C;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r28
	// addi r11,r23,128
	r11.s64 = r23.s64 + 128;
	// dcbt r11,r28
	// addi r11,r23,64
	r11.s64 = r23.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r28
	// rlwinm r11,r23,1,0,30
	r11.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r23,r11
	r11.u64 = r23.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// addi r11,r23,32
	r11.s64 = r23.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r28
	// rlwinm r11,r23,2,0,29
	r11.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r23,r11
	r11.u64 = r23.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r23,1,0,30
	r11.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r23,r11
	r11.u64 = r23.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r23,3,0,28
	r11.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r23,r11
	r11.s64 = r11.s64 - r23.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// li r11,0
	r11.s64 = 0;
loc_8272DC9C:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r19,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r19.u32);
	// clrlwi r27,r16,30
	r27.u64 = r16.u32 & 0x3;
	// clrlwi r26,r15,30
	r26.u64 = r15.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// stw r11,0(r24)
	PPC_STORE_U32(r24.u32 + 0, r11.u32);
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// li r6,32
	ctx.r6.s64 = 32;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// mr r9,r26
	ctx.r9.u64 = r26.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8272dd1c
	if (cr6.eq) goto loc_8272DD1C;
	// li r10,1
	ctx.r10.s64 = 1;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// stw r19,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r19.u32);
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// li r6,32
	ctx.r6.s64 = 32;
	// mr r5,r21
	ctx.r5.u64 = r21.u64;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_8272DD1C:
	// lwz r24,152(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// lwz r8,96(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// srawi r7,r8,2
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x3) != 0);
	ctx.r7.s64 = ctx.r8.s32 >> 2;
	// lwz r23,172(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// srawi r9,r17,2
	xer.ca = (r17.s32 < 0) & ((r17.u32 & 0x3) != 0);
	ctx.r9.s64 = r17.s32 >> 2;
	// lwz r22,144(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// lhz r10,0(r24)
	ctx.r10.u64 = PPC_LOAD_U16(r24.u32 + 0);
	// mullw r10,r7,r10
	ctx.r10.s64 = int64_t(ctx.r7.s32) * int64_t(ctx.r10.s32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r9,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r9.s64 = r11.s32 >> 4;
	// add r3,r10,r23
	ctx.r3.u64 = ctx.r10.u64 + r23.u64;
	// addze r9,r9
	temp.s64 = ctx.r9.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r9.u32;
	ctx.r9.s64 = temp.s64;
	// add r28,r10,r22
	r28.u64 = ctx.r10.u64 + r22.u64;
	// rlwinm r9,r9,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r9,r9,r11
	ctx.r9.s64 = r11.s64 - ctx.r9.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x8272ddd0
	if (!cr0.eq) goto loc_8272DDD0;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// li r11,0
	r11.s64 = 0;
loc_8272DDD0:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r19,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r19.u32);
	// clrlwi r27,r17,30
	r27.u64 = r17.u32 & 0x3;
	// clrlwi r26,r8,30
	r26.u64 = ctx.r8.u32 & 0x3;
	// addi r17,r29,256
	r17.s64 = r29.s64 + 256;
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r11,0(r20)
	PPC_STORE_U32(r20.u32 + 0, r11.u32);
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// li r6,16
	ctx.r6.s64 = 16;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// mr r5,r17
	ctx.r5.u64 = r17.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// srawi r10,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r10.s64 = r11.s32 >> 4;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8272dea8
	if (!cr0.eq) goto loc_8272DEA8;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r28
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r28
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r28
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r28
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// li r11,0
	r11.s64 = 0;
loc_8272DEA8:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r19,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r19.u32);
	// addi r18,r29,320
	r18.s64 = r29.s64 + 320;
	// li r10,1
	ctx.r10.s64 = 1;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r18
	ctx.r5.u64 = r18.u64;
	// stw r11,0(r20)
	PPC_STORE_U32(r20.u32 + 0, r11.u32);
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r6,100(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lhz r10,0(r24)
	ctx.r10.u64 = PPC_LOAD_U16(r24.u32 + 0);
	// addi r5,r17,8
	ctx.r5.s64 = r17.s64 + 8;
	// lwz r7,104(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// srawi r9,r6,2
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x3) != 0);
	ctx.r9.s64 = ctx.r6.s32 >> 2;
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// addi r24,r18,8
	r24.s64 = r18.s64 + 8;
	// srawi r8,r7,2
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x3) != 0);
	ctx.r8.s64 = ctx.r7.s32 >> 2;
	// mullw r9,r9,r10
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r10.s32);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// srawi r8,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r8.s64 = r11.s32 >> 4;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addze r8,r8
	temp.s64 = ctx.r8.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r8.u32;
	ctx.r8.s64 = temp.s64;
	// add r3,r23,r10
	ctx.r3.u64 = r23.u64 + ctx.r10.u64;
	// rlwinm r8,r8,4,0,27
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 4) & 0xFFFFFFF0;
	// add r28,r22,r10
	r28.u64 = r22.u64 + ctx.r10.u64;
	// subf. r8,r8,r11
	ctx.r8.s64 = r11.s64 - ctx.r8.s64;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// bne 0x8272dfac
	if (!cr0.eq) goto loc_8272DFAC;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// li r11,0
	r11.s64 = 0;
loc_8272DFAC:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r19,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r19.u32);
	// clrlwi r27,r7,30
	r27.u64 = ctx.r7.u32 & 0x3;
	// clrlwi r26,r6,30
	r26.u64 = ctx.r6.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// li r6,16
	ctx.r6.s64 = 16;
	// stw r11,0(r20)
	PPC_STORE_U32(r20.u32 + 0, r11.u32);
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// srawi r10,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r10.s64 = r11.s32 >> 4;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8272e07c
	if (!cr0.eq) goto loc_8272E07C;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r28
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r28
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r28
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r28
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// li r11,0
	r11.s64 = 0;
loc_8272E07C:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r19,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r19.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// stw r11,0(r20)
	PPC_STORE_U32(r20.u32 + 0, r11.u32);
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r11,r25,16
	r11.s64 = r25.s64 + 16;
	// addi r10,r25,32
	ctx.r10.s64 = r25.s64 + 32;
	// lvx128 v0,r0,r25
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r25.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r25,48
	ctx.r9.s64 = r25.s64 + 48;
	// lvx128 v6,r0,r29
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r25,80
	ctx.r8.s64 = r25.s64 + 80;
	// lvx128 v5,r0,r21
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r21.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r25,96
	ctx.r7.s64 = r25.s64 + 96;
	// lvx128 v13,r0,r11
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r25,64
	r11.s64 = r25.s64 + 64;
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r6,r25,112
	ctx.r6.s64 = r25.s64 + 112;
	// addi r10,r29,32
	ctx.r10.s64 = r29.s64 + 32;
	// lvx128 v11,r0,r9
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v9,r0,r8
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r29,80
	ctx.r9.s64 = r29.s64 + 80;
	// lvx128 v8,r0,r7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r29,96
	ctx.r8.s64 = r29.s64 + 96;
	// lvx128 v10,r0,r11
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r29,48
	r11.s64 = r29.s64 + 48;
	// lvx128 v7,r0,r6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r6,r30,1,0,30
	ctx.r6.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// lvx128 v4,r0,r10
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r29,64
	ctx.r10.s64 = r29.s64 + 64;
	// addi r27,r29,112
	r27.s64 = r29.s64 + 112;
	// rlwinm r7,r30,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// lvx128 v3,r0,r11
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1280
	r11.s64 = ctx.r1.s64 + 1280;
	// add r5,r30,r6
	ctx.r5.u64 = r30.u64 + ctx.r6.u64;
	// add r4,r30,r7
	ctx.r4.u64 = r30.u64 + ctx.r7.u64;
	// add r3,r7,r6
	ctx.r3.u64 = ctx.r7.u64 + ctx.r6.u64;
	// add r28,r5,r7
	r28.u64 = ctx.r5.u64 + ctx.r7.u64;
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1312
	r11.s64 = ctx.r1.s64 + 1312;
	// vavgub v0,v0,v6
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// stvx v13,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1376
	r11.s64 = ctx.r1.s64 + 1376;
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1408
	r11.s64 = ctx.r1.s64 + 1408;
	// stvx v11,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1440
	r11.s64 = ctx.r1.s64 + 1440;
	// stvx v10,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1472
	r11.s64 = ctx.r1.s64 + 1472;
	// stvx v9,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1568
	r11.s64 = ctx.r1.s64 + 1568;
	// stvx v8,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1600
	r11.s64 = ctx.r1.s64 + 1600;
	// stvx v7,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1344
	r11.s64 = ctx.r1.s64 + 1344;
	// stvx v6,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1504
	r11.s64 = ctx.r1.s64 + 1504;
	// stvx v5,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1536
	r11.s64 = ctx.r1.s64 + 1536;
	// stvx v4,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r25,128
	r11.s64 = r25.s64 + 128;
	// lvx128 v1,r0,r9
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r9,r30,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// lvx128 v31,r0,r8
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r8,188(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// lvx128 v2,r0,r10
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r29,128
	ctx.r10.s64 = r29.s64 + 128;
	// lvx128 v30,r0,r27
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// vavgub v13,v13,v5
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// stvx v0,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v12,v12,v4
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v4.u8)));
	// addi r29,r11,16
	r29.s64 = r11.s64 + 16;
	// vavgub v11,v11,v3
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// addi r27,r11,64
	r27.s64 = r11.s64 + 64;
	// vavgub v10,v10,v2
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v2.u8)));
	// addi r26,r11,80
	r26.s64 = r11.s64 + 80;
	// stvx128 v13,r30,r8
	_mm_store_si128((__m128i*)(base + ((r30.u32 + ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v9,v9,v1
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// stvx128 v12,r8,r6
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32 + ctx.r6.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v8,v8,v31
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)v31.u8)));
	// stvx128 v11,r5,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r5.u32 + ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v7,v7,v30
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)v30.u8)));
	// stvx128 v10,r7,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32 + ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r25,r10,16
	r25.s64 = ctx.r10.s64 + 16;
	// stvx128 v9,r4,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32 + ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r24,r10,32
	r24.s64 = ctx.r10.s64 + 32;
	// stvx128 v8,r3,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v7,r28,r8
	_mm_store_si128((__m128i*)(base + ((r28.u32 + ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r1,1280
	ctx.r8.s64 = ctx.r1.s64 + 1280;
	// lvx128 v0,r0,r11
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v0,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r1,1312
	ctx.r8.s64 = ctx.r1.s64 + 1312;
	// lvx128 v13,r0,r29
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r1,1344
	r29.s64 = ctx.r1.s64 + 1344;
	// stvx v13,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r11,32
	ctx.r8.s64 = r11.s64 + 32;
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v12,r0,r29
	_mm_store_si128((__m128i*)(base + ((r29.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r11,48
	r29.s64 = r11.s64 + 48;
	// vavgub v0,v0,v12
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v12.u8)));
	// lvx128 v11,r0,r8
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r1,1376
	ctx.r8.s64 = ctx.r1.s64 + 1376;
	// stvx v11,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r10,48
	ctx.r8.s64 = ctx.r10.s64 + 48;
	// lvx128 v10,r0,r29
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r1,1408
	r29.s64 = ctx.r1.s64 + 1408;
	// stvx v10,r0,r29
	_mm_store_si128((__m128i*)(base + ((r29.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r10,64
	r29.s64 = ctx.r10.s64 + 64;
	// lvx128 v9,r0,r27
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r1,1440
	r27.s64 = ctx.r1.s64 + 1440;
	// stvx v9,r0,r27
	_mm_store_si128((__m128i*)(base + ((r27.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r10,80
	r27.s64 = ctx.r10.s64 + 80;
	// lvx128 v8,r0,r26
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r26.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r26,r1,1472
	r26.s64 = ctx.r1.s64 + 1472;
	// stvx v8,r0,r26
	_mm_store_si128((__m128i*)(base + ((r26.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r26,r1,1504
	r26.s64 = ctx.r1.s64 + 1504;
	// lvx128 v7,r0,r25
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r25.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v13,v13,v7
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// stvx v7,r0,r26
	_mm_store_si128((__m128i*)(base + ((r26.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r26,r1,1536
	r26.s64 = ctx.r1.s64 + 1536;
	// lvx128 v6,r0,r24
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r24.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v12,v11,v6
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// stvx v6,r0,r26
	_mm_store_si128((__m128i*)(base + ((r26.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r26,r10,112
	r26.s64 = ctx.r10.s64 + 112;
	// lvx128 v5,r0,r8
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r11,96
	ctx.r8.s64 = r11.s64 + 96;
	// lvx128 v4,r0,r29
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r10,96
	r29.s64 = ctx.r10.s64 + 96;
	// lvx128 v3,r0,r27
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r11,112
	r27.s64 = r11.s64 + 112;
	// vavgub v11,v10,v5
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// addi r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 128;
	// vavgub v10,v9,v4
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v4.u8)));
	// lvx128 v2,r0,r8
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r1,1568
	ctx.r8.s64 = ctx.r1.s64 + 1568;
	// vavgub v9,v8,v3
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// stvx v2,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r1,1600
	ctx.r8.s64 = ctx.r1.s64 + 1600;
	// lvx128 v1,r0,r29
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v31,r0,r27
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v8,v2,v1
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// stvx v31,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r11,128
	ctx.r8.s64 = r11.s64 + 128;
	// lvx128 v30,r0,r26
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r26.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// srawi r11,r30,1
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x1) != 0);
	r11.s64 = r30.s32 >> 1;
	// stvx v0,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v7,v31,v30
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)v30.u8)));
	// stvx128 v13,r30,r9
	_mm_store_si128((__m128i*)(base + ((r30.u32 + ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v12,r6,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r6.u32 + ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v11,r5,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r5.u32 + ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r6,r10,16
	ctx.r6.s64 = ctx.r10.s64 + 16;
	// stvx128 v10,r7,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32 + ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r5,r10,32
	ctx.r5.s64 = ctx.r10.s64 + 32;
	// stvx128 v9,r4,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32 + ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r24,r10,48
	r24.s64 = ctx.r10.s64 + 48;
	// stvx128 v8,r3,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r23,r10,64
	r23.s64 = ctx.r10.s64 + 64;
	// stvx128 v7,r28,r9
	_mm_store_si128((__m128i*)(base + ((r28.u32 + ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,768
	ctx.r9.s64 = ctx.r1.s64 + 768;
	// lvx128 v0,r0,r8
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r22,r10,80
	r22.s64 = ctx.r10.s64 + 80;
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r21,r10,96
	r21.s64 = ctx.r10.s64 + 96;
	// addi r20,r10,112
	r20.s64 = ctx.r10.s64 + 112;
	// lvx128 v11,r0,r6
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r8,32
	ctx.r4.s64 = ctx.r8.s64 + 32;
	// lvx128 v10,r0,r5
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r5.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v0,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,832
	ctx.r10.s64 = ctx.r1.s64 + 832;
	// addi r30,r8,48
	r30.s64 = ctx.r8.s64 + 48;
	// vavgub v0,v0,v12
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v12.u8)));
	// addi r7,r8,16
	ctx.r7.s64 = ctx.r8.s64 + 16;
	// lvx128 v3,r0,r24
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r24.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,800
	ctx.r9.s64 = ctx.r1.s64 + 800;
	// lvx128 v2,r0,r23
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r23.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v9,r0,r4
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r8,64
	r29.s64 = ctx.r8.s64 + 64;
	// stvx v9,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,864
	ctx.r10.s64 = ctx.r1.s64 + 864;
	// lvx128 v8,r0,r30
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r8,80
	r27.s64 = ctx.r8.s64 + 80;
	// lvx128 v13,r0,r7
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r26,r8,96
	r26.s64 = ctx.r8.s64 + 96;
	// stvx v13,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r25,r8,112
	r25.s64 = ctx.r8.s64 + 112;
	// lvx128 v7,r0,r29
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v13,v13,v11
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v11.u8)));
	// stvx v8,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,896
	ctx.r10.s64 = ctx.r1.s64 + 896;
	// lvx128 v6,r0,r27
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r9,164(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// lvx128 v5,r0,r26
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r26.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v4,r0,r25
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r25.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v1,r0,r22
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r22.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v7,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,928
	ctx.r10.s64 = ctx.r1.s64 + 928;
	// lvx128 v31,r0,r21
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r21.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v30,r0,r20
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r20.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v6,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,960
	ctx.r10.s64 = ctx.r1.s64 + 960;
	// stvx v5,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,992
	ctx.r10.s64 = ctx.r1.s64 + 992;
	// stvx v4,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,768
	ctx.r10.s64 = ctx.r1.s64 + 768;
	// stvx v0,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v0,v9,v10
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v10.u8)));
	// addi r10,r1,800
	ctx.r10.s64 = ctx.r1.s64 + 800;
	// addi r29,r1,864
	r29.s64 = ctx.r1.s64 + 864;
	// stvx v13,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r10,r11,r9
	ctx.r10.u64 = r11.u64 + ctx.r9.u64;
	// vavgub v13,v7,v2
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v2.u8)));
	// lwz r8,768(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 768);
	// lwz r7,772(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 772);
	// lwz r6,776(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 776);
	// lwz r5,780(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 780);
	// stw r8,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r8.u32);
	// stw r7,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r7.u32);
	// addi r9,r1,832
	ctx.r9.s64 = ctx.r1.s64 + 832;
	// lwz r8,180(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r4,800(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 800);
	// lwz r3,804(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 804);
	// lwz r7,808(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 808);
	// stvx v0,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v0,v8,v3
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// lwz r30,812(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 812);
	// add r9,r11,r8
	ctx.r9.u64 = r11.u64 + ctx.r8.u64;
	// stvx v0,r0,r29
	_mm_store_si128((__m128i*)(base + ((r29.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r1,896
	r29.s64 = ctx.r1.s64 + 896;
	// vavgub v0,v6,v1
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// stvx v13,r0,r29
	_mm_store_si128((__m128i*)(base + ((r29.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r1,928
	r29.s64 = ctx.r1.s64 + 928;
	// stw r6,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r6.u32);
	// stw r5,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r5.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lwz r6,832(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 832);
	// vavgub v13,v4,v30
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)v30.u8)));
	// lwz r5,836(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 836);
	// lwz r28,844(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 844);
	// stvx v0,r0,r29
	_mm_store_si128((__m128i*)(base + ((r29.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r1,960
	r29.s64 = ctx.r1.s64 + 960;
	// stw r4,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r4.u32);
	// vavgub v0,v5,v31
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)v31.u8)));
	// stw r3,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r3.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lwz r27,864(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 864);
	// lwz r26,868(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 868);
	// stvx v0,r0,r29
	_mm_store_si128((__m128i*)(base + ((r29.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r1,992
	r29.s64 = ctx.r1.s64 + 992;
	// lwz r25,872(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 872);
	// stw r7,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r7.u32);
	// stw r30,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r30.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lwz r24,876(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 876);
	// stvx v13,r0,r29
	_mm_store_si128((__m128i*)(base + ((r29.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r29,840(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 840);
	// lwz r23,896(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 896);
	// lwz r22,900(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 900);
	// stw r6,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r6.u32);
	// stw r5,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r5.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lwz r21,904(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 904);
	// lwz r20,908(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 908);
	// stw r29,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r29.u32);
	// stw r28,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r28.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// stw r27,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r27.u32);
	// stw r26,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r26.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// stw r25,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r25.u32);
	// stw r24,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r24.u32);
	// add r10,r9,r11
	ctx.r10.u64 = ctx.r9.u64 + r11.u64;
	// stw r23,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r23.u32);
	// stw r22,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, r22.u32);
	// stw r21,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r21.u32);
	// stw r20,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, r20.u32);
	// lwz r23,2772(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2772);
	// lwz r19,928(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 928);
	// lwz r18,932(r1)
	r18.u64 = PPC_LOAD_U32(ctx.r1.u32 + 932);
	// lwz r17,936(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 936);
	// lwz r16,940(r1)
	r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 940);
	// stw r19,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r19.u32);
	// stw r18,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r18.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lwz r9,960(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 960);
	// lwz r8,964(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 964);
	// lwz r7,968(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 968);
	// lwz r6,972(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 972);
	// stw r17,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r17.u32);
	// stw r16,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r16.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lwz r5,992(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 992);
	// lwz r4,996(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 996);
	// lwz r3,1000(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1000);
	// lwz r30,1004(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1004);
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// stw r8,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r8.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// stw r7,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r7.u32);
	// stw r6,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r6.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stw r5,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r5.u32);
	// stw r4,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r4.u32);
	// stw r3,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r3.u32);
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r30,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r30.u32);
	// b 0x827326c0
	goto loc_827326C0;
loc_8272E57C:
	// lwz r4,136(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// mullw r11,r17,r18
	r11.s64 = int64_t(r17.s32) * int64_t(r18.s32);
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// lwz r29,1492(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// lwz r6,1496(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// stw r20,664(r1)
	PPC_STORE_U32(ctx.r1.u32 + 664, r20.u32);
	// stw r20,660(r1)
	PPC_STORE_U32(ctx.r1.u32 + 660, r20.u32);
	// stw r20,656(r1)
	PPC_STORE_U32(ctx.r1.u32 + 656, r20.u32);
	// mr r9,r20
	ctx.r9.u64 = r20.u64;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// srawi r7,r17,1
	xer.ca = (r17.s32 < 0) & ((r17.u32 & 0x1) != 0);
	ctx.r7.s64 = r17.s32 >> 1;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// beq cr6,0x8272e5e0
	if (cr6.eq) goto loc_8272E5E0;
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lwz r8,-20(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + -20);
	// addi r11,r10,-2
	r11.s64 = ctx.r10.s64 + -2;
	// rlwinm r8,r8,0,14,14
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x8272e5e0
	if (cr6.eq) goto loc_8272E5E0;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// li r9,1
	ctx.r9.s64 = 1;
	// lhzx r8,r11,r29
	ctx.r8.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// lhzx r11,r11,r6
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r6.u32);
	// sth r8,658(r1)
	PPC_STORE_U16(ctx.r1.u32 + 658, ctx.r8.u16);
	// sth r11,656(r1)
	PPC_STORE_U16(ctx.r1.u32 + 656, r11.u16);
loc_8272E5E0:
	// cmpwi cr6,r16,0
	cr6.compare<int32_t>(r16.s32, 0, xer);
	// bne cr6,0x8272e6b4
	if (!cr6.eq) goto loc_8272E6B4;
	// rlwinm r11,r17,1,0,30
	r11.u64 = __builtin_rotateleft64(r17.u32 | (r17.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r8,r11,r10
	ctx.r8.s64 = ctx.r10.s64 - r11.s64;
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// rlwinm r11,r7,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r7,r11
	r11.u64 = ctx.r7.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r5,r11,r10
	ctx.r5.s64 = ctx.r10.s64 - r11.s64;
	// lwz r11,0(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	// rlwinm r11,r11,0,14,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272e638
	if (cr6.eq) goto loc_8272E638;
	// rlwinm r11,r8,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r10,r9,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r3,r1,658
	ctx.r3.s64 = ctx.r1.s64 + 658;
	// addi r30,r1,656
	r30.s64 = ctx.r1.s64 + 656;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// lhzx r28,r11,r29
	r28.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// lhzx r11,r11,r6
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r6.u32);
	// sthx r28,r10,r3
	PPC_STORE_U16(ctx.r10.u32 + ctx.r3.u32, r28.u16);
	// sthx r11,r10,r30
	PPC_STORE_U16(ctx.r10.u32 + r30.u32, r11.u16);
loc_8272E638:
	// cmpwi cr6,r7,1
	cr6.compare<int32_t>(ctx.r7.s32, 1, xer);
	// beq cr6,0x8272e6b4
	if (cr6.eq) goto loc_8272E6B4;
	// addi r10,r7,-1
	ctx.r10.s64 = ctx.r7.s64 + -1;
	// li r11,1
	r11.s64 = 1;
	// cmpw cr6,r4,r10
	cr6.compare<int32_t>(ctx.r4.s32, ctx.r10.s32, xer);
	// blt cr6,0x8272e654
	if (cr6.lt) goto loc_8272E654;
	// mr r11,r20
	r11.u64 = r20.u64;
loc_8272E654:
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpw cr6,r4,r10
	cr6.compare<int32_t>(ctx.r4.s32, ctx.r10.s32, xer);
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// addi r8,r11,-2
	ctx.r8.s64 = r11.s64 + -2;
	// li r11,1
	r11.s64 = 1;
	// blt cr6,0x8272e670
	if (cr6.lt) goto loc_8272E670;
	// mr r11,r20
	r11.u64 = r20.u64;
loc_8272E670:
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// lwz r11,-20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -20);
	// rlwinm r11,r11,0,14,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272e6b4
	if (cr6.eq) goto loc_8272E6B4;
	// rlwinm r11,r8,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r10,r9,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r1,658
	ctx.r8.s64 = ctx.r1.s64 + 658;
	// addi r7,r1,656
	ctx.r7.s64 = ctx.r1.s64 + 656;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// lhzx r5,r11,r29
	ctx.r5.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// lhzx r11,r11,r6
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r6.u32);
	// sthx r5,r10,r8
	PPC_STORE_U16(ctx.r10.u32 + ctx.r8.u32, ctx.r5.u16);
	// sthx r11,r10,r7
	PPC_STORE_U16(ctx.r10.u32 + ctx.r7.u32, r11.u16);
loc_8272E6B4:
	// mr r6,r20
	ctx.r6.u64 = r20.u64;
	// mr r5,r20
	ctx.r5.u64 = r20.u64;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x8272e7f0
	if (!cr6.gt) goto loc_8272E7F0;
	// addi r10,r1,2144
	ctx.r10.s64 = ctx.r1.s64 + 2144;
	// addi r11,r1,656
	r11.s64 = ctx.r1.s64 + 656;
	// addi r8,r1,2176
	ctx.r8.s64 = ctx.r1.s64 + 2176;
	// mr r7,r9
	ctx.r7.u64 = ctx.r9.u64;
loc_8272E6D4:
	// lhz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rlwinm r4,r4,0,29,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// beq cr6,0x8272e6f8
	if (cr6.eq) goto loc_8272E6F8;
	// stw r4,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r4.u32);
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// addi r8,r8,4
	ctx.r8.s64 = ctx.r8.s64 + 4;
	// b 0x8272e704
	goto loc_8272E704;
loc_8272E6F8:
	// stw r4,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r4.u32);
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
loc_8272E704:
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// bne cr6,0x8272e6d4
	if (!cr6.eq) goto loc_8272E6D4;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x8272e7f0
	if (!cr6.gt) goto loc_8272E7F0;
	// cmpwi cr6,r6,3
	cr6.compare<int32_t>(ctx.r6.s32, 3, xer);
	// beq cr6,0x8272e74c
	if (cr6.eq) goto loc_8272E74C;
	// cmpwi cr6,r5,3
	cr6.compare<int32_t>(ctx.r5.s32, 3, xer);
	// beq cr6,0x8272e74c
	if (cr6.eq) goto loc_8272E74C;
	// cmpw cr6,r6,r5
	cr6.compare<int32_t>(ctx.r6.s32, ctx.r5.s32, xer);
	// blt cr6,0x8272e740
	if (cr6.lt) goto loc_8272E740;
	// lwz r11,2144(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2144);
	// stw r11,476(r1)
	PPC_STORE_U32(ctx.r1.u32 + 476, r11.u32);
	// b 0x8272e7f4
	goto loc_8272E7F4;
loc_8272E740:
	// lwz r11,2176(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2176);
	// stw r11,476(r1)
	PPC_STORE_U32(ctx.r1.u32 + 476, r11.u32);
	// b 0x8272e7f4
	goto loc_8272E7F4;
loc_8272E74C:
	// lhz r11,662(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 662);
	// lhz r10,658(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 658);
	// lhz r7,666(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 666);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lhz r9,660(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 660);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// lhz r8,656(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 656);
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// lhz r6,664(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 664);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// subf r5,r10,r11
	ctx.r5.s64 = r11.s64 - ctx.r10.s64;
	// subf r3,r7,r11
	ctx.r3.s64 = r11.s64 - ctx.r7.s64;
	// subf r30,r10,r7
	r30.s64 = ctx.r7.s64 - ctx.r10.s64;
	// subf r4,r8,r9
	ctx.r4.s64 = ctx.r9.s64 - ctx.r8.s64;
	// subf r28,r6,r9
	r28.s64 = ctx.r9.s64 - ctx.r6.s64;
	// subf r27,r8,r6
	r27.s64 = ctx.r6.s64 - ctx.r8.s64;
	// xor r3,r3,r5
	ctx.r3.u64 = ctx.r3.u64 ^ ctx.r5.u64;
	// xor r30,r30,r5
	r30.u64 = r30.u64 ^ ctx.r5.u64;
	// xor r28,r28,r4
	r28.u64 = r28.u64 ^ ctx.r4.u64;
	// srawi r5,r3,31
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = ctx.r3.s32 >> 31;
	// xor r27,r27,r4
	r27.u64 = r27.u64 ^ ctx.r4.u64;
	// srawi r4,r30,31
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x7FFFFFFF) != 0);
	ctx.r4.s64 = r30.s32 >> 31;
	// srawi r3,r28,31
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r28.s32 >> 31;
	// srawi r30,r27,31
	xer.ca = (r27.s32 < 0) & ((r27.u32 & 0x7FFFFFFF) != 0);
	r30.s64 = r27.s32 >> 31;
	// or r28,r5,r4
	r28.u64 = ctx.r5.u64 | ctx.r4.u64;
	// or r27,r3,r30
	r27.u64 = ctx.r3.u64 | r30.u64;
	// and r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 & ctx.r10.u64;
	// andc r7,r7,r28
	ctx.r7.u64 = ctx.r7.u64 & ~r28.u64;
	// andc r6,r6,r27
	ctx.r6.u64 = ctx.r6.u64 & ~r27.u64;
	// and r8,r30,r8
	ctx.r8.u64 = r30.u64 & ctx.r8.u64;
	// or r10,r7,r10
	ctx.r10.u64 = ctx.r7.u64 | ctx.r10.u64;
	// and r11,r5,r11
	r11.u64 = ctx.r5.u64 & r11.u64;
	// or r8,r6,r8
	ctx.r8.u64 = ctx.r6.u64 | ctx.r8.u64;
	// and r9,r3,r9
	ctx.r9.u64 = ctx.r3.u64 & ctx.r9.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// or r10,r8,r9
	ctx.r10.u64 = ctx.r8.u64 | ctx.r9.u64;
	// sth r11,478(r1)
	PPC_STORE_U16(ctx.r1.u32 + 478, r11.u16);
	// sth r10,476(r1)
	PPC_STORE_U16(ctx.r1.u32 + 476, ctx.r10.u16);
	// b 0x8272e7f4
	goto loc_8272E7F4;
loc_8272E7F0:
	// stw r20,476(r1)
	PPC_STORE_U32(ctx.r1.u32 + 476, r20.u32);
loc_8272E7F4:
	// lhz r10,478(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 478);
	// rlwinm r11,r26,2,0,29
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 2) & 0xFFFFFFFC;
	// lhz r7,66(r31)
	ctx.r7.u64 = PPC_LOAD_U16(r31.u32 + 66);
	// li r25,0
	r25.s64 = 0;
	// extsh r6,r10
	ctx.r6.s64 = ctx.r10.s16;
	// lhz r10,476(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 476);
	// add r27,r11,r15
	r27.u64 = r11.u64 + r15.u64;
	// lwz r19,160(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// extsh r8,r10
	ctx.r8.s64 = ctx.r10.s16;
	// lhz r10,62(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 62);
	// extsh r3,r7
	ctx.r3.s64 = ctx.r7.s16;
	// lwz r20,136(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// extsh r7,r10
	ctx.r7.s64 = ctx.r10.s16;
	// lwz r18,112(r1)
	r18.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// mr r30,r10
	r30.u64 = ctx.r10.u64;
	// stw r25,520(r1)
	PPC_STORE_U32(ctx.r1.u32 + 520, r25.u32);
	// lwz r9,0(r27)
	ctx.r9.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// rlwinm r11,r26,1,0,30
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 1) & 0xFFFFFFFE;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// stw r25,516(r1)
	PPC_STORE_U32(ctx.r1.u32 + 516, r25.u32);
	// add r10,r6,r9
	ctx.r10.u64 = ctx.r6.u64 + ctx.r9.u64;
	// stw r25,512(r1)
	PPC_STORE_U32(ctx.r1.u32 + 512, r25.u32);
	// add r4,r29,r11
	ctx.r4.u64 = r29.u64 + r11.u64;
	// add r10,r10,r7
	ctx.r10.u64 = ctx.r10.u64 + ctx.r7.u64;
	// rlwinm r9,r9,16,16,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 16) & 0xFFFF;
	// and r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 & ctx.r3.u64;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// subf r10,r30,r10
	ctx.r10.s64 = ctx.r10.s64 - r30.s64;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// cmpwi cr6,r20,0
	cr6.compare<int32_t>(r20.s32, 0, xer);
	// sth r10,2(r4)
	PPC_STORE_U16(ctx.r4.u32 + 2, ctx.r10.u16);
	// lwz r10,1492(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// lhz r8,2(r10)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r10.u32 + 2);
	// sth r8,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r8.u16);
	// lwz r6,1492(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// lwz r8,1496(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lhz r10,64(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 64);
	// add r4,r8,r11
	ctx.r4.u64 = ctx.r8.u64 + r11.u64;
	// lhz r7,68(r31)
	ctx.r7.u64 = PPC_LOAD_U16(r31.u32 + 68);
	// lhzx r8,r11,r6
	ctx.r8.u64 = PPC_LOAD_U16(r11.u32 + ctx.r6.u32);
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// extsh r23,r8
	r23.s64 = ctx.r8.s16;
	// extsh r8,r10
	ctx.r8.s64 = ctx.r10.s16;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// and r9,r9,r7
	ctx.r9.u64 = ctx.r9.u64 & ctx.r7.u64;
	// subf r10,r10,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r10.s64;
	// sth r10,2(r4)
	PPC_STORE_U16(ctx.r4.u32 + 2, ctx.r10.u16);
	// lwz r10,1496(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lhz r9,2(r10)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + 2);
	// sth r9,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r9.u16);
	// addi r10,r31,50
	ctx.r10.s64 = r31.s64 + 50;
	// lwz r9,1496(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lwz r28,1500(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// lwz r7,1504(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lhz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// lhzx r9,r9,r11
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r9.u32 + r11.u32);
	// srawi r8,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r8.s64 = ctx.r10.s32 >> 1;
	// extsh r24,r9
	r24.s64 = ctx.r9.s16;
	// mullw r9,r10,r19
	ctx.r9.s64 = int64_t(ctx.r10.s32) * int64_t(r19.s32);
	// add r9,r9,r20
	ctx.r9.u64 = ctx.r9.u64 + r20.u64;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// beq cr6,0x8272e920
	if (cr6.eq) goto loc_8272E920;
	// lwz r4,-20(r18)
	ctx.r4.u64 = PPC_LOAD_U32(r18.u32 + -20);
	// addi r6,r9,-2
	ctx.r6.s64 = ctx.r9.s64 + -2;
	// rlwinm r4,r4,0,14,14
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x8272e920
	if (cr6.eq) goto loc_8272E920;
	// rlwinm r6,r6,1,0,30
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// li r5,1
	ctx.r5.s64 = 1;
	// lhzx r4,r6,r28
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r6.u32 + r28.u32);
	// lhzx r6,r6,r7
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r6.u32 + ctx.r7.u32);
	// sth r4,514(r1)
	PPC_STORE_U16(ctx.r1.u32 + 514, ctx.r4.u16);
	// sth r6,512(r1)
	PPC_STORE_U16(ctx.r1.u32 + 512, ctx.r6.u16);
loc_8272E920:
	// cmpwi cr6,r16,0
	cr6.compare<int32_t>(r16.s32, 0, xer);
	// bne cr6,0x8272e9f0
	if (!cr6.eq) goto loc_8272E9F0;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r6,r10,r9
	ctx.r6.s64 = ctx.r9.s64 - ctx.r10.s64;
	// rlwinm r10,r8,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r8,r10
	ctx.r10.u64 = ctx.r8.u64 + ctx.r10.u64;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r4,r10,r18
	ctx.r4.s64 = r18.s64 - ctx.r10.s64;
	// lwz r10,0(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// rlwinm r10,r10,0,14,14
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8272e974
	if (cr6.eq) goto loc_8272E974;
	// rlwinm r10,r6,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r9,r5,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r3,r1,514
	ctx.r3.s64 = ctx.r1.s64 + 514;
	// addi r30,r1,512
	r30.s64 = ctx.r1.s64 + 512;
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// lhzx r29,r10,r28
	r29.u64 = PPC_LOAD_U16(ctx.r10.u32 + r28.u32);
	// lhzx r10,r10,r7
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r7.u32);
	// sthx r29,r9,r3
	PPC_STORE_U16(ctx.r9.u32 + ctx.r3.u32, r29.u16);
	// sthx r10,r9,r30
	PPC_STORE_U16(ctx.r9.u32 + r30.u32, ctx.r10.u16);
loc_8272E974:
	// cmpwi cr6,r8,1
	cr6.compare<int32_t>(ctx.r8.s32, 1, xer);
	// beq cr6,0x8272e9f0
	if (cr6.eq) goto loc_8272E9F0;
	// addi r9,r8,-1
	ctx.r9.s64 = ctx.r8.s64 + -1;
	// li r10,1
	ctx.r10.s64 = 1;
	// cmpw cr6,r20,r9
	cr6.compare<int32_t>(r20.s32, ctx.r9.s32, xer);
	// blt cr6,0x8272e990
	if (cr6.lt) goto loc_8272E990;
	// mr r10,r25
	ctx.r10.u64 = r25.u64;
loc_8272E990:
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpw cr6,r20,r9
	cr6.compare<int32_t>(r20.s32, ctx.r9.s32, xer);
	// add r10,r10,r6
	ctx.r10.u64 = ctx.r10.u64 + ctx.r6.u64;
	// addi r8,r10,-2
	ctx.r8.s64 = ctx.r10.s64 + -2;
	// li r10,1
	ctx.r10.s64 = 1;
	// blt cr6,0x8272e9ac
	if (cr6.lt) goto loc_8272E9AC;
	// mr r10,r25
	ctx.r10.u64 = r25.u64;
loc_8272E9AC:
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// add r10,r10,r4
	ctx.r10.u64 = ctx.r10.u64 + ctx.r4.u64;
	// lwz r10,-20(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -20);
	// rlwinm r10,r10,0,14,14
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x8272e9f0
	if (cr6.eq) goto loc_8272E9F0;
	// rlwinm r10,r8,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r9,r5,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r1,514
	ctx.r8.s64 = ctx.r1.s64 + 514;
	// addi r6,r1,512
	ctx.r6.s64 = ctx.r1.s64 + 512;
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// lhzx r4,r10,r28
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r10.u32 + r28.u32);
	// lhzx r10,r10,r7
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r7.u32);
	// sthx r4,r9,r8
	PPC_STORE_U16(ctx.r9.u32 + ctx.r8.u32, ctx.r4.u16);
	// sthx r10,r9,r6
	PPC_STORE_U16(ctx.r9.u32 + ctx.r6.u32, ctx.r10.u16);
loc_8272E9F0:
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// ble cr6,0x8272eb2c
	if (!cr6.gt) goto loc_8272EB2C;
	// addi r9,r1,2208
	ctx.r9.s64 = ctx.r1.s64 + 2208;
	// addi r10,r1,512
	ctx.r10.s64 = ctx.r1.s64 + 512;
	// addi r8,r1,2240
	ctx.r8.s64 = ctx.r1.s64 + 2240;
	// mr r7,r5
	ctx.r7.u64 = ctx.r5.u64;
loc_8272EA10:
	// lhz r3,0(r10)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// rlwinm r3,r3,0,29,29
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// lwz r3,0(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// beq cr6,0x8272ea34
	if (cr6.eq) goto loc_8272EA34;
	// stw r3,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r3.u32);
	// addi r4,r4,1
	ctx.r4.s64 = ctx.r4.s64 + 1;
	// addi r8,r8,4
	ctx.r8.s64 = ctx.r8.s64 + 4;
	// b 0x8272ea40
	goto loc_8272EA40;
loc_8272EA34:
	// stw r3,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r3.u32);
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
loc_8272EA40:
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// bne cr6,0x8272ea10
	if (!cr6.eq) goto loc_8272EA10;
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// ble cr6,0x8272eb2c
	if (!cr6.gt) goto loc_8272EB2C;
	// cmpwi cr6,r6,3
	cr6.compare<int32_t>(ctx.r6.s32, 3, xer);
	// beq cr6,0x8272ea88
	if (cr6.eq) goto loc_8272EA88;
	// cmpwi cr6,r4,3
	cr6.compare<int32_t>(ctx.r4.s32, 3, xer);
	// beq cr6,0x8272ea88
	if (cr6.eq) goto loc_8272EA88;
	// cmpw cr6,r6,r4
	cr6.compare<int32_t>(ctx.r6.s32, ctx.r4.s32, xer);
	// blt cr6,0x8272ea7c
	if (cr6.lt) goto loc_8272EA7C;
	// lwz r10,2208(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2208);
	// stw r10,452(r1)
	PPC_STORE_U32(ctx.r1.u32 + 452, ctx.r10.u32);
	// b 0x8272eb30
	goto loc_8272EB30;
loc_8272EA7C:
	// lwz r10,2240(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2240);
	// stw r10,452(r1)
	PPC_STORE_U32(ctx.r1.u32 + 452, ctx.r10.u32);
	// b 0x8272eb30
	goto loc_8272EB30;
loc_8272EA88:
	// lhz r10,518(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 518);
	// lhz r9,514(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 514);
	// lhz r6,522(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 522);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// lhz r8,516(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 516);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// lhz r7,512(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 512);
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// lhz r5,520(r1)
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r1.u32 + 520);
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// extsh r5,r5
	ctx.r5.s64 = ctx.r5.s16;
	// subf r4,r9,r10
	ctx.r4.s64 = ctx.r10.s64 - ctx.r9.s64;
	// subf r30,r6,r10
	r30.s64 = ctx.r10.s64 - ctx.r6.s64;
	// subf r29,r9,r6
	r29.s64 = ctx.r6.s64 - ctx.r9.s64;
	// subf r3,r7,r8
	ctx.r3.s64 = ctx.r8.s64 - ctx.r7.s64;
	// subf r22,r5,r8
	r22.s64 = ctx.r8.s64 - ctx.r5.s64;
	// subf r21,r7,r5
	r21.s64 = ctx.r5.s64 - ctx.r7.s64;
	// xor r30,r30,r4
	r30.u64 = r30.u64 ^ ctx.r4.u64;
	// xor r29,r29,r4
	r29.u64 = r29.u64 ^ ctx.r4.u64;
	// xor r22,r22,r3
	r22.u64 = r22.u64 ^ ctx.r3.u64;
	// srawi r4,r30,31
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x7FFFFFFF) != 0);
	ctx.r4.s64 = r30.s32 >> 31;
	// xor r21,r21,r3
	r21.u64 = r21.u64 ^ ctx.r3.u64;
	// srawi r3,r29,31
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r29.s32 >> 31;
	// srawi r30,r22,31
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x7FFFFFFF) != 0);
	r30.s64 = r22.s32 >> 31;
	// srawi r29,r21,31
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x7FFFFFFF) != 0);
	r29.s64 = r21.s32 >> 31;
	// or r22,r4,r3
	r22.u64 = ctx.r4.u64 | ctx.r3.u64;
	// or r21,r30,r29
	r21.u64 = r30.u64 | r29.u64;
	// and r9,r3,r9
	ctx.r9.u64 = ctx.r3.u64 & ctx.r9.u64;
	// andc r6,r6,r22
	ctx.r6.u64 = ctx.r6.u64 & ~r22.u64;
	// andc r5,r5,r21
	ctx.r5.u64 = ctx.r5.u64 & ~r21.u64;
	// and r7,r29,r7
	ctx.r7.u64 = r29.u64 & ctx.r7.u64;
	// or r9,r6,r9
	ctx.r9.u64 = ctx.r6.u64 | ctx.r9.u64;
	// and r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 & ctx.r10.u64;
	// or r7,r5,r7
	ctx.r7.u64 = ctx.r5.u64 | ctx.r7.u64;
	// and r8,r30,r8
	ctx.r8.u64 = r30.u64 & ctx.r8.u64;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// or r9,r7,r8
	ctx.r9.u64 = ctx.r7.u64 | ctx.r8.u64;
	// sth r10,454(r1)
	PPC_STORE_U16(ctx.r1.u32 + 454, ctx.r10.u16);
	// sth r9,452(r1)
	PPC_STORE_U16(ctx.r1.u32 + 452, ctx.r9.u16);
	// b 0x8272eb30
	goto loc_8272EB30;
loc_8272EB2C:
	// stw r25,452(r1)
	PPC_STORE_U32(ctx.r1.u32 + 452, r25.u32);
loc_8272EB30:
	// lhz r9,454(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 454);
	// add r4,r28,r11
	ctx.r4.u64 = r28.u64 + r11.u64;
	// lwz r10,4(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// add r28,r17,r26
	r28.u64 = r17.u64 + r26.u64;
	// extsh r6,r9
	ctx.r6.s64 = ctx.r9.s16;
	// lhz r9,62(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 62);
	// lhz r8,66(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 66);
	// cmpwi cr6,r20,0
	cr6.compare<int32_t>(r20.s32, 0, xer);
	// add r6,r10,r6
	ctx.r6.u64 = ctx.r10.u64 + ctx.r6.u64;
	// lhz r7,452(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 452);
	// extsh r5,r9
	ctx.r5.s64 = ctx.r9.s16;
	// stw r25,344(r1)
	PPC_STORE_U32(ctx.r1.u32 + 344, r25.u32);
	// mr r30,r9
	r30.u64 = ctx.r9.u64;
	// stw r25,340(r1)
	PPC_STORE_U32(ctx.r1.u32 + 340, r25.u32);
	// add r9,r6,r5
	ctx.r9.u64 = ctx.r6.u64 + ctx.r5.u64;
	// stw r25,336(r1)
	PPC_STORE_U32(ctx.r1.u32 + 336, r25.u32);
	// extsh r3,r8
	ctx.r3.s64 = ctx.r8.s16;
	// rlwinm r10,r10,16,16,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 16) & 0xFFFF;
	// and r6,r9,r3
	ctx.r6.u64 = ctx.r9.u64 & ctx.r3.u64;
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
	// subf r10,r30,r6
	ctx.r10.s64 = ctx.r6.s64 - r30.s64;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// add r7,r9,r7
	ctx.r7.u64 = ctx.r9.u64 + ctx.r7.u64;
	// sth r10,2(r4)
	PPC_STORE_U16(ctx.r4.u32 + 2, ctx.r10.u16);
	// lwz r10,1500(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lhz r9,2(r10)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + 2);
	// sth r9,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r9.u16);
	// lwz r5,1500(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// lwz r9,1504(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lhz r10,64(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 64);
	// add r4,r11,r9
	ctx.r4.u64 = r11.u64 + ctx.r9.u64;
	// lhz r6,68(r31)
	ctx.r6.u64 = PPC_LOAD_U16(r31.u32 + 68);
	// lhzx r9,r5,r11
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r5.u32 + r11.u32);
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// stw r9,1204(r1)
	PPC_STORE_U32(ctx.r1.u32 + 1204, ctx.r9.u32);
	// extsh r9,r10
	ctx.r9.s64 = ctx.r10.s16;
	// add r9,r7,r9
	ctx.r9.u64 = ctx.r7.u64 + ctx.r9.u64;
	// and r9,r9,r6
	ctx.r9.u64 = ctx.r9.u64 & ctx.r6.u64;
	// subf r10,r10,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r10.s64;
	// sth r10,2(r4)
	PPC_STORE_U16(ctx.r4.u32 + 2, ctx.r10.u16);
	// lwz r10,1504(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// lhz r9,2(r10)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + 2);
	// sth r9,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r9.u16);
	// addi r10,r31,50
	ctx.r10.s64 = r31.s64 + 50;
	// lwz r7,1504(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lwz r29,1492(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// lwz r9,1496(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lhz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// lhzx r11,r11,r7
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r7.u32);
	// srawi r5,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r5.s64 = ctx.r10.s32 >> 1;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// stw r11,1200(r1)
	PPC_STORE_U32(ctx.r1.u32 + 1200, r11.u32);
	// mullw r11,r10,r19
	r11.s64 = int64_t(ctx.r10.s32) * int64_t(r19.s32);
	// add r11,r11,r20
	r11.u64 = r11.u64 + r20.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// beq cr6,0x8272ec60
	if (cr6.eq) goto loc_8272EC60;
	// lwz r6,-20(r18)
	ctx.r6.u64 = PPC_LOAD_U32(r18.u32 + -20);
	// addi r7,r11,-2
	ctx.r7.s64 = r11.s64 + -2;
	// rlwinm r4,r6,0,14,14
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x8272ec60
	if (cr6.eq) goto loc_8272EC60;
	// rlwinm r8,r6,0,21,23
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 0) & 0x700;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// li r8,1
	ctx.r8.s64 = 1;
	// beq cr6,0x8272ec4c
	if (cr6.eq) goto loc_8272EC4C;
	// add r7,r7,r10
	ctx.r7.u64 = ctx.r7.u64 + ctx.r10.u64;
loc_8272EC4C:
	// rlwinm r7,r7,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r6,r7,r29
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r7.u32 + r29.u32);
	// lhzx r7,r7,r9
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r9.u32);
	// sth r6,338(r1)
	PPC_STORE_U16(ctx.r1.u32 + 338, ctx.r6.u16);
	// sth r7,336(r1)
	PPC_STORE_U16(ctx.r1.u32 + 336, ctx.r7.u16);
loc_8272EC60:
	// cmpwi cr6,r16,0
	cr6.compare<int32_t>(r16.s32, 0, xer);
	// bne cr6,0x8272ed8c
	if (!cr6.eq) goto loc_8272ED8C;
	// rlwinm r7,r10,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r6,r7,r11
	ctx.r6.s64 = r11.s64 - ctx.r7.s64;
	// rlwinm r11,r5,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r5,r11
	r11.u64 = ctx.r5.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r4,r11,r18
	ctx.r4.s64 = r18.s64 - r11.s64;
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// rlwinm r7,r11,0,14,14
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// beq cr6,0x8272ece0
	if (cr6.eq) goto loc_8272ECE0;
	// rlwinm r11,r11,0,21,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x700;
	// addi r3,r1,338
	ctx.r3.s64 = ctx.r1.s64 + 338;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// addi r30,r1,336
	r30.s64 = ctx.r1.s64 + 336;
	// bne cr6,0x8272ecc0
	if (!cr6.eq) goto loc_8272ECC0;
	// rlwinm r11,r6,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r7,r8,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// lhzx r27,r11,r29
	r27.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// lhzx r11,r11,r9
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r9.u32);
	// sthx r27,r7,r3
	PPC_STORE_U16(ctx.r7.u32 + ctx.r3.u32, r27.u16);
	// sthx r11,r7,r30
	PPC_STORE_U16(ctx.r7.u32 + r30.u32, r11.u16);
	// b 0x8272ecdc
	goto loc_8272ECDC;
loc_8272ECC0:
	// add r7,r6,r10
	ctx.r7.u64 = ctx.r6.u64 + ctx.r10.u64;
	// rlwinm r11,r8,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r7,r7,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r27,r7,r29
	r27.u64 = PPC_LOAD_U16(ctx.r7.u32 + r29.u32);
	// lhzx r7,r7,r9
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r9.u32);
	// sthx r27,r11,r3
	PPC_STORE_U16(r11.u32 + ctx.r3.u32, r27.u16);
	// sthx r7,r11,r30
	PPC_STORE_U16(r11.u32 + r30.u32, ctx.r7.u16);
loc_8272ECDC:
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
loc_8272ECE0:
	// cmpwi cr6,r5,1
	cr6.compare<int32_t>(ctx.r5.s32, 1, xer);
	// beq cr6,0x8272ed8c
	if (cr6.eq) goto loc_8272ED8C;
	// addi r7,r5,-1
	ctx.r7.s64 = ctx.r5.s64 + -1;
	// li r11,1
	r11.s64 = 1;
	// cmpw cr6,r20,r7
	cr6.compare<int32_t>(r20.s32, ctx.r7.s32, xer);
	// blt cr6,0x8272ecfc
	if (cr6.lt) goto loc_8272ECFC;
	// mr r11,r25
	r11.u64 = r25.u64;
loc_8272ECFC:
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpw cr6,r20,r7
	cr6.compare<int32_t>(r20.s32, ctx.r7.s32, xer);
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// addi r7,r11,-2
	ctx.r7.s64 = r11.s64 + -2;
	// li r11,1
	r11.s64 = 1;
	// blt cr6,0x8272ed18
	if (cr6.lt) goto loc_8272ED18;
	// mr r11,r25
	r11.u64 = r25.u64;
loc_8272ED18:
	// rlwinm r6,r11,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// lwz r11,-20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -20);
	// rlwinm r6,r11,0,14,14
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x8272ed8c
	if (cr6.eq) goto loc_8272ED8C;
	// rlwinm r11,r11,0,21,23
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x700;
	// addi r6,r1,336
	ctx.r6.s64 = ctx.r1.s64 + 336;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x8272ed68
	if (!cr6.eq) goto loc_8272ED68;
	// rlwinm r11,r7,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r10,r8,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r7,r1,338
	ctx.r7.s64 = ctx.r1.s64 + 338;
	// lhzx r5,r11,r29
	ctx.r5.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// lhzx r11,r11,r9
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r9.u32);
	// sthx r5,r10,r7
	PPC_STORE_U16(ctx.r10.u32 + ctx.r7.u32, ctx.r5.u16);
	// sthx r11,r10,r6
	PPC_STORE_U16(ctx.r10.u32 + ctx.r6.u32, r11.u16);
	// b 0x8272ed88
	goto loc_8272ED88;
loc_8272ED68:
	// add r10,r7,r10
	ctx.r10.u64 = ctx.r7.u64 + ctx.r10.u64;
	// rlwinm r11,r8,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r7,r1,338
	ctx.r7.s64 = ctx.r1.s64 + 338;
	// lhzx r5,r10,r29
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r10.u32 + r29.u32);
	// lhzx r10,r10,r9
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r9.u32);
	// sthx r5,r11,r7
	PPC_STORE_U16(r11.u32 + ctx.r7.u32, ctx.r5.u16);
	// sthx r10,r11,r6
	PPC_STORE_U16(r11.u32 + ctx.r6.u32, ctx.r10.u16);
loc_8272ED88:
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
loc_8272ED8C:
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x8272eec8
	if (!cr6.gt) goto loc_8272EEC8;
	// addi r10,r1,2272
	ctx.r10.s64 = ctx.r1.s64 + 2272;
	// addi r11,r1,336
	r11.s64 = ctx.r1.s64 + 336;
	// addi r9,r1,2304
	ctx.r9.s64 = ctx.r1.s64 + 2304;
	// mr r7,r8
	ctx.r7.u64 = ctx.r8.u64;
loc_8272EDAC:
	// lhz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rlwinm r4,r4,0,29,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// beq cr6,0x8272edd0
	if (cr6.eq) goto loc_8272EDD0;
	// stw r4,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r4.u32);
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// b 0x8272eddc
	goto loc_8272EDDC;
loc_8272EDD0:
	// stw r4,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r4.u32);
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
loc_8272EDDC:
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// bne cr6,0x8272edac
	if (!cr6.eq) goto loc_8272EDAC;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x8272eec8
	if (!cr6.gt) goto loc_8272EEC8;
	// cmpwi cr6,r6,3
	cr6.compare<int32_t>(ctx.r6.s32, 3, xer);
	// beq cr6,0x8272ee24
	if (cr6.eq) goto loc_8272EE24;
	// cmpwi cr6,r5,3
	cr6.compare<int32_t>(ctx.r5.s32, 3, xer);
	// beq cr6,0x8272ee24
	if (cr6.eq) goto loc_8272EE24;
	// cmpw cr6,r6,r5
	cr6.compare<int32_t>(ctx.r6.s32, ctx.r5.s32, xer);
	// blt cr6,0x8272ee18
	if (cr6.lt) goto loc_8272EE18;
	// lwz r11,2272(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2272);
	// stw r11,488(r1)
	PPC_STORE_U32(ctx.r1.u32 + 488, r11.u32);
	// b 0x8272eecc
	goto loc_8272EECC;
loc_8272EE18:
	// lwz r11,2304(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2304);
	// stw r11,488(r1)
	PPC_STORE_U32(ctx.r1.u32 + 488, r11.u32);
	// b 0x8272eecc
	goto loc_8272EECC;
loc_8272EE24:
	// lhz r11,342(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 342);
	// lhz r10,338(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 338);
	// lhz r7,346(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 346);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lhz r9,340(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 340);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// lhz r8,336(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 336);
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// lhz r6,344(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 344);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// subf r5,r10,r11
	ctx.r5.s64 = r11.s64 - ctx.r10.s64;
	// subf r3,r7,r11
	ctx.r3.s64 = r11.s64 - ctx.r7.s64;
	// subf r30,r10,r7
	r30.s64 = ctx.r7.s64 - ctx.r10.s64;
	// subf r4,r8,r9
	ctx.r4.s64 = ctx.r9.s64 - ctx.r8.s64;
	// subf r27,r6,r9
	r27.s64 = ctx.r9.s64 - ctx.r6.s64;
	// subf r26,r8,r6
	r26.s64 = ctx.r6.s64 - ctx.r8.s64;
	// xor r3,r3,r5
	ctx.r3.u64 = ctx.r3.u64 ^ ctx.r5.u64;
	// xor r30,r30,r5
	r30.u64 = r30.u64 ^ ctx.r5.u64;
	// xor r27,r27,r4
	r27.u64 = r27.u64 ^ ctx.r4.u64;
	// srawi r5,r3,31
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = ctx.r3.s32 >> 31;
	// xor r26,r26,r4
	r26.u64 = r26.u64 ^ ctx.r4.u64;
	// srawi r4,r30,31
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x7FFFFFFF) != 0);
	ctx.r4.s64 = r30.s32 >> 31;
	// srawi r3,r27,31
	xer.ca = (r27.s32 < 0) & ((r27.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r27.s32 >> 31;
	// srawi r30,r26,31
	xer.ca = (r26.s32 < 0) & ((r26.u32 & 0x7FFFFFFF) != 0);
	r30.s64 = r26.s32 >> 31;
	// and r11,r5,r11
	r11.u64 = ctx.r5.u64 & r11.u64;
	// or r27,r5,r4
	r27.u64 = ctx.r5.u64 | ctx.r4.u64;
	// or r5,r3,r30
	ctx.r5.u64 = ctx.r3.u64 | r30.u64;
	// andc r7,r7,r27
	ctx.r7.u64 = ctx.r7.u64 & ~r27.u64;
	// andc r6,r6,r5
	ctx.r6.u64 = ctx.r6.u64 & ~ctx.r5.u64;
	// and r8,r30,r8
	ctx.r8.u64 = r30.u64 & ctx.r8.u64;
	// and r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 & ctx.r10.u64;
	// or r11,r7,r11
	r11.u64 = ctx.r7.u64 | r11.u64;
	// or r8,r6,r8
	ctx.r8.u64 = ctx.r6.u64 | ctx.r8.u64;
	// and r9,r3,r9
	ctx.r9.u64 = ctx.r3.u64 & ctx.r9.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// or r10,r8,r9
	ctx.r10.u64 = ctx.r8.u64 | ctx.r9.u64;
	// sth r11,490(r1)
	PPC_STORE_U16(ctx.r1.u32 + 490, r11.u16);
	// sth r10,488(r1)
	PPC_STORE_U16(ctx.r1.u32 + 488, ctx.r10.u16);
	// b 0x8272eecc
	goto loc_8272EECC;
loc_8272EEC8:
	// stw r25,488(r1)
	PPC_STORE_U32(ctx.r1.u32 + 488, r25.u32);
loc_8272EECC:
	// rlwinm r9,r28,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lhz r10,62(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 62);
	// lhz r7,66(r31)
	ctx.r7.u64 = PPC_LOAD_U16(r31.u32 + 66);
	// rlwinm r11,r28,1,0,30
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 1) & 0xFFFFFFFE;
	// add r27,r9,r15
	r27.u64 = ctx.r9.u64 + r15.u64;
	// lhz r9,490(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 490);
	// extsh r6,r10
	ctx.r6.s64 = ctx.r10.s16;
	// stw r25,376(r1)
	PPC_STORE_U32(ctx.r1.u32 + 376, r25.u32);
	// mr r4,r10
	ctx.r4.u64 = ctx.r10.u64;
	// stw r25,372(r1)
	PPC_STORE_U32(ctx.r1.u32 + 372, r25.u32);
	// extsh r8,r9
	ctx.r8.s64 = ctx.r9.s16;
	// lhz r9,488(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 488);
	// extsh r5,r7
	ctx.r5.s64 = ctx.r7.s16;
	// stw r25,368(r1)
	PPC_STORE_U32(ctx.r1.u32 + 368, r25.u32);
	// lwz r10,0(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// add r3,r29,r11
	ctx.r3.u64 = r29.u64 + r11.u64;
	// extsh r7,r9
	ctx.r7.s64 = ctx.r9.s16;
	// rlwinm r30,r10,16,16,31
	r30.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 16) & 0xFFFF;
	// add r10,r8,r10
	ctx.r10.u64 = ctx.r8.u64 + ctx.r10.u64;
	// extsh r8,r30
	ctx.r8.s64 = r30.s16;
	// add r10,r10,r6
	ctx.r10.u64 = ctx.r10.u64 + ctx.r6.u64;
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// and r10,r10,r5
	ctx.r10.u64 = ctx.r10.u64 & ctx.r5.u64;
	// mr r9,r25
	ctx.r9.u64 = r25.u64;
	// subf r10,r4,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r4.s64;
	// cmpwi cr6,r20,0
	cr6.compare<int32_t>(r20.s32, 0, xer);
	// sth r10,2(r3)
	PPC_STORE_U16(ctx.r3.u32 + 2, ctx.r10.u16);
	// lwz r10,1492(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// lhz r7,2(r10)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r10.u32 + 2);
	// sth r7,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r7.u16);
	// lwz r5,1492(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// lwz r7,1496(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lhz r10,64(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 64);
	// add r4,r7,r11
	ctx.r4.u64 = ctx.r7.u64 + r11.u64;
	// lhz r6,68(r31)
	ctx.r6.u64 = PPC_LOAD_U16(r31.u32 + 68);
	// lhzx r7,r11,r5
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + ctx.r5.u32);
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// extsh r22,r7
	r22.s64 = ctx.r7.s16;
	// extsh r7,r10
	ctx.r7.s64 = ctx.r10.s16;
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// and r8,r8,r6
	ctx.r8.u64 = ctx.r8.u64 & ctx.r6.u64;
	// subf r10,r10,r8
	ctx.r10.s64 = ctx.r8.s64 - ctx.r10.s64;
	// sth r10,2(r4)
	PPC_STORE_U16(ctx.r4.u32 + 2, ctx.r10.u16);
	// lwz r10,1496(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lhz r8,2(r10)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r10.u32 + 2);
	// sth r8,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r8.u16);
	// addi r10,r31,50
	ctx.r10.s64 = r31.s64 + 50;
	// lwz r8,1496(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lwz r28,1500(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// lwz r7,1504(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lhz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// lhzx r8,r8,r11
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r8.u32 + r11.u32);
	// srawi r4,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r4.s64 = ctx.r10.s32 >> 1;
	// extsh r21,r8
	r21.s64 = ctx.r8.s16;
	// mullw r8,r10,r19
	ctx.r8.s64 = int64_t(ctx.r10.s32) * int64_t(r19.s32);
	// add r8,r8,r20
	ctx.r8.u64 = ctx.r8.u64 + r20.u64;
	// rlwinm r8,r8,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// beq cr6,0x8272f008
	if (cr6.eq) goto loc_8272F008;
	// lwz r5,-20(r18)
	ctx.r5.u64 = PPC_LOAD_U32(r18.u32 + -20);
	// addi r6,r8,-2
	ctx.r6.s64 = ctx.r8.s64 + -2;
	// rlwinm r3,r5,0,14,14
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x8272f008
	if (cr6.eq) goto loc_8272F008;
	// rlwinm r9,r5,0,21,23
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 0) & 0x700;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// li r9,1
	ctx.r9.s64 = 1;
	// bne cr6,0x8272eff0
	if (!cr6.eq) goto loc_8272EFF0;
	// rlwinm r6,r6,1,0,30
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r5,r6,r28
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r6.u32 + r28.u32);
	// lhzx r6,r6,r7
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r6.u32 + ctx.r7.u32);
	// b 0x8272f000
	goto loc_8272F000;
loc_8272EFF0:
	// add r6,r6,r10
	ctx.r6.u64 = ctx.r6.u64 + ctx.r10.u64;
	// rlwinm r6,r6,1,0,30
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r5,r28,r6
	ctx.r5.u64 = PPC_LOAD_U16(r28.u32 + ctx.r6.u32);
	// lhzx r6,r7,r6
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r6.u32);
loc_8272F000:
	// sth r6,368(r1)
	PPC_STORE_U16(ctx.r1.u32 + 368, ctx.r6.u16);
	// sth r5,370(r1)
	PPC_STORE_U16(ctx.r1.u32 + 370, ctx.r5.u16);
loc_8272F008:
	// cmpwi cr6,r16,0
	cr6.compare<int32_t>(r16.s32, 0, xer);
	// bne cr6,0x8272f134
	if (!cr6.eq) goto loc_8272F134;
	// rlwinm r6,r10,1,0,30
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r5,r6,r8
	ctx.r5.s64 = ctx.r8.s64 - ctx.r6.s64;
	// rlwinm r8,r4,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// add r8,r4,r8
	ctx.r8.u64 = ctx.r4.u64 + ctx.r8.u64;
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r3,r8,r18
	ctx.r3.s64 = r18.s64 - ctx.r8.s64;
	// lwz r8,0(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// rlwinm r6,r8,0,14,14
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x8272f088
	if (cr6.eq) goto loc_8272F088;
	// rlwinm r8,r8,0,21,23
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x700;
	// addi r30,r1,370
	r30.s64 = ctx.r1.s64 + 370;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// addi r29,r1,368
	r29.s64 = ctx.r1.s64 + 368;
	// bne cr6,0x8272f068
	if (!cr6.eq) goto loc_8272F068;
	// rlwinm r8,r5,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r6,r9,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lhzx r26,r8,r28
	r26.u64 = PPC_LOAD_U16(ctx.r8.u32 + r28.u32);
	// lhzx r8,r8,r7
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r8.u32 + ctx.r7.u32);
	// sthx r26,r30,r6
	PPC_STORE_U16(r30.u32 + ctx.r6.u32, r26.u16);
	// sthx r8,r29,r6
	PPC_STORE_U16(r29.u32 + ctx.r6.u32, ctx.r8.u16);
	// b 0x8272f084
	goto loc_8272F084;
loc_8272F068:
	// add r6,r5,r10
	ctx.r6.u64 = ctx.r5.u64 + ctx.r10.u64;
	// rlwinm r8,r9,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r6,r6,1,0,30
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r26,r28,r6
	r26.u64 = PPC_LOAD_U16(r28.u32 + ctx.r6.u32);
	// lhzx r6,r7,r6
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r6.u32);
	// sthx r26,r30,r8
	PPC_STORE_U16(r30.u32 + ctx.r8.u32, r26.u16);
	// sthx r6,r29,r8
	PPC_STORE_U16(r29.u32 + ctx.r8.u32, ctx.r6.u16);
loc_8272F084:
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
loc_8272F088:
	// cmpwi cr6,r4,1
	cr6.compare<int32_t>(ctx.r4.s32, 1, xer);
	// beq cr6,0x8272f134
	if (cr6.eq) goto loc_8272F134;
	// addi r6,r4,-1
	ctx.r6.s64 = ctx.r4.s64 + -1;
	// li r8,1
	ctx.r8.s64 = 1;
	// cmpw cr6,r20,r6
	cr6.compare<int32_t>(r20.s32, ctx.r6.s32, xer);
	// blt cr6,0x8272f0a4
	if (cr6.lt) goto loc_8272F0A4;
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
loc_8272F0A4:
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpw cr6,r20,r6
	cr6.compare<int32_t>(r20.s32, ctx.r6.s32, xer);
	// add r8,r8,r5
	ctx.r8.u64 = ctx.r8.u64 + ctx.r5.u64;
	// addi r6,r8,-2
	ctx.r6.s64 = ctx.r8.s64 + -2;
	// li r8,1
	ctx.r8.s64 = 1;
	// blt cr6,0x8272f0c0
	if (cr6.lt) goto loc_8272F0C0;
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
loc_8272F0C0:
	// rlwinm r5,r8,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// add r8,r8,r5
	ctx.r8.u64 = ctx.r8.u64 + ctx.r5.u64;
	// rlwinm r8,r8,3,0,28
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// add r8,r8,r3
	ctx.r8.u64 = ctx.r8.u64 + ctx.r3.u64;
	// lwz r8,-20(r8)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + -20);
	// rlwinm r5,r8,0,14,14
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x8272f134
	if (cr6.eq) goto loc_8272F134;
	// rlwinm r8,r8,0,21,23
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x700;
	// addi r5,r1,368
	ctx.r5.s64 = ctx.r1.s64 + 368;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// bne cr6,0x8272f110
	if (!cr6.eq) goto loc_8272F110;
	// rlwinm r10,r6,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r8,r9,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r6,r1,370
	ctx.r6.s64 = ctx.r1.s64 + 370;
	// lhzx r4,r10,r28
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r10.u32 + r28.u32);
	// lhzx r10,r10,r7
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r7.u32);
	// sthx r4,r6,r8
	PPC_STORE_U16(ctx.r6.u32 + ctx.r8.u32, ctx.r4.u16);
	// sthx r10,r5,r8
	PPC_STORE_U16(ctx.r5.u32 + ctx.r8.u32, ctx.r10.u16);
	// b 0x8272f130
	goto loc_8272F130;
loc_8272F110:
	// add r8,r6,r10
	ctx.r8.u64 = ctx.r6.u64 + ctx.r10.u64;
	// rlwinm r10,r9,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r8,r8,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r6,r1,370
	ctx.r6.s64 = ctx.r1.s64 + 370;
	// lhzx r4,r28,r8
	ctx.r4.u64 = PPC_LOAD_U16(r28.u32 + ctx.r8.u32);
	// lhzx r8,r7,r8
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r8.u32);
	// sthx r4,r6,r10
	PPC_STORE_U16(ctx.r6.u32 + ctx.r10.u32, ctx.r4.u16);
	// sthx r8,r5,r10
	PPC_STORE_U16(ctx.r5.u32 + ctx.r10.u32, ctx.r8.u16);
loc_8272F130:
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
loc_8272F134:
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x8272f270
	if (!cr6.gt) goto loc_8272F270;
	// addi r8,r1,2336
	ctx.r8.s64 = ctx.r1.s64 + 2336;
	// addi r10,r1,368
	ctx.r10.s64 = ctx.r1.s64 + 368;
	// addi r7,r1,2368
	ctx.r7.s64 = ctx.r1.s64 + 2368;
	// mr r6,r9
	ctx.r6.u64 = ctx.r9.u64;
loc_8272F154:
	// lhz r3,0(r10)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// rlwinm r3,r3,0,29,29
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// lwz r3,0(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// beq cr6,0x8272f178
	if (cr6.eq) goto loc_8272F178;
	// stw r3,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, ctx.r3.u32);
	// addi r4,r4,1
	ctx.r4.s64 = ctx.r4.s64 + 1;
	// addi r7,r7,4
	ctx.r7.s64 = ctx.r7.s64 + 4;
	// b 0x8272f184
	goto loc_8272F184;
loc_8272F178:
	// stw r3,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r3.u32);
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// addi r8,r8,4
	ctx.r8.s64 = ctx.r8.s64 + 4;
loc_8272F184:
	// addi r6,r6,-1
	ctx.r6.s64 = ctx.r6.s64 + -1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// bne cr6,0x8272f154
	if (!cr6.eq) goto loc_8272F154;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x8272f270
	if (!cr6.gt) goto loc_8272F270;
	// cmpwi cr6,r5,3
	cr6.compare<int32_t>(ctx.r5.s32, 3, xer);
	// beq cr6,0x8272f1cc
	if (cr6.eq) goto loc_8272F1CC;
	// cmpwi cr6,r4,3
	cr6.compare<int32_t>(ctx.r4.s32, 3, xer);
	// beq cr6,0x8272f1cc
	if (cr6.eq) goto loc_8272F1CC;
	// cmpw cr6,r5,r4
	cr6.compare<int32_t>(ctx.r5.s32, ctx.r4.s32, xer);
	// blt cr6,0x8272f1c0
	if (cr6.lt) goto loc_8272F1C0;
	// lwz r10,2336(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2336);
	// stw r10,460(r1)
	PPC_STORE_U32(ctx.r1.u32 + 460, ctx.r10.u32);
	// b 0x8272f274
	goto loc_8272F274;
loc_8272F1C0:
	// lwz r10,2368(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2368);
	// stw r10,460(r1)
	PPC_STORE_U32(ctx.r1.u32 + 460, ctx.r10.u32);
	// b 0x8272f274
	goto loc_8272F274;
loc_8272F1CC:
	// lhz r10,374(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 374);
	// lhz r9,370(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 370);
	// lhz r6,378(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 378);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// lhz r8,372(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 372);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// lhz r7,368(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 368);
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// lhz r5,376(r1)
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r1.u32 + 376);
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// extsh r5,r5
	ctx.r5.s64 = ctx.r5.s16;
	// subf r4,r9,r10
	ctx.r4.s64 = ctx.r10.s64 - ctx.r9.s64;
	// subf r30,r6,r10
	r30.s64 = ctx.r10.s64 - ctx.r6.s64;
	// subf r29,r9,r6
	r29.s64 = ctx.r6.s64 - ctx.r9.s64;
	// subf r3,r7,r8
	ctx.r3.s64 = ctx.r8.s64 - ctx.r7.s64;
	// subf r26,r5,r8
	r26.s64 = ctx.r8.s64 - ctx.r5.s64;
	// subf r25,r7,r5
	r25.s64 = ctx.r5.s64 - ctx.r7.s64;
	// xor r30,r30,r4
	r30.u64 = r30.u64 ^ ctx.r4.u64;
	// xor r29,r29,r4
	r29.u64 = r29.u64 ^ ctx.r4.u64;
	// xor r26,r26,r3
	r26.u64 = r26.u64 ^ ctx.r3.u64;
	// srawi r4,r30,31
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x7FFFFFFF) != 0);
	ctx.r4.s64 = r30.s32 >> 31;
	// xor r25,r25,r3
	r25.u64 = r25.u64 ^ ctx.r3.u64;
	// srawi r3,r29,31
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r29.s32 >> 31;
	// srawi r30,r26,31
	xer.ca = (r26.s32 < 0) & ((r26.u32 & 0x7FFFFFFF) != 0);
	r30.s64 = r26.s32 >> 31;
	// srawi r29,r25,31
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x7FFFFFFF) != 0);
	r29.s64 = r25.s32 >> 31;
	// or r26,r4,r3
	r26.u64 = ctx.r4.u64 | ctx.r3.u64;
	// or r25,r30,r29
	r25.u64 = r30.u64 | r29.u64;
	// and r9,r3,r9
	ctx.r9.u64 = ctx.r3.u64 & ctx.r9.u64;
	// andc r6,r6,r26
	ctx.r6.u64 = ctx.r6.u64 & ~r26.u64;
	// andc r5,r5,r25
	ctx.r5.u64 = ctx.r5.u64 & ~r25.u64;
	// and r7,r29,r7
	ctx.r7.u64 = r29.u64 & ctx.r7.u64;
	// or r9,r6,r9
	ctx.r9.u64 = ctx.r6.u64 | ctx.r9.u64;
	// and r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 & ctx.r10.u64;
	// or r7,r5,r7
	ctx.r7.u64 = ctx.r5.u64 | ctx.r7.u64;
	// and r8,r30,r8
	ctx.r8.u64 = r30.u64 & ctx.r8.u64;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// or r9,r7,r8
	ctx.r9.u64 = ctx.r7.u64 | ctx.r8.u64;
	// sth r10,462(r1)
	PPC_STORE_U16(ctx.r1.u32 + 462, ctx.r10.u16);
	// sth r9,460(r1)
	PPC_STORE_U16(ctx.r1.u32 + 460, ctx.r9.u16);
	// b 0x8272f274
	goto loc_8272F274;
loc_8272F270:
	// stw r25,460(r1)
	PPC_STORE_U32(ctx.r1.u32 + 460, r25.u32);
loc_8272F274:
	// lhz r10,462(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 462);
	// add r3,r28,r11
	ctx.r3.u64 = r28.u64 + r11.u64;
	// lwz r9,4(r27)
	ctx.r9.u64 = PPC_LOAD_U32(r27.u32 + 4);
	// rlwinm r27,r24,2,26,29
	r27.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 2) & 0x3C;
	// lhz r8,62(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 62);
	// extsh r5,r10
	ctx.r5.s64 = ctx.r10.s16;
	// lhz r10,66(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 66);
	// add r5,r9,r5
	ctx.r5.u64 = ctx.r9.u64 + ctx.r5.u64;
	// lhz r7,460(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 460);
	// extsh r4,r8
	ctx.r4.s64 = ctx.r8.s16;
	// stw r21,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r21.u32);
	// mr r26,r8
	r26.u64 = ctx.r8.u64;
	// stw r22,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r22.u32);
	// extsh r29,r10
	r29.s64 = ctx.r10.s16;
	// lwz r10,136(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// add r8,r5,r4
	ctx.r8.u64 = ctx.r5.u64 + ctx.r4.u64;
	// stw r24,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r24.u32);
	// rlwinm r9,r9,16,16,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 16) & 0xFFFF;
	// stw r23,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r23.u32);
	// and r5,r8,r29
	ctx.r5.u64 = ctx.r8.u64 & r29.u64;
	// mr r8,r9
	ctx.r8.u64 = ctx.r9.u64;
	// subf r9,r26,r5
	ctx.r9.s64 = ctx.r5.s64 - r26.s64;
	// extsh r6,r7
	ctx.r6.s64 = ctx.r7.s16;
	// lwz r7,160(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// rlwinm r7,r7,16,0,15
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 16) & 0xFFFF0000;
	// add r8,r6,r8
	ctx.r8.u64 = ctx.r6.u64 + ctx.r8.u64;
	// sth r9,2(r3)
	PPC_STORE_U16(ctx.r3.u32 + 2, ctx.r9.u16);
	// or r28,r7,r10
	r28.u64 = ctx.r7.u64 | ctx.r10.u64;
	// lwz r9,1500(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// mr r10,r23
	ctx.r10.u64 = r23.u64;
	// lwz r7,120(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// rlwinm r26,r28,6,0,25
	r26.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 6) & 0xFFFFFFC0;
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// srawi r30,r7,1
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x1) != 0);
	r30.s64 = ctx.r7.s32 >> 1;
	// clrlwi r7,r23,30
	ctx.r7.u64 = r23.u32 & 0x3;
	// rlwimi r10,r24,16,0,15
	ctx.r10.u64 = (__builtin_rotateleft32(r24.u32, 16) & 0xFFFF0000) | (ctx.r10.u64 & 0xFFFFFFFF0000FFFF);
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// lhz r6,2(r9)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r9.u32 + 2);
	// rlwinm r5,r10,1,15,15
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x10000;
	// srawi r7,r7,2
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x3) != 0);
	ctx.r7.s64 = ctx.r7.s32 >> 2;
	// add r7,r7,r23
	ctx.r7.u64 = ctx.r7.u64 + r23.u64;
	// sth r6,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r6.u16);
	// srawi r19,r7,1
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x1) != 0);
	r19.s64 = ctx.r7.s32 >> 1;
	// lwz r3,1500(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// srawi r7,r24,1
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x1) != 0);
	ctx.r7.s64 = r24.s32 >> 1;
	// lwz r6,1504(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lhz r9,64(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 64);
	// rlwinm r7,r7,0,0,28
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 0) & 0xFFFFFFF8;
	// add r29,r11,r6
	r29.u64 = r11.u64 + ctx.r6.u64;
	// lhz r4,68(r31)
	ctx.r4.u64 = PPC_LOAD_U16(r31.u32 + 68);
	// stw r19,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r19.u32);
	// lhzx r6,r3,r11
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r3.u32 + r11.u32);
	// extsh r4,r4
	ctx.r4.s64 = ctx.r4.s16;
	// extsh r20,r6
	r20.s64 = ctx.r6.s16;
	// extsh r6,r9
	ctx.r6.s64 = ctx.r9.s16;
	// add r8,r8,r6
	ctx.r8.u64 = ctx.r8.u64 + ctx.r6.u64;
	// and r8,r8,r4
	ctx.r8.u64 = ctx.r8.u64 & ctx.r4.u64;
	// subf r9,r9,r8
	ctx.r9.s64 = ctx.r8.s64 - ctx.r9.s64;
	// sth r9,2(r29)
	PPC_STORE_U16(r29.u32 + 2, ctx.r9.u16);
	// lwz r9,1504(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// add r9,r11,r9
	ctx.r9.u64 = r11.u64 + ctx.r9.u64;
	// lhz r8,2(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 2);
	// sth r8,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r8.u16);
	// lwz r8,1504(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lwz r9,176(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// lwz r25,448(r31)
	r25.u64 = PPC_LOAD_U32(r31.u32 + 448);
	// lwz r29,1396(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 1396);
	// addi r16,r25,320
	r16.s64 = r25.s64 + 320;
	// lhzx r11,r11,r8
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r8.u32);
	// addi r17,r25,256
	r17.s64 = r25.s64 + 256;
	// lwzx r9,r27,r9
	ctx.r9.u64 = PPC_LOAD_U32(r27.u32 + ctx.r9.u32);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lwz r27,1404(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + 1404);
	// add r18,r9,r7
	r18.u64 = ctx.r9.u64 + ctx.r7.u64;
	// stw r11,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r11.u32);
	// subf r11,r5,r10
	r11.s64 = ctx.r10.s64 - ctx.r5.s64;
	// stw r18,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r18.u32);
	// subf r10,r10,r29
	ctx.r10.s64 = r29.s64 - ctx.r10.s64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// addis r11,r11,115
	r11.s64 = r11.s64 + 7536640;
	// addi r11,r11,115
	r11.s64 = r11.s64 + 115;
	// subf r10,r26,r10
	ctx.r10.s64 = ctx.r10.s64 - r26.s64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272f3f0
	if (cr6.eq) goto loc_8272F3F0;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// addi r3,r1,140
	ctx.r3.s64 = ctx.r1.s64 + 140;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r24,116(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r23,140(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
loc_8272F3F0:
	// clrlwi r10,r22,30
	ctx.r10.u64 = r22.u32 & 0x3;
	// rlwinm r9,r21,2,26,29
	ctx.r9.u64 = __builtin_rotateleft64(r21.u32 | (r21.u64 << 32), 2) & 0x3C;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// mr r11,r22
	r11.u64 = r22.u64;
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// rlwimi r11,r21,16,0,15
	r11.u64 = (__builtin_rotateleft32(r21.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// add r10,r10,r22
	ctx.r10.u64 = ctx.r10.u64 + r22.u64;
	// addis r5,r26,4
	ctx.r5.s64 = r26.s64 + 262144;
	// srawi r15,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	r15.s64 = ctx.r10.s32 >> 1;
	// lwz r10,176(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// srawi r8,r21,1
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x1) != 0);
	ctx.r8.s64 = r21.s32 >> 1;
	// lwzx r10,r9,r10
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// rlwinm r9,r8,0,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0xFFFFFFF8;
	// stw r15,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r15.u32);
	// add r14,r10,r9
	r14.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r29
	ctx.r9.s64 = r29.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r5,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r5.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// stw r14,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r14.u32);
	// addis r11,r11,115
	r11.s64 = r11.s64 + 7536640;
	// addi r11,r11,115
	r11.s64 = r11.s64 + 115;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272f478
	if (cr6.eq) goto loc_8272F478;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// addi r4,r1,108
	ctx.r4.s64 = ctx.r1.s64 + 108;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r21,108(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r22,96(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
loc_8272F478:
	// mr r11,r19
	r11.u64 = r19.u64;
	// rlwinm r10,r28,5,0,26
	ctx.r10.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 5) & 0xFFFFFFE0;
	// rlwimi r11,r18,16,0,15
	r11.u64 = (__builtin_rotateleft32(r18.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// rlwinm r9,r11,1,15,15
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r8,r11,r27
	ctx.r8.s64 = r27.s64 - r11.s64;
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// stw r10,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r10.u32);
	// subf r9,r10,r8
	ctx.r9.s64 = ctx.r8.s64 - ctx.r10.s64;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addis r11,r11,59
	r11.s64 = r11.s64 + 3866624;
	// addi r11,r11,59
	r11.s64 = r11.s64 + 59;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272f4d8
	if (cr6.eq) goto loc_8272F4D8;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// rotlwi r5,r10,0
	ctx.r5.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
	// lwz r19,100(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r18,104(r1)
	r18.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lwz r10,148(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
loc_8272F4D8:
	// mr r11,r15
	r11.u64 = r15.u64;
	// addis r5,r10,4
	ctx.r5.s64 = ctx.r10.s64 + 262144;
	// rlwimi r11,r14,16,0,15
	r11.u64 = (__builtin_rotateleft32(r14.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r27
	ctx.r9.s64 = r27.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r5,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r5.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// addis r11,r11,59
	r11.s64 = r11.s64 + 3866624;
	// addi r11,r11,59
	r11.s64 = r11.s64 + 59;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272f52c
	if (cr6.eq) goto loc_8272F52C;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// addi r4,r1,140
	ctx.r4.s64 = ctx.r1.s64 + 140;
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
	// lwz r15,116(r1)
	r15.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r14,140(r1)
	r14.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
loc_8272F52C:
	// addi r10,r31,74
	ctx.r10.s64 = r31.s64 + 74;
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// srawi r8,r24,2
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x3) != 0);
	ctx.r8.s64 = r24.s32 >> 2;
	// srawi r9,r23,2
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x3) != 0);
	ctx.r9.s64 = r23.s32 >> 2;
	// lhz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mullw r10,r8,r10
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lwz r9,152(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// add r29,r10,r9
	r29.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8272f5dc
	if (!cr0.eq) goto loc_8272F5DC;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// lwz r10,120(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// addi r11,r10,128
	r11.s64 = ctx.r10.s64 + 128;
	// dcbt r11,r29
	// addi r11,r10,64
	r11.s64 = ctx.r10.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r10,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r10,32
	r11.s64 = ctx.r10.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r10,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r10,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_8272F5DC:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r10,124(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// clrlwi r28,r23,30
	r28.u64 = r23.u32 & 0x3;
	// lwz r4,120(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// clrlwi r27,r24,30
	r27.u64 = r24.u32 & 0x3;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// li r6,32
	ctx.r6.s64 = 32;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// li r11,1
	r11.s64 = 1;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r24,120(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8272f66c
	if (cr6.eq) goto loc_8272F66C;
	// li r11,1
	r11.s64 = 1;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// li r6,32
	ctx.r6.s64 = 32;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_8272F66C:
	// addi r10,r31,74
	ctx.r10.s64 = r31.s64 + 74;
	// lwz r8,124(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// addi r23,r25,16
	r23.s64 = r25.s64 + 16;
	// lhz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// srawi r10,r21,2
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x3) != 0);
	ctx.r10.s64 = r21.s32 >> 2;
	// srawi r9,r22,2
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x3) != 0);
	ctx.r9.s64 = r22.s32 >> 2;
	// lwz r11,0(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// mullw r10,r10,r7
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r7.s32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lwz r9,152(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// add r29,r10,r9
	r29.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8272f720
	if (!cr0.eq) goto loc_8272F720;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r24,128
	r11.s64 = r24.s64 + 128;
	// dcbt r11,r29
	// addi r11,r24,64
	r11.s64 = r24.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r24,1,0,30
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r24,r11
	r11.u64 = r24.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r24,32
	r11.s64 = r24.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r24,2,0,29
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r24,r11
	r11.u64 = r24.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r24,1,0,30
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r24,r11
	r11.u64 = r24.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r24,3,0,28
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r24,r11
	r11.s64 = r11.s64 - r24.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_8272F720:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// clrlwi r28,r22,30
	r28.u64 = r22.u32 & 0x3;
	// clrlwi r27,r21,30
	r27.u64 = r21.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// stw r11,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r11.u32);
	// li r11,1
	r11.s64 = 1;
	// li r6,32
	ctx.r6.s64 = 32;
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8272f7ac
	if (cr6.eq) goto loc_8272F7AC;
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// li r23,1
	r23.s64 = 1;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// li r6,32
	ctx.r6.s64 = 32;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
	// b 0x8272f7b0
	goto loc_8272F7B0;
loc_8272F7AC:
	// li r23,1
	r23.s64 = 1;
loc_8272F7B0:
	// addi r24,r31,76
	r24.s64 = r31.s64 + 76;
	// lwz r22,156(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// srawi r8,r18,2
	xer.ca = (r18.s32 < 0) & ((r18.u32 & 0x3) != 0);
	ctx.r8.s64 = r18.s32 >> 2;
	// lwz r21,168(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// srawi r9,r19,2
	xer.ca = (r19.s32 < 0) & ((r19.u32 & 0x3) != 0);
	ctx.r9.s64 = r19.s32 >> 2;
	// lhz r10,0(r24)
	ctx.r10.u64 = PPC_LOAD_U16(r24.u32 + 0);
	// lwz r11,0(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// mullw r10,r8,r10
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// lwz r8,128(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r9,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r9.s64 = r11.s32 >> 4;
	// add r3,r10,r21
	ctx.r3.u64 = ctx.r10.u64 + r21.u64;
	// addze r9,r9
	temp.s64 = ctx.r9.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r9.u32;
	ctx.r9.s64 = temp.s64;
	// add r29,r10,r8
	r29.u64 = ctx.r10.u64 + ctx.r8.u64;
	// rlwinm r9,r9,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r9,r9,r11
	ctx.r9.s64 = r11.s64 - ctx.r9.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x8272f864
	if (!cr0.eq) goto loc_8272F864;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// li r11,0
	r11.s64 = 0;
loc_8272F864:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// clrlwi r28,r19,30
	r28.u64 = r19.u32 & 0x3;
	// clrlwi r27,r18,30
	r27.u64 = r18.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// li r6,16
	ctx.r6.s64 = 16;
	// stw r11,0(r22)
	PPC_STORE_U32(r22.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r5,r17
	ctx.r5.u64 = r17.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// srawi r10,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r10.s64 = r11.s32 >> 4;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8272f938
	if (!cr0.eq) goto loc_8272F938;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_8272F938:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r16
	ctx.r5.u64 = r16.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// stw r11,0(r22)
	PPC_STORE_U32(r22.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lhz r10,0(r24)
	ctx.r10.u64 = PPC_LOAD_U16(r24.u32 + 0);
	// srawi r9,r14,2
	xer.ca = (r14.s32 < 0) & ((r14.u32 & 0x3) != 0);
	ctx.r9.s64 = r14.s32 >> 2;
	// lwz r11,0(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// srawi r8,r15,2
	xer.ca = (r15.s32 < 0) & ((r15.u32 & 0x3) != 0);
	ctx.r8.s64 = r15.s32 >> 2;
	// mullw r9,r9,r10
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r10.s32);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// srawi r8,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r8.s64 = r11.s32 >> 4;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addze r8,r8
	temp.s64 = ctx.r8.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r8.u32;
	ctx.r8.s64 = temp.s64;
	// lwz r9,128(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// addi r5,r17,8
	ctx.r5.s64 = r17.s64 + 8;
	// rlwinm r8,r8,4,0,27
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 4) & 0xFFFFFFF0;
	// addi r24,r16,8
	r24.s64 = r16.s64 + 8;
	// add r3,r21,r10
	ctx.r3.u64 = r21.u64 + ctx.r10.u64;
	// subf. r8,r8,r11
	ctx.r8.s64 = r11.s64 - ctx.r8.s64;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// add r29,r9,r10
	r29.u64 = ctx.r9.u64 + ctx.r10.u64;
	// bne 0x8272fa34
	if (!cr0.eq) goto loc_8272FA34;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// li r11,0
	r11.s64 = 0;
loc_8272FA34:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// clrlwi r28,r15,30
	r28.u64 = r15.u32 & 0x3;
	// clrlwi r27,r14,30
	r27.u64 = r14.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// li r6,16
	ctx.r6.s64 = 16;
	// stw r11,0(r22)
	PPC_STORE_U32(r22.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// srawi r10,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r10.s64 = r11.s32 >> 4;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8272fb04
	if (!cr0.eq) goto loc_8272FB04;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_8272FB04:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r10,156(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// li r11,1
	r11.s64 = 1;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r23,1204(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1204);
	// lwz r24,1200(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1200);
	// mr r21,r20
	r21.u64 = r20.u64;
	// clrlwi r10,r23,30
	ctx.r10.u64 = r23.u32 & 0x3;
	// lwz r28,1396(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 1396);
	// rlwinm r9,r24,2,26,29
	ctx.r9.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 2) & 0x3C;
	// lwz r22,132(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// lwz r29,260(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// mr r11,r23
	r11.u64 = r23.u64;
	// lwz r27,1404(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + 1404);
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// stw r21,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r21.u32);
	// rlwimi r11,r24,16,0,15
	r11.u64 = (__builtin_rotateleft32(r24.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// stw r24,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r24.u32);
	// add r10,r10,r23
	ctx.r10.u64 = ctx.r10.u64 + r23.u64;
	// stw r22,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r22.u32);
	// stw r23,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r23.u32);
	// addi r16,r29,320
	r16.s64 = r29.s64 + 320;
	// srawi r19,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	r19.s64 = ctx.r10.s32 >> 1;
	// lwz r10,176(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// srawi r8,r24,1
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x1) != 0);
	ctx.r8.s64 = r24.s32 >> 1;
	// addi r17,r29,256
	r17.s64 = r29.s64 + 256;
	// lwzx r10,r9,r10
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// rlwinm r9,r8,0,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0xFFFFFFF8;
	// stw r19,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r19.u32);
	// add r18,r10,r9
	r18.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r28
	ctx.r9.s64 = r28.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r26,r9
	ctx.r10.s64 = ctx.r9.s64 - r26.s64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// stw r18,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r18.u32);
	// addis r11,r11,115
	r11.s64 = r11.s64 + 7536640;
	// addi r11,r11,115
	r11.s64 = r11.s64 + 115;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272fc10
	if (cr6.eq) goto loc_8272FC10;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// addi r3,r1,140
	ctx.r3.s64 = ctx.r1.s64 + 140;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r24,116(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r23,140(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
loc_8272FC10:
	// clrlwi r10,r20,30
	ctx.r10.u64 = r20.u32 & 0x3;
	// lwz r9,132(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// mr r11,r20
	r11.u64 = r20.u64;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// rlwinm r8,r9,2,26,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0x3C;
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// rlwimi r11,r9,16,0,15
	r11.u64 = (__builtin_rotateleft32(ctx.r9.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// add r10,r10,r20
	ctx.r10.u64 = ctx.r10.u64 + r20.u64;
	// addis r5,r26,4
	ctx.r5.s64 = r26.s64 + 262144;
	// srawi r15,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	r15.s64 = ctx.r10.s32 >> 1;
	// lwz r10,176(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// srawi r9,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 1;
	// rlwinm r9,r9,0,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFFFFF8;
	// lwzx r10,r8,r10
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r10.u32);
	// stw r15,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r15.u32);
	// add r14,r10,r9
	r14.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r28
	ctx.r9.s64 = r28.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r5,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r5.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// stw r14,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r14.u32);
	// addis r11,r11,115
	r11.s64 = r11.s64 + 7536640;
	// addi r11,r11,115
	r11.s64 = r11.s64 + 115;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272fc9c
	if (cr6.eq) goto loc_8272FC9C;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// addi r4,r1,108
	ctx.r4.s64 = ctx.r1.s64 + 108;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r22,108(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r21,96(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
loc_8272FC9C:
	// mr r11,r19
	r11.u64 = r19.u64;
	// lwz r9,148(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// rlwimi r11,r18,16,0,15
	r11.u64 = (__builtin_rotateleft32(r18.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// subf r10,r9,r27
	ctx.r10.s64 = r27.s64 - ctx.r9.s64;
	// rlwinm r8,r11,1,15,15
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r7,r11,r10
	ctx.r7.s64 = ctx.r10.s64 - r11.s64;
	// subf r10,r8,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r8.s64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// addis r11,r11,59
	r11.s64 = r11.s64 + 3866624;
	// addi r11,r11,59
	r11.s64 = r11.s64 + 59;
	// or r11,r11,r7
	r11.u64 = r11.u64 | ctx.r7.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272fcf8
	if (cr6.eq) goto loc_8272FCF8;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// rotlwi r5,r9,0
	ctx.r5.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
	// lwz r19,100(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r18,104(r1)
	r18.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lwz r9,148(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
loc_8272FCF8:
	// mr r11,r15
	r11.u64 = r15.u64;
	// addis r5,r9,4
	ctx.r5.s64 = ctx.r9.s64 + 262144;
	// rlwimi r11,r14,16,0,15
	r11.u64 = (__builtin_rotateleft32(r14.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// subf r10,r5,r27
	ctx.r10.s64 = r27.s64 - ctx.r5.s64;
	// rlwinm r9,r11,1,15,15
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r8,r11,r10
	ctx.r8.s64 = ctx.r10.s64 - r11.s64;
	// subf r10,r9,r5
	ctx.r10.s64 = ctx.r5.s64 - ctx.r9.s64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// addis r11,r11,59
	r11.s64 = r11.s64 + 3866624;
	// addi r11,r11,59
	r11.s64 = r11.s64 + 59;
	// or r11,r11,r8
	r11.u64 = r11.u64 | ctx.r8.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8272fd4c
	if (cr6.eq) goto loc_8272FD4C;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// addi r3,r1,132
	ctx.r3.s64 = ctx.r1.s64 + 132;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
	// lwz r15,132(r1)
	r15.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lwz r14,116(r1)
	r14.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
loc_8272FD4C:
	// addi r10,r31,74
	ctx.r10.s64 = r31.s64 + 74;
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// srawi r8,r24,2
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x3) != 0);
	ctx.r8.s64 = r24.s32 >> 2;
	// srawi r9,r23,2
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x3) != 0);
	ctx.r9.s64 = r23.s32 >> 2;
	// lhz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// mullw r10,r8,r10
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lwz r9,184(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// add r28,r10,r9
	r28.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8272fdfc
	if (!cr0.eq) goto loc_8272FDFC;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r28
	// lwz r10,120(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// addi r11,r10,128
	r11.s64 = ctx.r10.s64 + 128;
	// dcbt r11,r28
	// addi r11,r10,64
	r11.s64 = ctx.r10.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r28
	// rlwinm r11,r10,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// addi r11,r10,32
	r11.s64 = ctx.r10.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r28
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r10,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r10,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// li r11,0
	r11.s64 = 0;
loc_8272FDFC:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r10,124(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// clrlwi r27,r23,30
	r27.u64 = r23.u32 & 0x3;
	// clrlwi r26,r24,30
	r26.u64 = r24.u32 & 0x3;
	// lwz r24,120(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// li r20,1
	r20.s64 = 1;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// li r10,1
	ctx.r10.s64 = 1;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// li r6,32
	ctx.r6.s64 = 32;
	// stw r20,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r20.u32);
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// mr r9,r26
	ctx.r9.u64 = r26.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8272fe88
	if (cr6.eq) goto loc_8272FE88;
	// li r10,1
	ctx.r10.s64 = 1;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// stw r20,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r20.u32);
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// li r6,32
	ctx.r6.s64 = 32;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_8272FE88:
	// addi r10,r31,74
	ctx.r10.s64 = r31.s64 + 74;
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// addi r23,r29,16
	r23.s64 = r29.s64 + 16;
	// lhz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// srawi r10,r22,2
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x3) != 0);
	ctx.r10.s64 = r22.s32 >> 2;
	// srawi r9,r21,2
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x3) != 0);
	ctx.r9.s64 = r21.s32 >> 2;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// mullw r10,r10,r8
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r8.s32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lwz r9,184(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// add r28,r10,r9
	r28.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8272ff3c
	if (!cr0.eq) goto loc_8272FF3C;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r28
	// addi r11,r24,128
	r11.s64 = r24.s64 + 128;
	// dcbt r11,r28
	// addi r11,r24,64
	r11.s64 = r24.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r28
	// rlwinm r11,r24,1,0,30
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r24,r11
	r11.u64 = r24.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// addi r11,r24,32
	r11.s64 = r24.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r28
	// rlwinm r11,r24,2,0,29
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r24,r11
	r11.u64 = r24.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r24,1,0,30
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r24,r11
	r11.u64 = r24.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r24,3,0,28
	r11.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r24,r11
	r11.s64 = r11.s64 - r24.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// li r11,0
	r11.s64 = 0;
loc_8272FF3C:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r10,124(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// clrlwi r27,r21,30
	r27.u64 = r21.u32 & 0x3;
	// stw r20,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r20.u32);
	// clrlwi r26,r22,30
	r26.u64 = r22.u32 & 0x3;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// li r6,32
	ctx.r6.s64 = 32;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// li r10,1
	ctx.r10.s64 = 1;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// mr r9,r26
	ctx.r9.u64 = r26.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8272ffc0
	if (cr6.eq) goto loc_8272FFC0;
	// li r10,1
	ctx.r10.s64 = 1;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// stw r20,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r20.u32);
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// li r6,32
	ctx.r6.s64 = 32;
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_8272FFC0:
	// addi r24,r31,76
	r24.s64 = r31.s64 + 76;
	// lwz r22,156(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// srawi r8,r18,2
	xer.ca = (r18.s32 < 0) & ((r18.u32 & 0x3) != 0);
	ctx.r8.s64 = r18.s32 >> 2;
	// lwz r21,172(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// srawi r9,r19,2
	xer.ca = (r19.s32 < 0) & ((r19.u32 & 0x3) != 0);
	ctx.r9.s64 = r19.s32 >> 2;
	// lhz r10,0(r24)
	ctx.r10.u64 = PPC_LOAD_U16(r24.u32 + 0);
	// lwz r11,0(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// mullw r10,r8,r10
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// lwz r8,144(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r9,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r9.s64 = r11.s32 >> 4;
	// add r3,r21,r10
	ctx.r3.u64 = r21.u64 + ctx.r10.u64;
	// addze r9,r9
	temp.s64 = ctx.r9.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r9.u32;
	ctx.r9.s64 = temp.s64;
	// add r28,r8,r10
	r28.u64 = ctx.r8.u64 + ctx.r10.u64;
	// rlwinm r9,r9,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r9,r9,r11
	ctx.r9.s64 = r11.s64 - ctx.r9.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x82730074
	if (!cr0.eq) goto loc_82730074;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// li r11,0
	r11.s64 = 0;
loc_82730074:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r20,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r20.u32);
	// clrlwi r27,r19,30
	r27.u64 = r19.u32 & 0x3;
	// clrlwi r26,r18,30
	r26.u64 = r18.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// li r6,16
	ctx.r6.s64 = 16;
	// stw r11,0(r22)
	PPC_STORE_U32(r22.u32 + 0, r11.u32);
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r5,r17
	ctx.r5.u64 = r17.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// srawi r10,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r10.s64 = r11.s32 >> 4;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82730148
	if (!cr0.eq) goto loc_82730148;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r28
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r28
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r28
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r28
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// li r11,0
	r11.s64 = 0;
loc_82730148:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r20,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r20.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r16
	ctx.r5.u64 = r16.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// stw r11,0(r22)
	PPC_STORE_U32(r22.u32 + 0, r11.u32);
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lhz r11,0(r24)
	r11.u64 = PPC_LOAD_U16(r24.u32 + 0);
	// srawi r9,r14,2
	xer.ca = (r14.s32 < 0) & ((r14.u32 & 0x3) != 0);
	ctx.r9.s64 = r14.s32 >> 2;
	// lwz r10,0(r22)
	ctx.r10.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// srawi r8,r15,2
	xer.ca = (r15.s32 < 0) & ((r15.u32 & 0x3) != 0);
	ctx.r8.s64 = r15.s32 >> 2;
	// lwz r7,144(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// mullw r9,r9,r11
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(r11.s32);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// srawi r8,r10,4
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xF) != 0);
	ctx.r8.s64 = ctx.r10.s32 >> 4;
	// addi r5,r17,8
	ctx.r5.s64 = r17.s64 + 8;
	// addze r8,r8
	temp.s64 = ctx.r8.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r8.u32;
	ctx.r8.s64 = temp.s64;
	// addi r24,r16,8
	r24.s64 = r16.s64 + 8;
	// rlwinm r8,r8,4,0,27
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r8,r8,r10
	ctx.r8.s64 = ctx.r10.s64 - ctx.r8.s64;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// add r8,r21,r9
	ctx.r8.u64 = r21.u64 + ctx.r9.u64;
	// add r9,r7,r9
	ctx.r9.u64 = ctx.r7.u64 + ctx.r9.u64;
	// add r3,r8,r11
	ctx.r3.u64 = ctx.r8.u64 + r11.u64;
	// add r28,r9,r11
	r28.u64 = ctx.r9.u64 + r11.u64;
	// bne 0x82730248
	if (!cr0.eq) goto loc_82730248;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// li r10,0
	ctx.r10.s64 = 0;
loc_82730248:
	// addi r11,r10,1
	r11.s64 = ctx.r10.s64 + 1;
	// stw r20,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r20.u32);
	// clrlwi r27,r15,30
	r27.u64 = r15.u32 & 0x3;
	// clrlwi r26,r14,30
	r26.u64 = r14.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// li r6,16
	ctx.r6.s64 = 16;
	// stw r11,0(r22)
	PPC_STORE_U32(r22.u32 + 0, r11.u32);
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// srawi r10,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r10.s64 = r11.s32 >> 4;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82730318
	if (!cr0.eq) goto loc_82730318;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r28
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r28
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r28
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r28
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// li r11,0
	r11.s64 = 0;
loc_82730318:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r20,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r20.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// stw r11,0(r22)
	PPC_STORE_U32(r22.u32 + 0, r11.u32);
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r11,r25,16
	r11.s64 = r25.s64 + 16;
	// addi r10,r25,32
	ctx.r10.s64 = r25.s64 + 32;
	// lvx128 v0,r0,r25
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r25.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r25,48
	ctx.r9.s64 = r25.s64 + 48;
	// lvx128 v6,r0,r29
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r25,80
	ctx.r8.s64 = r25.s64 + 80;
	// lvx128 v5,r0,r23
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r23.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r25,96
	ctx.r7.s64 = r25.s64 + 96;
	// lvx128 v13,r0,r11
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r25,64
	r11.s64 = r25.s64 + 64;
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r6,r25,112
	ctx.r6.s64 = r25.s64 + 112;
	// addi r10,r29,32
	ctx.r10.s64 = r29.s64 + 32;
	// lvx128 v11,r0,r9
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v9,r0,r8
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r29,80
	ctx.r9.s64 = r29.s64 + 80;
	// lvx128 v8,r0,r7
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r29,96
	ctx.r8.s64 = r29.s64 + 96;
	// lvx128 v10,r0,r11
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r29,48
	r11.s64 = r29.s64 + 48;
	// lvx128 v7,r0,r6
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r6,r30,1,0,30
	ctx.r6.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// lvx128 v4,r0,r10
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r29,64
	ctx.r10.s64 = r29.s64 + 64;
	// addi r27,r29,112
	r27.s64 = r29.s64 + 112;
	// rlwinm r7,r30,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// lvx128 v3,r0,r11
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1632
	r11.s64 = ctx.r1.s64 + 1632;
	// add r5,r6,r30
	ctx.r5.u64 = ctx.r6.u64 + r30.u64;
	// add r4,r7,r30
	ctx.r4.u64 = ctx.r7.u64 + r30.u64;
	// add r3,r7,r6
	ctx.r3.u64 = ctx.r7.u64 + ctx.r6.u64;
	// add r28,r5,r7
	r28.u64 = ctx.r5.u64 + ctx.r7.u64;
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1664
	r11.s64 = ctx.r1.s64 + 1664;
	// vavgub v0,v0,v6
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// stvx v13,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1728
	r11.s64 = ctx.r1.s64 + 1728;
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1760
	r11.s64 = ctx.r1.s64 + 1760;
	// stvx v11,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1792
	r11.s64 = ctx.r1.s64 + 1792;
	// stvx v10,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1824
	r11.s64 = ctx.r1.s64 + 1824;
	// stvx v9,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1920
	r11.s64 = ctx.r1.s64 + 1920;
	// stvx v8,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1296
	r11.s64 = ctx.r1.s64 + 1296;
	// stvx v7,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1696
	r11.s64 = ctx.r1.s64 + 1696;
	// stvx v6,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1856
	r11.s64 = ctx.r1.s64 + 1856;
	// stvx v5,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1888
	r11.s64 = ctx.r1.s64 + 1888;
	// stvx v4,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r25,128
	r11.s64 = r25.s64 + 128;
	// lvx128 v1,r0,r9
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// rlwinm r9,r30,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// lvx128 v31,r0,r8
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r8,188(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// lvx128 v2,r0,r10
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r29,128
	ctx.r10.s64 = r29.s64 + 128;
	// lvx128 v30,r0,r27
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// vavgub v13,v13,v5
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// stvx v0,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v12,v12,v4
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v4.u8)));
	// addi r29,r11,16
	r29.s64 = r11.s64 + 16;
	// vavgub v11,v11,v3
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// addi r27,r11,64
	r27.s64 = r11.s64 + 64;
	// vavgub v10,v10,v2
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v2.u8)));
	// addi r26,r11,80
	r26.s64 = r11.s64 + 80;
	// stvx128 v13,r30,r8
	_mm_store_si128((__m128i*)(base + ((r30.u32 + ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v9,v9,v1
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// stvx128 v12,r6,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r6.u32 + ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v8,v8,v31
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)v31.u8)));
	// stvx128 v11,r5,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r5.u32 + ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v7,v7,v30
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)v30.u8)));
	// stvx128 v10,r7,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32 + ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r25,r10,16
	r25.s64 = ctx.r10.s64 + 16;
	// stvx128 v9,r4,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32 + ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r24,r10,32
	r24.s64 = ctx.r10.s64 + 32;
	// stvx128 v8,r3,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v7,r28,r8
	_mm_store_si128((__m128i*)(base + ((r28.u32 + ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r1,1632
	ctx.r8.s64 = ctx.r1.s64 + 1632;
	// lvx128 v0,r0,r11
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v0,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r1,1664
	ctx.r8.s64 = ctx.r1.s64 + 1664;
	// lvx128 v13,r0,r29
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r1,1696
	r29.s64 = ctx.r1.s64 + 1696;
	// stvx v13,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r11,32
	ctx.r8.s64 = r11.s64 + 32;
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v12,r0,r29
	_mm_store_si128((__m128i*)(base + ((r29.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r11,48
	r29.s64 = r11.s64 + 48;
	// vavgub v0,v0,v12
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v12.u8)));
	// lvx128 v11,r0,r8
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r1,1728
	ctx.r8.s64 = ctx.r1.s64 + 1728;
	// stvx v11,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r10,48
	ctx.r8.s64 = ctx.r10.s64 + 48;
	// lvx128 v10,r0,r29
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r1,1760
	r29.s64 = ctx.r1.s64 + 1760;
	// stvx v10,r0,r29
	_mm_store_si128((__m128i*)(base + ((r29.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r10,64
	r29.s64 = ctx.r10.s64 + 64;
	// lvx128 v9,r0,r27
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r1,1792
	r27.s64 = ctx.r1.s64 + 1792;
	// stvx v9,r0,r27
	_mm_store_si128((__m128i*)(base + ((r27.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r10,80
	r27.s64 = ctx.r10.s64 + 80;
	// lvx128 v8,r0,r26
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r26.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r26,r1,1824
	r26.s64 = ctx.r1.s64 + 1824;
	// stvx v8,r0,r26
	_mm_store_si128((__m128i*)(base + ((r26.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r26,r1,1856
	r26.s64 = ctx.r1.s64 + 1856;
	// lvx128 v7,r0,r25
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r25.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v13,v13,v7
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// stvx v7,r0,r26
	_mm_store_si128((__m128i*)(base + ((r26.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r26,r1,1888
	r26.s64 = ctx.r1.s64 + 1888;
	// lvx128 v6,r0,r24
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r24.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v12,v11,v6
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// stvx v6,r0,r26
	_mm_store_si128((__m128i*)(base + ((r26.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r26,r10,112
	r26.s64 = ctx.r10.s64 + 112;
	// lvx128 v5,r0,r8
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r11,96
	ctx.r8.s64 = r11.s64 + 96;
	// lvx128 v4,r0,r29
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r10,96
	r29.s64 = ctx.r10.s64 + 96;
	// lvx128 v3,r0,r27
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r11,112
	r27.s64 = r11.s64 + 112;
	// vavgub v11,v10,v5
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// addi r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 128;
	// vavgub v10,v9,v4
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v4.u8)));
	// lvx128 v2,r0,r8
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r1,1920
	ctx.r8.s64 = ctx.r1.s64 + 1920;
	// vavgub v9,v8,v3
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// stvx v2,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r1,1296
	ctx.r8.s64 = ctx.r1.s64 + 1296;
	// lvx128 v1,r0,r29
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v31,r0,r27
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v8,v2,v1
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// stvx v31,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r11,128
	ctx.r8.s64 = r11.s64 + 128;
	// lvx128 v30,r0,r26
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r26.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// srawi r11,r30,1
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x1) != 0);
	r11.s64 = r30.s32 >> 1;
	// stvx v0,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v7,v31,v30
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)v30.u8)));
	// stvx128 v13,r9,r30
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32 + r30.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v12,r6,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r6.u32 + ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v11,r5,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r5.u32 + ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r6,r10,16
	ctx.r6.s64 = ctx.r10.s64 + 16;
	// stvx128 v10,r7,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32 + ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r5,r10,32
	ctx.r5.s64 = ctx.r10.s64 + 32;
	// stvx128 v9,r4,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r4.u32 + ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r24,r10,48
	r24.s64 = ctx.r10.s64 + 48;
	// stvx128 v8,r3,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r23,r10,64
	r23.s64 = ctx.r10.s64 + 64;
	// stvx128 v7,r28,r9
	_mm_store_si128((__m128i*)(base + ((r28.u32 + ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,1024
	ctx.r9.s64 = ctx.r1.s64 + 1024;
	// lvx128 v0,r0,r8
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r22,r10,80
	r22.s64 = ctx.r10.s64 + 80;
	// lvx128 v12,r0,r10
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r21,r10,96
	r21.s64 = ctx.r10.s64 + 96;
	// addi r20,r10,112
	r20.s64 = ctx.r10.s64 + 112;
	// lvx128 v11,r0,r6
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r4,r8,32
	ctx.r4.s64 = ctx.r8.s64 + 32;
	// lvx128 v10,r0,r5
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r5.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v0,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,1088
	ctx.r10.s64 = ctx.r1.s64 + 1088;
	// addi r30,r8,48
	r30.s64 = ctx.r8.s64 + 48;
	// vavgub v0,v0,v12
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v12.u8)));
	// addi r7,r8,16
	ctx.r7.s64 = ctx.r8.s64 + 16;
	// lvx128 v3,r0,r24
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r24.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,1056
	ctx.r9.s64 = ctx.r1.s64 + 1056;
	// lvx128 v2,r0,r23
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r23.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v9,r0,r4
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r8,64
	r29.s64 = ctx.r8.s64 + 64;
	// stvx v9,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,1120
	ctx.r10.s64 = ctx.r1.s64 + 1120;
	// lvx128 v8,r0,r30
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r8,80
	r27.s64 = ctx.r8.s64 + 80;
	// lvx128 v13,r0,r7
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r26,r8,96
	r26.s64 = ctx.r8.s64 + 96;
	// stvx v13,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r25,r8,112
	r25.s64 = ctx.r8.s64 + 112;
	// lvx128 v7,r0,r29
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r29.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v13,v13,v11
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v11.u8)));
	// stvx v8,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,688
	ctx.r10.s64 = ctx.r1.s64 + 688;
	// lvx128 v6,r0,r27
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r9,164(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// lvx128 v5,r0,r26
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r26.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v4,r0,r25
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r25.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v1,r0,r22
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r22.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v7,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,1152
	ctx.r10.s64 = ctx.r1.s64 + 1152;
	// lvx128 v31,r0,r21
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r21.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v30,r0,r20
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r20.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v6,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,1184
	ctx.r10.s64 = ctx.r1.s64 + 1184;
	// stvx v5,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,752
	ctx.r10.s64 = ctx.r1.s64 + 752;
	// stvx v4,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,1024
	ctx.r10.s64 = ctx.r1.s64 + 1024;
	// stvx v0,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v0,v9,v10
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v10.u8)));
	// addi r10,r1,1056
	ctx.r10.s64 = ctx.r1.s64 + 1056;
	// addi r29,r1,1120
	r29.s64 = ctx.r1.s64 + 1120;
	// stvx v13,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r10,r11,r9
	ctx.r10.u64 = r11.u64 + ctx.r9.u64;
	// vavgub v13,v7,v2
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)ctx.v2.u8)));
	// lwz r8,1024(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1024);
	// lwz r7,1028(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1028);
	// lwz r6,1032(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1032);
	// lwz r5,1036(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1036);
	// stw r8,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r8.u32);
	// stw r7,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r7.u32);
	// addi r9,r1,1088
	ctx.r9.s64 = ctx.r1.s64 + 1088;
	// lwz r8,180(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r4,1056(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1056);
	// lwz r3,1060(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1060);
	// lwz r7,1064(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1064);
	// stvx v0,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v0,v8,v3
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// lwz r30,1068(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1068);
	// add r9,r11,r8
	ctx.r9.u64 = r11.u64 + ctx.r8.u64;
	// stvx v0,r0,r29
	_mm_store_si128((__m128i*)(base + ((r29.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r1,688
	r29.s64 = ctx.r1.s64 + 688;
	// vavgub v0,v6,v1
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// stvx v13,r0,r29
	_mm_store_si128((__m128i*)(base + ((r29.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r1,1152
	r29.s64 = ctx.r1.s64 + 1152;
	// stw r6,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r6.u32);
	// stw r5,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r5.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lwz r6,1088(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1088);
	// vavgub v13,v4,v30
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)v30.u8)));
	// lwz r5,1092(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1092);
	// lwz r28,1100(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1100);
	// stvx v0,r0,r29
	_mm_store_si128((__m128i*)(base + ((r29.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r1,1184
	r29.s64 = ctx.r1.s64 + 1184;
	// stw r4,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r4.u32);
	// vavgub v0,v5,v31
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)v31.u8)));
	// stw r3,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r3.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lwz r27,1120(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1120);
	// lwz r26,1124(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1124);
	// stvx v0,r0,r29
	_mm_store_si128((__m128i*)(base + ((r29.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r29,r1,752
	r29.s64 = ctx.r1.s64 + 752;
	// lwz r25,1128(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1128);
	// stw r7,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r7.u32);
	// stw r30,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r30.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lwz r24,1132(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1132);
	// stvx v13,r0,r29
	_mm_store_si128((__m128i*)(base + ((r29.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r29,1096(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1096);
	// lwz r23,688(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 688);
	// lwz r22,692(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 692);
	// stw r6,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r6.u32);
	// stw r5,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r5.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lwz r21,696(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 696);
	// lwz r20,700(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 700);
	// stw r29,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r29.u32);
	// stw r28,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r28.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// stw r27,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r27.u32);
	// stw r26,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r26.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// stw r25,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r25.u32);
	// stw r24,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r24.u32);
	// add r10,r9,r11
	ctx.r10.u64 = ctx.r9.u64 + r11.u64;
	// stw r23,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r23.u32);
	// stw r22,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, r22.u32);
	// stw r21,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r21.u32);
	// stw r20,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, r20.u32);
	// lwz r23,2772(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2772);
	// lwz r19,1152(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1152);
	// lwz r18,1156(r1)
	r18.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1156);
	// lwz r17,1160(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1160);
	// lwz r16,1164(r1)
	r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1164);
	// stw r19,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r19.u32);
	// stw r18,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r18.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lwz r9,1184(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1184);
	// lwz r8,1188(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1188);
	// lwz r7,1192(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1192);
	// lwz r6,1196(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1196);
	// stw r17,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r17.u32);
	// stw r16,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r16.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lwz r5,752(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 752);
	// lwz r4,756(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 756);
	// lwz r3,760(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 760);
	// lwz r30,764(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 764);
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// stw r8,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r8.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// stw r7,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r7.u32);
	// stw r6,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r6.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stw r5,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r5.u32);
	// stw r4,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r4.u32);
	// stw r3,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r3.u32);
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r30,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r30.u32);
	// b 0x827326c0
	goto loc_827326C0;
loc_82730818:
	// lwz r25,136(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// mullw r11,r17,r18
	r11.s64 = int64_t(r17.s32) * int64_t(r18.s32);
	// add r11,r11,r25
	r11.u64 = r11.u64 + r25.u64;
	// lwz r29,1492(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// lwz r6,1496(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lwz r27,112(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// stw r20,584(r1)
	PPC_STORE_U32(ctx.r1.u32 + 584, r20.u32);
	// stw r20,580(r1)
	PPC_STORE_U32(ctx.r1.u32 + 580, r20.u32);
	// stw r20,576(r1)
	PPC_STORE_U32(ctx.r1.u32 + 576, r20.u32);
	// mr r9,r20
	ctx.r9.u64 = r20.u64;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// srawi r7,r17,1
	xer.ca = (r17.s32 < 0) & ((r17.u32 & 0x1) != 0);
	ctx.r7.s64 = r17.s32 >> 1;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// beq cr6,0x8273087c
	if (cr6.eq) goto loc_8273087C;
	// lwz r8,-20(r27)
	ctx.r8.u64 = PPC_LOAD_U32(r27.u32 + -20);
	// addi r11,r10,-2
	r11.s64 = ctx.r10.s64 + -2;
	// rlwinm r8,r8,0,14,14
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x8273087c
	if (cr6.eq) goto loc_8273087C;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// li r9,1
	ctx.r9.s64 = 1;
	// lhzx r8,r11,r29
	ctx.r8.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// lhzx r11,r11,r6
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r6.u32);
	// sth r8,578(r1)
	PPC_STORE_U16(ctx.r1.u32 + 578, ctx.r8.u16);
	// sth r11,576(r1)
	PPC_STORE_U16(ctx.r1.u32 + 576, r11.u16);
loc_8273087C:
	// cmpwi cr6,r16,0
	cr6.compare<int32_t>(r16.s32, 0, xer);
	// bne cr6,0x8273094c
	if (!cr6.eq) goto loc_8273094C;
	// rlwinm r11,r17,1,0,30
	r11.u64 = __builtin_rotateleft64(r17.u32 | (r17.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r8,r11,r10
	ctx.r8.s64 = ctx.r10.s64 - r11.s64;
	// rlwinm r11,r7,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r7,r11
	r11.u64 = ctx.r7.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r5,r11,r27
	ctx.r5.s64 = r27.s64 - r11.s64;
	// lwz r11,0(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	// rlwinm r11,r11,0,14,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x827308d0
	if (cr6.eq) goto loc_827308D0;
	// rlwinm r11,r8,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r10,r9,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r4,r1,578
	ctx.r4.s64 = ctx.r1.s64 + 578;
	// addi r3,r1,576
	ctx.r3.s64 = ctx.r1.s64 + 576;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// lhzx r30,r11,r29
	r30.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// lhzx r11,r11,r6
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r6.u32);
	// sthx r30,r10,r4
	PPC_STORE_U16(ctx.r10.u32 + ctx.r4.u32, r30.u16);
	// sthx r11,r10,r3
	PPC_STORE_U16(ctx.r10.u32 + ctx.r3.u32, r11.u16);
loc_827308D0:
	// cmpwi cr6,r7,1
	cr6.compare<int32_t>(ctx.r7.s32, 1, xer);
	// beq cr6,0x8273094c
	if (cr6.eq) goto loc_8273094C;
	// addi r10,r7,-1
	ctx.r10.s64 = ctx.r7.s64 + -1;
	// li r11,1
	r11.s64 = 1;
	// cmpw cr6,r25,r10
	cr6.compare<int32_t>(r25.s32, ctx.r10.s32, xer);
	// blt cr6,0x827308ec
	if (cr6.lt) goto loc_827308EC;
	// mr r11,r20
	r11.u64 = r20.u64;
loc_827308EC:
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpw cr6,r25,r10
	cr6.compare<int32_t>(r25.s32, ctx.r10.s32, xer);
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// addi r8,r11,-2
	ctx.r8.s64 = r11.s64 + -2;
	// li r11,1
	r11.s64 = 1;
	// blt cr6,0x82730908
	if (cr6.lt) goto loc_82730908;
	// mr r11,r20
	r11.u64 = r20.u64;
loc_82730908:
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// lwz r11,-20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -20);
	// rlwinm r11,r11,0,14,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8273094c
	if (cr6.eq) goto loc_8273094C;
	// rlwinm r11,r8,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r10,r9,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r1,578
	ctx.r8.s64 = ctx.r1.s64 + 578;
	// addi r7,r1,576
	ctx.r7.s64 = ctx.r1.s64 + 576;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// lhzx r5,r11,r29
	ctx.r5.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// lhzx r11,r11,r6
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r6.u32);
	// sthx r5,r10,r8
	PPC_STORE_U16(ctx.r10.u32 + ctx.r8.u32, ctx.r5.u16);
	// sthx r11,r10,r7
	PPC_STORE_U16(ctx.r10.u32 + ctx.r7.u32, r11.u16);
loc_8273094C:
	// mr r6,r20
	ctx.r6.u64 = r20.u64;
	// mr r5,r20
	ctx.r5.u64 = r20.u64;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x82730a88
	if (!cr6.gt) goto loc_82730A88;
	// addi r10,r1,2400
	ctx.r10.s64 = ctx.r1.s64 + 2400;
	// addi r11,r1,576
	r11.s64 = ctx.r1.s64 + 576;
	// addi r8,r1,2432
	ctx.r8.s64 = ctx.r1.s64 + 2432;
	// mr r7,r9
	ctx.r7.u64 = ctx.r9.u64;
loc_8273096C:
	// lhz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rlwinm r4,r4,0,29,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// beq cr6,0x82730990
	if (cr6.eq) goto loc_82730990;
	// stw r4,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r4.u32);
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// addi r8,r8,4
	ctx.r8.s64 = ctx.r8.s64 + 4;
	// b 0x8273099c
	goto loc_8273099C;
loc_82730990:
	// stw r4,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r4.u32);
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
loc_8273099C:
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// bne cr6,0x8273096c
	if (!cr6.eq) goto loc_8273096C;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x82730a88
	if (!cr6.gt) goto loc_82730A88;
	// cmpwi cr6,r6,3
	cr6.compare<int32_t>(ctx.r6.s32, 3, xer);
	// beq cr6,0x827309e4
	if (cr6.eq) goto loc_827309E4;
	// cmpwi cr6,r5,3
	cr6.compare<int32_t>(ctx.r5.s32, 3, xer);
	// beq cr6,0x827309e4
	if (cr6.eq) goto loc_827309E4;
	// cmpw cr6,r6,r5
	cr6.compare<int32_t>(ctx.r6.s32, ctx.r5.s32, xer);
	// blt cr6,0x827309d8
	if (cr6.lt) goto loc_827309D8;
	// lwz r11,2400(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2400);
	// stw r11,416(r1)
	PPC_STORE_U32(ctx.r1.u32 + 416, r11.u32);
	// b 0x82730a8c
	goto loc_82730A8C;
loc_827309D8:
	// lwz r11,2432(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2432);
	// stw r11,416(r1)
	PPC_STORE_U32(ctx.r1.u32 + 416, r11.u32);
	// b 0x82730a8c
	goto loc_82730A8C;
loc_827309E4:
	// lhz r11,582(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 582);
	// lhz r10,578(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 578);
	// lhz r7,586(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 586);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lhz r9,580(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 580);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// lhz r8,576(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 576);
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// lhz r6,584(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 584);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// subf r5,r10,r11
	ctx.r5.s64 = r11.s64 - ctx.r10.s64;
	// subf r3,r7,r11
	ctx.r3.s64 = r11.s64 - ctx.r7.s64;
	// subf r30,r10,r7
	r30.s64 = ctx.r7.s64 - ctx.r10.s64;
	// subf r4,r8,r9
	ctx.r4.s64 = ctx.r9.s64 - ctx.r8.s64;
	// subf r28,r6,r9
	r28.s64 = ctx.r9.s64 - ctx.r6.s64;
	// subf r24,r8,r6
	r24.s64 = ctx.r6.s64 - ctx.r8.s64;
	// xor r3,r3,r5
	ctx.r3.u64 = ctx.r3.u64 ^ ctx.r5.u64;
	// xor r30,r30,r5
	r30.u64 = r30.u64 ^ ctx.r5.u64;
	// xor r28,r28,r4
	r28.u64 = r28.u64 ^ ctx.r4.u64;
	// srawi r5,r3,31
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = ctx.r3.s32 >> 31;
	// xor r24,r24,r4
	r24.u64 = r24.u64 ^ ctx.r4.u64;
	// srawi r4,r30,31
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x7FFFFFFF) != 0);
	ctx.r4.s64 = r30.s32 >> 31;
	// srawi r3,r28,31
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r28.s32 >> 31;
	// srawi r30,r24,31
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x7FFFFFFF) != 0);
	r30.s64 = r24.s32 >> 31;
	// or r28,r5,r4
	r28.u64 = ctx.r5.u64 | ctx.r4.u64;
	// or r24,r3,r30
	r24.u64 = ctx.r3.u64 | r30.u64;
	// and r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 & ctx.r10.u64;
	// andc r7,r7,r28
	ctx.r7.u64 = ctx.r7.u64 & ~r28.u64;
	// andc r6,r6,r24
	ctx.r6.u64 = ctx.r6.u64 & ~r24.u64;
	// and r8,r30,r8
	ctx.r8.u64 = r30.u64 & ctx.r8.u64;
	// or r10,r7,r10
	ctx.r10.u64 = ctx.r7.u64 | ctx.r10.u64;
	// and r11,r5,r11
	r11.u64 = ctx.r5.u64 & r11.u64;
	// or r8,r6,r8
	ctx.r8.u64 = ctx.r6.u64 | ctx.r8.u64;
	// and r9,r3,r9
	ctx.r9.u64 = ctx.r3.u64 & ctx.r9.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// or r10,r8,r9
	ctx.r10.u64 = ctx.r8.u64 | ctx.r9.u64;
	// sth r11,418(r1)
	PPC_STORE_U16(ctx.r1.u32 + 418, r11.u16);
	// sth r10,416(r1)
	PPC_STORE_U16(ctx.r1.u32 + 416, ctx.r10.u16);
	// b 0x82730a8c
	goto loc_82730A8C;
loc_82730A88:
	// stw r20,416(r1)
	PPC_STORE_U32(ctx.r1.u32 + 416, r20.u32);
loc_82730A8C:
	// rlwinm r10,r26,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 2) & 0xFFFFFFFC;
	// lhz r5,66(r31)
	ctx.r5.u64 = PPC_LOAD_U16(r31.u32 + 66);
	// lhz r11,418(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 418);
	// add r24,r17,r26
	r24.u64 = r17.u64 + r26.u64;
	// extsh r4,r5
	ctx.r4.s64 = ctx.r5.s16;
	// lhz r8,62(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 62);
	// extsh r6,r11
	ctx.r6.s64 = r11.s16;
	// stw r20,408(r1)
	PPC_STORE_U32(ctx.r1.u32 + 408, r20.u32);
	// rlwinm r11,r26,1,0,30
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 1) & 0xFFFFFFFE;
	// stw r20,404(r1)
	PPC_STORE_U32(ctx.r1.u32 + 404, r20.u32);
	// lwzx r9,r10,r15
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + r15.u32);
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// lhz r10,416(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 416);
	// rlwinm r5,r9,16,16,31
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 16) & 0xFFFF;
	// stw r20,400(r1)
	PPC_STORE_U32(ctx.r1.u32 + 400, r20.u32);
	// add r6,r6,r9
	ctx.r6.u64 = ctx.r6.u64 + ctx.r9.u64;
	// mr r9,r5
	ctx.r9.u64 = ctx.r5.u64;
	// extsh r5,r8
	ctx.r5.s64 = ctx.r8.s16;
	// extsh r7,r10
	ctx.r7.s64 = ctx.r10.s16;
	// add r6,r6,r5
	ctx.r6.u64 = ctx.r6.u64 + ctx.r5.u64;
	// rlwinm r10,r24,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 1) & 0xFFFFFFFE;
	// and r6,r6,r4
	ctx.r6.u64 = ctx.r6.u64 & ctx.r4.u64;
	// add r5,r10,r29
	ctx.r5.u64 = ctx.r10.u64 + r29.u64;
	// subf r6,r8,r6
	ctx.r6.s64 = ctx.r6.s64 - ctx.r8.s64;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// add r8,r9,r7
	ctx.r8.u64 = ctx.r9.u64 + ctx.r7.u64;
	// sth r6,2(r5)
	PPC_STORE_U16(ctx.r5.u32 + 2, ctx.r6.u16);
	// lwz r9,1492(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lhz r7,2(r9)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r9.u32 + 2);
	// sth r7,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r7.u16);
	// lwz r9,1492(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// lhzx r7,r10,r9
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r9.u32);
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// sth r7,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, ctx.r7.u16);
	// lwz r9,1492(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// add r9,r11,r9
	ctx.r9.u64 = r11.u64 + ctx.r9.u64;
	// lhz r7,2(r9)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r9.u32 + 2);
	// sth r7,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r7.u16);
	// lhz r6,68(r31)
	ctx.r6.u64 = PPC_LOAD_U16(r31.u32 + 68);
	// lwz r7,1496(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// extsh r5,r6
	ctx.r5.s64 = ctx.r6.s16;
	// lwz r6,1492(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// add r4,r10,r7
	ctx.r4.u64 = ctx.r10.u64 + ctx.r7.u64;
	// lhz r9,64(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 64);
	// lhzx r7,r11,r6
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + ctx.r6.u32);
	// extsh r6,r7
	ctx.r6.s64 = ctx.r7.s16;
	// extsh r7,r9
	ctx.r7.s64 = ctx.r9.s16;
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// and r8,r8,r5
	ctx.r8.u64 = ctx.r8.u64 & ctx.r5.u64;
	// subf r9,r9,r8
	ctx.r9.s64 = ctx.r8.s64 - ctx.r9.s64;
	// sth r9,2(r4)
	PPC_STORE_U16(ctx.r4.u32 + 2, ctx.r9.u16);
	// lwz r9,1496(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lhz r8,2(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 2);
	// sth r8,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r8.u16);
	// lwz r9,1496(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lhzx r8,r10,r9
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r9.u32);
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// sth r8,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, ctx.r8.u16);
	// lwz r9,1496(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// lhz r8,2(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 2);
	// sth r8,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r8.u16);
	// addi r9,r31,50
	ctx.r9.s64 = r31.s64 + 50;
	// lwz r8,1496(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lwz r29,1500(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// lwz r7,1504(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lhz r9,0(r9)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// lhzx r8,r8,r11
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r8.u32 + r11.u32);
	// srawi r28,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	r28.s64 = ctx.r9.s32 >> 1;
	// extsh r5,r8
	ctx.r5.s64 = ctx.r8.s16;
	// mullw r8,r9,r18
	ctx.r8.s64 = int64_t(ctx.r9.s32) * int64_t(r18.s32);
	// add r8,r8,r25
	ctx.r8.u64 = ctx.r8.u64 + r25.u64;
	// rlwinm r4,r8,1,0,30
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// mr r8,r20
	ctx.r8.u64 = r20.u64;
	// beq cr6,0x82730bfc
	if (cr6.eq) goto loc_82730BFC;
	// lwz r30,-20(r27)
	r30.u64 = PPC_LOAD_U32(r27.u32 + -20);
	// addi r3,r4,-2
	ctx.r3.s64 = ctx.r4.s64 + -2;
	// rlwinm r26,r30,0,14,14
	r26.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x82730bfc
	if (cr6.eq) goto loc_82730BFC;
	// rlwinm r8,r30,0,21,23
	ctx.r8.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0x700;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// li r8,1
	ctx.r8.s64 = 1;
	// beq cr6,0x82730be8
	if (cr6.eq) goto loc_82730BE8;
	// add r3,r3,r9
	ctx.r3.u64 = ctx.r3.u64 + ctx.r9.u64;
loc_82730BE8:
	// rlwinm r3,r3,1,0,30
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r30,r3,r29
	r30.u64 = PPC_LOAD_U16(ctx.r3.u32 + r29.u32);
	// lhzx r3,r3,r7
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r3.u32 + ctx.r7.u32);
	// sth r30,402(r1)
	PPC_STORE_U16(ctx.r1.u32 + 402, r30.u16);
	// sth r3,400(r1)
	PPC_STORE_U16(ctx.r1.u32 + 400, ctx.r3.u16);
loc_82730BFC:
	// cmpwi cr6,r16,0
	cr6.compare<int32_t>(r16.s32, 0, xer);
	// bne cr6,0x82730d28
	if (!cr6.eq) goto loc_82730D28;
	// rlwinm r3,r9,1,0,30
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r30,r3,r4
	r30.s64 = ctx.r4.s64 - ctx.r3.s64;
	// rlwinm r4,r28,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// add r4,r28,r4
	ctx.r4.u64 = r28.u64 + ctx.r4.u64;
	// rlwinm r4,r4,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r27,r4,r27
	r27.s64 = r27.s64 - ctx.r4.s64;
	// lwz r4,0(r27)
	ctx.r4.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// rlwinm r3,r4,0,14,14
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82730c7c
	if (cr6.eq) goto loc_82730C7C;
	// rlwinm r4,r4,0,21,23
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x700;
	// addi r26,r1,402
	r26.s64 = ctx.r1.s64 + 402;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// addi r23,r1,400
	r23.s64 = ctx.r1.s64 + 400;
	// bne cr6,0x82730c5c
	if (!cr6.eq) goto loc_82730C5C;
	// rlwinm r4,r30,1,0,30
	ctx.r4.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r3,r8,2,0,29
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// lhzx r22,r4,r29
	r22.u64 = PPC_LOAD_U16(ctx.r4.u32 + r29.u32);
	// lhzx r4,r4,r7
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r4.u32 + ctx.r7.u32);
	// sthx r22,r3,r26
	PPC_STORE_U16(ctx.r3.u32 + r26.u32, r22.u16);
	// sthx r4,r3,r23
	PPC_STORE_U16(ctx.r3.u32 + r23.u32, ctx.r4.u16);
	// b 0x82730c78
	goto loc_82730C78;
loc_82730C5C:
	// add r3,r30,r9
	ctx.r3.u64 = r30.u64 + ctx.r9.u64;
	// rlwinm r4,r8,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r3,r3,1,0,30
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r22,r3,r29
	r22.u64 = PPC_LOAD_U16(ctx.r3.u32 + r29.u32);
	// lhzx r3,r3,r7
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r3.u32 + ctx.r7.u32);
	// sthx r22,r4,r26
	PPC_STORE_U16(ctx.r4.u32 + r26.u32, r22.u16);
	// sthx r3,r4,r23
	PPC_STORE_U16(ctx.r4.u32 + r23.u32, ctx.r3.u16);
loc_82730C78:
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
loc_82730C7C:
	// cmpwi cr6,r28,1
	cr6.compare<int32_t>(r28.s32, 1, xer);
	// beq cr6,0x82730d28
	if (cr6.eq) goto loc_82730D28;
	// addi r3,r28,-1
	ctx.r3.s64 = r28.s64 + -1;
	// li r4,1
	ctx.r4.s64 = 1;
	// cmpw cr6,r25,r3
	cr6.compare<int32_t>(r25.s32, ctx.r3.s32, xer);
	// blt cr6,0x82730c98
	if (cr6.lt) goto loc_82730C98;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
loc_82730C98:
	// rlwinm r4,r4,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpw cr6,r25,r3
	cr6.compare<int32_t>(r25.s32, ctx.r3.s32, xer);
	// add r4,r4,r30
	ctx.r4.u64 = ctx.r4.u64 + r30.u64;
	// addi r3,r4,-2
	ctx.r3.s64 = ctx.r4.s64 + -2;
	// li r4,1
	ctx.r4.s64 = 1;
	// blt cr6,0x82730cb4
	if (cr6.lt) goto loc_82730CB4;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
loc_82730CB4:
	// rlwinm r30,r4,2,0,29
	r30.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// add r4,r4,r30
	ctx.r4.u64 = ctx.r4.u64 + r30.u64;
	// rlwinm r4,r4,3,0,28
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 3) & 0xFFFFFFF8;
	// add r4,r4,r27
	ctx.r4.u64 = ctx.r4.u64 + r27.u64;
	// lwz r4,-20(r4)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r4.u32 + -20);
	// rlwinm r30,r4,0,14,14
	r30.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x82730d28
	if (cr6.eq) goto loc_82730D28;
	// rlwinm r4,r4,0,21,23
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x700;
	// addi r30,r1,400
	r30.s64 = ctx.r1.s64 + 400;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// bne cr6,0x82730d04
	if (!cr6.eq) goto loc_82730D04;
	// rlwinm r9,r3,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r4,r8,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r3,r1,402
	ctx.r3.s64 = ctx.r1.s64 + 402;
	// lhzx r28,r9,r29
	r28.u64 = PPC_LOAD_U16(ctx.r9.u32 + r29.u32);
	// lhzx r9,r9,r7
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r9.u32 + ctx.r7.u32);
	// sthx r28,r4,r3
	PPC_STORE_U16(ctx.r4.u32 + ctx.r3.u32, r28.u16);
	// sthx r9,r4,r30
	PPC_STORE_U16(ctx.r4.u32 + r30.u32, ctx.r9.u16);
	// b 0x82730d24
	goto loc_82730D24;
loc_82730D04:
	// add r4,r3,r9
	ctx.r4.u64 = ctx.r3.u64 + ctx.r9.u64;
	// rlwinm r9,r8,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r4,r4,1,0,30
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r3,r1,402
	ctx.r3.s64 = ctx.r1.s64 + 402;
	// lhzx r28,r4,r29
	r28.u64 = PPC_LOAD_U16(ctx.r4.u32 + r29.u32);
	// lhzx r7,r4,r7
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r4.u32 + ctx.r7.u32);
	// sthx r28,r9,r3
	PPC_STORE_U16(ctx.r9.u32 + ctx.r3.u32, r28.u16);
	// sthx r7,r9,r30
	PPC_STORE_U16(ctx.r9.u32 + r30.u32, ctx.r7.u16);
loc_82730D24:
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
loc_82730D28:
	// mr r30,r20
	r30.u64 = r20.u64;
	// mr r28,r20
	r28.u64 = r20.u64;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x82730e64
	if (!cr6.gt) goto loc_82730E64;
	// addi r7,r1,2464
	ctx.r7.s64 = ctx.r1.s64 + 2464;
	// addi r9,r1,400
	ctx.r9.s64 = ctx.r1.s64 + 400;
	// addi r4,r1,2496
	ctx.r4.s64 = ctx.r1.s64 + 2496;
	// mr r3,r8
	ctx.r3.u64 = ctx.r8.u64;
loc_82730D48:
	// lhz r27,0(r9)
	r27.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// rlwinm r27,r27,0,29,29
	r27.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// lwz r27,0(r9)
	r27.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// beq cr6,0x82730d6c
	if (cr6.eq) goto loc_82730D6C;
	// stw r27,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r27.u32);
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// addi r4,r4,4
	ctx.r4.s64 = ctx.r4.s64 + 4;
	// b 0x82730d78
	goto loc_82730D78;
loc_82730D6C:
	// stw r27,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, r27.u32);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// addi r7,r7,4
	ctx.r7.s64 = ctx.r7.s64 + 4;
loc_82730D78:
	// addi r3,r3,-1
	ctx.r3.s64 = ctx.r3.s64 + -1;
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82730d48
	if (!cr6.eq) goto loc_82730D48;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x82730e64
	if (!cr6.gt) goto loc_82730E64;
	// cmpwi cr6,r30,3
	cr6.compare<int32_t>(r30.s32, 3, xer);
	// beq cr6,0x82730dc0
	if (cr6.eq) goto loc_82730DC0;
	// cmpwi cr6,r28,3
	cr6.compare<int32_t>(r28.s32, 3, xer);
	// beq cr6,0x82730dc0
	if (cr6.eq) goto loc_82730DC0;
	// cmpw cr6,r30,r28
	cr6.compare<int32_t>(r30.s32, r28.s32, xer);
	// blt cr6,0x82730db4
	if (cr6.lt) goto loc_82730DB4;
	// lwz r9,2464(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2464);
	// stw r9,424(r1)
	PPC_STORE_U32(ctx.r1.u32 + 424, ctx.r9.u32);
	// b 0x82730e68
	goto loc_82730E68;
loc_82730DB4:
	// lwz r9,2496(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2496);
	// stw r9,424(r1)
	PPC_STORE_U32(ctx.r1.u32 + 424, ctx.r9.u32);
	// b 0x82730e68
	goto loc_82730E68;
loc_82730DC0:
	// lhz r9,406(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 406);
	// lhz r8,402(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 402);
	// lhz r3,410(r1)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r1.u32 + 410);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// lhz r7,404(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 404);
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// lhz r4,400(r1)
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r1.u32 + 400);
	// extsh r3,r3
	ctx.r3.s64 = ctx.r3.s16;
	// lhz r30,408(r1)
	r30.u64 = PPC_LOAD_U16(ctx.r1.u32 + 408);
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// extsh r4,r4
	ctx.r4.s64 = ctx.r4.s16;
	// extsh r30,r30
	r30.s64 = r30.s16;
	// subf r28,r8,r9
	r28.s64 = ctx.r9.s64 - ctx.r8.s64;
	// subf r26,r3,r9
	r26.s64 = ctx.r9.s64 - ctx.r3.s64;
	// subf r25,r8,r3
	r25.s64 = ctx.r3.s64 - ctx.r8.s64;
	// subf r27,r4,r7
	r27.s64 = ctx.r7.s64 - ctx.r4.s64;
	// subf r23,r30,r7
	r23.s64 = ctx.r7.s64 - r30.s64;
	// subf r22,r4,r30
	r22.s64 = r30.s64 - ctx.r4.s64;
	// xor r26,r26,r28
	r26.u64 = r26.u64 ^ r28.u64;
	// xor r25,r25,r28
	r25.u64 = r25.u64 ^ r28.u64;
	// xor r23,r23,r27
	r23.u64 = r23.u64 ^ r27.u64;
	// srawi r28,r26,31
	xer.ca = (r26.s32 < 0) & ((r26.u32 & 0x7FFFFFFF) != 0);
	r28.s64 = r26.s32 >> 31;
	// xor r22,r22,r27
	r22.u64 = r22.u64 ^ r27.u64;
	// srawi r27,r25,31
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x7FFFFFFF) != 0);
	r27.s64 = r25.s32 >> 31;
	// srawi r26,r23,31
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x7FFFFFFF) != 0);
	r26.s64 = r23.s32 >> 31;
	// srawi r25,r22,31
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x7FFFFFFF) != 0);
	r25.s64 = r22.s32 >> 31;
	// or r23,r28,r27
	r23.u64 = r28.u64 | r27.u64;
	// or r22,r26,r25
	r22.u64 = r26.u64 | r25.u64;
	// and r8,r27,r8
	ctx.r8.u64 = r27.u64 & ctx.r8.u64;
	// andc r3,r3,r23
	ctx.r3.u64 = ctx.r3.u64 & ~r23.u64;
	// andc r30,r30,r22
	r30.u64 = r30.u64 & ~r22.u64;
	// and r4,r25,r4
	ctx.r4.u64 = r25.u64 & ctx.r4.u64;
	// or r8,r3,r8
	ctx.r8.u64 = ctx.r3.u64 | ctx.r8.u64;
	// and r9,r28,r9
	ctx.r9.u64 = r28.u64 & ctx.r9.u64;
	// or r4,r30,r4
	ctx.r4.u64 = r30.u64 | ctx.r4.u64;
	// and r7,r26,r7
	ctx.r7.u64 = r26.u64 & ctx.r7.u64;
	// or r9,r8,r9
	ctx.r9.u64 = ctx.r8.u64 | ctx.r9.u64;
	// or r8,r4,r7
	ctx.r8.u64 = ctx.r4.u64 | ctx.r7.u64;
	// sth r9,426(r1)
	PPC_STORE_U16(ctx.r1.u32 + 426, ctx.r9.u16);
	// sth r8,424(r1)
	PPC_STORE_U16(ctx.r1.u32 + 424, ctx.r8.u16);
	// b 0x82730e68
	goto loc_82730E68;
loc_82730E64:
	// stw r20,424(r1)
	PPC_STORE_U32(ctx.r1.u32 + 424, r20.u32);
loc_82730E68:
	// lhz r7,426(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 426);
	// rlwinm r9,r24,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 2) & 0xFFFFFFFC;
	// lhz r8,62(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 62);
	// add r27,r10,r29
	r27.u64 = ctx.r10.u64 + r29.u64;
	// extsh r28,r7
	r28.s64 = ctx.r7.s16;
	// lhz r7,66(r31)
	ctx.r7.u64 = PPC_LOAD_U16(r31.u32 + 66);
	// extsh r29,r8
	r29.s64 = ctx.r8.s16;
	// lwz r4,136(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// extsh r25,r7
	r25.s64 = ctx.r7.s16;
	// lhz r7,424(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 424);
	// mr r24,r8
	r24.u64 = ctx.r8.u64;
	// extsh r3,r7
	ctx.r3.s64 = ctx.r7.s16;
	// lwzx r7,r9,r15
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r9.u32 + r15.u32);
	// lwz r9,160(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// mr r23,r5
	r23.u64 = ctx.r5.u64;
	// add r8,r7,r28
	ctx.r8.u64 = ctx.r7.u64 + r28.u64;
	// rlwinm r21,r7,16,16,31
	r21.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 16) & 0xFFFF;
	// add r8,r8,r29
	ctx.r8.u64 = ctx.r8.u64 + r29.u64;
	// extsh r7,r21
	ctx.r7.s64 = r21.s16;
	// and r8,r8,r25
	ctx.r8.u64 = ctx.r8.u64 & r25.u64;
	// stw r23,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r23.u32);
	// add r7,r3,r7
	ctx.r7.u64 = ctx.r3.u64 + ctx.r7.u64;
	// subf r8,r24,r8
	ctx.r8.s64 = ctx.r8.s64 - r24.s64;
	// rlwinm r9,r9,16,0,15
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 16) & 0xFFFF0000;
	// mr r22,r6
	r22.u64 = ctx.r6.u64;
	// or r26,r9,r4
	r26.u64 = ctx.r9.u64 | ctx.r4.u64;
	// mr r9,r6
	ctx.r9.u64 = ctx.r6.u64;
	// sth r8,2(r27)
	PPC_STORE_U16(r27.u32 + 2, ctx.r8.u16);
	// clrlwi r4,r6,30
	ctx.r4.u64 = ctx.r6.u32 & 0x3;
	// lwz r8,1500(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// rlwimi r9,r5,16,0,15
	ctx.r9.u64 = (__builtin_rotateleft32(ctx.r5.u32, 16) & 0xFFFF0000) | (ctx.r9.u64 & 0xFFFFFFFF0000FFFF);
	// addi r4,r4,1
	ctx.r4.s64 = ctx.r4.s64 + 1;
	// stw r22,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r22.u32);
	// add r8,r8,r10
	ctx.r8.u64 = ctx.r8.u64 + ctx.r10.u64;
	// srawi r30,r14,1
	xer.ca = (r14.s32 < 0) & ((r14.u32 & 0x1) != 0);
	r30.s64 = r14.s32 >> 1;
	// srawi r4,r4,2
	xer.ca = (ctx.r4.s32 < 0) & ((ctx.r4.u32 & 0x3) != 0);
	ctx.r4.s64 = ctx.r4.s32 >> 2;
	// rlwinm r29,r26,6,0,25
	r29.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 6) & 0xFFFFFFC0;
	// lhz r3,2(r8)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r8.u32 + 2);
	// sth r3,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r3.u16);
	// lwz r8,1500(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// lhzx r3,r10,r8
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r8.u32);
	// add r8,r8,r11
	ctx.r8.u64 = ctx.r8.u64 + r11.u64;
	// sth r3,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, ctx.r3.u16);
	// lwz r8,1500(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r8,r8,r11
	ctx.r8.u64 = ctx.r8.u64 + r11.u64;
	// lhz r3,2(r8)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r8.u32 + 2);
	// sth r3,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r3.u16);
	// lhz r28,68(r31)
	r28.u64 = PPC_LOAD_U16(r31.u32 + 68);
	// lwz r3,1504(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// extsh r27,r28
	r27.s64 = r28.s16;
	// lwz r28,1500(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r25,r10,r3
	r25.u64 = ctx.r10.u64 + ctx.r3.u64;
	// lhz r8,64(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 64);
	// lhzx r3,r28,r11
	ctx.r3.u64 = PPC_LOAD_U16(r28.u32 + r11.u32);
	// extsh r28,r3
	r28.s64 = ctx.r3.s16;
	// extsh r3,r8
	ctx.r3.s64 = ctx.r8.s16;
	// mr r21,r28
	r21.u64 = r28.u64;
	// add r7,r7,r3
	ctx.r7.u64 = ctx.r7.u64 + ctx.r3.u64;
	// and r7,r7,r27
	ctx.r7.u64 = ctx.r7.u64 & r27.u64;
	// subf r8,r8,r7
	ctx.r8.s64 = ctx.r7.s64 - ctx.r8.s64;
	// stw r21,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r21.u32);
	// sth r8,2(r25)
	PPC_STORE_U16(r25.u32 + 2, ctx.r8.u16);
	// lwz r8,1504(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// add r8,r10,r8
	ctx.r8.u64 = ctx.r10.u64 + ctx.r8.u64;
	// lhz r7,2(r8)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r8.u32 + 2);
	// sth r7,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r7.u16);
	// lwz r8,1504(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lhzx r10,r10,r8
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r8.u32);
	// add r8,r8,r11
	ctx.r8.u64 = ctx.r8.u64 + r11.u64;
	// sth r10,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, ctx.r10.u16);
	// lwz r10,1504(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// lhz r8,2(r10)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r10.u32 + 2);
	// sth r8,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r8.u16);
	// lwz r10,1504(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lwz r27,1396(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + 1396);
	// lwz r25,1404(r31)
	r25.u64 = PPC_LOAD_U32(r31.u32 + 1404);
	// lhzx r11,r11,r10
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r10.u32);
	// extsh r24,r11
	r24.s64 = r11.s16;
	// rlwinm r11,r9,1,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0x10000;
	// stw r24,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r24.u32);
	// lis r10,115
	ctx.r10.s64 = 7536640;
	// lwz r16,176(r1)
	r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// subf r11,r11,r9
	r11.s64 = ctx.r9.s64 - r11.s64;
	// ori r20,r10,115
	r20.u64 = ctx.r10.u64 | 115;
	// subf r10,r9,r27
	ctx.r10.s64 = r27.s64 - ctx.r9.s64;
	// rlwinm r8,r5,2,26,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0x3C;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// add r9,r4,r6
	ctx.r9.u64 = ctx.r4.u64 + ctx.r6.u64;
	// add r7,r11,r20
	ctx.r7.u64 = r11.u64 + r20.u64;
	// srawi r19,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	r19.s64 = ctx.r9.s32 >> 1;
	// subf r10,r29,r10
	ctx.r10.s64 = ctx.r10.s64 - r29.s64;
	// lwzx r11,r8,r16
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + r16.u32);
	// srawi r9,r5,1
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x1) != 0);
	ctx.r9.s64 = ctx.r5.s32 >> 1;
	// or r8,r7,r10
	ctx.r8.u64 = ctx.r7.u64 | ctx.r10.u64;
	// rlwinm r10,r9,0,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFFFFF8;
	// rlwinm r9,r8,0,0,16
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0xFFFF8000;
	// stw r19,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r19.u32);
	// add r18,r11,r10
	r18.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r9,r9,0,16,0
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// stw r18,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r18.u32);
	// beq cr6,0x82731020
	if (cr6.eq) goto loc_82731020;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r1,132
	ctx.r4.s64 = ctx.r1.s64 + 132;
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r23,132(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lwz r22,116(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
loc_82731020:
	// clrlwi r10,r28,30
	ctx.r10.u64 = r28.u32 & 0x3;
	// rlwinm r9,r24,2,26,29
	ctx.r9.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 2) & 0x3C;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// mr r11,r28
	r11.u64 = r28.u64;
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// rlwimi r11,r24,16,0,15
	r11.u64 = (__builtin_rotateleft32(r24.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// add r10,r10,r28
	ctx.r10.u64 = ctx.r10.u64 + r28.u64;
	// lis r15,4
	r15.s64 = 262144;
	// srawi r17,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	r17.s64 = ctx.r10.s32 >> 1;
	// lwzx r10,r9,r16
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + r16.u32);
	// srawi r8,r24,1
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x1) != 0);
	ctx.r8.s64 = r24.s32 >> 1;
	// add r5,r29,r15
	ctx.r5.u64 = r29.u64 + r15.u64;
	// rlwinm r9,r8,0,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0xFFFFFFF8;
	// add r16,r10,r9
	r16.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r17,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r17.u32);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r27
	ctx.r9.s64 = r27.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r5,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r5.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// stw r16,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r16.u32);
	// add r11,r11,r20
	r11.u64 = r11.u64 + r20.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x827310a4
	if (cr6.eq) goto loc_827310A4;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// addi r4,r1,140
	ctx.r4.s64 = ctx.r1.s64 + 140;
	// addi r3,r1,108
	ctx.r3.s64 = ctx.r1.s64 + 108;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r24,140(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// lwz r21,108(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
loc_827310A4:
	// mr r11,r19
	r11.u64 = r19.u64;
	// lis r10,59
	ctx.r10.s64 = 3866624;
	// rlwimi r11,r18,16,0,15
	r11.u64 = (__builtin_rotateleft32(r18.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// ori r28,r10,59
	r28.u64 = ctx.r10.u64 | 59;
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r25
	ctx.r9.s64 = r25.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// rlwinm r29,r26,5,0,26
	r29.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 5) & 0xFFFFFFE0;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// subf r10,r29,r9
	ctx.r10.s64 = ctx.r9.s64 - r29.s64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82731100
	if (cr6.eq) goto loc_82731100;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r1,100
	ctx.r4.s64 = ctx.r1.s64 + 100;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
	// lwz r19,96(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r18,100(r1)
	r18.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
loc_82731100:
	// mr r11,r17
	r11.u64 = r17.u64;
	// add r5,r29,r15
	ctx.r5.u64 = r29.u64 + r15.u64;
	// rlwimi r11,r16,16,0,15
	r11.u64 = (__builtin_rotateleft32(r16.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r25
	ctx.r9.s64 = r25.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r5,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r5.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82731150
	if (cr6.eq) goto loc_82731150;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// addi r3,r1,132
	ctx.r3.s64 = ctx.r1.s64 + 132;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
	// lwz r17,132(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lwz r16,116(r1)
	r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
loc_82731150:
	// addi r26,r31,74
	r26.s64 = r31.s64 + 74;
	// lwz r25,124(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// srawi r8,r23,2
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x3) != 0);
	ctx.r8.s64 = r23.s32 >> 2;
	// srawi r9,r22,2
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x3) != 0);
	ctx.r9.s64 = r22.s32 >> 2;
	// lhz r10,0(r26)
	ctx.r10.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// mullw r10,r8,r10
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lwz r9,152(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// add r29,r10,r9
	r29.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x827311fc
	if (!cr0.eq) goto loc_827311FC;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r14,128
	r11.s64 = r14.s64 + 128;
	// dcbt r11,r29
	// addi r11,r14,64
	r11.s64 = r14.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r14,1,0,30
	r11.u64 = __builtin_rotateleft64(r14.u32 | (r14.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r14,r11
	r11.u64 = r14.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r14,32
	r11.s64 = r14.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r14,2,0,29
	r11.u64 = __builtin_rotateleft64(r14.u32 | (r14.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r14,r11
	r11.u64 = r14.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r14,1,0,30
	r11.u64 = __builtin_rotateleft64(r14.u32 | (r14.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r14,r11
	r11.u64 = r14.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r14,3,0,28
	r11.u64 = __builtin_rotateleft64(r14.u32 | (r14.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r14,r11
	r11.s64 = r11.s64 - r14.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_827311FC:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// clrlwi r28,r22,30
	r28.u64 = r22.u32 & 0x3;
	// lwz r22,188(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// clrlwi r27,r23,30
	r27.u64 = r23.u32 & 0x3;
	// li r23,1
	r23.s64 = 1;
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r11,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r6,r14
	ctx.r6.u64 = r14.u64;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r4,r14
	ctx.r4.u64 = r14.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82731284
	if (cr6.eq) goto loc_82731284;
	// li r10,1
	ctx.r10.s64 = 1;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// mr r6,r14
	ctx.r6.u64 = r14.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// mr r4,r14
	ctx.r4.u64 = r14.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_82731284:
	// srawi r10,r24,2
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x3) != 0);
	ctx.r10.s64 = r24.s32 >> 2;
	// lhz r8,0(r26)
	ctx.r8.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// srawi r9,r21,2
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x3) != 0);
	ctx.r9.s64 = r21.s32 >> 2;
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// add r26,r30,r22
	r26.u64 = r30.u64 + r22.u64;
	// mullw r10,r10,r8
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r8.s32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lwz r9,184(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// add r29,r10,r9
	r29.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82731330
	if (!cr0.eq) goto loc_82731330;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r14,128
	r11.s64 = r14.s64 + 128;
	// dcbt r11,r29
	// addi r11,r14,64
	r11.s64 = r14.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r14,1,0,30
	r11.u64 = __builtin_rotateleft64(r14.u32 | (r14.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r14,r11
	r11.u64 = r14.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r14,32
	r11.s64 = r14.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r14,2,0,29
	r11.u64 = __builtin_rotateleft64(r14.u32 | (r14.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r14,r11
	r11.u64 = r14.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r14,1,0,30
	r11.u64 = __builtin_rotateleft64(r14.u32 | (r14.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r14,r11
	r11.u64 = r14.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r14,3,0,28
	r11.u64 = __builtin_rotateleft64(r14.u32 | (r14.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r14,r11
	r11.s64 = r11.s64 - r14.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_82731330:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// clrlwi r28,r21,30
	r28.u64 = r21.u32 & 0x3;
	// clrlwi r27,r24,30
	r27.u64 = r24.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// stw r11,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r6,r14
	ctx.r6.u64 = r14.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r4,r14
	ctx.r4.u64 = r14.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x827313b0
	if (cr6.eq) goto loc_827313B0;
	// li r10,1
	ctx.r10.s64 = 1;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// mr r6,r14
	ctx.r6.u64 = r14.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r14
	ctx.r4.u64 = r14.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_827313B0:
	// addi r26,r31,76
	r26.s64 = r31.s64 + 76;
	// lwz r25,156(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// srawi r8,r18,2
	xer.ca = (r18.s32 < 0) & ((r18.u32 & 0x3) != 0);
	ctx.r8.s64 = r18.s32 >> 2;
	// srawi r9,r19,2
	xer.ca = (r19.s32 < 0) & ((r19.u32 & 0x3) != 0);
	ctx.r9.s64 = r19.s32 >> 2;
	// lhz r10,0(r26)
	ctx.r10.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// mullw r10,r8,r10
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// lwz r8,168(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r9,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r9.s64 = r11.s32 >> 4;
	// add r3,r10,r8
	ctx.r3.u64 = ctx.r10.u64 + ctx.r8.u64;
	// addze r9,r9
	temp.s64 = ctx.r9.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r9.u32;
	ctx.r9.s64 = temp.s64;
	// lwz r8,128(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// add r29,r10,r8
	r29.u64 = ctx.r10.u64 + ctx.r8.u64;
	// rlwinm r9,r9,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r9,r9,r11
	ctx.r9.s64 = r11.s64 - ctx.r9.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x82731464
	if (!cr0.eq) goto loc_82731464;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// li r11,0
	r11.s64 = 0;
loc_82731464:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r22,164(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// clrlwi r28,r19,30
	r28.u64 = r19.u32 & 0x3;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// clrlwi r27,r18,30
	r27.u64 = r18.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// stw r11,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// srawi r10,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r10.s64 = r11.s32 >> 4;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8273153c
	if (!cr0.eq) goto loc_8273153C;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_8273153C:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r24,180(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// stw r11,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lhz r10,0(r26)
	ctx.r10.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// srawi r8,r16,2
	xer.ca = (r16.s32 < 0) & ((r16.u32 & 0x3) != 0);
	ctx.r8.s64 = r16.s32 >> 2;
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// srawi r7,r17,2
	xer.ca = (r17.s32 < 0) & ((r17.u32 & 0x3) != 0);
	ctx.r7.s64 = r17.s32 >> 2;
	// mullw r8,r8,r10
	ctx.r8.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// srawi r9,r30,1
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x1) != 0);
	ctx.r9.s64 = r30.s32 >> 1;
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// srawi r7,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r7.s64 = r11.s32 >> 4;
	// add r5,r9,r22
	ctx.r5.u64 = ctx.r9.u64 + r22.u64;
	// add r26,r9,r24
	r26.u64 = ctx.r9.u64 + r24.u64;
	// addze r9,r7
	temp.s64 = ctx.r7.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r7.u32;
	ctx.r9.s64 = temp.s64;
	// add r10,r8,r10
	ctx.r10.u64 = ctx.r8.u64 + ctx.r10.u64;
	// rlwinm r9,r9,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r9,r9,r11
	ctx.r9.s64 = r11.s64 - ctx.r9.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// lwz r9,172(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// add r3,r10,r9
	ctx.r3.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lwz r9,144(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// add r29,r10,r9
	r29.u64 = ctx.r10.u64 + ctx.r9.u64;
	// bne 0x82731644
	if (!cr0.eq) goto loc_82731644;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// li r11,0
	r11.s64 = 0;
loc_82731644:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// clrlwi r28,r17,30
	r28.u64 = r17.u32 & 0x3;
	// clrlwi r27,r16,30
	r27.u64 = r16.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// stw r11,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// srawi r10,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r10.s64 = r11.s32 >> 4;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82731714
	if (!cr0.eq) goto loc_82731714;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_82731714:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// stw r11,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r23,2772(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2772);
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x827326c0
	goto loc_827326C0;
loc_82731768:
	// lwz r25,136(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// mullw r11,r17,r18
	r11.s64 = int64_t(r17.s32) * int64_t(r18.s32);
	// add r11,r11,r25
	r11.u64 = r11.u64 + r25.u64;
	// lwz r29,1500(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// lwz r6,1504(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lwz r27,112(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// stw r20,616(r1)
	PPC_STORE_U32(ctx.r1.u32 + 616, r20.u32);
	// stw r20,612(r1)
	PPC_STORE_U32(ctx.r1.u32 + 612, r20.u32);
	// stw r20,608(r1)
	PPC_STORE_U32(ctx.r1.u32 + 608, r20.u32);
	// mr r9,r20
	ctx.r9.u64 = r20.u64;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// srawi r7,r17,1
	xer.ca = (r17.s32 < 0) & ((r17.u32 & 0x1) != 0);
	ctx.r7.s64 = r17.s32 >> 1;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// beq cr6,0x827317cc
	if (cr6.eq) goto loc_827317CC;
	// lwz r8,-20(r27)
	ctx.r8.u64 = PPC_LOAD_U32(r27.u32 + -20);
	// addi r11,r10,-2
	r11.s64 = ctx.r10.s64 + -2;
	// rlwinm r8,r8,0,14,14
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x827317cc
	if (cr6.eq) goto loc_827317CC;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// li r9,1
	ctx.r9.s64 = 1;
	// lhzx r8,r11,r29
	ctx.r8.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// lhzx r11,r11,r6
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r6.u32);
	// sth r8,610(r1)
	PPC_STORE_U16(ctx.r1.u32 + 610, ctx.r8.u16);
	// sth r11,608(r1)
	PPC_STORE_U16(ctx.r1.u32 + 608, r11.u16);
loc_827317CC:
	// cmpwi cr6,r16,0
	cr6.compare<int32_t>(r16.s32, 0, xer);
	// bne cr6,0x8273189c
	if (!cr6.eq) goto loc_8273189C;
	// rlwinm r11,r17,1,0,30
	r11.u64 = __builtin_rotateleft64(r17.u32 | (r17.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r8,r11,r10
	ctx.r8.s64 = ctx.r10.s64 - r11.s64;
	// rlwinm r11,r7,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r7,r11
	r11.u64 = ctx.r7.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r5,r11,r27
	ctx.r5.s64 = r27.s64 - r11.s64;
	// lwz r11,0(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	// rlwinm r11,r11,0,14,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82731820
	if (cr6.eq) goto loc_82731820;
	// rlwinm r11,r8,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r10,r9,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r4,r1,610
	ctx.r4.s64 = ctx.r1.s64 + 610;
	// addi r3,r1,608
	ctx.r3.s64 = ctx.r1.s64 + 608;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// lhzx r30,r11,r29
	r30.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// lhzx r11,r11,r6
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r6.u32);
	// sthx r30,r10,r4
	PPC_STORE_U16(ctx.r10.u32 + ctx.r4.u32, r30.u16);
	// sthx r11,r10,r3
	PPC_STORE_U16(ctx.r10.u32 + ctx.r3.u32, r11.u16);
loc_82731820:
	// cmpwi cr6,r7,1
	cr6.compare<int32_t>(ctx.r7.s32, 1, xer);
	// beq cr6,0x8273189c
	if (cr6.eq) goto loc_8273189C;
	// addi r10,r7,-1
	ctx.r10.s64 = ctx.r7.s64 + -1;
	// li r11,1
	r11.s64 = 1;
	// cmpw cr6,r25,r10
	cr6.compare<int32_t>(r25.s32, ctx.r10.s32, xer);
	// blt cr6,0x8273183c
	if (cr6.lt) goto loc_8273183C;
	// mr r11,r20
	r11.u64 = r20.u64;
loc_8273183C:
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpw cr6,r25,r10
	cr6.compare<int32_t>(r25.s32, ctx.r10.s32, xer);
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// addi r8,r11,-2
	ctx.r8.s64 = r11.s64 + -2;
	// li r11,1
	r11.s64 = 1;
	// blt cr6,0x82731858
	if (cr6.lt) goto loc_82731858;
	// mr r11,r20
	r11.u64 = r20.u64;
loc_82731858:
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// lwz r11,-20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -20);
	// rlwinm r11,r11,0,14,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x8273189c
	if (cr6.eq) goto loc_8273189C;
	// rlwinm r11,r8,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r10,r9,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r1,610
	ctx.r8.s64 = ctx.r1.s64 + 610;
	// addi r7,r1,608
	ctx.r7.s64 = ctx.r1.s64 + 608;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// lhzx r5,r11,r29
	ctx.r5.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// lhzx r11,r11,r6
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r6.u32);
	// sthx r5,r10,r8
	PPC_STORE_U16(ctx.r10.u32 + ctx.r8.u32, ctx.r5.u16);
	// sthx r11,r10,r7
	PPC_STORE_U16(ctx.r10.u32 + ctx.r7.u32, r11.u16);
loc_8273189C:
	// mr r6,r20
	ctx.r6.u64 = r20.u64;
	// mr r5,r20
	ctx.r5.u64 = r20.u64;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x827319d8
	if (!cr6.gt) goto loc_827319D8;
	// addi r10,r1,2528
	ctx.r10.s64 = ctx.r1.s64 + 2528;
	// addi r11,r1,608
	r11.s64 = ctx.r1.s64 + 608;
	// addi r8,r1,2560
	ctx.r8.s64 = ctx.r1.s64 + 2560;
	// mr r7,r9
	ctx.r7.u64 = ctx.r9.u64;
loc_827318BC:
	// lhz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rlwinm r4,r4,0,29,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// beq cr6,0x827318e0
	if (cr6.eq) goto loc_827318E0;
	// stw r4,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r4.u32);
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// addi r8,r8,4
	ctx.r8.s64 = ctx.r8.s64 + 4;
	// b 0x827318ec
	goto loc_827318EC;
loc_827318E0:
	// stw r4,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r4.u32);
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
loc_827318EC:
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// bne cr6,0x827318bc
	if (!cr6.eq) goto loc_827318BC;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x827319d8
	if (!cr6.gt) goto loc_827319D8;
	// cmpwi cr6,r6,3
	cr6.compare<int32_t>(ctx.r6.s32, 3, xer);
	// beq cr6,0x82731934
	if (cr6.eq) goto loc_82731934;
	// cmpwi cr6,r5,3
	cr6.compare<int32_t>(ctx.r5.s32, 3, xer);
	// beq cr6,0x82731934
	if (cr6.eq) goto loc_82731934;
	// cmpw cr6,r6,r5
	cr6.compare<int32_t>(ctx.r6.s32, ctx.r5.s32, xer);
	// blt cr6,0x82731928
	if (cr6.lt) goto loc_82731928;
	// lwz r11,2528(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2528);
	// stw r11,432(r1)
	PPC_STORE_U32(ctx.r1.u32 + 432, r11.u32);
	// b 0x827319dc
	goto loc_827319DC;
loc_82731928:
	// lwz r11,2560(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2560);
	// stw r11,432(r1)
	PPC_STORE_U32(ctx.r1.u32 + 432, r11.u32);
	// b 0x827319dc
	goto loc_827319DC;
loc_82731934:
	// lhz r11,614(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 614);
	// lhz r10,610(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 610);
	// lhz r7,618(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 618);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lhz r9,612(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 612);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// lhz r8,608(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 608);
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// lhz r6,616(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 616);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// subf r5,r10,r11
	ctx.r5.s64 = r11.s64 - ctx.r10.s64;
	// subf r3,r7,r11
	ctx.r3.s64 = r11.s64 - ctx.r7.s64;
	// subf r30,r10,r7
	r30.s64 = ctx.r7.s64 - ctx.r10.s64;
	// subf r4,r8,r9
	ctx.r4.s64 = ctx.r9.s64 - ctx.r8.s64;
	// subf r28,r6,r9
	r28.s64 = ctx.r9.s64 - ctx.r6.s64;
	// subf r24,r8,r6
	r24.s64 = ctx.r6.s64 - ctx.r8.s64;
	// xor r3,r3,r5
	ctx.r3.u64 = ctx.r3.u64 ^ ctx.r5.u64;
	// xor r30,r30,r5
	r30.u64 = r30.u64 ^ ctx.r5.u64;
	// xor r28,r28,r4
	r28.u64 = r28.u64 ^ ctx.r4.u64;
	// srawi r5,r3,31
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = ctx.r3.s32 >> 31;
	// xor r24,r24,r4
	r24.u64 = r24.u64 ^ ctx.r4.u64;
	// srawi r4,r30,31
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x7FFFFFFF) != 0);
	ctx.r4.s64 = r30.s32 >> 31;
	// srawi r3,r28,31
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r28.s32 >> 31;
	// srawi r30,r24,31
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x7FFFFFFF) != 0);
	r30.s64 = r24.s32 >> 31;
	// or r28,r5,r4
	r28.u64 = ctx.r5.u64 | ctx.r4.u64;
	// or r24,r3,r30
	r24.u64 = ctx.r3.u64 | r30.u64;
	// and r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 & ctx.r10.u64;
	// andc r7,r7,r28
	ctx.r7.u64 = ctx.r7.u64 & ~r28.u64;
	// andc r6,r6,r24
	ctx.r6.u64 = ctx.r6.u64 & ~r24.u64;
	// and r8,r30,r8
	ctx.r8.u64 = r30.u64 & ctx.r8.u64;
	// or r10,r7,r10
	ctx.r10.u64 = ctx.r7.u64 | ctx.r10.u64;
	// and r11,r5,r11
	r11.u64 = ctx.r5.u64 & r11.u64;
	// or r8,r6,r8
	ctx.r8.u64 = ctx.r6.u64 | ctx.r8.u64;
	// and r9,r3,r9
	ctx.r9.u64 = ctx.r3.u64 & ctx.r9.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// or r10,r8,r9
	ctx.r10.u64 = ctx.r8.u64 | ctx.r9.u64;
	// sth r11,434(r1)
	PPC_STORE_U16(ctx.r1.u32 + 434, r11.u16);
	// sth r10,432(r1)
	PPC_STORE_U16(ctx.r1.u32 + 432, ctx.r10.u16);
	// b 0x827319dc
	goto loc_827319DC;
loc_827319D8:
	// stw r20,432(r1)
	PPC_STORE_U32(ctx.r1.u32 + 432, r20.u32);
loc_827319DC:
	// rlwinm r10,r26,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 2) & 0xFFFFFFFC;
	// lhz r5,66(r31)
	ctx.r5.u64 = PPC_LOAD_U16(r31.u32 + 66);
	// lhz r11,434(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 434);
	// add r24,r17,r26
	r24.u64 = r17.u64 + r26.u64;
	// extsh r4,r5
	ctx.r4.s64 = ctx.r5.s16;
	// lhz r8,62(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 62);
	// extsh r6,r11
	ctx.r6.s64 = r11.s16;
	// stw r20,328(r1)
	PPC_STORE_U32(ctx.r1.u32 + 328, r20.u32);
	// rlwinm r11,r26,1,0,30
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 1) & 0xFFFFFFFE;
	// stw r20,324(r1)
	PPC_STORE_U32(ctx.r1.u32 + 324, r20.u32);
	// lwzx r9,r10,r15
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + r15.u32);
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// lhz r10,432(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 432);
	// rlwinm r5,r9,16,16,31
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 16) & 0xFFFF;
	// stw r20,320(r1)
	PPC_STORE_U32(ctx.r1.u32 + 320, r20.u32);
	// add r6,r6,r9
	ctx.r6.u64 = ctx.r6.u64 + ctx.r9.u64;
	// mr r9,r5
	ctx.r9.u64 = ctx.r5.u64;
	// extsh r5,r8
	ctx.r5.s64 = ctx.r8.s16;
	// extsh r7,r10
	ctx.r7.s64 = ctx.r10.s16;
	// add r6,r6,r5
	ctx.r6.u64 = ctx.r6.u64 + ctx.r5.u64;
	// rlwinm r10,r24,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 1) & 0xFFFFFFFE;
	// and r6,r6,r4
	ctx.r6.u64 = ctx.r6.u64 & ctx.r4.u64;
	// add r5,r10,r29
	ctx.r5.u64 = ctx.r10.u64 + r29.u64;
	// subf r6,r8,r6
	ctx.r6.s64 = ctx.r6.s64 - ctx.r8.s64;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// add r8,r7,r9
	ctx.r8.u64 = ctx.r7.u64 + ctx.r9.u64;
	// sth r6,2(r5)
	PPC_STORE_U16(ctx.r5.u32 + 2, ctx.r6.u16);
	// lwz r9,1500(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r9,r9,r10
	ctx.r9.u64 = ctx.r9.u64 + ctx.r10.u64;
	// lhz r7,2(r9)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r9.u32 + 2);
	// sth r7,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r7.u16);
	// lwz r9,1500(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// lhzx r7,r10,r9
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r9.u32);
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// sth r7,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, ctx.r7.u16);
	// lwz r9,1500(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// lhz r7,2(r9)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r9.u32 + 2);
	// sth r7,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r7.u16);
	// lhz r6,68(r31)
	ctx.r6.u64 = PPC_LOAD_U16(r31.u32 + 68);
	// lwz r7,1504(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// extsh r5,r6
	ctx.r5.s64 = ctx.r6.s16;
	// lwz r6,1500(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r4,r10,r7
	ctx.r4.u64 = ctx.r10.u64 + ctx.r7.u64;
	// lhz r9,64(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 64);
	// lhzx r7,r6,r11
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r6.u32 + r11.u32);
	// extsh r6,r7
	ctx.r6.s64 = ctx.r7.s16;
	// extsh r7,r9
	ctx.r7.s64 = ctx.r9.s16;
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// and r8,r8,r5
	ctx.r8.u64 = ctx.r8.u64 & ctx.r5.u64;
	// subf r9,r9,r8
	ctx.r9.s64 = ctx.r8.s64 - ctx.r9.s64;
	// sth r9,2(r4)
	PPC_STORE_U16(ctx.r4.u32 + 2, ctx.r9.u16);
	// lwz r9,1504(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lhz r8,2(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 2);
	// sth r8,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r8.u16);
	// lwz r9,1504(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lhzx r8,r10,r9
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r9.u32);
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// sth r8,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, ctx.r8.u16);
	// lwz r9,1504(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// add r9,r11,r9
	ctx.r9.u64 = r11.u64 + ctx.r9.u64;
	// lhz r8,2(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 2);
	// sth r8,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r8.u16);
	// addi r9,r31,50
	ctx.r9.s64 = r31.s64 + 50;
	// lwz r8,1504(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lwz r29,1492(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// lwz r7,1496(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lhz r9,0(r9)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// lhzx r8,r11,r8
	ctx.r8.u64 = PPC_LOAD_U16(r11.u32 + ctx.r8.u32);
	// srawi r28,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	r28.s64 = ctx.r9.s32 >> 1;
	// extsh r5,r8
	ctx.r5.s64 = ctx.r8.s16;
	// mullw r8,r9,r18
	ctx.r8.s64 = int64_t(ctx.r9.s32) * int64_t(r18.s32);
	// add r8,r8,r25
	ctx.r8.u64 = ctx.r8.u64 + r25.u64;
	// rlwinm r4,r8,1,0,30
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// mr r8,r20
	ctx.r8.u64 = r20.u64;
	// beq cr6,0x82731b4c
	if (cr6.eq) goto loc_82731B4C;
	// lwz r30,-20(r27)
	r30.u64 = PPC_LOAD_U32(r27.u32 + -20);
	// addi r3,r4,-2
	ctx.r3.s64 = ctx.r4.s64 + -2;
	// rlwinm r26,r30,0,14,14
	r26.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x82731b4c
	if (cr6.eq) goto loc_82731B4C;
	// rlwinm r8,r30,0,21,23
	ctx.r8.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 0) & 0x700;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// li r8,1
	ctx.r8.s64 = 1;
	// beq cr6,0x82731b38
	if (cr6.eq) goto loc_82731B38;
	// add r3,r3,r9
	ctx.r3.u64 = ctx.r3.u64 + ctx.r9.u64;
loc_82731B38:
	// rlwinm r3,r3,1,0,30
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r30,r29,r3
	r30.u64 = PPC_LOAD_U16(r29.u32 + ctx.r3.u32);
	// lhzx r3,r7,r3
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r3.u32);
	// sth r30,322(r1)
	PPC_STORE_U16(ctx.r1.u32 + 322, r30.u16);
	// sth r3,320(r1)
	PPC_STORE_U16(ctx.r1.u32 + 320, ctx.r3.u16);
loc_82731B4C:
	// cmpwi cr6,r16,0
	cr6.compare<int32_t>(r16.s32, 0, xer);
	// bne cr6,0x82731c78
	if (!cr6.eq) goto loc_82731C78;
	// rlwinm r3,r9,1,0,30
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r30,r3,r4
	r30.s64 = ctx.r4.s64 - ctx.r3.s64;
	// rlwinm r4,r28,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// add r4,r28,r4
	ctx.r4.u64 = r28.u64 + ctx.r4.u64;
	// rlwinm r4,r4,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r27,r4,r27
	r27.s64 = r27.s64 - ctx.r4.s64;
	// lwz r4,0(r27)
	ctx.r4.u64 = PPC_LOAD_U32(r27.u32 + 0);
	// rlwinm r3,r4,0,14,14
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82731bcc
	if (cr6.eq) goto loc_82731BCC;
	// rlwinm r4,r4,0,21,23
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x700;
	// addi r26,r1,322
	r26.s64 = ctx.r1.s64 + 322;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// addi r23,r1,320
	r23.s64 = ctx.r1.s64 + 320;
	// bne cr6,0x82731bac
	if (!cr6.eq) goto loc_82731BAC;
	// rlwinm r4,r30,1,0,30
	ctx.r4.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r3,r8,2,0,29
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// lhzx r22,r29,r4
	r22.u64 = PPC_LOAD_U16(r29.u32 + ctx.r4.u32);
	// lhzx r4,r7,r4
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r4.u32);
	// sthx r22,r26,r3
	PPC_STORE_U16(r26.u32 + ctx.r3.u32, r22.u16);
	// sthx r4,r23,r3
	PPC_STORE_U16(r23.u32 + ctx.r3.u32, ctx.r4.u16);
	// b 0x82731bc8
	goto loc_82731BC8;
loc_82731BAC:
	// add r3,r30,r9
	ctx.r3.u64 = r30.u64 + ctx.r9.u64;
	// rlwinm r4,r8,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r3,r3,1,0,30
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r22,r29,r3
	r22.u64 = PPC_LOAD_U16(r29.u32 + ctx.r3.u32);
	// lhzx r3,r7,r3
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r3.u32);
	// sthx r22,r26,r4
	PPC_STORE_U16(r26.u32 + ctx.r4.u32, r22.u16);
	// sthx r3,r23,r4
	PPC_STORE_U16(r23.u32 + ctx.r4.u32, ctx.r3.u16);
loc_82731BC8:
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
loc_82731BCC:
	// cmpwi cr6,r28,1
	cr6.compare<int32_t>(r28.s32, 1, xer);
	// beq cr6,0x82731c78
	if (cr6.eq) goto loc_82731C78;
	// addi r3,r28,-1
	ctx.r3.s64 = r28.s64 + -1;
	// li r4,1
	ctx.r4.s64 = 1;
	// cmpw cr6,r25,r3
	cr6.compare<int32_t>(r25.s32, ctx.r3.s32, xer);
	// blt cr6,0x82731be8
	if (cr6.lt) goto loc_82731BE8;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
loc_82731BE8:
	// rlwinm r4,r4,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpw cr6,r25,r3
	cr6.compare<int32_t>(r25.s32, ctx.r3.s32, xer);
	// add r4,r4,r30
	ctx.r4.u64 = ctx.r4.u64 + r30.u64;
	// addi r3,r4,-2
	ctx.r3.s64 = ctx.r4.s64 + -2;
	// li r4,1
	ctx.r4.s64 = 1;
	// blt cr6,0x82731c04
	if (cr6.lt) goto loc_82731C04;
	// mr r4,r20
	ctx.r4.u64 = r20.u64;
loc_82731C04:
	// rlwinm r30,r4,2,0,29
	r30.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// add r4,r4,r30
	ctx.r4.u64 = ctx.r4.u64 + r30.u64;
	// rlwinm r4,r4,3,0,28
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 3) & 0xFFFFFFF8;
	// add r4,r4,r27
	ctx.r4.u64 = ctx.r4.u64 + r27.u64;
	// lwz r4,-20(r4)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r4.u32 + -20);
	// rlwinm r30,r4,0,14,14
	r30.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x82731c78
	if (cr6.eq) goto loc_82731C78;
	// rlwinm r4,r4,0,21,23
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x700;
	// addi r30,r1,320
	r30.s64 = ctx.r1.s64 + 320;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// bne cr6,0x82731c54
	if (!cr6.eq) goto loc_82731C54;
	// rlwinm r9,r3,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r4,r8,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r3,r1,322
	ctx.r3.s64 = ctx.r1.s64 + 322;
	// lhzx r28,r29,r9
	r28.u64 = PPC_LOAD_U16(r29.u32 + ctx.r9.u32);
	// lhzx r9,r7,r9
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r9.u32);
	// sthx r28,r3,r4
	PPC_STORE_U16(ctx.r3.u32 + ctx.r4.u32, r28.u16);
	// sthx r9,r30,r4
	PPC_STORE_U16(r30.u32 + ctx.r4.u32, ctx.r9.u16);
	// b 0x82731c74
	goto loc_82731C74;
loc_82731C54:
	// add r4,r3,r9
	ctx.r4.u64 = ctx.r3.u64 + ctx.r9.u64;
	// rlwinm r9,r8,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r4,r4,1,0,30
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r3,r1,322
	ctx.r3.s64 = ctx.r1.s64 + 322;
	// lhzx r28,r29,r4
	r28.u64 = PPC_LOAD_U16(r29.u32 + ctx.r4.u32);
	// lhzx r7,r7,r4
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r7.u32 + ctx.r4.u32);
	// sthx r28,r3,r9
	PPC_STORE_U16(ctx.r3.u32 + ctx.r9.u32, r28.u16);
	// sthx r7,r30,r9
	PPC_STORE_U16(r30.u32 + ctx.r9.u32, ctx.r7.u16);
loc_82731C74:
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
loc_82731C78:
	// mr r30,r20
	r30.u64 = r20.u64;
	// mr r28,r20
	r28.u64 = r20.u64;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x82731db4
	if (!cr6.gt) goto loc_82731DB4;
	// addi r7,r1,1968
	ctx.r7.s64 = ctx.r1.s64 + 1968;
	// addi r9,r1,320
	ctx.r9.s64 = ctx.r1.s64 + 320;
	// addi r4,r1,2416
	ctx.r4.s64 = ctx.r1.s64 + 2416;
	// mr r3,r8
	ctx.r3.u64 = ctx.r8.u64;
loc_82731C98:
	// lhz r27,0(r9)
	r27.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// rlwinm r27,r27,0,29,29
	r27.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// lwz r27,0(r9)
	r27.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// beq cr6,0x82731cbc
	if (cr6.eq) goto loc_82731CBC;
	// stw r27,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r27.u32);
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// addi r4,r4,4
	ctx.r4.s64 = ctx.r4.s64 + 4;
	// b 0x82731cc8
	goto loc_82731CC8;
loc_82731CBC:
	// stw r27,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, r27.u32);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// addi r7,r7,4
	ctx.r7.s64 = ctx.r7.s64 + 4;
loc_82731CC8:
	// addi r3,r3,-1
	ctx.r3.s64 = ctx.r3.s64 + -1;
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82731c98
	if (!cr6.eq) goto loc_82731C98;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// ble cr6,0x82731db4
	if (!cr6.gt) goto loc_82731DB4;
	// cmpwi cr6,r30,3
	cr6.compare<int32_t>(r30.s32, 3, xer);
	// beq cr6,0x82731d10
	if (cr6.eq) goto loc_82731D10;
	// cmpwi cr6,r28,3
	cr6.compare<int32_t>(r28.s32, 3, xer);
	// beq cr6,0x82731d10
	if (cr6.eq) goto loc_82731D10;
	// cmpw cr6,r30,r28
	cr6.compare<int32_t>(r30.s32, r28.s32, xer);
	// blt cr6,0x82731d04
	if (cr6.lt) goto loc_82731D04;
	// lwz r9,1968(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1968);
	// stw r9,412(r1)
	PPC_STORE_U32(ctx.r1.u32 + 412, ctx.r9.u32);
	// b 0x82731db8
	goto loc_82731DB8;
loc_82731D04:
	// lwz r9,2416(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2416);
	// stw r9,412(r1)
	PPC_STORE_U32(ctx.r1.u32 + 412, ctx.r9.u32);
	// b 0x82731db8
	goto loc_82731DB8;
loc_82731D10:
	// lhz r9,326(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 326);
	// lhz r8,322(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 322);
	// lhz r3,330(r1)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r1.u32 + 330);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// lhz r7,324(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 324);
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// lhz r4,320(r1)
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r1.u32 + 320);
	// extsh r3,r3
	ctx.r3.s64 = ctx.r3.s16;
	// lhz r30,328(r1)
	r30.u64 = PPC_LOAD_U16(ctx.r1.u32 + 328);
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// extsh r4,r4
	ctx.r4.s64 = ctx.r4.s16;
	// extsh r30,r30
	r30.s64 = r30.s16;
	// subf r28,r8,r9
	r28.s64 = ctx.r9.s64 - ctx.r8.s64;
	// subf r26,r3,r9
	r26.s64 = ctx.r9.s64 - ctx.r3.s64;
	// subf r25,r8,r3
	r25.s64 = ctx.r3.s64 - ctx.r8.s64;
	// subf r27,r4,r7
	r27.s64 = ctx.r7.s64 - ctx.r4.s64;
	// subf r23,r30,r7
	r23.s64 = ctx.r7.s64 - r30.s64;
	// subf r22,r4,r30
	r22.s64 = r30.s64 - ctx.r4.s64;
	// xor r26,r26,r28
	r26.u64 = r26.u64 ^ r28.u64;
	// xor r25,r25,r28
	r25.u64 = r25.u64 ^ r28.u64;
	// xor r23,r23,r27
	r23.u64 = r23.u64 ^ r27.u64;
	// srawi r28,r26,31
	xer.ca = (r26.s32 < 0) & ((r26.u32 & 0x7FFFFFFF) != 0);
	r28.s64 = r26.s32 >> 31;
	// xor r22,r22,r27
	r22.u64 = r22.u64 ^ r27.u64;
	// srawi r27,r25,31
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x7FFFFFFF) != 0);
	r27.s64 = r25.s32 >> 31;
	// srawi r26,r23,31
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x7FFFFFFF) != 0);
	r26.s64 = r23.s32 >> 31;
	// srawi r25,r22,31
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x7FFFFFFF) != 0);
	r25.s64 = r22.s32 >> 31;
	// or r23,r28,r27
	r23.u64 = r28.u64 | r27.u64;
	// or r22,r26,r25
	r22.u64 = r26.u64 | r25.u64;
	// and r8,r27,r8
	ctx.r8.u64 = r27.u64 & ctx.r8.u64;
	// andc r3,r3,r23
	ctx.r3.u64 = ctx.r3.u64 & ~r23.u64;
	// andc r30,r30,r22
	r30.u64 = r30.u64 & ~r22.u64;
	// and r4,r25,r4
	ctx.r4.u64 = r25.u64 & ctx.r4.u64;
	// or r8,r3,r8
	ctx.r8.u64 = ctx.r3.u64 | ctx.r8.u64;
	// and r9,r28,r9
	ctx.r9.u64 = r28.u64 & ctx.r9.u64;
	// or r4,r30,r4
	ctx.r4.u64 = r30.u64 | ctx.r4.u64;
	// and r7,r26,r7
	ctx.r7.u64 = r26.u64 & ctx.r7.u64;
	// or r9,r8,r9
	ctx.r9.u64 = ctx.r8.u64 | ctx.r9.u64;
	// or r8,r4,r7
	ctx.r8.u64 = ctx.r4.u64 | ctx.r7.u64;
	// sth r9,414(r1)
	PPC_STORE_U16(ctx.r1.u32 + 414, ctx.r9.u16);
	// sth r8,412(r1)
	PPC_STORE_U16(ctx.r1.u32 + 412, ctx.r8.u16);
	// b 0x82731db8
	goto loc_82731DB8;
loc_82731DB4:
	// stw r20,412(r1)
	PPC_STORE_U32(ctx.r1.u32 + 412, r20.u32);
loc_82731DB8:
	// lhz r7,414(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 414);
	// rlwinm r9,r24,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 2) & 0xFFFFFFFC;
	// lhz r8,62(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 62);
	// add r27,r10,r29
	r27.u64 = ctx.r10.u64 + r29.u64;
	// extsh r28,r7
	r28.s64 = ctx.r7.s16;
	// lhz r7,66(r31)
	ctx.r7.u64 = PPC_LOAD_U16(r31.u32 + 66);
	// extsh r29,r8
	r29.s64 = ctx.r8.s16;
	// lwz r4,136(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// extsh r25,r7
	r25.s64 = ctx.r7.s16;
	// lhz r7,412(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 412);
	// mr r24,r8
	r24.u64 = ctx.r8.u64;
	// extsh r3,r7
	ctx.r3.s64 = ctx.r7.s16;
	// lwzx r7,r9,r15
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r9.u32 + r15.u32);
	// lwz r9,160(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// mr r23,r5
	r23.u64 = ctx.r5.u64;
	// add r8,r7,r28
	ctx.r8.u64 = ctx.r7.u64 + r28.u64;
	// rlwinm r21,r7,16,16,31
	r21.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 16) & 0xFFFF;
	// add r8,r8,r29
	ctx.r8.u64 = ctx.r8.u64 + r29.u64;
	// extsh r7,r21
	ctx.r7.s64 = r21.s16;
	// and r8,r8,r25
	ctx.r8.u64 = ctx.r8.u64 & r25.u64;
	// stw r23,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r23.u32);
	// add r7,r7,r3
	ctx.r7.u64 = ctx.r7.u64 + ctx.r3.u64;
	// subf r8,r24,r8
	ctx.r8.s64 = ctx.r8.s64 - r24.s64;
	// rlwinm r9,r9,16,0,15
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 16) & 0xFFFF0000;
	// mr r22,r6
	r22.u64 = ctx.r6.u64;
	// or r26,r9,r4
	r26.u64 = ctx.r9.u64 | ctx.r4.u64;
	// mr r9,r6
	ctx.r9.u64 = ctx.r6.u64;
	// sth r8,2(r27)
	PPC_STORE_U16(r27.u32 + 2, ctx.r8.u16);
	// clrlwi r4,r6,30
	ctx.r4.u64 = ctx.r6.u32 & 0x3;
	// lwz r8,1492(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// rlwimi r9,r5,16,0,15
	ctx.r9.u64 = (__builtin_rotateleft32(ctx.r5.u32, 16) & 0xFFFF0000) | (ctx.r9.u64 & 0xFFFFFFFF0000FFFF);
	// addi r4,r4,1
	ctx.r4.s64 = ctx.r4.s64 + 1;
	// stw r22,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r22.u32);
	// add r8,r10,r8
	ctx.r8.u64 = ctx.r10.u64 + ctx.r8.u64;
	// srawi r30,r14,1
	xer.ca = (r14.s32 < 0) & ((r14.u32 & 0x1) != 0);
	r30.s64 = r14.s32 >> 1;
	// srawi r4,r4,2
	xer.ca = (ctx.r4.s32 < 0) & ((ctx.r4.u32 & 0x3) != 0);
	ctx.r4.s64 = ctx.r4.s32 >> 2;
	// rlwinm r29,r26,6,0,25
	r29.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 6) & 0xFFFFFFC0;
	// lhz r3,2(r8)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r8.u32 + 2);
	// sth r3,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r3.u16);
	// lwz r8,1492(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// lhzx r3,r10,r8
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r8.u32);
	// add r8,r8,r11
	ctx.r8.u64 = ctx.r8.u64 + r11.u64;
	// sth r3,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, ctx.r3.u16);
	// lwz r8,1492(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// add r8,r11,r8
	ctx.r8.u64 = r11.u64 + ctx.r8.u64;
	// lhz r3,2(r8)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r8.u32 + 2);
	// sth r3,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r3.u16);
	// lhz r28,68(r31)
	r28.u64 = PPC_LOAD_U16(r31.u32 + 68);
	// lwz r3,1496(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// extsh r27,r28
	r27.s64 = r28.s16;
	// lwz r28,1492(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// add r25,r10,r3
	r25.u64 = ctx.r10.u64 + ctx.r3.u64;
	// lhz r8,64(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 64);
	// lhzx r3,r11,r28
	ctx.r3.u64 = PPC_LOAD_U16(r11.u32 + r28.u32);
	// extsh r28,r3
	r28.s64 = ctx.r3.s16;
	// extsh r3,r8
	ctx.r3.s64 = ctx.r8.s16;
	// mr r21,r28
	r21.u64 = r28.u64;
	// add r7,r7,r3
	ctx.r7.u64 = ctx.r7.u64 + ctx.r3.u64;
	// and r7,r7,r27
	ctx.r7.u64 = ctx.r7.u64 & r27.u64;
	// subf r8,r8,r7
	ctx.r8.s64 = ctx.r7.s64 - ctx.r8.s64;
	// stw r21,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r21.u32);
	// sth r8,2(r25)
	PPC_STORE_U16(r25.u32 + 2, ctx.r8.u16);
	// lwz r8,1496(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// add r8,r10,r8
	ctx.r8.u64 = ctx.r10.u64 + ctx.r8.u64;
	// lhz r7,2(r8)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r8.u32 + 2);
	// sth r7,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r7.u16);
	// lwz r8,1496(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lhzx r10,r10,r8
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r8.u32);
	// add r8,r8,r11
	ctx.r8.u64 = ctx.r8.u64 + r11.u64;
	// sth r10,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, ctx.r10.u16);
	// lwz r10,1496(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lhz r8,2(r10)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r10.u32 + 2);
	// sth r8,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r8.u16);
	// lwz r10,1496(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lwz r27,1396(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + 1396);
	// lwz r25,1404(r31)
	r25.u64 = PPC_LOAD_U32(r31.u32 + 1404);
	// lhzx r11,r10,r11
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + r11.u32);
	// extsh r24,r11
	r24.s64 = r11.s16;
	// rlwinm r11,r9,1,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0x10000;
	// stw r24,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r24.u32);
	// lis r10,115
	ctx.r10.s64 = 7536640;
	// lwz r16,176(r1)
	r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// subf r11,r11,r9
	r11.s64 = ctx.r9.s64 - r11.s64;
	// ori r20,r10,115
	r20.u64 = ctx.r10.u64 | 115;
	// subf r10,r9,r27
	ctx.r10.s64 = r27.s64 - ctx.r9.s64;
	// rlwinm r8,r5,2,26,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0x3C;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// add r9,r4,r6
	ctx.r9.u64 = ctx.r4.u64 + ctx.r6.u64;
	// add r7,r11,r20
	ctx.r7.u64 = r11.u64 + r20.u64;
	// srawi r19,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	r19.s64 = ctx.r9.s32 >> 1;
	// subf r10,r29,r10
	ctx.r10.s64 = ctx.r10.s64 - r29.s64;
	// lwzx r11,r8,r16
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + r16.u32);
	// srawi r9,r5,1
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x1) != 0);
	ctx.r9.s64 = ctx.r5.s32 >> 1;
	// or r8,r7,r10
	ctx.r8.u64 = ctx.r7.u64 | ctx.r10.u64;
	// rlwinm r10,r9,0,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFFFFF8;
	// rlwinm r9,r8,0,0,16
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0xFFFF8000;
	// stw r19,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r19.u32);
	// add r18,r11,r10
	r18.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r9,r9,0,16,0
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// stw r18,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r18.u32);
	// beq cr6,0x82731f70
	if (cr6.eq) goto loc_82731F70;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r1,132
	ctx.r4.s64 = ctx.r1.s64 + 132;
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r23,132(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lwz r22,116(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
loc_82731F70:
	// clrlwi r10,r28,30
	ctx.r10.u64 = r28.u32 & 0x3;
	// rlwinm r9,r24,2,26,29
	ctx.r9.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 2) & 0x3C;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// mr r11,r28
	r11.u64 = r28.u64;
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// rlwimi r11,r24,16,0,15
	r11.u64 = (__builtin_rotateleft32(r24.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// add r10,r10,r28
	ctx.r10.u64 = ctx.r10.u64 + r28.u64;
	// lis r15,4
	r15.s64 = 262144;
	// srawi r17,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	r17.s64 = ctx.r10.s32 >> 1;
	// lwzx r10,r9,r16
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + r16.u32);
	// srawi r8,r24,1
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x1) != 0);
	ctx.r8.s64 = r24.s32 >> 1;
	// add r5,r29,r15
	ctx.r5.u64 = r29.u64 + r15.u64;
	// rlwinm r9,r8,0,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0xFFFFFFF8;
	// add r16,r10,r9
	r16.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r17,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r17.u32);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r27
	ctx.r9.s64 = r27.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r5,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r5.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// stw r16,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r16.u32);
	// add r11,r11,r20
	r11.u64 = r11.u64 + r20.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82731ff4
	if (cr6.eq) goto loc_82731FF4;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// addi r4,r1,140
	ctx.r4.s64 = ctx.r1.s64 + 140;
	// addi r3,r1,108
	ctx.r3.s64 = ctx.r1.s64 + 108;
	// bl 0x827232d0
	sub_827232D0(ctx, base);
	// lwz r24,140(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// lwz r21,108(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
loc_82731FF4:
	// mr r11,r19
	r11.u64 = r19.u64;
	// lis r10,59
	ctx.r10.s64 = 3866624;
	// rlwimi r11,r18,16,0,15
	r11.u64 = (__builtin_rotateleft32(r18.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// ori r28,r10,59
	r28.u64 = ctx.r10.u64 | 59;
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r25
	ctx.r9.s64 = r25.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// rlwinm r29,r26,5,0,26
	r29.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 5) & 0xFFFFFFE0;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// subf r10,r29,r9
	ctx.r10.s64 = ctx.r9.s64 - r29.s64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82732050
	if (cr6.eq) goto loc_82732050;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r1,100
	ctx.r4.s64 = ctx.r1.s64 + 100;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
	// lwz r19,96(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r18,100(r1)
	r18.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
loc_82732050:
	// mr r11,r17
	r11.u64 = r17.u64;
	// add r5,r29,r15
	ctx.r5.u64 = r29.u64 + r15.u64;
	// rlwimi r11,r16,16,0,15
	r11.u64 = (__builtin_rotateleft32(r16.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r25
	ctx.r9.s64 = r25.s64 - r11.s64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r5,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r5.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r11,r11,0,0,16
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r11,r11,0,16,0
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x827320a0
	if (cr6.eq) goto loc_827320A0;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// addi r3,r1,132
	ctx.r3.s64 = ctx.r1.s64 + 132;
	// bl 0x827233a8
	sub_827233A8(ctx, base);
	// lwz r17,132(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lwz r16,116(r1)
	r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
loc_827320A0:
	// addi r26,r31,74
	r26.s64 = r31.s64 + 74;
	// lwz r25,124(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// srawi r8,r23,2
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x3) != 0);
	ctx.r8.s64 = r23.s32 >> 2;
	// srawi r9,r22,2
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x3) != 0);
	ctx.r9.s64 = r22.s32 >> 2;
	// lhz r10,0(r26)
	ctx.r10.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// mullw r10,r8,r10
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lwz r9,184(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// add r29,r10,r9
	r29.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8273214c
	if (!cr0.eq) goto loc_8273214C;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r14,128
	r11.s64 = r14.s64 + 128;
	// dcbt r11,r29
	// addi r11,r14,64
	r11.s64 = r14.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r14,1,0,30
	r11.u64 = __builtin_rotateleft64(r14.u32 | (r14.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r14,r11
	r11.u64 = r14.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r14,32
	r11.s64 = r14.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r14,2,0,29
	r11.u64 = __builtin_rotateleft64(r14.u32 | (r14.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r14,r11
	r11.u64 = r14.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r14,1,0,30
	r11.u64 = __builtin_rotateleft64(r14.u32 | (r14.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r14,r11
	r11.u64 = r14.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r14,3,0,28
	r11.u64 = __builtin_rotateleft64(r14.u32 | (r14.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r14,r11
	r11.s64 = r11.s64 - r14.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_8273214C:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// clrlwi r28,r22,30
	r28.u64 = r22.u32 & 0x3;
	// lwz r22,188(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// clrlwi r27,r23,30
	r27.u64 = r23.u32 & 0x3;
	// li r23,1
	r23.s64 = 1;
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r11,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r6,r14
	ctx.r6.u64 = r14.u64;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r4,r14
	ctx.r4.u64 = r14.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x827321d4
	if (cr6.eq) goto loc_827321D4;
	// li r10,1
	ctx.r10.s64 = 1;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// mr r6,r14
	ctx.r6.u64 = r14.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// mr r4,r14
	ctx.r4.u64 = r14.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_827321D4:
	// srawi r10,r24,2
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x3) != 0);
	ctx.r10.s64 = r24.s32 >> 2;
	// lhz r8,0(r26)
	ctx.r8.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// srawi r9,r21,2
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x3) != 0);
	ctx.r9.s64 = r21.s32 >> 2;
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// add r26,r30,r22
	r26.u64 = r30.u64 + r22.u64;
	// mullw r10,r10,r8
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r8.s32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lwz r9,152(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// add r29,r10,r9
	r29.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r10,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	ctx.r10.s64 = r11.s32 >> 3;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82732280
	if (!cr0.eq) goto loc_82732280;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r14,128
	r11.s64 = r14.s64 + 128;
	// dcbt r11,r29
	// addi r11,r14,64
	r11.s64 = r14.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r14,1,0,30
	r11.u64 = __builtin_rotateleft64(r14.u32 | (r14.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r14,r11
	r11.u64 = r14.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r14,32
	r11.s64 = r14.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r14,2,0,29
	r11.u64 = __builtin_rotateleft64(r14.u32 | (r14.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r14,r11
	r11.u64 = r14.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r14,1,0,30
	r11.u64 = __builtin_rotateleft64(r14.u32 | (r14.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r14,r11
	r11.u64 = r14.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r14,3,0,28
	r11.u64 = __builtin_rotateleft64(r14.u32 | (r14.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r14,r11
	r11.s64 = r11.s64 - r14.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_82732280:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// clrlwi r28,r21,30
	r28.u64 = r21.u32 & 0x3;
	// clrlwi r27,r24,30
	r27.u64 = r24.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// stw r11,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r6,r14
	ctx.r6.u64 = r14.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// mr r4,r14
	ctx.r4.u64 = r14.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
	// mr r8,r28
	ctx.r8.u64 = r28.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82732300
	if (cr6.eq) goto loc_82732300;
	// li r10,1
	ctx.r10.s64 = 1;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// mr r6,r14
	ctx.r6.u64 = r14.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r14
	ctx.r4.u64 = r14.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
loc_82732300:
	// addi r26,r31,76
	r26.s64 = r31.s64 + 76;
	// lwz r25,156(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// srawi r8,r18,2
	xer.ca = (r18.s32 < 0) & ((r18.u32 & 0x3) != 0);
	ctx.r8.s64 = r18.s32 >> 2;
	// srawi r9,r19,2
	xer.ca = (r19.s32 < 0) & ((r19.u32 & 0x3) != 0);
	ctx.r9.s64 = r19.s32 >> 2;
	// lhz r10,0(r26)
	ctx.r10.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// mullw r10,r8,r10
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r10.s32);
	// lwz r8,172(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srawi r9,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r9.s64 = r11.s32 >> 4;
	// add r3,r8,r10
	ctx.r3.u64 = ctx.r8.u64 + ctx.r10.u64;
	// addze r9,r9
	temp.s64 = ctx.r9.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r9.u32;
	ctx.r9.s64 = temp.s64;
	// lwz r8,144(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// add r29,r8,r10
	r29.u64 = ctx.r8.u64 + ctx.r10.u64;
	// rlwinm r9,r9,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r9,r9,r11
	ctx.r9.s64 = r11.s64 - ctx.r9.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x827323b4
	if (!cr0.eq) goto loc_827323B4;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// li r11,0
	r11.s64 = 0;
loc_827323B4:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r22,164(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// clrlwi r28,r19,30
	r28.u64 = r19.u32 & 0x3;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// clrlwi r27,r18,30
	r27.u64 = r18.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// stw r11,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// srawi r10,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r10.s64 = r11.s32 >> 4;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x8273248c
	if (!cr0.eq) goto loc_8273248C;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_8273248C:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r24,180(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// stw r11,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lhz r11,0(r26)
	r11.u64 = PPC_LOAD_U16(r26.u32 + 0);
	// srawi r8,r16,2
	xer.ca = (r16.s32 < 0) & ((r16.u32 & 0x3) != 0);
	ctx.r8.s64 = r16.s32 >> 2;
	// lwz r10,0(r25)
	ctx.r10.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// srawi r7,r17,2
	xer.ca = (r17.s32 < 0) & ((r17.u32 & 0x3) != 0);
	ctx.r7.s64 = r17.s32 >> 2;
	// mullw r8,r8,r11
	ctx.r8.s64 = int64_t(ctx.r8.s32) * int64_t(r11.s32);
	// srawi r9,r30,1
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x1) != 0);
	ctx.r9.s64 = r30.s32 >> 1;
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// srawi r7,r10,4
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xF) != 0);
	ctx.r7.s64 = ctx.r10.s32 >> 4;
	// add r5,r22,r9
	ctx.r5.u64 = r22.u64 + ctx.r9.u64;
	// addze r7,r7
	temp.s64 = ctx.r7.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r7.u32;
	ctx.r7.s64 = temp.s64;
	// add r26,r24,r9
	r26.u64 = r24.u64 + ctx.r9.u64;
	// rlwinm r9,r7,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r9,r9,r10
	ctx.r9.s64 = ctx.r10.s64 - ctx.r9.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// lwz r9,168(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// add r7,r9,r8
	ctx.r7.u64 = ctx.r9.u64 + ctx.r8.u64;
	// lwz r9,128(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// add r3,r7,r11
	ctx.r3.u64 = ctx.r7.u64 + r11.u64;
	// add r29,r9,r11
	r29.u64 = ctx.r9.u64 + r11.u64;
	// bne 0x82732598
	if (!cr0.eq) goto loc_82732598;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// li r10,0
	ctx.r10.s64 = 0;
loc_82732598:
	// addi r11,r10,1
	r11.s64 = ctx.r10.s64 + 1;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// clrlwi r28,r17,30
	r28.u64 = r17.u32 & 0x3;
	// clrlwi r27,r16,30
	r27.u64 = r16.u32 & 0x3;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// stw r11,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// srawi r10,r11,4
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xF) != 0);
	ctx.r10.s64 = r11.s32 >> 4;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82732668
	if (!cr0.eq) goto loc_82732668;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r30,128
	r11.s64 = r30.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,64
	r11.s64 = r30.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r30,32
	r11.s64 = r30.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r30,2,0,29
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,1,0,30
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r30,3,0,28
	r11.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// li r11,0
	r11.s64 = 0;
loc_82732668:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r23.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// stw r11,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r11.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// mr r8,r27
	ctx.r8.u64 = r27.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r23,2772(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2772);
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x827326c0
	goto loc_827326C0;
loc_827326BC:
	// li r3,4
	ctx.r3.s64 = 4;
loc_827326C0:
	// lwz r10,136(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// addi r9,r23,18
	ctx.r9.s64 = r23.s64 + 18;
	// lwz r11,0(r23)
	r11.u64 = PPC_LOAD_U32(r23.u32 + 0);
	// addi r7,r23,8
	ctx.r7.s64 = r23.s64 + 8;
	// addi r8,r10,1
	ctx.r8.s64 = ctx.r10.s64 + 1;
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// addi r10,r10,20
	ctx.r10.s64 = ctx.r10.s64 + 20;
	// addi r5,r23,12
	ctx.r5.s64 = r23.s64 + 12;
	// stw r8,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r8.u32);
	// stw r11,0(r23)
	PPC_STORE_U32(r23.u32 + 0, r11.u32);
	// stw r10,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r10.u32);
	// addi r10,r23,4
	ctx.r10.s64 = r23.s64 + 4;
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// lhz r11,0(r9)
	r11.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// sth r11,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, r11.u16);
	// lwz r11,0(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// addi r11,r11,16
	r11.s64 = r11.s64 + 16;
	// stw r11,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, r11.u32);
	// lwz r11,0(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, r11.u32);
	// lwz r11,676(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 676);
	// cmplw cr6,r8,r11
	cr6.compare<uint32_t>(ctx.r8.u32, r11.u32, xer);
	// bge cr6,0x82732734
	if (!cr6.lt) goto loc_82732734;
	// b 0x827263c0
	goto loc_827263C0;
loc_82732734:
	// addi r10,r23,16
	ctx.r10.s64 = r23.s64 + 16;
	// lwz r11,160(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// lwz r4,668(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 668);
	// addi r8,r11,1
	ctx.r8.s64 = r11.s64 + 1;
	// lwz r6,1208(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1208);
	// add r6,r6,r4
	ctx.r6.u64 = ctx.r6.u64 + ctx.r4.u64;
	// lwz r4,672(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 672);
	// lhz r11,0(r10)
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// stw r8,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r8.u32);
	// stw r6,668(r1)
	PPC_STORE_U32(ctx.r1.u32 + 668, ctx.r6.u32);
	// lwz r6,1216(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1216);
	// sth r11,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, r11.u16);
	// addi r11,r31,50
	r11.s64 = r31.s64 + 50;
	// lwz r10,0(r23)
	ctx.r10.u64 = PPC_LOAD_U32(r23.u32 + 0);
	// add r6,r6,r4
	ctx.r6.u64 = ctx.r6.u64 + ctx.r4.u64;
	// lhz r11,0(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// stw r6,672(r1)
	PPC_STORE_U32(ctx.r1.u32 + 672, ctx.r6.u32);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r11,0(r23)
	PPC_STORE_U32(r23.u32 + 0, r11.u32);
	// lwz r11,1212(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1212);
	// cmplw cr6,r8,r11
	cr6.compare<uint32_t>(ctx.r8.u32, r11.u32, xer);
	// bge cr6,0x82732794
	if (!cr6.lt) goto loc_82732794;
	// b 0x82726394
	goto loc_82726394;
loc_82732794:
	// addi r1,r1,2736
	ctx.r1.s64 = ctx.r1.s64 + 2736;
	// b 0x8239bd10
	return;
}

__attribute__((alias("__imp__sub_8273279C"))) PPC_WEAK_FUNC(sub_8273279C);
PPC_FUNC_IMPL(__imp__sub_8273279C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_827327A0"))) PPC_WEAK_FUNC(sub_827327A0);
PPC_FUNC_IMPL(__imp__sub_827327A0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcc0
	// stwu r1,-1904(r1)
	ea = -1904 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r17,r5
	r17.u64 = ctx.r5.u64;
	// li r22,0
	r22.s64 = 0;
	// lwz r11,1320(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 1320);
	// lwz r18,1248(r30)
	r18.u64 = PPC_LOAD_U32(r30.u32 + 1248);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x827327d4
	if (cr6.eq) goto loc_827327D4;
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// mr r21,r22
	r21.u64 = r22.u64;
	// bne cr6,0x827327d8
	if (!cr6.eq) goto loc_827327D8;
loc_827327D4:
	// li r21,1
	r21.s64 = 1;
loc_827327D8:
	// addi r4,r3,21712
	ctx.r4.s64 = ctx.r3.s64 + 21712;
	// stw r21,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r21.u32);
	// lis r11,-32126
	r11.s64 = -2105409536;
	// stw r4,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r4.u32);
	// lwz r3,3360(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 3360);
	// bl 0x8271d5f8
	sub_8271D5F8(ctx, base);
	// stw r22,0(r17)
	PPC_STORE_U32(r17.u32 + 0, r22.u32);
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// stw r22,4(r17)
	PPC_STORE_U32(r17.u32 + 4, r22.u32);
	// sth r22,16(r17)
	PPC_STORE_U16(r17.u32 + 16, r22.u16);
	// lhz r8,50(r30)
	ctx.r8.u64 = PPC_LOAD_U16(r30.u32 + 50);
	// lwz r11,1516(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 1516);
	// rlwinm r20,r8,31,1,31
	r20.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 31) & 0x7FFFFFFF;
	// lhz r7,52(r30)
	ctx.r7.u64 = PPC_LOAD_U16(r30.u32 + 52);
	// subfic r8,r11,2
	xer.ca = r11.u32 <= 2;
	ctx.r8.s64 = 2 - r11.s64;
	// lhz r10,74(r30)
	ctx.r10.u64 = PPC_LOAD_U16(r30.u32 + 74);
	// rlwinm r7,r7,31,1,31
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 31) & 0x7FFFFFFF;
	// lhz r9,76(r30)
	ctx.r9.u64 = PPC_LOAD_U16(r30.u32 + 76);
	// rlwinm r8,r8,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// stw r22,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r22.u32);
	// stw r22,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r22.u32);
	// stw r20,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, r20.u32);
	// stw r7,192(r1)
	PPC_STORE_U32(ctx.r1.u32 + 192, ctx.r7.u32);
	// stw r8,188(r1)
	PPC_STORE_U32(ctx.r1.u32 + 188, ctx.r8.u32);
	// stw r8,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r8.u32);
	// beq cr6,0x82732850
	if (cr6.eq) goto loc_82732850;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r11,r11,r8
	r11.s64 = ctx.r8.s64 - r11.s64;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
loc_82732850:
	// stw r22,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r22.u32);
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// beq cr6,0x82733c18
	if (cr6.eq) goto loc_82733C18;
	// rlwinm r11,r10,4,0,27
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// lwz r14,96(r1)
	r14.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r16,96(r1)
	r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// stw r11,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, r11.u32);
	// rlwinm r11,r9,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 3) & 0xFFFFFFF8;
	// stw r11,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, r11.u32);
loc_82732874:
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// li r15,0
	r15.s64 = 0;
	// cmplwi cr6,r20,0
	cr6.compare<uint32_t>(r20.u32, 0, xer);
	// stw r11,8(r17)
	PPC_STORE_U32(r17.u32 + 8, r11.u32);
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r15,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r15.u32);
	// sth r15,18(r17)
	PPC_STORE_U16(r17.u32 + 18, r15.u16);
	// stw r11,12(r17)
	PPC_STORE_U32(r17.u32 + 12, r11.u32);
	// beq cr6,0x82733bc8
	if (cr6.eq) goto loc_82733BC8;
loc_82732898:
	// lwz r11,0(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 0);
	// lwz r10,188(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 188);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// ld r9,0(r18)
	ctx.r9.u64 = PPC_LOAD_U64(r18.u32 + 0);
	// addi r18,r18,8
	r18.s64 = r18.s64 + 8;
	// add r19,r11,r10
	r19.u64 = r11.u64 + ctx.r10.u64;
	// stw r18,196(r1)
	PPC_STORE_U32(ctx.r1.u32 + 196, r18.u32);
	// lwz r11,0(r19)
	r11.u64 = PPC_LOAD_U32(r19.u32 + 0);
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x82733b7c
	if (cr6.eq) goto loc_82733B7C;
	// rldicl r11,r9,9,55
	r11.u64 = __builtin_rotateleft64(ctx.r9.u64, 9) & 0x1FF;
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82732f10
	if (cr6.eq) goto loc_82732F10;
	// lhz r10,2(r19)
	ctx.r10.u64 = PPC_LOAD_U16(r19.u32 + 2);
	// lhz r11,0(r19)
	r11.u64 = PPC_LOAD_U16(r19.u32 + 0);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// slw r24,r10,r21
	r24.u64 = r21.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r21.u8 & 0x3F));
	// clrlwi r10,r11,31
	ctx.r10.u64 = r11.u32 & 0x1;
	// slw r11,r11,r21
	r11.u64 = r21.u8 & 0x20 ? 0 : (r11.u32 << (r21.u8 & 0x3F));
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x82732918
	if (cr6.eq) goto loc_82732918;
	// lwz r10,100(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// li r23,1
	r23.s64 = 1;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// rlwinm r11,r11,0,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFC;
	// rlwimi r10,r23,3,31,28
	ctx.r10.u64 = (__builtin_rotateleft32(r23.u32, 3) & 0xFFFFFFFFFFFFFFF9) | (ctx.r10.u64 & 0x6);
	// srawi r10,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 1;
	// or r25,r10,r11
	r25.u64 = ctx.r10.u64 | r11.u64;
	// b 0x8273292c
	goto loc_8273292C;
loc_82732918:
	// rlwinm r10,r11,0,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// li r23,0
	r23.s64 = 0;
	// clrlwi r11,r11,30
	r11.u64 = r11.u32 & 0x3;
	// or r25,r11,r10
	r25.u64 = r11.u64 | ctx.r10.u64;
loc_8273292C:
	// rlwinm r10,r22,17,0,14
	ctx.r10.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 17) & 0xFFFE0000;
	// lwz r9,1412(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 1412);
	// mr r11,r24
	r11.u64 = r24.u64;
	// or r10,r10,r15
	ctx.r10.u64 = ctx.r10.u64 | r15.u64;
	// rlwimi r11,r25,16,0,15
	r11.u64 = (__builtin_rotateleft32(r25.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// rlwinm r10,r10,6,0,25
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 6) & 0xFFFFFFC0;
	// rlwinm r8,r11,1,15,15
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r10,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r10.s64;
	// subf r10,r8,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r8.s64;
	// subf r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// addis r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 8388608;
	// addi r10,r10,56
	ctx.r10.s64 = ctx.r10.s64 + 56;
	// or r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 | ctx.r9.u64;
	// rlwinm r10,r10,0,0,16
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r10,r10,0,16,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82732a60
	if (cr6.eq) goto loc_82732A60;
	// lwz r10,1516(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 1516);
	// srawi r6,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	ctx.r6.s64 = r11.s32 >> 16;
	// extsh r8,r11
	ctx.r8.s64 = r11.s16;
	// rlwinm r4,r15,4,0,27
	ctx.r4.u64 = __builtin_rotateleft64(r15.u32 | (r15.u64 << 32), 4) & 0xFFFFFFF0;
	// rlwinm r3,r22,5,0,26
	ctx.r3.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 5) & 0xFFFFFFE0;
	// li r31,0
	r31.s64 = 0;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// rlwinm r11,r6,0,29,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 0) & 0x4;
	// bne cr6,0x827329b4
	if (!cr6.eq) goto loc_827329B4;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lhz r11,52(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 52);
	// rotlwi r11,r11,4
	r11.u64 = __builtin_rotateleft32(r11.u32, 4);
	// beq cr6,0x827329d0
	if (cr6.eq) goto loc_827329D0;
	// li r7,-35
	ctx.r7.s64 = -35;
	// addi r5,r11,3
	ctx.r5.s64 = r11.s64 + 3;
	// b 0x827329d8
	goto loc_827329D8;
loc_827329B4:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lhz r11,52(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 52);
	// rotlwi r11,r11,4
	r11.u64 = __builtin_rotateleft32(r11.u32, 4);
	// beq cr6,0x827329d0
	if (cr6.eq) goto loc_827329D0;
	// li r7,-37
	ctx.r7.s64 = -37;
	// addi r5,r11,1
	ctx.r5.s64 = r11.s64 + 1;
	// b 0x827329d8
	goto loc_827329D8;
loc_827329D0:
	// addi r5,r11,2
	ctx.r5.s64 = r11.s64 + 2;
	// li r7,-36
	ctx.r7.s64 = -36;
loc_827329D8:
	// srawi r11,r8,2
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x3) != 0);
	r11.s64 = ctx.r8.s32 >> 2;
	// srawi r10,r6,2
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r6.s32 >> 2;
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// add r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 + ctx.r3.u64;
	// cmpwi cr6,r11,-17
	cr6.compare<int32_t>(r11.s32, -17, xer);
	// bge cr6,0x827329f8
	if (!cr6.lt) goto loc_827329F8;
	// li r11,-17
	r11.s64 = -17;
	// b 0x82732a0c
	goto loc_82732A0C;
loc_827329F8:
	// lhz r9,50(r30)
	ctx.r9.u64 = PPC_LOAD_U16(r30.u32 + 50);
	// rotlwi r9,r9,3
	ctx.r9.u64 = __builtin_rotateleft32(ctx.r9.u32, 3);
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// ble cr6,0x82732a10
	if (!cr6.gt) goto loc_82732A10;
	// mr r11,r9
	r11.u64 = ctx.r9.u64;
loc_82732A0C:
	// li r31,1
	r31.s64 = 1;
loc_82732A10:
	// cmpw cr6,r10,r7
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r7.s32, xer);
	// bge cr6,0x82732a20
	if (!cr6.lt) goto loc_82732A20;
	// mr r10,r7
	ctx.r10.u64 = ctx.r7.u64;
	// b 0x82732a38
	goto loc_82732A38;
loc_82732A20:
	// cmpw cr6,r10,r5
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r5.s32, xer);
	// ble cr6,0x82732a30
	if (!cr6.gt) goto loc_82732A30;
	// mr r10,r5
	ctx.r10.u64 = ctx.r5.u64;
	// b 0x82732a38
	goto loc_82732A38;
loc_82732A30:
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// beq cr6,0x82732a58
	if (cr6.eq) goto loc_82732A58;
loc_82732A38:
	// subf r11,r4,r11
	r11.s64 = r11.s64 - ctx.r4.s64;
	// subf r10,r3,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r3.s64;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// clrlwi r8,r8,30
	ctx.r8.u64 = ctx.r8.u32 & 0x3;
	// clrlwi r10,r6,30
	ctx.r10.u64 = ctx.r6.u32 & 0x3;
	// add r8,r9,r8
	ctx.r8.u64 = ctx.r9.u64 + ctx.r8.u64;
	// add r6,r11,r10
	ctx.r6.u64 = r11.u64 + ctx.r10.u64;
loc_82732A58:
	// rlwimi r8,r6,16,0,15
	ctx.r8.u64 = (__builtin_rotateleft32(ctx.r6.u32, 16) & 0xFFFF0000) | (ctx.r8.u64 & 0xFFFFFFFF0000FFFF);
	// mr r11,r8
	r11.u64 = ctx.r8.u64;
loc_82732A60:
	// lhz r31,90(r30)
	r31.u64 = PPC_LOAD_U16(r30.u32 + 90);
	// srawi r9,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	ctx.r9.s64 = r11.s32 >> 16;
	// extsh r10,r11
	ctx.r10.s64 = r11.s16;
	// lbz r5,48(r30)
	ctx.r5.u64 = PPC_LOAD_U8(r30.u32 + 48);
	// srawi r8,r31,1
	xer.ca = (r31.s32 < 0) & ((r31.u32 & 0x1) != 0);
	ctx.r8.s64 = r31.s32 >> 1;
	// lwz r11,8(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 8);
	// srawi r6,r9,2
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3) != 0);
	ctx.r6.s64 = ctx.r9.s32 >> 2;
	// cmpwi cr6,r23,1
	cr6.compare<int32_t>(r23.s32, 1, xer);
	// mullw r8,r8,r6
	ctx.r8.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r6.s32);
	// srawi r6,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r6.s64 = ctx.r10.s32 >> 2;
	// add r8,r8,r6
	ctx.r8.u64 = ctx.r8.u64 + ctx.r6.u64;
	// bne cr6,0x82732a98
	if (!cr6.eq) goto loc_82732A98;
	// lwz r7,320(r30)
	ctx.r7.u64 = PPC_LOAD_U32(r30.u32 + 320);
	// b 0x82732a9c
	goto loc_82732A9C;
loc_82732A98:
	// lwz r7,296(r30)
	ctx.r7.u64 = PPC_LOAD_U32(r30.u32 + 296);
loc_82732A9C:
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// li r7,128
	ctx.r7.s64 = 128;
	// add r29,r8,r11
	r29.u64 = ctx.r8.u64 + r11.u64;
	// lwz r8,392(r30)
	ctx.r8.u64 = PPC_LOAD_U32(r30.u32 + 392);
	// add r28,r8,r11
	r28.u64 = ctx.r8.u64 + r11.u64;
	// dcbt r7,r29
	// addi r11,r31,128
	r11.s64 = r31.s64 + 128;
	// dcbt r11,r29
	// addi r11,r31,64
	r11.s64 = r31.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r31,1,0,30
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r31,32
	r11.s64 = r31.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r31,2,0,29
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r31,1,0,30
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r31,3,0,28
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r31,r11
	r11.s64 = r11.s64 - r31.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// clrlwi r27,r10,30
	r27.u64 = ctx.r10.u32 & 0x3;
	// clrlwi r26,r9,30
	r26.u64 = ctx.r9.u32 & 0x3;
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r5,1
	cr6.compare<int32_t>(ctx.r5.s32, 1, xer);
	// li r7,1
	ctx.r7.s64 = 1;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// bne cr6,0x82732b84
	if (!cr6.eq) goto loc_82732B84;
	// addi r11,r11,166
	r11.s64 = r11.s64 + 166;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r30
	r11.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82732b98
	if (cr6.eq) goto loc_82732B98;
	// li r9,1
	ctx.r9.s64 = 1;
	// lbz r8,35(r30)
	ctx.r8.u64 = PPC_LOAD_U8(r30.u32 + 35);
	// mr r7,r26
	ctx.r7.u64 = r26.u64;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8266cc68
	sub_8266CC68(ctx, base);
	// b 0x82732b98
	goto loc_82732B98;
loc_82732B84:
	// addi r11,r11,182
	r11.s64 = r11.s64 + 182;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r30
	r11.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82732B98:
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// beq cr6,0x82732bcc
	if (cr6.eq) goto loc_82732BCC;
	// lwz r11,1516(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 1516);
	// mr r9,r25
	ctx.r9.u64 = r25.u64;
	// rlwinm r10,r11,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r10,r25
	r11.u64 = ctx.r10.u64 + r25.u64;
	// addi r11,r11,-4
	r11.s64 = r11.s64 + -4;
	// srawi r11,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	r11.s64 = r11.s32 >> 3;
	// rlwimi r9,r11,2,0,29
	ctx.r9.u64 = (__builtin_rotateleft32(r11.u32, 2) & 0xFFFFFFFC) | (ctx.r9.u64 & 0xFFFFFFFF00000003);
	// subf r11,r8,r9
	r11.s64 = ctx.r9.s64 - ctx.r8.s64;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// b 0x82732bd8
	goto loc_82732BD8;
loc_82732BCC:
	// mr r11,r25
	r11.u64 = r25.u64;
	// srawi r10,r25,3
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x7) != 0);
	ctx.r10.s64 = r25.s32 >> 3;
	// rlwimi r11,r10,2,0,29
	r11.u64 = (__builtin_rotateleft32(ctx.r10.u32, 2) & 0xFFFFFFFC) | (r11.u64 & 0xFFFFFFFF00000003);
loc_82732BD8:
	// clrlwi r9,r24,30
	ctx.r9.u64 = r24.u32 & 0x3;
	// lbz r8,31(r30)
	ctx.r8.u64 = PPC_LOAD_U8(r30.u32 + 31);
	// clrlwi r10,r11,30
	ctx.r10.u64 = r11.u32 & 0x3;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// addi r7,r10,1
	ctx.r7.s64 = ctx.r10.s64 + 1;
	// srawi r10,r9,2
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r9.s32 >> 2;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// add r10,r10,r24
	ctx.r10.u64 = ctx.r10.u64 + r24.u64;
	// srawi r10,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 1;
	// srawi r9,r7,2
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x3) != 0);
	ctx.r9.s64 = ctx.r7.s32 >> 2;
	// add r11,r9,r11
	r11.u64 = ctx.r9.u64 + r11.u64;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// beq cr6,0x82732c4c
	if (cr6.eq) goto loc_82732C4C;
	// clrlwi r9,r10,31
	ctx.r9.u64 = ctx.r10.u32 & 0x1;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x82732c2c
	if (cr6.eq) goto loc_82732C2C;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x82732c28
	if (!cr6.gt) goto loc_82732C28;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// b 0x82732c2c
	goto loc_82732C2C;
loc_82732C28:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
loc_82732C2C:
	// clrlwi r9,r11,31
	ctx.r9.u64 = r11.u32 & 0x1;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x82732c4c
	if (cr6.eq) goto loc_82732C4C;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x82732c48
	if (!cr6.gt) goto loc_82732C48;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// b 0x82732c4c
	goto loc_82732C4C;
loc_82732C48:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_82732C4C:
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// beq cr6,0x82732c64
	if (cr6.eq) goto loc_82732C64;
	// lwz r9,1516(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 1516);
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r9,r11
	r11.u64 = ctx.r9.u64 + r11.u64;
	// addi r11,r11,-2
	r11.s64 = r11.s64 + -2;
loc_82732C64:
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r9,4(r17)
	ctx.r9.u64 = PPC_LOAD_U32(r17.u32 + 4);
	// rlwinm r7,r22,16,0,15
	ctx.r7.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 16) & 0xFFFF0000;
	// lwz r8,192(r30)
	ctx.r8.u64 = PPC_LOAD_U32(r30.u32 + 192);
	// add r11,r11,r23
	r11.u64 = r11.u64 + r23.u64;
	// rlwinm r6,r9,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// or r9,r7,r15
	ctx.r9.u64 = ctx.r7.u64 | r15.u64;
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// rlwinm r7,r11,15,0,15
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 15) & 0xFFFF0000;
	// rlwinm r5,r11,16,0,15
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF0000;
	// or r11,r7,r10
	r11.u64 = ctx.r7.u64 | ctx.r10.u64;
	// or r10,r5,r10
	ctx.r10.u64 = ctx.r5.u64 | ctx.r10.u64;
	// rlwinm r9,r9,5,0,26
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 5) & 0xFFFFFFE0;
	// stwx r10,r6,r8
	PPC_STORE_U32(ctx.r6.u32 + ctx.r8.u32, ctx.r10.u32);
	// rlwinm r8,r11,1,15,15
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// lwz r10,1428(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 1428);
	// subf r10,r9,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r9.s64;
	// subf r7,r11,r10
	ctx.r7.s64 = ctx.r10.s64 - r11.s64;
	// subf r10,r8,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r8.s64;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// addis r10,r10,24
	ctx.r10.s64 = ctx.r10.s64 + 1572864;
	// addi r10,r10,20
	ctx.r10.s64 = ctx.r10.s64 + 20;
	// or r10,r10,r7
	ctx.r10.u64 = ctx.r10.u64 | ctx.r7.u64;
	// rlwinm r10,r10,0,0,16
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r10,r10,0,16,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82732d64
	if (cr6.eq) goto loc_82732D64;
	// lhz r8,52(r30)
	ctx.r8.u64 = PPC_LOAD_U16(r30.u32 + 52);
	// srawi r9,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	ctx.r9.s64 = r11.s32 >> 16;
	// extsh r10,r11
	ctx.r10.s64 = r11.s16;
	// lhz r5,50(r30)
	ctx.r5.u64 = PPC_LOAD_U16(r30.u32 + 50);
	// rotlwi r11,r8,2
	r11.u64 = __builtin_rotateleft32(ctx.r8.u32, 2);
	// rlwinm r6,r15,3,0,28
	ctx.r6.u64 = __builtin_rotateleft64(r15.u32 | (r15.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r4,r11,1
	ctx.r4.s64 = r11.s64 + 1;
	// srawi r11,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	r11.s64 = ctx.r10.s32 >> 2;
	// rlwinm r7,r22,3,0,28
	ctx.r7.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 3) & 0xFFFFFFF8;
	// srawi r8,r9,2
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3) != 0);
	ctx.r8.s64 = ctx.r9.s32 >> 2;
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// rotlwi r5,r5,2
	ctx.r5.u64 = __builtin_rotateleft32(ctx.r5.u32, 2);
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// cmpwi cr6,r11,-8
	cr6.compare<int32_t>(r11.s32, -8, xer);
	// bge cr6,0x82732d1c
	if (!cr6.lt) goto loc_82732D1C;
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r10,r11,r10
	ctx.r10.s64 = ctx.r10.s64 - r11.s64;
	// b 0x82732d30
	goto loc_82732D30;
loc_82732D1C:
	// cmpw cr6,r11,r5
	cr6.compare<int32_t>(r11.s32, ctx.r5.s32, xer);
	// ble cr6,0x82732d30
	if (!cr6.gt) goto loc_82732D30;
	// subf r11,r11,r5
	r11.s64 = ctx.r5.s64 - r11.s64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
loc_82732D30:
	// cmpwi cr6,r8,-9
	cr6.compare<int32_t>(ctx.r8.s32, -9, xer);
	// bge cr6,0x82732d48
	if (!cr6.lt) goto loc_82732D48;
	// addi r11,r8,9
	r11.s64 = ctx.r8.s64 + 9;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	// b 0x82732d5c
	goto loc_82732D5C;
loc_82732D48:
	// cmpw cr6,r8,r4
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r4.s32, xer);
	// ble cr6,0x82732d5c
	if (!cr6.gt) goto loc_82732D5C;
	// subf r11,r8,r4
	r11.s64 = ctx.r4.s64 - ctx.r8.s64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r11,r9
	ctx.r9.u64 = r11.u64 + ctx.r9.u64;
loc_82732D5C:
	// rlwimi r10,r9,16,0,15
	ctx.r10.u64 = (__builtin_rotateleft32(ctx.r9.u32, 16) & 0xFFFF0000) | (ctx.r10.u64 & 0xFFFFFFFF0000FFFF);
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_82732D64:
	// srawi r31,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	r31.s64 = r11.s32 >> 16;
	// lhz r4,92(r30)
	ctx.r4.u64 = PPC_LOAD_U16(r30.u32 + 92);
	// extsh r29,r11
	r29.s64 = r11.s16;
	// lwz r11,12(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 12);
	// srawi r10,r31,2
	xer.ca = (r31.s32 < 0) & ((r31.u32 & 0x3) != 0);
	ctx.r10.s64 = r31.s32 >> 2;
	// srawi r8,r29,2
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x3) != 0);
	ctx.r8.s64 = r29.s32 >> 2;
	// mullw r10,r10,r4
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r4.s32);
	// cmpwi cr6,r23,1
	cr6.compare<int32_t>(r23.s32, 1, xer);
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// bne cr6,0x82732d94
	if (!cr6.eq) goto loc_82732D94;
	// lwz r9,336(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 336);
	// b 0x82732d98
	goto loc_82732D98;
loc_82732D94:
	// lwz r9,312(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 312);
loc_82732D98:
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// add r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 + r11.u64;
	// li r10,128
	ctx.r10.s64 = 128;
	// dcbt r10,r3
	// addi r10,r4,128
	ctx.r10.s64 = ctx.r4.s64 + 128;
	// dcbt r10,r3
	// addi r10,r4,64
	ctx.r10.s64 = ctx.r4.s64 + 64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r10,r3
	// rlwinm r10,r4,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 + ctx.r10.u64;
	// addi r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 128;
	// dcbt r10,r3
	// addi r10,r4,32
	ctx.r10.s64 = ctx.r4.s64 + 32;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r10,r3
	// rlwinm r10,r4,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 + ctx.r10.u64;
	// addi r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 128;
	// dcbt r10,r3
	// rlwinm r10,r4,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 + ctx.r10.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 128;
	// dcbt r10,r3
	// rlwinm r10,r4,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r10,r4,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r4.s64;
	// addi r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 128;
	// dcbt r10,r3
	// rlwinm r9,r29,2,28,29
	ctx.r9.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 2) & 0xC;
	// lwz r10,408(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 408);
	// clrlwi r8,r31,30
	ctx.r8.u64 = r31.u32 & 0x3;
	// add r5,r10,r11
	ctx.r5.u64 = ctx.r10.u64 + r11.u64;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r9,r9,182
	ctx.r9.s64 = ctx.r9.s64 + 182;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// rlwinm r11,r9,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r30
	r11.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lhz r4,92(r30)
	ctx.r4.u64 = PPC_LOAD_U16(r30.u32 + 92);
	// srawi r10,r31,2
	xer.ca = (r31.s32 < 0) & ((r31.u32 & 0x3) != 0);
	ctx.r10.s64 = r31.s32 >> 2;
	// lwz r11,12(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 12);
	// srawi r8,r29,2
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x3) != 0);
	ctx.r8.s64 = r29.s32 >> 2;
	// mullw r10,r10,r4
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r4.s32);
	// cmpwi cr6,r23,1
	cr6.compare<int32_t>(r23.s32, 1, xer);
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// bne cr6,0x82732e64
	if (!cr6.eq) goto loc_82732E64;
	// lwz r9,340(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 340);
	// b 0x82732e68
	goto loc_82732E68;
loc_82732E64:
	// lwz r9,316(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 316);
loc_82732E68:
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// add r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 + r11.u64;
	// li r10,128
	ctx.r10.s64 = 128;
	// dcbt r10,r3
	// addi r10,r4,128
	ctx.r10.s64 = ctx.r4.s64 + 128;
	// dcbt r10,r3
	// addi r10,r4,64
	ctx.r10.s64 = ctx.r4.s64 + 64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r10,r3
	// rlwinm r10,r4,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 + ctx.r10.u64;
	// addi r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 128;
	// dcbt r10,r3
	// addi r10,r4,32
	ctx.r10.s64 = ctx.r4.s64 + 32;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r10,r3
	// rlwinm r10,r4,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 + ctx.r10.u64;
	// addi r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 128;
	// dcbt r10,r3
	// rlwinm r10,r4,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 + ctx.r10.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 128;
	// dcbt r10,r3
	// rlwinm r10,r4,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r10,r4,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r4.s64;
	// addi r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 128;
	// dcbt r10,r3
	// rlwinm r9,r29,2,28,29
	ctx.r9.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 2) & 0xC;
	// lwz r10,412(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 412);
	// clrlwi r8,r31,30
	ctx.r8.u64 = r31.u32 & 0x3;
	// add r5,r10,r11
	ctx.r5.u64 = ctx.r10.u64 + r11.u64;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r9,r9,182
	ctx.r9.s64 = ctx.r9.s64 + 182;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// rlwinm r11,r9,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r30
	r11.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x82733b7c
	goto loc_82733B7C;
loc_82732F10:
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// li r23,0
	r23.s64 = 0;
	// li r20,0
	r20.s64 = 0;
	// rlwinm r11,r11,17,0,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 17) & 0xFFFE0000;
	// li r22,0
	r22.s64 = 0;
	// or r11,r11,r15
	r11.u64 = r11.u64 | r15.u64;
	// addi r25,r30,296
	r25.s64 = r30.s64 + 296;
	// rlwinm r18,r11,6,0,25
	r18.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 6) & 0xFFFFFFC0;
	// li r24,0
	r24.s64 = 0;
	// li r21,0
	r21.s64 = 0;
loc_82732F38:
	// lhz r28,50(r30)
	r28.u64 = PPC_LOAD_U16(r30.u32 + 50);
	// rlwinm r11,r22,0,30,30
	r11.u64 = __builtin_rotateleft64(r22.u32 | (r22.u64 << 32), 0) & 0x2;
	// clrlwi r10,r22,31
	ctx.r10.u64 = r22.u32 & 0x1;
	// rlwinm r9,r28,31,1,31
	ctx.r9.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 31) & 0x7FFFFFFF;
	// mullw r11,r9,r11
	r11.s64 = int64_t(ctx.r9.s32) * int64_t(r11.s32);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r19
	r11.u64 = r11.u64 + r19.u64;
	// lhz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// lhz r9,2(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// extsh r11,r10
	r11.s64 = ctx.r10.s16;
	// extsh r10,r9
	ctx.r10.s64 = ctx.r9.s16;
	// clrlwi r9,r11,31
	ctx.r9.u64 = r11.u32 & 0x1;
	// mr r8,r11
	ctx.r8.u64 = r11.u64;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x82732ff8
	if (cr6.eq) goto loc_82732FF8;
	// lwz r7,188(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// li r29,1
	r29.s64 = 1;
	// lwz r9,100(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// addi r6,r1,128
	ctx.r6.s64 = ctx.r1.s64 + 128;
	// subf r8,r7,r8
	ctx.r8.s64 = ctx.r8.s64 - ctx.r7.s64;
	// addi r7,r1,112
	ctx.r7.s64 = ctx.r1.s64 + 112;
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// lwz r9,1516(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 1516);
	// mr r5,r8
	ctx.r5.u64 = ctx.r8.u64;
	// rlwinm r8,r8,0,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0xFFFFFFFC;
	// rlwimi r5,r29,3,31,28
	ctx.r5.u64 = (__builtin_rotateleft32(r29.u32, 3) & 0xFFFFFFFFFFFFFFF9) | (ctx.r5.u64 & 0x6);
	// stwx r10,r24,r7
	PPC_STORE_U32(r24.u32 + ctx.r7.u32, ctx.r10.u32);
	// mr r7,r11
	ctx.r7.u64 = r11.u64;
	// rlwinm r11,r11,0,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFC;
	// rlwimi r7,r29,3,31,28
	ctx.r7.u64 = (__builtin_rotateleft32(r29.u32, 3) & 0xFFFFFFFFFFFFFFF9) | (ctx.r7.u64 & 0x6);
	// addi r23,r23,1
	r23.s64 = r23.s64 + 1;
	// mr r4,r7
	ctx.r4.u64 = ctx.r7.u64;
	// rlwinm r7,r9,3,0,28
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 3) & 0xFFFFFFF8;
	// srawi r4,r4,1
	xer.ca = (ctx.r4.s32 < 0) & ((ctx.r4.u32 & 0x1) != 0);
	ctx.r4.s64 = ctx.r4.s32 >> 1;
	// or r11,r4,r11
	r11.u64 = ctx.r4.u64 | r11.u64;
	// rlwinm r4,r9,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// srawi r9,r5,1
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x1) != 0);
	ctx.r9.s64 = ctx.r5.s32 >> 1;
	// or r8,r9,r8
	ctx.r8.u64 = ctx.r9.u64 | ctx.r8.u64;
	// add r9,r7,r11
	ctx.r9.u64 = ctx.r7.u64 + r11.u64;
	// addi r9,r9,-4
	ctx.r9.s64 = ctx.r9.s64 + -4;
	// srawi r9,r9,3
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x7) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 3;
	// rlwimi r11,r9,2,0,29
	r11.u64 = (__builtin_rotateleft32(ctx.r9.u32, 2) & 0xFFFFFFFC) | (r11.u64 & 0xFFFFFFFF00000003);
	// subf r11,r4,r11
	r11.s64 = r11.s64 - ctx.r4.s64;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// stwx r11,r24,r6
	PPC_STORE_U32(r24.u32 + ctx.r6.u32, r11.u32);
	// addi r24,r24,4
	r24.s64 = r24.s64 + 4;
	// b 0x8273302c
	goto loc_8273302C;
loc_82732FF8:
	// rlwinm r9,r11,0,0,28
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addi r7,r1,160
	ctx.r7.s64 = ctx.r1.s64 + 160;
	// clrlwi r11,r11,30
	r11.u64 = r11.u32 & 0x3;
	// addi r20,r20,1
	r20.s64 = r20.s64 + 1;
	// or r8,r11,r9
	ctx.r8.u64 = r11.u64 | ctx.r9.u64;
	// addi r11,r1,144
	r11.s64 = ctx.r1.s64 + 144;
	// srawi r9,r8,1
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x1) != 0);
	ctx.r9.s64 = ctx.r8.s32 >> 1;
	// stwx r10,r21,r7
	PPC_STORE_U32(r21.u32 + ctx.r7.u32, ctx.r10.u32);
	// li r29,0
	r29.s64 = 0;
	// rlwimi r9,r8,0,30,31
	ctx.r9.u64 = (__builtin_rotateleft32(ctx.r8.u32, 0) & 0x3) | (ctx.r9.u64 & 0xFFFFFFFFFFFFFFFC);
	// stwx r9,r21,r11
	PPC_STORE_U32(r21.u32 + r11.u32, ctx.r9.u32);
	// addi r21,r21,4
	r21.s64 = r21.s64 + 4;
loc_8273302C:
	// lwz r11,1412(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 1412);
	// rlwimi r10,r8,16,0,15
	ctx.r10.u64 = (__builtin_rotateleft32(ctx.r8.u32, 16) & 0xFFFF0000) | (ctx.r10.u64 & 0xFFFFFFFF0000FFFF);
	// subf r9,r18,r11
	ctx.r9.s64 = r11.s64 - r18.s64;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	// subf r10,r10,r18
	ctx.r10.s64 = r18.s64 - ctx.r10.s64;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// addis r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 8388608;
	// addi r10,r10,56
	ctx.r10.s64 = ctx.r10.s64 + 56;
	// or r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 | ctx.r9.u64;
	// rlwinm r10,r10,0,0,16
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r10,r10,0,16,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82733154
	if (cr6.eq) goto loc_82733154;
	// extsh r8,r11
	ctx.r8.s64 = r11.s16;
	// lwz r10,1516(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 1516);
	// srawi r6,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	ctx.r6.s64 = r11.s32 >> 16;
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// rlwinm r4,r15,4,0,27
	ctx.r4.u64 = __builtin_rotateleft64(r15.u32 | (r15.u64 << 32), 4) & 0xFFFFFFF0;
	// rlwinm r3,r11,5,0,26
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 5) & 0xFFFFFFE0;
	// li r31,0
	r31.s64 = 0;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// rlwinm r11,r6,0,29,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 0) & 0x4;
	// bne cr6,0x827330ac
	if (!cr6.eq) goto loc_827330AC;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lhz r11,52(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 52);
	// rotlwi r11,r11,4
	r11.u64 = __builtin_rotateleft32(r11.u32, 4);
	// beq cr6,0x827330c8
	if (cr6.eq) goto loc_827330C8;
	// li r7,-35
	ctx.r7.s64 = -35;
	// addi r5,r11,3
	ctx.r5.s64 = r11.s64 + 3;
	// b 0x827330d0
	goto loc_827330D0;
loc_827330AC:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lhz r11,52(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 52);
	// rotlwi r11,r11,4
	r11.u64 = __builtin_rotateleft32(r11.u32, 4);
	// beq cr6,0x827330c8
	if (cr6.eq) goto loc_827330C8;
	// li r7,-37
	ctx.r7.s64 = -37;
	// addi r5,r11,1
	ctx.r5.s64 = r11.s64 + 1;
	// b 0x827330d0
	goto loc_827330D0;
loc_827330C8:
	// addi r5,r11,2
	ctx.r5.s64 = r11.s64 + 2;
	// li r7,-36
	ctx.r7.s64 = -36;
loc_827330D0:
	// srawi r11,r8,2
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x3) != 0);
	r11.s64 = ctx.r8.s32 >> 2;
	// srawi r10,r6,2
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r6.s32 >> 2;
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// add r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 + ctx.r3.u64;
	// cmpwi cr6,r11,-17
	cr6.compare<int32_t>(r11.s32, -17, xer);
	// bge cr6,0x827330f0
	if (!cr6.lt) goto loc_827330F0;
	// li r11,-17
	r11.s64 = -17;
	// b 0x82733100
	goto loc_82733100;
loc_827330F0:
	// rlwinm r9,r28,3,0,28
	ctx.r9.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 3) & 0xFFFFFFF8;
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// ble cr6,0x82733104
	if (!cr6.gt) goto loc_82733104;
	// mr r11,r9
	r11.u64 = ctx.r9.u64;
loc_82733100:
	// li r31,1
	r31.s64 = 1;
loc_82733104:
	// cmpw cr6,r10,r7
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r7.s32, xer);
	// bge cr6,0x82733114
	if (!cr6.lt) goto loc_82733114;
	// mr r10,r7
	ctx.r10.u64 = ctx.r7.u64;
	// b 0x8273312c
	goto loc_8273312C;
loc_82733114:
	// cmpw cr6,r10,r5
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r5.s32, xer);
	// ble cr6,0x82733124
	if (!cr6.gt) goto loc_82733124;
	// mr r10,r5
	ctx.r10.u64 = ctx.r5.u64;
	// b 0x8273312c
	goto loc_8273312C;
loc_82733124:
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// beq cr6,0x8273314c
	if (cr6.eq) goto loc_8273314C;
loc_8273312C:
	// subf r11,r4,r11
	r11.s64 = r11.s64 - ctx.r4.s64;
	// subf r10,r3,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r3.s64;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// clrlwi r8,r8,30
	ctx.r8.u64 = ctx.r8.u32 & 0x3;
	// clrlwi r10,r6,30
	ctx.r10.u64 = ctx.r6.u32 & 0x3;
	// add r8,r9,r8
	ctx.r8.u64 = ctx.r9.u64 + ctx.r8.u64;
	// add r6,r11,r10
	ctx.r6.u64 = r11.u64 + ctx.r10.u64;
loc_8273314C:
	// rlwimi r8,r6,16,0,15
	ctx.r8.u64 = (__builtin_rotateleft32(ctx.r6.u32, 16) & 0xFFFF0000) | (ctx.r8.u64 & 0xFFFFFFFF0000FFFF);
	// mr r11,r8
	r11.u64 = ctx.r8.u64;
loc_82733154:
	// lhz r31,90(r30)
	r31.u64 = PPC_LOAD_U16(r30.u32 + 90);
	// srawi r9,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	ctx.r9.s64 = r11.s32 >> 16;
	// extsh r10,r11
	ctx.r10.s64 = r11.s16;
	// lbz r5,48(r30)
	ctx.r5.u64 = PPC_LOAD_U8(r30.u32 + 48);
	// srawi r8,r31,1
	xer.ca = (r31.s32 < 0) & ((r31.u32 & 0x1) != 0);
	ctx.r8.s64 = r31.s32 >> 1;
	// lwz r11,8(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 8);
	// srawi r6,r9,2
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3) != 0);
	ctx.r6.s64 = ctx.r9.s32 >> 2;
	// cmpwi cr6,r29,1
	cr6.compare<int32_t>(r29.s32, 1, xer);
	// mullw r8,r8,r6
	ctx.r8.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r6.s32);
	// bne cr6,0x82733194
	if (!cr6.eq) goto loc_82733194;
	// lwz r7,24(r25)
	ctx.r7.u64 = PPC_LOAD_U32(r25.u32 + 24);
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// srawi r7,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r7.s64 = ctx.r10.s32 >> 2;
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// add r29,r8,r11
	r29.u64 = ctx.r8.u64 + r11.u64;
	// b 0x827331a8
	goto loc_827331A8;
loc_82733194:
	// srawi r6,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r6.s64 = ctx.r10.s32 >> 2;
	// lwz r7,0(r25)
	ctx.r7.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// add r8,r8,r6
	ctx.r8.u64 = ctx.r8.u64 + ctx.r6.u64;
	// add r8,r8,r11
	ctx.r8.u64 = ctx.r8.u64 + r11.u64;
	// add r29,r8,r7
	r29.u64 = ctx.r8.u64 + ctx.r7.u64;
loc_827331A8:
	// lwz r8,96(r25)
	ctx.r8.u64 = PPC_LOAD_U32(r25.u32 + 96);
	// li r7,128
	ctx.r7.s64 = 128;
	// add r28,r8,r11
	r28.u64 = ctx.r8.u64 + r11.u64;
	// dcbt r7,r29
	// addi r11,r31,128
	r11.s64 = r31.s64 + 128;
	// dcbt r11,r29
	// addi r11,r31,64
	r11.s64 = r31.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rlwinm r11,r31,1,0,30
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r31,32
	r11.s64 = r31.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rlwinm r11,r31,2,0,29
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r31,1,0,30
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rlwinm r11,r31,3,0,28
	r11.u64 = __builtin_rotateleft64(r31.u32 | (r31.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r31,r11
	r11.s64 = r11.s64 - r31.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// clrlwi r27,r10,30
	r27.u64 = ctx.r10.u32 & 0x3;
	// clrlwi r26,r9,30
	r26.u64 = ctx.r9.u32 & 0x3;
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r5,1
	cr6.compare<int32_t>(ctx.r5.s32, 1, xer);
	// li r7,0
	ctx.r7.s64 = 0;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// bne cr6,0x82733288
	if (!cr6.eq) goto loc_82733288;
	// addi r11,r11,166
	r11.s64 = r11.s64 + 166;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r30
	r11.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x8273329c
	if (cr6.eq) goto loc_8273329C;
	// li r9,0
	ctx.r9.s64 = 0;
	// lbz r8,35(r30)
	ctx.r8.u64 = PPC_LOAD_U8(r30.u32 + 35);
	// mr r7,r26
	ctx.r7.u64 = r26.u64;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8266cc68
	sub_8266CC68(ctx, base);
	// b 0x8273329c
	goto loc_8273329C;
loc_82733288:
	// addi r11,r11,182
	r11.s64 = r11.s64 + 182;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r30
	r11.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_8273329C:
	// addi r22,r22,1
	r22.s64 = r22.s64 + 1;
	// addi r25,r25,4
	r25.s64 = r25.s64 + 4;
	// cmpwi cr6,r22,4
	cr6.compare<int32_t>(r22.s32, 4, xer);
	// blt cr6,0x82732f38
	if (cr6.lt) goto loc_82732F38;
	// cmpw cr6,r23,r20
	cr6.compare<int32_t>(r23.s32, r20.s32, xer);
	// ble cr6,0x82733548
	if (!cr6.gt) goto loc_82733548;
	// addi r11,r23,-1
	r11.s64 = r23.s64 + -1;
	// li r25,1
	r25.s64 = 1;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bgt cr6,0x82733830
	if (cr6.gt) goto loc_82733830;
	// lis r12,-32141
	r12.s64 = -2106392576;
	// addi r12,r12,13020
	r12.s64 = r12.s64 + 13020;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_827332EC;
	case 1:
		goto loc_827332F8;
	case 2:
		goto loc_8273331C;
	case 3:
		goto loc_827333A0;
	default:
		__builtin_unreachable();
	}
	// lwz r19,13036(r19)
	r19.u64 = PPC_LOAD_U32(r19.u32 + 13036);
	// lwz r19,13048(r19)
	r19.u64 = PPC_LOAD_U32(r19.u32 + 13048);
	// lwz r19,13084(r19)
	r19.u64 = PPC_LOAD_U32(r19.u32 + 13084);
	// lwz r19,13216(r19)
	r19.u64 = PPC_LOAD_U32(r19.u32 + 13216);
loc_827332EC:
	// lwz r14,112(r1)
	r14.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lwz r16,128(r1)
	r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// b 0x82733830
	goto loc_82733830;
loc_827332F8:
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// add r9,r11,r10
	ctx.r9.u64 = r11.u64 + ctx.r10.u64;
	// lwz r10,128(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// srawi r10,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r9.s32 >> 1;
	// addze r14,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	r14.s64 = temp.s64;
	// b 0x82733828
	goto loc_82733828;
loc_8273331C:
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lwz r10,116(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r5,120(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// lwz r8,128(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// subf r9,r11,r10
	ctx.r9.s64 = ctx.r10.s64 - r11.s64;
	// lwz r7,132(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// subf r3,r5,r10
	ctx.r3.s64 = ctx.r10.s64 - ctx.r5.s64;
	// lwz r4,136(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// subf r31,r11,r5
	r31.s64 = ctx.r5.s64 - r11.s64;
	// subf r6,r8,r7
	ctx.r6.s64 = ctx.r7.s64 - ctx.r8.s64;
	// subf r29,r4,r7
	r29.s64 = ctx.r7.s64 - ctx.r4.s64;
	// xor r3,r3,r9
	ctx.r3.u64 = ctx.r3.u64 ^ ctx.r9.u64;
	// subf r28,r8,r4
	r28.s64 = ctx.r4.s64 - ctx.r8.s64;
	// xor r31,r31,r9
	r31.u64 = r31.u64 ^ ctx.r9.u64;
	// xor r29,r29,r6
	r29.u64 = r29.u64 ^ ctx.r6.u64;
	// srawi r9,r3,31
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x7FFFFFFF) != 0);
	ctx.r9.s64 = ctx.r3.s32 >> 31;
	// xor r28,r28,r6
	r28.u64 = r28.u64 ^ ctx.r6.u64;
	// srawi r6,r31,31
	xer.ca = (r31.s32 < 0) & ((r31.u32 & 0x7FFFFFFF) != 0);
	ctx.r6.s64 = r31.s32 >> 31;
	// srawi r3,r29,31
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r29.s32 >> 31;
	// srawi r31,r28,31
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x7FFFFFFF) != 0);
	r31.s64 = r28.s32 >> 31;
	// or r29,r9,r6
	r29.u64 = ctx.r9.u64 | ctx.r6.u64;
	// or r28,r3,r31
	r28.u64 = ctx.r3.u64 | r31.u64;
	// and r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 & ctx.r10.u64;
	// andc r5,r5,r29
	ctx.r5.u64 = ctx.r5.u64 & ~r29.u64;
	// andc r9,r4,r28
	ctx.r9.u64 = ctx.r4.u64 & ~r28.u64;
	// and r7,r3,r7
	ctx.r7.u64 = ctx.r3.u64 & ctx.r7.u64;
	// or r10,r5,r10
	ctx.r10.u64 = ctx.r5.u64 | ctx.r10.u64;
	// and r11,r6,r11
	r11.u64 = ctx.r6.u64 & r11.u64;
	// or r9,r9,r7
	ctx.r9.u64 = ctx.r9.u64 | ctx.r7.u64;
	// and r8,r31,r8
	ctx.r8.u64 = r31.u64 & ctx.r8.u64;
	// or r14,r10,r11
	r14.u64 = ctx.r10.u64 | r11.u64;
	// or r16,r9,r8
	r16.u64 = ctx.r9.u64 | ctx.r8.u64;
	// b 0x82733830
	goto loc_82733830;
loc_827333A0:
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lwz r10,116(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r9,120(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// subf r8,r11,r10
	ctx.r8.s64 = ctx.r10.s64 - r11.s64;
	// subf r7,r10,r9
	ctx.r7.s64 = ctx.r9.s64 - ctx.r10.s64;
	// subf r6,r9,r11
	ctx.r6.s64 = r11.s64 - ctx.r9.s64;
	// srawi r4,r8,31
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7FFFFFFF) != 0);
	ctx.r4.s64 = ctx.r8.s32 >> 31;
	// subf r8,r10,r11
	ctx.r8.s64 = r11.s64 - ctx.r10.s64;
	// srawi r31,r7,31
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x7FFFFFFF) != 0);
	r31.s64 = ctx.r7.s32 >> 31;
	// srawi r5,r6,31
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = ctx.r6.s32 >> 31;
	// lwz r6,136(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// subf r7,r9,r10
	ctx.r7.s64 = ctx.r10.s64 - ctx.r9.s64;
	// srawi r28,r8,31
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7FFFFFFF) != 0);
	r28.s64 = ctx.r8.s32 >> 31;
	// subf r8,r11,r9
	ctx.r8.s64 = ctx.r9.s64 - r11.s64;
	// srawi r27,r7,31
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x7FFFFFFF) != 0);
	r27.s64 = ctx.r7.s32 >> 31;
	// lwz r7,132(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// srawi r26,r8,31
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7FFFFFFF) != 0);
	r26.s64 = ctx.r8.s32 >> 31;
	// lwz r8,128(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// not r3,r31
	ctx.r3.u64 = ~r31.u64;
	// not r5,r5
	ctx.r5.u64 = ~ctx.r5.u64;
	// not r29,r4
	r29.u64 = ~ctx.r4.u64;
	// not r28,r28
	r28.u64 = ~r28.u64;
	// not r26,r26
	r26.u64 = ~r26.u64;
	// not r27,r27
	r27.u64 = ~r27.u64;
	// xor r16,r5,r4
	r16.u64 = ctx.r5.u64 ^ ctx.r4.u64;
	// xor r18,r3,r4
	r18.u64 = ctx.r3.u64 ^ ctx.r4.u64;
	// and r4,r28,r3
	ctx.r4.u64 = r28.u64 & ctx.r3.u64;
	// and r15,r29,r26
	r15.u64 = r29.u64 & r26.u64;
	// and r3,r26,r3
	ctx.r3.u64 = r26.u64 & ctx.r3.u64;
	// and r29,r27,r29
	r29.u64 = r27.u64 & r29.u64;
	// xor r31,r5,r31
	r31.u64 = ctx.r5.u64 ^ r31.u64;
	// and r14,r27,r5
	r14.u64 = r27.u64 & ctx.r5.u64;
	// and r4,r4,r10
	ctx.r4.u64 = ctx.r4.u64 & ctx.r10.u64;
	// and r29,r29,r10
	r29.u64 = r29.u64 & ctx.r10.u64;
	// and r3,r3,r9
	ctx.r3.u64 = ctx.r3.u64 & ctx.r9.u64;
	// and r5,r28,r5
	ctx.r5.u64 = r28.u64 & ctx.r5.u64;
	// and r15,r15,r11
	r15.u64 = r15.u64 & r11.u64;
	// and r31,r31,r9
	r31.u64 = r31.u64 & ctx.r9.u64;
	// and r10,r18,r10
	ctx.r10.u64 = r18.u64 & ctx.r10.u64;
	// and r5,r5,r11
	ctx.r5.u64 = ctx.r5.u64 & r11.u64;
	// or r3,r29,r3
	ctx.r3.u64 = r29.u64 | ctx.r3.u64;
	// or r10,r31,r10
	ctx.r10.u64 = r31.u64 | ctx.r10.u64;
	// and r11,r16,r11
	r11.u64 = r16.u64 & r11.u64;
	// or r4,r15,r4
	ctx.r4.u64 = r15.u64 | ctx.r4.u64;
	// and r15,r14,r9
	r15.u64 = r14.u64 & ctx.r9.u64;
	// or r9,r3,r5
	ctx.r9.u64 = ctx.r3.u64 | ctx.r5.u64;
	// or r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 | r11.u64;
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// or r4,r4,r15
	ctx.r4.u64 = ctx.r4.u64 | r15.u64;
	// subf r5,r11,r9
	ctx.r5.s64 = ctx.r9.s64 - r11.s64;
	// subf r10,r4,r11
	ctx.r10.s64 = r11.s64 - ctx.r4.s64;
	// subf r31,r9,r4
	r31.s64 = ctx.r4.s64 - ctx.r9.s64;
	// srawi r10,r10,31
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7FFFFFFF) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 31;
	// srawi r5,r5,31
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = ctx.r5.s32 >> 31;
	// srawi r31,r31,31
	xer.ca = (r31.s32 < 0) & ((r31.u32 & 0x7FFFFFFF) != 0);
	r31.s64 = r31.s32 >> 31;
	// eqv r5,r5,r10
	// eqv r10,r31,r10
	// and r11,r5,r11
	r11.u64 = ctx.r5.u64 & r11.u64;
	// or r31,r5,r10
	r31.u64 = ctx.r5.u64 | ctx.r10.u64;
	// and r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 & ctx.r10.u64;
	// andc r9,r9,r31
	ctx.r9.u64 = ctx.r9.u64 & ~r31.u64;
	// subf r24,r8,r7
	r24.s64 = ctx.r7.s64 - ctx.r8.s64;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// subf r23,r7,r6
	r23.s64 = ctx.r6.s64 - ctx.r7.s64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// subf r22,r6,r8
	r22.s64 = ctx.r8.s64 - ctx.r6.s64;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// subf r21,r7,r8
	r21.s64 = ctx.r8.s64 - ctx.r7.s64;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// subf r20,r6,r7
	r20.s64 = ctx.r7.s64 - ctx.r6.s64;
	// addze r14,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r14.s64 = temp.s64;
	// srawi r10,r24,31
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x7FFFFFFF) != 0);
	ctx.r10.s64 = r24.s32 >> 31;
	// srawi r5,r23,31
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = r23.s32 >> 31;
	// srawi r11,r22,31
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x7FFFFFFF) != 0);
	r11.s64 = r22.s32 >> 31;
	// subf r19,r8,r6
	r19.s64 = ctx.r6.s64 - ctx.r8.s64;
	// srawi r3,r21,31
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r21.s32 >> 31;
	// srawi r31,r20,31
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x7FFFFFFF) != 0);
	r31.s64 = r20.s32 >> 31;
	// srawi r29,r19,31
	xer.ca = (r19.s32 < 0) & ((r19.u32 & 0x7FFFFFFF) != 0);
	r29.s64 = r19.s32 >> 31;
	// not r9,r5
	ctx.r9.u64 = ~ctx.r5.u64;
	// not r11,r11
	r11.u64 = ~r11.u64;
	// not r4,r10
	ctx.r4.u64 = ~ctx.r10.u64;
	// xor r28,r9,r10
	r28.u64 = ctx.r9.u64 ^ ctx.r10.u64;
	// xor r5,r11,r5
	ctx.r5.u64 = r11.u64 ^ ctx.r5.u64;
	// xor r10,r11,r10
	ctx.r10.u64 = r11.u64 ^ ctx.r10.u64;
	// and r28,r28,r7
	r28.u64 = r28.u64 & ctx.r7.u64;
	// and r5,r5,r6
	ctx.r5.u64 = ctx.r5.u64 & ctx.r6.u64;
	// and r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 & ctx.r8.u64;
	// or r5,r5,r28
	ctx.r5.u64 = ctx.r5.u64 | r28.u64;
	// not r3,r3
	ctx.r3.u64 = ~ctx.r3.u64;
	// not r29,r29
	r29.u64 = ~r29.u64;
	// not r31,r31
	r31.u64 = ~r31.u64;
	// or r5,r5,r10
	ctx.r5.u64 = ctx.r5.u64 | ctx.r10.u64;
	// and r28,r3,r9
	r28.u64 = ctx.r3.u64 & ctx.r9.u64;
	// and r10,r4,r29
	ctx.r10.u64 = ctx.r4.u64 & r29.u64;
	// and r9,r29,r9
	ctx.r9.u64 = r29.u64 & ctx.r9.u64;
	// and r4,r4,r31
	ctx.r4.u64 = ctx.r4.u64 & r31.u64;
	// and r27,r31,r11
	r27.u64 = r31.u64 & r11.u64;
	// and r28,r28,r7
	r28.u64 = r28.u64 & ctx.r7.u64;
	// and r9,r9,r6
	ctx.r9.u64 = ctx.r9.u64 & ctx.r6.u64;
	// and r11,r3,r11
	r11.u64 = ctx.r3.u64 & r11.u64;
	// and r7,r4,r7
	ctx.r7.u64 = ctx.r4.u64 & ctx.r7.u64;
	// and r11,r11,r8
	r11.u64 = r11.u64 & ctx.r8.u64;
	// or r9,r7,r9
	ctx.r9.u64 = ctx.r7.u64 | ctx.r9.u64;
	// or r11,r9,r11
	r11.u64 = ctx.r9.u64 | r11.u64;
	// lwz r9,140(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// b 0x827337d8
	goto loc_827337D8;
loc_82733548:
	// addi r11,r20,-1
	r11.s64 = r20.s64 + -1;
	// li r25,0
	r25.s64 = 0;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bgt cr6,0x82733830
	if (cr6.gt) goto loc_82733830;
	// lis r12,-32141
	r12.s64 = -2106392576;
	// addi r12,r12,13680
	r12.s64 = r12.s64 + 13680;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_82733580;
	case 1:
		goto loc_8273358C;
	case 2:
		goto loc_827335B0;
	case 3:
		goto loc_82733634;
	default:
		__builtin_unreachable();
	}
	// lwz r19,13696(r19)
	r19.u64 = PPC_LOAD_U32(r19.u32 + 13696);
	// lwz r19,13708(r19)
	r19.u64 = PPC_LOAD_U32(r19.u32 + 13708);
	// lwz r19,13744(r19)
	r19.u64 = PPC_LOAD_U32(r19.u32 + 13744);
	// lwz r19,13876(r19)
	r19.u64 = PPC_LOAD_U32(r19.u32 + 13876);
loc_82733580:
	// lwz r14,160(r1)
	r14.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// lwz r16,144(r1)
	r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// b 0x82733830
	goto loc_82733830;
loc_8273358C:
	// lwz r11,164(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// lwz r10,160(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// add r9,r11,r10
	ctx.r9.u64 = r11.u64 + ctx.r10.u64;
	// lwz r10,144(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// lwz r11,148(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// srawi r10,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r9.s32 >> 1;
	// addze r14,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	r14.s64 = temp.s64;
	// b 0x82733828
	goto loc_82733828;
loc_827335B0:
	// lwz r11,160(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// lwz r10,164(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// lwz r5,168(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// lwz r8,144(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// subf r9,r11,r10
	ctx.r9.s64 = ctx.r10.s64 - r11.s64;
	// lwz r7,148(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// subf r3,r5,r10
	ctx.r3.s64 = ctx.r10.s64 - ctx.r5.s64;
	// lwz r4,152(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// subf r31,r11,r5
	r31.s64 = ctx.r5.s64 - r11.s64;
	// subf r6,r8,r7
	ctx.r6.s64 = ctx.r7.s64 - ctx.r8.s64;
	// subf r29,r4,r7
	r29.s64 = ctx.r7.s64 - ctx.r4.s64;
	// xor r3,r3,r9
	ctx.r3.u64 = ctx.r3.u64 ^ ctx.r9.u64;
	// subf r28,r8,r4
	r28.s64 = ctx.r4.s64 - ctx.r8.s64;
	// xor r31,r31,r9
	r31.u64 = r31.u64 ^ ctx.r9.u64;
	// xor r29,r29,r6
	r29.u64 = r29.u64 ^ ctx.r6.u64;
	// srawi r9,r3,31
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x7FFFFFFF) != 0);
	ctx.r9.s64 = ctx.r3.s32 >> 31;
	// xor r28,r28,r6
	r28.u64 = r28.u64 ^ ctx.r6.u64;
	// srawi r6,r31,31
	xer.ca = (r31.s32 < 0) & ((r31.u32 & 0x7FFFFFFF) != 0);
	ctx.r6.s64 = r31.s32 >> 31;
	// srawi r3,r29,31
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r29.s32 >> 31;
	// srawi r31,r28,31
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x7FFFFFFF) != 0);
	r31.s64 = r28.s32 >> 31;
	// or r29,r9,r6
	r29.u64 = ctx.r9.u64 | ctx.r6.u64;
	// or r28,r3,r31
	r28.u64 = ctx.r3.u64 | r31.u64;
	// and r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 & ctx.r10.u64;
	// andc r5,r5,r29
	ctx.r5.u64 = ctx.r5.u64 & ~r29.u64;
	// andc r9,r4,r28
	ctx.r9.u64 = ctx.r4.u64 & ~r28.u64;
	// and r7,r3,r7
	ctx.r7.u64 = ctx.r3.u64 & ctx.r7.u64;
	// or r10,r5,r10
	ctx.r10.u64 = ctx.r5.u64 | ctx.r10.u64;
	// and r11,r6,r11
	r11.u64 = ctx.r6.u64 & r11.u64;
	// or r9,r9,r7
	ctx.r9.u64 = ctx.r9.u64 | ctx.r7.u64;
	// and r8,r31,r8
	ctx.r8.u64 = r31.u64 & ctx.r8.u64;
	// or r14,r10,r11
	r14.u64 = ctx.r10.u64 | r11.u64;
	// or r16,r9,r8
	r16.u64 = ctx.r9.u64 | ctx.r8.u64;
	// b 0x82733830
	goto loc_82733830;
loc_82733634:
	// lwz r11,160(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// lwz r10,164(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// lwz r9,168(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// subf r8,r11,r10
	ctx.r8.s64 = ctx.r10.s64 - r11.s64;
	// subf r7,r10,r9
	ctx.r7.s64 = ctx.r9.s64 - ctx.r10.s64;
	// subf r6,r9,r11
	ctx.r6.s64 = r11.s64 - ctx.r9.s64;
	// srawi r4,r8,31
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7FFFFFFF) != 0);
	ctx.r4.s64 = ctx.r8.s32 >> 31;
	// subf r8,r10,r11
	ctx.r8.s64 = r11.s64 - ctx.r10.s64;
	// srawi r31,r7,31
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x7FFFFFFF) != 0);
	r31.s64 = ctx.r7.s32 >> 31;
	// srawi r5,r6,31
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = ctx.r6.s32 >> 31;
	// lwz r6,152(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// subf r7,r9,r10
	ctx.r7.s64 = ctx.r10.s64 - ctx.r9.s64;
	// srawi r28,r8,31
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7FFFFFFF) != 0);
	r28.s64 = ctx.r8.s32 >> 31;
	// subf r8,r11,r9
	ctx.r8.s64 = ctx.r9.s64 - r11.s64;
	// srawi r27,r7,31
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x7FFFFFFF) != 0);
	r27.s64 = ctx.r7.s32 >> 31;
	// lwz r7,148(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// srawi r26,r8,31
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7FFFFFFF) != 0);
	r26.s64 = ctx.r8.s32 >> 31;
	// lwz r8,144(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// not r3,r31
	ctx.r3.u64 = ~r31.u64;
	// not r5,r5
	ctx.r5.u64 = ~ctx.r5.u64;
	// not r29,r4
	r29.u64 = ~ctx.r4.u64;
	// not r28,r28
	r28.u64 = ~r28.u64;
	// not r26,r26
	r26.u64 = ~r26.u64;
	// not r27,r27
	r27.u64 = ~r27.u64;
	// xor r16,r5,r4
	r16.u64 = ctx.r5.u64 ^ ctx.r4.u64;
	// xor r18,r3,r4
	r18.u64 = ctx.r3.u64 ^ ctx.r4.u64;
	// and r4,r28,r3
	ctx.r4.u64 = r28.u64 & ctx.r3.u64;
	// and r15,r29,r26
	r15.u64 = r29.u64 & r26.u64;
	// and r3,r26,r3
	ctx.r3.u64 = r26.u64 & ctx.r3.u64;
	// and r29,r29,r27
	r29.u64 = r29.u64 & r27.u64;
	// xor r31,r5,r31
	r31.u64 = ctx.r5.u64 ^ r31.u64;
	// and r14,r27,r5
	r14.u64 = r27.u64 & ctx.r5.u64;
	// and r4,r4,r10
	ctx.r4.u64 = ctx.r4.u64 & ctx.r10.u64;
	// and r29,r29,r10
	r29.u64 = r29.u64 & ctx.r10.u64;
	// and r3,r3,r9
	ctx.r3.u64 = ctx.r3.u64 & ctx.r9.u64;
	// and r5,r28,r5
	ctx.r5.u64 = r28.u64 & ctx.r5.u64;
	// and r15,r15,r11
	r15.u64 = r15.u64 & r11.u64;
	// and r31,r31,r9
	r31.u64 = r31.u64 & ctx.r9.u64;
	// and r10,r18,r10
	ctx.r10.u64 = r18.u64 & ctx.r10.u64;
	// and r5,r5,r11
	ctx.r5.u64 = ctx.r5.u64 & r11.u64;
	// or r3,r29,r3
	ctx.r3.u64 = r29.u64 | ctx.r3.u64;
	// or r10,r31,r10
	ctx.r10.u64 = r31.u64 | ctx.r10.u64;
	// and r11,r16,r11
	r11.u64 = r16.u64 & r11.u64;
	// or r4,r15,r4
	ctx.r4.u64 = r15.u64 | ctx.r4.u64;
	// and r15,r14,r9
	r15.u64 = r14.u64 & ctx.r9.u64;
	// or r9,r3,r5
	ctx.r9.u64 = ctx.r3.u64 | ctx.r5.u64;
	// or r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 | r11.u64;
	// lwz r11,172(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// or r4,r4,r15
	ctx.r4.u64 = ctx.r4.u64 | r15.u64;
	// subf r5,r11,r9
	ctx.r5.s64 = ctx.r9.s64 - r11.s64;
	// subf r10,r4,r11
	ctx.r10.s64 = r11.s64 - ctx.r4.s64;
	// subf r31,r9,r4
	r31.s64 = ctx.r4.s64 - ctx.r9.s64;
	// srawi r10,r10,31
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7FFFFFFF) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 31;
	// srawi r5,r5,31
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = ctx.r5.s32 >> 31;
	// srawi r31,r31,31
	xer.ca = (r31.s32 < 0) & ((r31.u32 & 0x7FFFFFFF) != 0);
	r31.s64 = r31.s32 >> 31;
	// eqv r5,r5,r10
	// eqv r10,r31,r10
	// and r11,r5,r11
	r11.u64 = ctx.r5.u64 & r11.u64;
	// or r31,r5,r10
	r31.u64 = ctx.r5.u64 | ctx.r10.u64;
	// and r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 & ctx.r10.u64;
	// andc r9,r9,r31
	ctx.r9.u64 = ctx.r9.u64 & ~r31.u64;
	// subf r24,r8,r7
	r24.s64 = ctx.r7.s64 - ctx.r8.s64;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// subf r23,r7,r6
	r23.s64 = ctx.r6.s64 - ctx.r7.s64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// subf r22,r6,r8
	r22.s64 = ctx.r8.s64 - ctx.r6.s64;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// subf r21,r7,r8
	r21.s64 = ctx.r8.s64 - ctx.r7.s64;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// subf r20,r6,r7
	r20.s64 = ctx.r7.s64 - ctx.r6.s64;
	// addze r14,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r14.s64 = temp.s64;
	// srawi r10,r24,31
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x7FFFFFFF) != 0);
	ctx.r10.s64 = r24.s32 >> 31;
	// srawi r5,r23,31
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = r23.s32 >> 31;
	// srawi r11,r22,31
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x7FFFFFFF) != 0);
	r11.s64 = r22.s32 >> 31;
	// subf r19,r8,r6
	r19.s64 = ctx.r6.s64 - ctx.r8.s64;
	// srawi r3,r21,31
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r21.s32 >> 31;
	// srawi r31,r20,31
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x7FFFFFFF) != 0);
	r31.s64 = r20.s32 >> 31;
	// srawi r29,r19,31
	xer.ca = (r19.s32 < 0) & ((r19.u32 & 0x7FFFFFFF) != 0);
	r29.s64 = r19.s32 >> 31;
	// not r9,r5
	ctx.r9.u64 = ~ctx.r5.u64;
	// not r11,r11
	r11.u64 = ~r11.u64;
	// not r4,r10
	ctx.r4.u64 = ~ctx.r10.u64;
	// xor r28,r9,r10
	r28.u64 = ctx.r9.u64 ^ ctx.r10.u64;
	// xor r5,r11,r5
	ctx.r5.u64 = r11.u64 ^ ctx.r5.u64;
	// xor r10,r11,r10
	ctx.r10.u64 = r11.u64 ^ ctx.r10.u64;
	// and r28,r28,r7
	r28.u64 = r28.u64 & ctx.r7.u64;
	// and r5,r5,r6
	ctx.r5.u64 = ctx.r5.u64 & ctx.r6.u64;
	// and r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 & ctx.r8.u64;
	// or r5,r28,r5
	ctx.r5.u64 = r28.u64 | ctx.r5.u64;
	// not r3,r3
	ctx.r3.u64 = ~ctx.r3.u64;
	// not r29,r29
	r29.u64 = ~r29.u64;
	// not r31,r31
	r31.u64 = ~r31.u64;
	// or r5,r5,r10
	ctx.r5.u64 = ctx.r5.u64 | ctx.r10.u64;
	// and r28,r3,r9
	r28.u64 = ctx.r3.u64 & ctx.r9.u64;
	// and r10,r4,r29
	ctx.r10.u64 = ctx.r4.u64 & r29.u64;
	// and r9,r29,r9
	ctx.r9.u64 = r29.u64 & ctx.r9.u64;
	// and r4,r4,r31
	ctx.r4.u64 = ctx.r4.u64 & r31.u64;
	// and r27,r31,r11
	r27.u64 = r31.u64 & r11.u64;
	// and r28,r28,r7
	r28.u64 = r28.u64 & ctx.r7.u64;
	// and r9,r9,r6
	ctx.r9.u64 = ctx.r9.u64 & ctx.r6.u64;
	// and r11,r3,r11
	r11.u64 = ctx.r3.u64 & r11.u64;
	// and r7,r4,r7
	ctx.r7.u64 = ctx.r4.u64 & ctx.r7.u64;
	// and r11,r11,r8
	r11.u64 = r11.u64 & ctx.r8.u64;
	// or r9,r7,r9
	ctx.r9.u64 = ctx.r7.u64 | ctx.r9.u64;
	// or r11,r9,r11
	r11.u64 = ctx.r9.u64 | r11.u64;
	// lwz r9,156(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
loc_827337D8:
	// and r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 & ctx.r8.u64;
	// lwz r15,84(r1)
	r15.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// subf r7,r9,r11
	ctx.r7.s64 = r11.s64 - ctx.r9.s64;
	// or r10,r10,r28
	ctx.r10.u64 = ctx.r10.u64 | r28.u64;
	// and r28,r27,r6
	r28.u64 = r27.u64 & ctx.r6.u64;
	// or r10,r10,r28
	ctx.r10.u64 = ctx.r10.u64 | r28.u64;
	// subf r8,r10,r9
	ctx.r8.s64 = ctx.r9.s64 - ctx.r10.s64;
	// subf r6,r11,r10
	ctx.r6.s64 = ctx.r10.s64 - r11.s64;
	// srawi r8,r8,31
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7FFFFFFF) != 0);
	ctx.r8.s64 = ctx.r8.s32 >> 31;
	// srawi r7,r7,31
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x7FFFFFFF) != 0);
	ctx.r7.s64 = ctx.r7.s32 >> 31;
	// srawi r6,r6,31
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x7FFFFFFF) != 0);
	ctx.r6.s64 = ctx.r6.s32 >> 31;
	// eqv r7,r7,r8
	// eqv r8,r6,r8
	// and r9,r7,r9
	ctx.r9.u64 = ctx.r7.u64 & ctx.r9.u64;
	// or r6,r7,r8
	ctx.r6.u64 = ctx.r7.u64 | ctx.r8.u64;
	// and r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 & ctx.r8.u64;
	// andc r11,r11,r6
	r11.u64 = r11.u64 & ~ctx.r6.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
loc_82733828:
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addze r16,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r16.s64 = temp.s64;
loc_82733830:
	// clrlwi r10,r14,30
	ctx.r10.u64 = r14.u32 & 0x3;
	// lbz r9,31(r30)
	ctx.r9.u64 = PPC_LOAD_U8(r30.u32 + 31);
	// clrlwi r11,r16,30
	r11.u64 = r16.u32 & 0x3;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// addi r8,r11,1
	ctx.r8.s64 = r11.s64 + 1;
	// srawi r11,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	r11.s64 = ctx.r10.s32 >> 2;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// add r11,r11,r14
	r11.u64 = r11.u64 + r14.u64;
	// srawi r14,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r14.s64 = r11.s32 >> 1;
	// srawi r11,r8,2
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x3) != 0);
	r11.s64 = ctx.r8.s32 >> 2;
	// add r11,r11,r16
	r11.u64 = r11.u64 + r16.u64;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// beq cr6,0x827338a4
	if (cr6.eq) goto loc_827338A4;
	// clrlwi r10,r14,31
	ctx.r10.u64 = r14.u32 & 0x1;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x82733884
	if (cr6.eq) goto loc_82733884;
	// cmpwi cr6,r14,0
	cr6.compare<int32_t>(r14.s32, 0, xer);
	// ble cr6,0x82733880
	if (!cr6.gt) goto loc_82733880;
	// addi r14,r14,-1
	r14.s64 = r14.s64 + -1;
	// b 0x82733884
	goto loc_82733884;
loc_82733880:
	// addi r14,r14,1
	r14.s64 = r14.s64 + 1;
loc_82733884:
	// clrlwi r10,r11,31
	ctx.r10.u64 = r11.u32 & 0x1;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x827338a4
	if (cr6.eq) goto loc_827338A4;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x827338a0
	if (!cr6.gt) goto loc_827338A0;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// b 0x827338a4
	goto loc_827338A4;
loc_827338A0:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_827338A4:
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// beq cr6,0x827338bc
	if (cr6.eq) goto loc_827338BC;
	// lwz r10,1516(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 1516);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// addi r11,r11,-2
	r11.s64 = r11.s64 + -2;
loc_827338BC:
	// lwz r8,80(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r9,4(r17)
	ctx.r9.u64 = PPC_LOAD_U32(r17.u32 + 4);
	// clrlwi r11,r14,16
	r11.u64 = r14.u32 & 0xFFFF;
	// rlwinm r6,r8,16,0,15
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 16) & 0xFFFF0000;
	// lwz r7,192(r30)
	ctx.r7.u64 = PPC_LOAD_U32(r30.u32 + 192);
	// add r10,r10,r25
	ctx.r10.u64 = ctx.r10.u64 + r25.u64;
	// rlwinm r5,r9,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// or r9,r6,r15
	ctx.r9.u64 = ctx.r6.u64 | r15.u64;
	// rlwinm r6,r10,16,0,15
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 16) & 0xFFFF0000;
	// srawi r16,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	r16.s64 = ctx.r10.s32 >> 1;
	// or r10,r6,r11
	ctx.r10.u64 = ctx.r6.u64 | r11.u64;
	// rlwinm r9,r9,5,0,26
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 5) & 0xFFFFFFE0;
	// stwx r10,r5,r7
	PPC_STORE_U32(ctx.r5.u32 + ctx.r7.u32, ctx.r10.u32);
	// rlwinm r7,r16,16,0,15
	ctx.r7.u64 = __builtin_rotateleft64(r16.u32 | (r16.u64 << 32), 16) & 0xFFFF0000;
	// lwz r10,1428(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 1428);
	// or r11,r7,r11
	r11.u64 = ctx.r7.u64 | r11.u64;
	// subf r10,r9,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r9.s64;
	// rlwinm r7,r11,1,15,15
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r6,r11,r10
	ctx.r6.s64 = ctx.r10.s64 - r11.s64;
	// subf r10,r7,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r7.s64;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// addis r10,r10,24
	ctx.r10.s64 = ctx.r10.s64 + 1572864;
	// addi r10,r10,20
	ctx.r10.s64 = ctx.r10.s64 + 20;
	// or r10,r10,r6
	ctx.r10.u64 = ctx.r10.u64 | ctx.r6.u64;
	// rlwinm r10,r10,0,0,16
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r10,r10,0,16,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x827339c4
	if (cr6.eq) goto loc_827339C4;
	// lhz r7,52(r30)
	ctx.r7.u64 = PPC_LOAD_U16(r30.u32 + 52);
	// srawi r9,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	ctx.r9.s64 = r11.s32 >> 16;
	// extsh r10,r11
	ctx.r10.s64 = r11.s16;
	// lhz r5,50(r30)
	ctx.r5.u64 = PPC_LOAD_U16(r30.u32 + 50);
	// rotlwi r11,r7,2
	r11.u64 = __builtin_rotateleft32(ctx.r7.u32, 2);
	// rlwinm r6,r15,3,0,28
	ctx.r6.u64 = __builtin_rotateleft64(r15.u32 | (r15.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r4,r11,1
	ctx.r4.s64 = r11.s64 + 1;
	// srawi r11,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	r11.s64 = ctx.r10.s32 >> 2;
	// rlwinm r7,r8,3,0,28
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// srawi r8,r9,2
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3) != 0);
	ctx.r8.s64 = ctx.r9.s32 >> 2;
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// rotlwi r5,r5,2
	ctx.r5.u64 = __builtin_rotateleft32(ctx.r5.u32, 2);
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// cmpwi cr6,r11,-8
	cr6.compare<int32_t>(r11.s32, -8, xer);
	// bge cr6,0x8273397c
	if (!cr6.lt) goto loc_8273397C;
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r10,r11,r10
	ctx.r10.s64 = ctx.r10.s64 - r11.s64;
	// b 0x82733990
	goto loc_82733990;
loc_8273397C:
	// cmpw cr6,r11,r5
	cr6.compare<int32_t>(r11.s32, ctx.r5.s32, xer);
	// ble cr6,0x82733990
	if (!cr6.gt) goto loc_82733990;
	// subf r11,r11,r5
	r11.s64 = ctx.r5.s64 - r11.s64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
loc_82733990:
	// cmpwi cr6,r8,-9
	cr6.compare<int32_t>(ctx.r8.s32, -9, xer);
	// bge cr6,0x827339a8
	if (!cr6.lt) goto loc_827339A8;
	// addi r11,r8,9
	r11.s64 = ctx.r8.s64 + 9;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	// b 0x827339bc
	goto loc_827339BC;
loc_827339A8:
	// cmpw cr6,r8,r4
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r4.s32, xer);
	// ble cr6,0x827339bc
	if (!cr6.gt) goto loc_827339BC;
	// subf r11,r8,r4
	r11.s64 = ctx.r4.s64 - ctx.r8.s64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r11,r9
	ctx.r9.u64 = r11.u64 + ctx.r9.u64;
loc_827339BC:
	// rlwimi r10,r9,16,0,15
	ctx.r10.u64 = (__builtin_rotateleft32(ctx.r9.u32, 16) & 0xFFFF0000) | (ctx.r10.u64 & 0xFFFFFFFF0000FFFF);
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_827339C4:
	// srawi r31,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	r31.s64 = r11.s32 >> 16;
	// lhz r4,92(r30)
	ctx.r4.u64 = PPC_LOAD_U16(r30.u32 + 92);
	// extsh r29,r11
	r29.s64 = r11.s16;
	// lwz r11,12(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 12);
	// srawi r10,r31,2
	xer.ca = (r31.s32 < 0) & ((r31.u32 & 0x3) != 0);
	ctx.r10.s64 = r31.s32 >> 2;
	// srawi r8,r29,2
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x3) != 0);
	ctx.r8.s64 = r29.s32 >> 2;
	// mullw r10,r10,r4
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r4.s32);
	// cmpwi cr6,r25,1
	cr6.compare<int32_t>(r25.s32, 1, xer);
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// bne cr6,0x827339f4
	if (!cr6.eq) goto loc_827339F4;
	// lwz r9,336(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 336);
	// b 0x827339f8
	goto loc_827339F8;
loc_827339F4:
	// lwz r9,312(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 312);
loc_827339F8:
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// add r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 + r11.u64;
	// li r10,128
	ctx.r10.s64 = 128;
	// dcbt r10,r3
	// addi r10,r4,128
	ctx.r10.s64 = ctx.r4.s64 + 128;
	// dcbt r10,r3
	// addi r10,r4,64
	ctx.r10.s64 = ctx.r4.s64 + 64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r10,r3
	// rlwinm r10,r4,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 + ctx.r10.u64;
	// addi r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 128;
	// dcbt r10,r3
	// addi r10,r4,32
	ctx.r10.s64 = ctx.r4.s64 + 32;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r10,r3
	// rlwinm r10,r4,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 + ctx.r10.u64;
	// addi r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 128;
	// dcbt r10,r3
	// rlwinm r10,r4,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 + ctx.r10.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 128;
	// dcbt r10,r3
	// rlwinm r10,r4,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r10,r4,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r4.s64;
	// addi r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 128;
	// dcbt r10,r3
	// rlwinm r9,r29,2,28,29
	ctx.r9.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 2) & 0xC;
	// lwz r10,408(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 408);
	// clrlwi r8,r31,30
	ctx.r8.u64 = r31.u32 & 0x3;
	// add r5,r10,r11
	ctx.r5.u64 = ctx.r10.u64 + r11.u64;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r9,r9,182
	ctx.r9.s64 = ctx.r9.s64 + 182;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// rlwinm r11,r9,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r30
	r11.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lhz r4,92(r30)
	ctx.r4.u64 = PPC_LOAD_U16(r30.u32 + 92);
	// srawi r10,r31,2
	xer.ca = (r31.s32 < 0) & ((r31.u32 & 0x3) != 0);
	ctx.r10.s64 = r31.s32 >> 2;
	// lwz r11,12(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 12);
	// srawi r8,r29,2
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x3) != 0);
	ctx.r8.s64 = r29.s32 >> 2;
	// mullw r10,r10,r4
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r4.s32);
	// cmpwi cr6,r25,1
	cr6.compare<int32_t>(r25.s32, 1, xer);
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// bne cr6,0x82733ac4
	if (!cr6.eq) goto loc_82733AC4;
	// lwz r9,340(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 340);
	// b 0x82733ac8
	goto loc_82733AC8;
loc_82733AC4:
	// lwz r9,316(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + 316);
loc_82733AC8:
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// add r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 + r11.u64;
	// li r10,128
	ctx.r10.s64 = 128;
	// dcbt r10,r3
	// addi r10,r4,128
	ctx.r10.s64 = ctx.r4.s64 + 128;
	// dcbt r10,r3
	// addi r10,r4,64
	ctx.r10.s64 = ctx.r4.s64 + 64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r10,r3
	// rlwinm r10,r4,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 + ctx.r10.u64;
	// addi r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 128;
	// dcbt r10,r3
	// addi r10,r4,32
	ctx.r10.s64 = ctx.r4.s64 + 32;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r10,r3
	// rlwinm r10,r4,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 + ctx.r10.u64;
	// addi r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 128;
	// dcbt r10,r3
	// rlwinm r10,r4,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 + ctx.r10.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 128;
	// dcbt r10,r3
	// rlwinm r10,r4,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r10,r4,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r4.s64;
	// addi r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 128;
	// dcbt r10,r3
	// rlwinm r9,r29,2,28,29
	ctx.r9.u64 = __builtin_rotateleft64(r29.u32 | (r29.u64 << 32), 2) & 0xC;
	// lwz r10,412(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 412);
	// clrlwi r8,r31,30
	ctx.r8.u64 = r31.u32 & 0x3;
	// add r5,r10,r11
	ctx.r5.u64 = ctx.r10.u64 + r11.u64;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r9,r9,182
	ctx.r9.s64 = ctx.r9.s64 + 182;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// rlwinm r11,r9,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r30
	r11.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r18,196(r1)
	r18.u64 = PPC_LOAD_U32(ctx.r1.u32 + 196);
	// lwz r21,104(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lwz r20,176(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// lwz r22,80(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_82733B7C:
	// lhz r10,18(r17)
	ctx.r10.u64 = PPC_LOAD_U16(r17.u32 + 18);
	// addi r15,r15,1
	r15.s64 = r15.s64 + 1;
	// lwz r11,0(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 0);
	// addi r8,r10,2
	ctx.r8.s64 = ctx.r10.s64 + 2;
	// lwz r9,4(r17)
	ctx.r9.u64 = PPC_LOAD_U32(r17.u32 + 4);
	// addi r7,r11,2
	ctx.r7.s64 = r11.s64 + 2;
	// lwz r10,8(r17)
	ctx.r10.u64 = PPC_LOAD_U32(r17.u32 + 8);
	// lwz r11,12(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 12);
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// addi r10,r10,16
	ctx.r10.s64 = ctx.r10.s64 + 16;
	// stw r15,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r15.u32);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// sth r8,18(r17)
	PPC_STORE_U16(r17.u32 + 18, ctx.r8.u16);
	// cmplw cr6,r15,r20
	cr6.compare<uint32_t>(r15.u32, r20.u32, xer);
	// stw r7,0(r17)
	PPC_STORE_U32(r17.u32 + 0, ctx.r7.u32);
	// stw r9,4(r17)
	PPC_STORE_U32(r17.u32 + 4, ctx.r9.u32);
	// stw r10,8(r17)
	PPC_STORE_U32(r17.u32 + 8, ctx.r10.u32);
	// stw r11,12(r17)
	PPC_STORE_U32(r17.u32 + 12, r11.u32);
	// blt cr6,0x82732898
	if (cr6.lt) goto loc_82732898;
loc_82733BC8:
	// lhz r11,16(r17)
	r11.u64 = PPC_LOAD_U16(r17.u32 + 16);
	// addi r22,r22,1
	r22.s64 = r22.s64 + 1;
	// lwz r8,88(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// lwz r9,180(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r10,0(r17)
	ctx.r10.u64 = PPC_LOAD_U32(r17.u32 + 0);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// lwz r8,92(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r22,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r22.u32);
	// sth r11,16(r17)
	PPC_STORE_U16(r17.u32 + 16, r11.u16);
	// lhz r11,50(r30)
	r11.u64 = PPC_LOAD_U16(r30.u32 + 50);
	// stw r9,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r9.u32);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// lwz r9,184(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// stw r11,0(r17)
	PPC_STORE_U32(r17.u32 + 0, r11.u32);
	// lwz r11,192(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 192);
	// stw r9,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r9.u32);
	// cmplw cr6,r22,r11
	cr6.compare<uint32_t>(r22.u32, r11.u32, xer);
	// blt cr6,0x82732874
	if (cr6.lt) goto loc_82732874;
loc_82733C18:
	// addi r4,r1,208
	ctx.r4.s64 = ctx.r1.s64 + 208;
	// lwz r3,96(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// bl 0x8271d940
	sub_8271D940(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,1904
	ctx.r1.s64 = ctx.r1.s64 + 1904;
	// b 0x8239bd10
	return;
}

__attribute__((alias("__imp__sub_82733C30"))) PPC_WEAK_FUNC(sub_82733C30);
PPC_FUNC_IMPL(__imp__sub_82733C30) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x8239bcc0
	// stwu r1,-2720(r1)
	ea = -2720 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// addi r11,r31,1320
	r11.s64 = r31.s64 + 1320;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r28,0
	r28.s64 = 0;
	// lwz r10,1248(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1248);
	// stw r29,2756(r1)
	PPC_STORE_U32(ctx.r1.u32 + 2756, r29.u32);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// stw r10,636(r1)
	PPC_STORE_U32(ctx.r1.u32 + 636, ctx.r10.u32);
	// beq cr6,0x82733c74
	if (cr6.eq) goto loc_82733C74;
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// mr r27,r28
	r27.u64 = r28.u64;
	// bne cr6,0x82733c78
	if (!cr6.eq) goto loc_82733C78;
loc_82733C74:
	// li r27,1
	r27.s64 = 1;
loc_82733C78:
	// addi r4,r30,21712
	ctx.r4.s64 = r30.s64 + 21712;
	// stw r27,620(r1)
	PPC_STORE_U32(ctx.r1.u32 + 620, r27.u32);
	// lis r11,-32126
	r11.s64 = -2105409536;
	// stw r4,880(r1)
	PPC_STORE_U32(ctx.r1.u32 + 880, ctx.r4.u32);
	// lwz r3,3360(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 3360);
	// bl 0x8271d5f8
	sub_8271D5F8(ctx, base);
	// addi r11,r29,4
	r11.s64 = r29.s64 + 4;
	// stw r28,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r28.u32);
	// addi r10,r29,16
	ctx.r10.s64 = r29.s64 + 16;
	// stw r28,608(r1)
	PPC_STORE_U32(ctx.r1.u32 + 608, r28.u32);
	// addi r8,r31,50
	ctx.r8.s64 = r31.s64 + 50;
	// stw r28,596(r1)
	PPC_STORE_U32(ctx.r1.u32 + 596, r28.u32);
	// addi r9,r31,1516
	ctx.r9.s64 = r31.s64 + 1516;
	// addi r6,r31,74
	ctx.r6.s64 = r31.s64 + 74;
	// addi r7,r31,52
	ctx.r7.s64 = r31.s64 + 52;
	// stw r28,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r28.u32);
	// sth r28,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, r28.u16);
	// addi r5,r31,76
	ctx.r5.s64 = r31.s64 + 76;
	// lhz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// lwz r11,0(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// lhz r8,0(r6)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r6.u32 + 0);
	// rlwinm r6,r10,31,1,31
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// lhz r9,0(r7)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r7.u32 + 0);
	// subfic r10,r11,2
	xer.ca = r11.u32 <= 2;
	ctx.r10.s64 = 2 - r11.s64;
	// lhz r7,0(r5)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r5.u32 + 0);
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r9,r9,31,1,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 31) & 0x7FFFFFFF;
	// stw r6,632(r1)
	PPC_STORE_U32(ctx.r1.u32 + 632, ctx.r6.u32);
	// stw r10,848(r1)
	PPC_STORE_U32(ctx.r1.u32 + 848, ctx.r10.u32);
	// stw r9,864(r1)
	PPC_STORE_U32(ctx.r1.u32 + 864, ctx.r9.u32);
	// stw r10,440(r1)
	PPC_STORE_U32(ctx.r1.u32 + 440, ctx.r10.u32);
	// beq cr6,0x82733d0c
	if (cr6.eq) goto loc_82733D0C;
	// rlwinm r5,r11,1,0,30
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r10,r5,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r5.s64;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stw r10,440(r1)
	PPC_STORE_U32(ctx.r1.u32 + 440, ctx.r10.u32);
loc_82733D0C:
	// mullw r11,r11,r9
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r9.s32);
	// lwz r10,268(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + 268);
	// mullw r11,r11,r6
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r6.s32);
	// stw r28,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r28.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r11,436(r1)
	PPC_STORE_U32(ctx.r1.u32 + 436, r11.u32);
	// beq cr6,0x82739804
	if (cr6.eq) goto loc_82739804;
	// lwz r11,2756(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2756);
	// addi r5,r11,8
	ctx.r5.s64 = r11.s64 + 8;
	// addi r10,r11,12
	ctx.r10.s64 = r11.s64 + 12;
	// addi r9,r11,18
	ctx.r9.s64 = r11.s64 + 18;
	// rlwinm r11,r8,4,0,27
	r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 4) & 0xFFFFFFF0;
	// stw r11,884(r1)
	PPC_STORE_U32(ctx.r1.u32 + 884, r11.u32);
	// rlwinm r11,r7,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 3) & 0xFFFFFFF8;
	// stw r11,872(r1)
	PPC_STORE_U32(ctx.r1.u32 + 872, r11.u32);
loc_82733D58:
	// lwz r8,632(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 632);
	// li r11,0
	r11.s64 = 0;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// lwz r8,608(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 608);
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r11.u32);
	// sth r11,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, r11.u16);
	// stw r8,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, ctx.r8.u32);
	// lwz r8,596(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 596);
	// stw r8,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r8.u32);
	// beq cr6,0x827397a4
	if (cr6.eq) goto loc_827397A4;
loc_82733D80:
	// lwz r11,2756(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2756);
	// addi r25,r31,188
	r25.s64 = r31.s64 + 188;
	// lwz r10,636(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 636);
	// lwz r16,0(r11)
	r16.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// ld r11,0(r10)
	r11.u64 = PPC_LOAD_U64(ctx.r10.u32 + 0);
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// lwz r14,0(r25)
	r14.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// stw r16,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, r16.u32);
	// stw r10,636(r1)
	PPC_STORE_U32(ctx.r1.u32 + 636, ctx.r10.u32);
	// rlwinm r10,r16,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(r16.u32 | (r16.u64 << 32), 2) & 0xFFFFFFFC;
	// stw r14,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, r14.u32);
	// lwzx r10,r10,r14
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + r14.u32);
	// cmpwi cr6,r10,16384
	cr6.compare<int32_t>(ctx.r10.s32, 16384, xer);
	// beq cr6,0x82739730
	if (cr6.eq) goto loc_82739730;
	// rldicl r11,r11,9,55
	r11.u64 = __builtin_rotateleft64(r11.u64, 9) & 0x1FF;
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lwz r11,436(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 436);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r31,50
	r11.s64 = r31.s64 + 50;
	// beq cr6,0x82737f14
	if (cr6.eq) goto loc_82737F14;
	// lhz r15,0(r11)
	r15.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rlwinm r10,r10,27,29,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x7;
	// lwz r11,2756(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2756);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r15,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r15.u32);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// stw r11,492(r1)
	PPC_STORE_U32(ctx.r1.u32 + 492, r11.u32);
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// rlwinm r17,r11,1,0,30
	r17.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r10,-1
	r11.s64 = ctx.r10.s64 + -1;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// stw r11,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, r11.u32);
	// bgt cr6,0x82736764
	if (cr6.gt) goto loc_82736764;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lis r12,-32141
	r12.s64 = -2106392576;
	// addi r12,r12,15916
	r12.s64 = r12.s64 + 15916;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_82735D5C;
	case 1:
		goto loc_8273485C;
	case 2:
		goto loc_82735330;
	case 3:
		goto loc_82733E3C;
	default:
		__builtin_unreachable();
	}
	// lwz r19,23900(r19)
	r19.u64 = PPC_LOAD_U32(r19.u32 + 23900);
	// lwz r19,18524(r19)
	r19.u64 = PPC_LOAD_U32(r19.u32 + 18524);
	// lwz r19,21296(r19)
	r19.u64 = PPC_LOAD_U32(r19.u32 + 21296);
	// lwz r19,15932(r19)
	r19.u64 = PPC_LOAD_U32(r19.u32 + 15932);
loc_82733E3C:
	// rlwinm r11,r16,2,0,29
	r11.u64 = __builtin_rotateleft64(r16.u32 | (r16.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r27,1496(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lwz r26,1492(r31)
	r26.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// srawi r21,r15,1
	xer.ca = (r15.s32 < 0) & ((r15.u32 & 0x1) != 0);
	r21.s64 = r15.s32 >> 1;
	// add r19,r11,r14
	r19.u64 = r11.u64 + r14.u64;
	// clrlwi r11,r9,31
	r11.u64 = ctx.r9.u32 & 0x1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// lwz r23,0(r19)
	r23.u64 = PPC_LOAD_U32(r19.u32 + 0);
	// stw r23,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r23.u32);
	// bne cr6,0x82733e90
	if (!cr6.eq) goto loc_82733E90;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x82733e84
	if (cr6.eq) goto loc_82733E84;
	// srawi r10,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r9.s32 >> 1;
	// lwz r11,1240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1240);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82733e90
	if (cr6.eq) goto loc_82733E90;
loc_82733E84:
	// li r29,1
	r29.s64 = 1;
	// li r20,0
	r20.s64 = 0;
	// b 0x82733e98
	goto loc_82733E98;
loc_82733E90:
	// li r20,0
	r20.s64 = 0;
	// mr r29,r20
	r29.u64 = r20.u64;
loc_82733E98:
	// addi r22,r31,1516
	r22.s64 = r31.s64 + 1516;
	// stw r20,192(r1)
	PPC_STORE_U32(ctx.r1.u32 + 192, r20.u32);
	// lis r10,-32145
	ctx.r10.s64 = -2106654720;
	// stw r20,188(r1)
	PPC_STORE_U32(ctx.r1.u32 + 188, r20.u32);
	// lis r11,-32145
	r11.s64 = -2106654720;
	// stw r20,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, r20.u32);
	// lis r8,1
	ctx.r8.s64 = 65536;
	// stw r20,380(r1)
	PPC_STORE_U32(ctx.r1.u32 + 380, r20.u32);
	// srawi r24,r23,16
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0xFFFF) != 0);
	r24.s64 = r23.s32 >> 16;
	// stw r20,376(r1)
	PPC_STORE_U32(ctx.r1.u32 + 376, r20.u32);
	// lwz r9,0(r22)
	ctx.r9.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// addi r10,r10,-22616
	ctx.r10.s64 = ctx.r10.s64 + -22616;
	// addi r11,r11,-22296
	r11.s64 = r11.s64 + -22296;
	// rlwinm r9,r9,17,0,14
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 17) & 0xFFFE0000;
	// mr r25,r20
	r25.u64 = r20.u64;
	// subf r9,r9,r8
	ctx.r9.s64 = ctx.r8.s64 - ctx.r9.s64;
	// stw r24,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r24.u32);
	// mr r18,r20
	r18.u64 = r20.u64;
	// stw r10,1620(r31)
	PPC_STORE_U32(r31.u32 + 1620, ctx.r10.u32);
	// mr r30,r20
	r30.u64 = r20.u64;
	// stw r11,1624(r31)
	PPC_STORE_U32(r31.u32 + 1624, r11.u32);
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// stw r25,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r25.u32);
	// stw r9,384(r1)
	PPC_STORE_U32(ctx.r1.u32 + 384, ctx.r9.u32);
	// beq cr6,0x82733f70
	if (cr6.eq) goto loc_82733F70;
	// addi r11,r16,-1
	r11.s64 = r16.s64 + -1;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r26,r11
	ctx.r10.u64 = PPC_LOAD_U16(r26.u32 + r11.u32);
	// lhzx r11,r27,r11
	r11.u64 = PPC_LOAD_U16(r27.u32 + r11.u32);
	// sth r10,150(r1)
	PPC_STORE_U16(ctx.r1.u32 + 150, ctx.r10.u16);
	// sth r11,148(r1)
	PPC_STORE_U16(ctx.r1.u32 + 148, r11.u16);
	// lwz r4,148(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// clrlwi r11,r4,16
	r11.u64 = ctx.r4.u32 & 0xFFFF;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x82733f70
	if (cr6.eq) goto loc_82733F70;
	// rlwinm r11,r4,0,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x10000;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82733f54
	if (cr6.eq) goto loc_82733F54;
	// lwz r11,1620(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1620);
	// stw r4,376(r1)
	PPC_STORE_U32(ctx.r1.u32 + 376, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// li r25,1
	r25.s64 = 1;
	// stw r3,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, ctx.r3.u32);
	// stw r25,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r25.u32);
	// b 0x82733f6c
	goto loc_82733F6C;
loc_82733F54:
	// lwz r11,1624(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1624);
	// stw r4,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// stw r3,376(r1)
	PPC_STORE_U32(ctx.r1.u32 + 376, ctx.r3.u32);
	// li r18,1
	r18.s64 = 1;
loc_82733F6C:
	// li r30,1
	r30.s64 = 1;
loc_82733F70:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// bne cr6,0x82734094
	if (!cr6.eq) goto loc_82734094;
	// subf r28,r15,r16
	r28.s64 = r16.s64 - r15.s64;
	// rlwinm r11,r28,1,0,30
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r26,r11
	ctx.r10.u64 = PPC_LOAD_U16(r26.u32 + r11.u32);
	// lhzx r11,r27,r11
	r11.u64 = PPC_LOAD_U16(r27.u32 + r11.u32);
	// sth r10,150(r1)
	PPC_STORE_U16(ctx.r1.u32 + 150, ctx.r10.u16);
	// sth r11,148(r1)
	PPC_STORE_U16(ctx.r1.u32 + 148, r11.u16);
	// lwz r4,148(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// clrlwi r11,r4,16
	r11.u64 = ctx.r4.u32 & 0xFFFF;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x82733ffc
	if (cr6.eq) goto loc_82733FFC;
	// rlwinm r11,r4,0,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x10000;
	// rlwinm r29,r30,2,0,29
	r29.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq cr6,0x82733fd8
	if (cr6.eq) goto loc_82733FD8;
	// addi r11,r1,376
	r11.s64 = ctx.r1.s64 + 376;
	// lwz r10,1620(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1620);
	// stwx r4,r29,r11
	PPC_STORE_U32(r29.u32 + r11.u32, ctx.r4.u32);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r25,r25,1
	r25.s64 = r25.s64 + 1;
	// addi r11,r1,184
	r11.s64 = ctx.r1.s64 + 184;
	// stw r25,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r25.u32);
	// b 0x82733ff4
	goto loc_82733FF4;
loc_82733FD8:
	// addi r10,r1,184
	ctx.r10.s64 = ctx.r1.s64 + 184;
	// lwz r11,1624(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1624);
	// stwx r4,r29,r10
	PPC_STORE_U32(r29.u32 + ctx.r10.u32, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r11,r1,376
	r11.s64 = ctx.r1.s64 + 376;
	// addi r18,r18,1
	r18.s64 = r18.s64 + 1;
loc_82733FF4:
	// stwx r3,r29,r11
	PPC_STORE_U32(r29.u32 + r11.u32, ctx.r3.u32);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
loc_82733FFC:
	// cmpwi cr6,r21,1
	cr6.compare<int32_t>(r21.s32, 1, xer);
	// ble cr6,0x82734094
	if (!cr6.gt) goto loc_82734094;
	// addi r11,r15,-2
	r11.s64 = r15.s64 + -2;
	// cmpw cr6,r17,r11
	cr6.compare<int32_t>(r17.s32, r11.s32, xer);
	// addi r11,r28,2
	r11.s64 = r28.s64 + 2;
	// bne cr6,0x82734018
	if (!cr6.eq) goto loc_82734018;
	// addi r11,r28,-2
	r11.s64 = r28.s64 + -2;
loc_82734018:
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r26,r11
	ctx.r10.u64 = PPC_LOAD_U16(r26.u32 + r11.u32);
	// lhzx r11,r27,r11
	r11.u64 = PPC_LOAD_U16(r27.u32 + r11.u32);
	// sth r10,150(r1)
	PPC_STORE_U16(ctx.r1.u32 + 150, ctx.r10.u16);
	// sth r11,148(r1)
	PPC_STORE_U16(ctx.r1.u32 + 148, r11.u16);
	// lwz r4,148(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// clrlwi r11,r4,16
	r11.u64 = ctx.r4.u32 & 0xFFFF;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x82734094
	if (cr6.eq) goto loc_82734094;
	// rlwinm r11,r4,0,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x10000;
	// rlwinm r30,r30,2,0,29
	r30.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq cr6,0x82734074
	if (cr6.eq) goto loc_82734074;
	// addi r11,r1,376
	r11.s64 = ctx.r1.s64 + 376;
	// lwz r10,1620(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1620);
	// stwx r4,r30,r11
	PPC_STORE_U32(r30.u32 + r11.u32, ctx.r4.u32);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r25,r25,1
	r25.s64 = r25.s64 + 1;
	// addi r11,r1,184
	r11.s64 = ctx.r1.s64 + 184;
	// stw r25,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r25.u32);
	// b 0x82734090
	goto loc_82734090;
loc_82734074:
	// addi r10,r1,184
	ctx.r10.s64 = ctx.r1.s64 + 184;
	// lwz r11,1624(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1624);
	// stwx r4,r30,r10
	PPC_STORE_U32(r30.u32 + ctx.r10.u32, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r11,r1,376
	r11.s64 = ctx.r1.s64 + 376;
	// addi r18,r18,1
	r18.s64 = r18.s64 + 1;
loc_82734090:
	// stwx r3,r30,r11
	PPC_STORE_U32(r30.u32 + r11.u32, ctx.r3.u32);
loc_82734094:
	// mr r10,r20
	ctx.r10.u64 = r20.u64;
	// add r11,r25,r18
	r11.u64 = r25.u64 + r18.u64;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// stw r10,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r10.u32);
	// ble cr6,0x82734208
	if (!cr6.gt) goto loc_82734208;
	// lhz r11,190(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 190);
	// lhz r10,186(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 186);
	// lhz r3,194(r1)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r1.u32 + 194);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lhz r9,188(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 188);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// lhz r8,184(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 184);
	// extsh r3,r3
	ctx.r3.s64 = ctx.r3.s16;
	// lhz r30,192(r1)
	r30.u64 = PPC_LOAD_U16(ctx.r1.u32 + 192);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// lhz r7,382(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 382);
	// extsh r30,r30
	r30.s64 = r30.s16;
	// lhz r6,378(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 378);
	// subf r27,r10,r11
	r27.s64 = r11.s64 - ctx.r10.s64;
	// lhz r29,386(r1)
	r29.u64 = PPC_LOAD_U16(ctx.r1.u32 + 386);
	// subf r23,r3,r11
	r23.s64 = r11.s64 - ctx.r3.s64;
	// lhz r5,380(r1)
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r1.u32 + 380);
	// subf r22,r10,r3
	r22.s64 = ctx.r3.s64 - ctx.r10.s64;
	// lhz r4,376(r1)
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r1.u32 + 376);
	// subf r26,r8,r9
	r26.s64 = ctx.r9.s64 - ctx.r8.s64;
	// lhz r28,384(r1)
	r28.u64 = PPC_LOAD_U16(ctx.r1.u32 + 384);
	// subf r21,r30,r9
	r21.s64 = ctx.r9.s64 - r30.s64;
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// subf r20,r8,r30
	r20.s64 = r30.s64 - ctx.r8.s64;
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// extsh r29,r29
	r29.s64 = r29.s16;
	// xor r23,r23,r27
	r23.u64 = r23.u64 ^ r27.u64;
	// xor r22,r22,r27
	r22.u64 = r22.u64 ^ r27.u64;
	// xor r21,r21,r26
	r21.u64 = r21.u64 ^ r26.u64;
	// extsh r4,r4
	ctx.r4.s64 = ctx.r4.s16;
	// extsh r5,r5
	ctx.r5.s64 = ctx.r5.s16;
	// extsh r28,r28
	r28.s64 = r28.s16;
	// subf r25,r6,r7
	r25.s64 = ctx.r7.s64 - ctx.r6.s64;
	// xor r20,r20,r26
	r20.u64 = r20.u64 ^ r26.u64;
	// srawi r27,r23,31
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x7FFFFFFF) != 0);
	r27.s64 = r23.s32 >> 31;
	// subf r17,r29,r7
	r17.s64 = ctx.r7.s64 - r29.s64;
	// subf r16,r6,r29
	r16.s64 = r29.s64 - ctx.r6.s64;
	// srawi r26,r22,31
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x7FFFFFFF) != 0);
	r26.s64 = r22.s32 >> 31;
	// subf r24,r4,r5
	r24.s64 = ctx.r5.s64 - ctx.r4.s64;
	// srawi r23,r21,31
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x7FFFFFFF) != 0);
	r23.s64 = r21.s32 >> 31;
	// subf r15,r28,r5
	r15.s64 = ctx.r5.s64 - r28.s64;
	// subf r14,r4,r28
	r14.s64 = r28.s64 - ctx.r4.s64;
	// xor r22,r17,r25
	r22.u64 = r17.u64 ^ r25.u64;
	// xor r21,r16,r25
	r21.u64 = r16.u64 ^ r25.u64;
	// srawi r25,r20,31
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x7FFFFFFF) != 0);
	r25.s64 = r20.s32 >> 31;
	// xor r20,r15,r24
	r20.u64 = r15.u64 ^ r24.u64;
	// xor r17,r14,r24
	r17.u64 = r14.u64 ^ r24.u64;
	// srawi r22,r22,31
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x7FFFFFFF) != 0);
	r22.s64 = r22.s32 >> 31;
	// srawi r24,r21,31
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x7FFFFFFF) != 0);
	r24.s64 = r21.s32 >> 31;
	// srawi r21,r20,31
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x7FFFFFFF) != 0);
	r21.s64 = r20.s32 >> 31;
	// srawi r20,r17,31
	xer.ca = (r17.s32 < 0) & ((r17.u32 & 0x7FFFFFFF) != 0);
	r20.s64 = r17.s32 >> 31;
	// and r10,r26,r10
	ctx.r10.u64 = r26.u64 & ctx.r10.u64;
	// or r17,r27,r26
	r17.u64 = r27.u64 | r26.u64;
	// or r26,r23,r25
	r26.u64 = r23.u64 | r25.u64;
	// and r9,r9,r23
	ctx.r9.u64 = ctx.r9.u64 & r23.u64;
	// andc r30,r30,r26
	r30.u64 = r30.u64 & ~r26.u64;
	// or r26,r22,r24
	r26.u64 = r22.u64 | r24.u64;
	// or r23,r21,r20
	r23.u64 = r21.u64 | r20.u64;
	// andc r3,r3,r17
	ctx.r3.u64 = ctx.r3.u64 & ~r17.u64;
	// and r6,r24,r6
	ctx.r6.u64 = r24.u64 & ctx.r6.u64;
	// lwz r24,104(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// andc r29,r29,r26
	r29.u64 = r29.u64 & ~r26.u64;
	// andc r28,r28,r23
	r28.u64 = r28.u64 & ~r23.u64;
	// and r4,r20,r4
	ctx.r4.u64 = r20.u64 & ctx.r4.u64;
	// or r10,r3,r10
	ctx.r10.u64 = ctx.r3.u64 | ctx.r10.u64;
	// and r11,r27,r11
	r11.u64 = r27.u64 & r11.u64;
	// or r9,r30,r9
	ctx.r9.u64 = r30.u64 | ctx.r9.u64;
	// and r8,r8,r25
	ctx.r8.u64 = ctx.r8.u64 & r25.u64;
	// or r6,r29,r6
	ctx.r6.u64 = r29.u64 | ctx.r6.u64;
	// and r7,r22,r7
	ctx.r7.u64 = r22.u64 & ctx.r7.u64;
	// or r4,r28,r4
	ctx.r4.u64 = r28.u64 | ctx.r4.u64;
	// and r5,r21,r5
	ctx.r5.u64 = r21.u64 & ctx.r5.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// or r10,r9,r8
	ctx.r10.u64 = ctx.r9.u64 | ctx.r8.u64;
	// or r9,r6,r7
	ctx.r9.u64 = ctx.r6.u64 | ctx.r7.u64;
	// or r8,r4,r5
	ctx.r8.u64 = ctx.r4.u64 | ctx.r5.u64;
	// sth r11,486(r1)
	PPC_STORE_U16(ctx.r1.u32 + 486, r11.u16);
	// sth r10,484(r1)
	PPC_STORE_U16(ctx.r1.u32 + 484, ctx.r10.u16);
	// sth r9,450(r1)
	PPC_STORE_U16(ctx.r1.u32 + 450, ctx.r9.u16);
	// sth r8,448(r1)
	PPC_STORE_U16(ctx.r1.u32 + 448, ctx.r8.u16);
	// lwz r15,124(r1)
	r15.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// lwz r16,164(r1)
	r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// lwz r14,168(r1)
	r14.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// lwz r10,128(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// lwz r25,100(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r23,108(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// b 0x82734234
	goto loc_82734234;
loc_82734208:
	// bne cr6,0x8273421c
	if (!cr6.eq) goto loc_8273421C;
	// lwz r11,184(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// stw r11,484(r1)
	PPC_STORE_U32(ctx.r1.u32 + 484, r11.u32);
	// lwz r11,376(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 376);
	// b 0x82734230
	goto loc_82734230;
loc_8273421C:
	// lwz r11,0(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// lis r9,1
	ctx.r9.s64 = 65536;
	// stw r20,484(r1)
	PPC_STORE_U32(ctx.r1.u32 + 484, r20.u32);
	// rlwinm r11,r11,17,0,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 17) & 0xFFFE0000;
	// subf r11,r11,r9
	r11.s64 = ctx.r9.s64 - r11.s64;
loc_82734230:
	// stw r11,448(r1)
	PPC_STORE_U32(ctx.r1.u32 + 448, r11.u32);
loc_82734234:
	// lwz r11,1508(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1508);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82734250
	if (cr6.eq) goto loc_82734250;
	// cmpw cr6,r18,r25
	cr6.compare<int32_t>(r18.s32, r25.s32, xer);
	// ble cr6,0x8273425c
	if (!cr6.gt) goto loc_8273425C;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82734260
	if (!cr6.eq) goto loc_82734260;
loc_82734250:
	// lwz r11,1512(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1512);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82734260
	if (cr6.eq) goto loc_82734260;
loc_8273425C:
	// li r10,1
	ctx.r10.s64 = 1;
loc_82734260:
	// clrlwi r9,r24,31
	ctx.r9.u64 = r24.u32 & 0x1;
	// lwz r8,448(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 448);
	// xor r11,r10,r9
	r11.u64 = ctx.r10.u64 ^ ctx.r9.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82734278
	if (!cr6.eq) goto loc_82734278;
	// lwz r8,484(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 484);
loc_82734278:
	// rlwinm r9,r9,16,0,15
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 16) & 0xFFFF0000;
	// lhz r7,66(r31)
	ctx.r7.u64 = PPC_LOAD_U16(r31.u32 + 66);
	// lhz r11,62(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 62);
	// add r10,r15,r16
	ctx.r10.u64 = r15.u64 + r16.u64;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// extsh r6,r7
	ctx.r6.s64 = ctx.r7.s16;
	// extsh r7,r11
	ctx.r7.s64 = r11.s16;
	// mr r5,r11
	ctx.r5.u64 = r11.u64;
	// rlwinm r29,r10,1,0,30
	r29.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// stw r9,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r9.u32);
	// rlwinm r30,r16,1,0,30
	r30.u64 = __builtin_rotateleft64(r16.u32 | (r16.u64 << 32), 1) & 0xFFFFFFFE;
	// lhz r9,150(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 150);
	// extsh r8,r9
	ctx.r8.s64 = ctx.r9.s16;
	// lhz r9,148(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 148);
	// add r11,r8,r7
	r11.u64 = ctx.r8.u64 + ctx.r7.u64;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// add r8,r11,r23
	ctx.r8.u64 = r11.u64 + r23.u64;
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// and r8,r8,r6
	ctx.r8.u64 = ctx.r8.u64 & ctx.r6.u64;
	// add r10,r11,r14
	ctx.r10.u64 = r11.u64 + r14.u64;
	// subf r11,r5,r8
	r11.s64 = ctx.r8.s64 - ctx.r5.s64;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// sth r11,2(r19)
	PPC_STORE_U16(r19.u32 + 2, r11.u16);
	// lwz r8,1492(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// add r8,r29,r8
	ctx.r8.u64 = r29.u64 + ctx.r8.u64;
	// sth r11,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, r11.u16);
	// lwz r11,1492(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// lhz r8,2(r11)
	ctx.r8.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r8,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r8.u16);
	// lwz r11,1492(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// lhzx r8,r29,r11
	ctx.r8.u64 = PPC_LOAD_U16(r29.u32 + r11.u32);
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// sth r8,2(r11)
	PPC_STORE_U16(r11.u32 + 2, ctx.r8.u16);
	// lwz r11,1492(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// lhz r8,2(r11)
	ctx.r8.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r8,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r8.u16);
	// lwz r7,1492(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// lhz r8,68(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 68);
	// lhz r11,64(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 64);
	// extsh r6,r8
	ctx.r6.s64 = ctx.r8.s16;
	// lhzx r8,r30,r7
	ctx.r8.u64 = PPC_LOAD_U16(r30.u32 + ctx.r7.u32);
	// mr r7,r11
	ctx.r7.u64 = r11.u64;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// stw r8,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r8.u32);
	// extsh r8,r11
	ctx.r8.s64 = r11.s16;
	// add r11,r9,r8
	r11.u64 = ctx.r9.u64 + ctx.r8.u64;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// and r11,r11,r6
	r11.u64 = r11.u64 & ctx.r6.u64;
	// subf r11,r7,r11
	r11.s64 = r11.s64 - ctx.r7.s64;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// sth r11,0(r19)
	PPC_STORE_U16(r19.u32 + 0, r11.u16);
	// lwz r9,1496(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// add r9,r29,r9
	ctx.r9.u64 = r29.u64 + ctx.r9.u64;
	// sth r11,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, r11.u16);
	// lwz r11,1496(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// lhz r9,2(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r9,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r9.u16);
	// lwz r11,1496(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lhzx r9,r29,r11
	ctx.r9.u64 = PPC_LOAD_U16(r29.u32 + r11.u32);
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// sth r9,2(r11)
	PPC_STORE_U16(r11.u32 + 2, ctx.r9.u16);
	// lwz r11,1496(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// lhz r9,2(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r9,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r9.u16);
	// lwz r9,1496(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lwz r11,0(r19)
	r11.u64 = PPC_LOAD_U32(r19.u32 + 0);
	// lhzx r9,r30,r9
	ctx.r9.u64 = PPC_LOAD_U16(r30.u32 + ctx.r9.u32);
	// stw r11,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r11.u32);
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// stw r11,4(r19)
	PPC_STORE_U32(r19.u32 + 4, r11.u32);
	// addi r11,r31,50
	r11.s64 = r31.s64 + 50;
	// lwz r25,1504(r31)
	r25.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// stw r9,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r9.u32);
	// lhz r27,0(r11)
	r27.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// clrlwi r10,r11,31
	ctx.r10.u64 = r11.u32 & 0x1;
	// lwz r24,1500(r31)
	r24.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// srawi r20,r27,1
	xer.ca = (r27.s32 < 0) & ((r27.u32 & 0x1) != 0);
	r20.s64 = r27.s32 >> 1;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x827343fc
	if (!cr6.eq) goto loc_827343FC;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x827343f0
	if (cr6.eq) goto loc_827343F0;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// lwz r10,1240(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1240);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r10
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x827343fc
	if (cr6.eq) goto loc_827343FC;
loc_827343F0:
	// li r26,1
	r26.s64 = 1;
	// li r17,0
	r17.s64 = 0;
	// b 0x82734404
	goto loc_82734404;
loc_827343FC:
	// li r17,0
	r17.s64 = 0;
	// mr r26,r17
	r26.u64 = r17.u64;
loc_82734404:
	// addi r18,r31,1516
	r18.s64 = r31.s64 + 1516;
	// lwz r10,1520(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1520);
	// lis r15,1
	r15.s64 = 65536;
	// stw r17,256(r1)
	PPC_STORE_U32(ctx.r1.u32 + 256, r17.u32);
	// mr r22,r17
	r22.u64 = r17.u64;
	// stw r17,252(r1)
	PPC_STORE_U32(ctx.r1.u32 + 252, r17.u32);
	// mr r21,r17
	r21.u64 = r17.u64;
	// stw r17,248(r1)
	PPC_STORE_U32(ctx.r1.u32 + 248, r17.u32);
	// mr r28,r17
	r28.u64 = r17.u64;
	// stw r17,348(r1)
	PPC_STORE_U32(ctx.r1.u32 + 348, r17.u32);
	// lwz r11,0(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r17,344(r1)
	PPC_STORE_U32(ctx.r1.u32 + 344, r17.u32);
	// rlwinm r11,r11,17,0,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 17) & 0xFFFE0000;
	// stw r22,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r22.u32);
	// stw r21,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r21.u32);
	// subf r11,r11,r15
	r11.s64 = r15.s64 - r11.s64;
	// stw r11,352(r1)
	PPC_STORE_U32(ctx.r1.u32 + 352, r11.u32);
	// bne cr6,0x82734464
	if (!cr6.eq) goto loc_82734464;
	// lis r10,-32145
	ctx.r10.s64 = -2106654720;
	// lis r11,-32145
	r11.s64 = -2106654720;
	// addi r10,r10,-23384
	ctx.r10.s64 = ctx.r10.s64 + -23384;
	// addi r11,r11,-22936
	r11.s64 = r11.s64 + -22936;
	// b 0x82734474
	goto loc_82734474;
loc_82734464:
	// lis r10,-32145
	ctx.r10.s64 = -2106654720;
	// lis r11,-32145
	r11.s64 = -2106654720;
	// addi r10,r10,-23256
	ctx.r10.s64 = ctx.r10.s64 + -23256;
	// addi r11,r11,-23320
	r11.s64 = r11.s64 + -23320;
loc_82734474:
	// stw r11,1624(r31)
	PPC_STORE_U32(r31.u32 + 1624, r11.u32);
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// stw r10,1620(r31)
	PPC_STORE_U32(r31.u32 + 1620, ctx.r10.u32);
	// rlwinm r19,r11,1,0,30
	r19.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// cmpwi cr6,r19,0
	cr6.compare<int32_t>(r19.s32, 0, xer);
	// beq cr6,0x82734504
	if (cr6.eq) goto loc_82734504;
	// addi r11,r16,-1
	r11.s64 = r16.s64 + -1;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r24,r11
	ctx.r10.u64 = PPC_LOAD_U16(r24.u32 + r11.u32);
	// lhzx r11,r25,r11
	r11.u64 = PPC_LOAD_U16(r25.u32 + r11.u32);
	// sth r10,158(r1)
	PPC_STORE_U16(ctx.r1.u32 + 158, ctx.r10.u16);
	// sth r11,156(r1)
	PPC_STORE_U16(ctx.r1.u32 + 156, r11.u16);
	// lwz r4,156(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// clrlwi r11,r4,16
	r11.u64 = ctx.r4.u32 & 0xFFFF;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x82734504
	if (cr6.eq) goto loc_82734504;
	// rlwinm r11,r4,0,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x10000;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x827344e4
	if (cr6.eq) goto loc_827344E4;
	// lwz r11,1620(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1620);
	// stw r4,344(r1)
	PPC_STORE_U32(ctx.r1.u32 + 344, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// li r21,1
	r21.s64 = 1;
	// stw r3,248(r1)
	PPC_STORE_U32(ctx.r1.u32 + 248, ctx.r3.u32);
	// stw r21,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r21.u32);
	// b 0x82734500
	goto loc_82734500;
loc_827344E4:
	// lwz r11,1624(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1624);
	// stw r4,248(r1)
	PPC_STORE_U32(ctx.r1.u32 + 248, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// li r22,1
	r22.s64 = 1;
	// stw r3,344(r1)
	PPC_STORE_U32(ctx.r1.u32 + 344, ctx.r3.u32);
	// stw r22,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r22.u32);
loc_82734500:
	// li r28,1
	r28.s64 = 1;
loc_82734504:
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// bne cr6,0x82734630
	if (!cr6.eq) goto loc_82734630;
	// subf r23,r27,r16
	r23.s64 = r16.s64 - r27.s64;
	// rlwinm r11,r23,1,0,30
	r11.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r24,r11
	ctx.r10.u64 = PPC_LOAD_U16(r24.u32 + r11.u32);
	// lhzx r11,r25,r11
	r11.u64 = PPC_LOAD_U16(r25.u32 + r11.u32);
	// sth r10,158(r1)
	PPC_STORE_U16(ctx.r1.u32 + 158, ctx.r10.u16);
	// sth r11,156(r1)
	PPC_STORE_U16(ctx.r1.u32 + 156, r11.u16);
	// lwz r4,156(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// clrlwi r11,r4,16
	r11.u64 = ctx.r4.u32 & 0xFFFF;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x82734594
	if (cr6.eq) goto loc_82734594;
	// rlwinm r11,r4,0,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x10000;
	// rlwinm r26,r28,2,0,29
	r26.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq cr6,0x8273456c
	if (cr6.eq) goto loc_8273456C;
	// addi r11,r1,344
	r11.s64 = ctx.r1.s64 + 344;
	// lwz r10,1620(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1620);
	// stwx r4,r26,r11
	PPC_STORE_U32(r26.u32 + r11.u32, ctx.r4.u32);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r21,r21,1
	r21.s64 = r21.s64 + 1;
	// addi r11,r1,248
	r11.s64 = ctx.r1.s64 + 248;
	// stw r21,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r21.u32);
	// b 0x8273458c
	goto loc_8273458C;
loc_8273456C:
	// addi r10,r1,248
	ctx.r10.s64 = ctx.r1.s64 + 248;
	// lwz r11,1624(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1624);
	// stwx r4,r26,r10
	PPC_STORE_U32(r26.u32 + ctx.r10.u32, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r22,r22,1
	r22.s64 = r22.s64 + 1;
	// addi r11,r1,344
	r11.s64 = ctx.r1.s64 + 344;
	// stw r22,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r22.u32);
loc_8273458C:
	// stwx r3,r26,r11
	PPC_STORE_U32(r26.u32 + r11.u32, ctx.r3.u32);
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
loc_82734594:
	// cmpwi cr6,r20,1
	cr6.compare<int32_t>(r20.s32, 1, xer);
	// ble cr6,0x82734630
	if (!cr6.gt) goto loc_82734630;
	// addi r11,r27,-2
	r11.s64 = r27.s64 + -2;
	// cmpw cr6,r19,r11
	cr6.compare<int32_t>(r19.s32, r11.s32, xer);
	// addi r11,r23,2
	r11.s64 = r23.s64 + 2;
	// bne cr6,0x827345b0
	if (!cr6.eq) goto loc_827345B0;
	// addi r11,r23,-2
	r11.s64 = r23.s64 + -2;
loc_827345B0:
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r24,r11
	ctx.r10.u64 = PPC_LOAD_U16(r24.u32 + r11.u32);
	// lhzx r11,r25,r11
	r11.u64 = PPC_LOAD_U16(r25.u32 + r11.u32);
	// sth r10,158(r1)
	PPC_STORE_U16(ctx.r1.u32 + 158, ctx.r10.u16);
	// sth r11,156(r1)
	PPC_STORE_U16(ctx.r1.u32 + 156, r11.u16);
	// lwz r4,156(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// clrlwi r11,r4,16
	r11.u64 = ctx.r4.u32 & 0xFFFF;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x82734630
	if (cr6.eq) goto loc_82734630;
	// rlwinm r11,r4,0,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x10000;
	// rlwinm r28,r28,2,0,29
	r28.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq cr6,0x8273460c
	if (cr6.eq) goto loc_8273460C;
	// addi r11,r1,344
	r11.s64 = ctx.r1.s64 + 344;
	// lwz r10,1620(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1620);
	// stwx r4,r28,r11
	PPC_STORE_U32(r28.u32 + r11.u32, ctx.r4.u32);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r21,r21,1
	r21.s64 = r21.s64 + 1;
	// addi r11,r1,248
	r11.s64 = ctx.r1.s64 + 248;
	// stw r21,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r21.u32);
	// b 0x8273462c
	goto loc_8273462C;
loc_8273460C:
	// addi r10,r1,248
	ctx.r10.s64 = ctx.r1.s64 + 248;
	// lwz r11,1624(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1624);
	// stwx r4,r28,r10
	PPC_STORE_U32(r28.u32 + ctx.r10.u32, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r22,r22,1
	r22.s64 = r22.s64 + 1;
	// addi r11,r1,344
	r11.s64 = ctx.r1.s64 + 344;
	// stw r22,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r22.u32);
loc_8273462C:
	// stwx r3,r28,r11
	PPC_STORE_U32(r28.u32 + r11.u32, ctx.r3.u32);
loc_82734630:
	// mr r10,r17
	ctx.r10.u64 = r17.u64;
	// add r11,r22,r21
	r11.u64 = r22.u64 + r21.u64;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// stw r10,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r10.u32);
	// ble cr6,0x82734794
	if (!cr6.gt) goto loc_82734794;
	// lhz r11,254(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 254);
	// lhz r10,250(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 250);
	// lhz r3,258(r1)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r1.u32 + 258);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lhz r9,252(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 252);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// lhz r8,248(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 248);
	// extsh r3,r3
	ctx.r3.s64 = ctx.r3.s16;
	// lhz r28,256(r1)
	r28.u64 = PPC_LOAD_U16(ctx.r1.u32 + 256);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// lhz r7,350(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 350);
	// extsh r28,r28
	r28.s64 = r28.s16;
	// lhz r6,346(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 346);
	// subf r25,r10,r11
	r25.s64 = r11.s64 - ctx.r10.s64;
	// lhz r27,354(r1)
	r27.u64 = PPC_LOAD_U16(ctx.r1.u32 + 354);
	// subf r21,r3,r11
	r21.s64 = r11.s64 - ctx.r3.s64;
	// lhz r5,348(r1)
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r1.u32 + 348);
	// subf r20,r10,r3
	r20.s64 = ctx.r3.s64 - ctx.r10.s64;
	// lhz r4,344(r1)
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r1.u32 + 344);
	// subf r24,r8,r9
	r24.s64 = ctx.r9.s64 - ctx.r8.s64;
	// lhz r26,352(r1)
	r26.u64 = PPC_LOAD_U16(ctx.r1.u32 + 352);
	// subf r19,r28,r9
	r19.s64 = ctx.r9.s64 - r28.s64;
	// subf r18,r8,r28
	r18.s64 = r28.s64 - ctx.r8.s64;
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// extsh r27,r27
	r27.s64 = r27.s16;
	// xor r21,r21,r25
	r21.u64 = r21.u64 ^ r25.u64;
	// xor r20,r20,r25
	r20.u64 = r20.u64 ^ r25.u64;
	// xor r19,r19,r24
	r19.u64 = r19.u64 ^ r24.u64;
	// extsh r4,r4
	ctx.r4.s64 = ctx.r4.s16;
	// extsh r5,r5
	ctx.r5.s64 = ctx.r5.s16;
	// extsh r26,r26
	r26.s64 = r26.s16;
	// subf r23,r6,r7
	r23.s64 = ctx.r7.s64 - ctx.r6.s64;
	// xor r18,r18,r24
	r18.u64 = r18.u64 ^ r24.u64;
	// subf r17,r27,r7
	r17.s64 = ctx.r7.s64 - r27.s64;
	// subf r16,r6,r27
	r16.s64 = r27.s64 - ctx.r6.s64;
	// srawi r25,r21,31
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x7FFFFFFF) != 0);
	r25.s64 = r21.s32 >> 31;
	// srawi r24,r20,31
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x7FFFFFFF) != 0);
	r24.s64 = r20.s32 >> 31;
	// subf r22,r4,r5
	r22.s64 = ctx.r5.s64 - ctx.r4.s64;
	// srawi r21,r19,31
	xer.ca = (r19.s32 < 0) & ((r19.u32 & 0x7FFFFFFF) != 0);
	r21.s64 = r19.s32 >> 31;
	// subf r15,r26,r5
	r15.s64 = ctx.r5.s64 - r26.s64;
	// xor r20,r17,r23
	r20.u64 = r17.u64 ^ r23.u64;
	// subf r14,r4,r26
	r14.s64 = r26.s64 - ctx.r4.s64;
	// xor r19,r16,r23
	r19.u64 = r16.u64 ^ r23.u64;
	// srawi r23,r18,31
	xer.ca = (r18.s32 < 0) & ((r18.u32 & 0x7FFFFFFF) != 0);
	r23.s64 = r18.s32 >> 31;
	// xor r18,r15,r22
	r18.u64 = r15.u64 ^ r22.u64;
	// srawi r20,r20,31
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x7FFFFFFF) != 0);
	r20.s64 = r20.s32 >> 31;
	// xor r17,r14,r22
	r17.u64 = r14.u64 ^ r22.u64;
	// srawi r22,r19,31
	xer.ca = (r19.s32 < 0) & ((r19.u32 & 0x7FFFFFFF) != 0);
	r22.s64 = r19.s32 >> 31;
	// srawi r19,r18,31
	xer.ca = (r18.s32 < 0) & ((r18.u32 & 0x7FFFFFFF) != 0);
	r19.s64 = r18.s32 >> 31;
	// srawi r18,r17,31
	xer.ca = (r17.s32 < 0) & ((r17.u32 & 0x7FFFFFFF) != 0);
	r18.s64 = r17.s32 >> 31;
	// and r10,r24,r10
	ctx.r10.u64 = r24.u64 & ctx.r10.u64;
	// or r17,r25,r24
	r17.u64 = r25.u64 | r24.u64;
	// or r24,r21,r23
	r24.u64 = r21.u64 | r23.u64;
	// and r8,r23,r8
	ctx.r8.u64 = r23.u64 & ctx.r8.u64;
	// andc r28,r28,r24
	r28.u64 = r28.u64 & ~r24.u64;
	// or r24,r20,r22
	r24.u64 = r20.u64 | r22.u64;
	// or r23,r19,r18
	r23.u64 = r19.u64 | r18.u64;
	// andc r3,r3,r17
	ctx.r3.u64 = ctx.r3.u64 & ~r17.u64;
	// andc r27,r27,r24
	r27.u64 = r27.u64 & ~r24.u64;
	// and r6,r22,r6
	ctx.r6.u64 = r22.u64 & ctx.r6.u64;
	// andc r26,r26,r23
	r26.u64 = r26.u64 & ~r23.u64;
	// and r4,r18,r4
	ctx.r4.u64 = r18.u64 & ctx.r4.u64;
	// or r10,r3,r10
	ctx.r10.u64 = ctx.r3.u64 | ctx.r10.u64;
	// and r11,r25,r11
	r11.u64 = r25.u64 & r11.u64;
	// or r8,r28,r8
	ctx.r8.u64 = r28.u64 | ctx.r8.u64;
	// and r9,r21,r9
	ctx.r9.u64 = r21.u64 & ctx.r9.u64;
	// or r6,r27,r6
	ctx.r6.u64 = r27.u64 | ctx.r6.u64;
	// and r7,r20,r7
	ctx.r7.u64 = r20.u64 & ctx.r7.u64;
	// or r4,r26,r4
	ctx.r4.u64 = r26.u64 | ctx.r4.u64;
	// and r5,r19,r5
	ctx.r5.u64 = r19.u64 & ctx.r5.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// or r10,r8,r9
	ctx.r10.u64 = ctx.r8.u64 | ctx.r9.u64;
	// or r9,r6,r7
	ctx.r9.u64 = ctx.r6.u64 | ctx.r7.u64;
	// or r8,r4,r5
	ctx.r8.u64 = ctx.r4.u64 | ctx.r5.u64;
	// sth r11,482(r1)
	PPC_STORE_U16(ctx.r1.u32 + 482, r11.u16);
	// sth r10,480(r1)
	PPC_STORE_U16(ctx.r1.u32 + 480, ctx.r10.u16);
	// lwz r10,128(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// sth r9,458(r1)
	PPC_STORE_U16(ctx.r1.u32 + 458, ctx.r9.u16);
	// sth r8,456(r1)
	PPC_STORE_U16(ctx.r1.u32 + 456, ctx.r8.u16);
	// lwz r21,100(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r22,96(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// b 0x827347bc
	goto loc_827347BC;
loc_82734794:
	// bne cr6,0x827347a8
	if (!cr6.eq) goto loc_827347A8;
	// lwz r11,248(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 248);
	// stw r11,480(r1)
	PPC_STORE_U32(ctx.r1.u32 + 480, r11.u32);
	// lwz r11,344(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 344);
	// b 0x827347b8
	goto loc_827347B8;
loc_827347A8:
	// lwz r11,0(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// stw r17,480(r1)
	PPC_STORE_U32(ctx.r1.u32 + 480, r17.u32);
	// rlwinm r11,r11,17,0,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 17) & 0xFFFE0000;
	// subf r11,r11,r15
	r11.s64 = r15.s64 - r11.s64;
loc_827347B8:
	// stw r11,456(r1)
	PPC_STORE_U32(ctx.r1.u32 + 456, r11.u32);
loc_827347BC:
	// lwz r11,1508(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1508);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x827347d8
	if (cr6.eq) goto loc_827347D8;
	// cmpw cr6,r22,r21
	cr6.compare<int32_t>(r22.s32, r21.s32, xer);
	// ble cr6,0x827347e4
	if (!cr6.gt) goto loc_827347E4;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x827347e8
	if (!cr6.eq) goto loc_827347E8;
loc_827347D8:
	// lwz r11,1512(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1512);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x827347e8
	if (cr6.eq) goto loc_827347E8;
loc_827347E4:
	// li r10,1
	ctx.r10.s64 = 1;
loc_827347E8:
	// lwz r9,456(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 456);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x827347f8
	if (!cr6.eq) goto loc_827347F8;
	// lwz r9,480(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 480);
loc_827347F8:
	// lwz r10,1500(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// stw r9,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r9.u32);
	// lhz r11,114(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 114);
	// add r8,r10,r29
	ctx.r8.u64 = ctx.r10.u64 + r29.u64;
	// stw r9,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, ctx.r9.u32);
	// lhz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 112);
	// sth r11,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, r11.u16);
	// lwz r8,1500(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// sthx r11,r8,r29
	PPC_STORE_U16(ctx.r8.u32 + r29.u32, r11.u16);
	// lwz r9,1500(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r9,r9,r30
	ctx.r9.u64 = ctx.r9.u64 + r30.u64;
	// sth r11,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, r11.u16);
	// lwz r9,1500(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// sthx r11,r9,r30
	PPC_STORE_U16(ctx.r9.u32 + r30.u32, r11.u16);
	// lwz r11,1504(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// sth r10,2(r11)
	PPC_STORE_U16(r11.u32 + 2, ctx.r10.u16);
	// lwz r11,1504(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// sthx r10,r29,r11
	PPC_STORE_U16(r29.u32 + r11.u32, ctx.r10.u16);
	// lwz r11,1504(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// sth r10,2(r11)
	PPC_STORE_U16(r11.u32 + 2, ctx.r10.u16);
	// lwz r11,1504(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// sthx r10,r30,r11
	PPC_STORE_U16(r30.u32 + r11.u32, ctx.r10.u16);
	// b 0x82736764
	goto loc_82736764;
loc_8273485C:
	// rlwinm r11,r16,2,0,29
	r11.u64 = __builtin_rotateleft64(r16.u32 | (r16.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r27,1496(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// clrlwi r21,r9,31
	r21.u64 = ctx.r9.u32 & 0x1;
	// lwz r26,1492(r31)
	r26.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// add r19,r11,r14
	r19.u64 = r11.u64 + r14.u64;
	// srawi r20,r15,1
	xer.ca = (r15.s32 < 0) & ((r15.u32 & 0x1) != 0);
	r20.s64 = r15.s32 >> 1;
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// stw r21,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r21.u32);
	// lwz r24,0(r19)
	r24.u64 = PPC_LOAD_U32(r19.u32 + 0);
	// lwz r11,4(r19)
	r11.u64 = PPC_LOAD_U32(r19.u32 + 4);
	// stw r24,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r24.u32);
	// stw r11,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, r11.u32);
	// bne cr6,0x827348bc
	if (!cr6.eq) goto loc_827348BC;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x827348b0
	if (cr6.eq) goto loc_827348B0;
	// srawi r10,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r9.s32 >> 1;
	// lwz r11,1240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1240);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x827348bc
	if (cr6.eq) goto loc_827348BC;
loc_827348B0:
	// li r29,1
	r29.s64 = 1;
	// li r30,0
	r30.s64 = 0;
	// b 0x827348c4
	goto loc_827348C4;
loc_827348BC:
	// li r30,0
	r30.s64 = 0;
	// mr r29,r30
	r29.u64 = r30.u64;
loc_827348C4:
	// addi r22,r31,1516
	r22.s64 = r31.s64 + 1516;
	// stw r30,288(r1)
	PPC_STORE_U32(ctx.r1.u32 + 288, r30.u32);
	// lis r10,-32145
	ctx.r10.s64 = -2106654720;
	// stw r30,284(r1)
	PPC_STORE_U32(ctx.r1.u32 + 284, r30.u32);
	// lis r11,-32145
	r11.s64 = -2106654720;
	// stw r30,280(r1)
	PPC_STORE_U32(ctx.r1.u32 + 280, r30.u32);
	// lis r8,1
	ctx.r8.s64 = 65536;
	// stw r30,412(r1)
	PPC_STORE_U32(ctx.r1.u32 + 412, r30.u32);
	// srawi r23,r24,16
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0xFFFF) != 0);
	r23.s64 = r24.s32 >> 16;
	// stw r30,408(r1)
	PPC_STORE_U32(ctx.r1.u32 + 408, r30.u32);
	// lwz r9,0(r22)
	ctx.r9.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// addi r10,r10,-22616
	ctx.r10.s64 = ctx.r10.s64 + -22616;
	// addi r11,r11,-22296
	r11.s64 = r11.s64 + -22296;
	// rlwinm r9,r9,17,0,14
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 17) & 0xFFFE0000;
	// mr r25,r30
	r25.u64 = r30.u64;
	// subf r9,r9,r8
	ctx.r9.s64 = ctx.r8.s64 - ctx.r9.s64;
	// stw r23,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r23.u32);
	// mr r18,r30
	r18.u64 = r30.u64;
	// stw r10,1620(r31)
	PPC_STORE_U32(r31.u32 + 1620, ctx.r10.u32);
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// stw r11,1624(r31)
	PPC_STORE_U32(r31.u32 + 1624, r11.u32);
	// stw r25,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r25.u32);
	// stw r9,416(r1)
	PPC_STORE_U32(ctx.r1.u32 + 416, ctx.r9.u32);
	// beq cr6,0x82734998
	if (cr6.eq) goto loc_82734998;
	// addi r11,r16,-1
	r11.s64 = r16.s64 + -1;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r11,r26
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + r26.u32);
	// lhzx r11,r11,r27
	r11.u64 = PPC_LOAD_U16(r11.u32 + r27.u32);
	// sth r10,146(r1)
	PPC_STORE_U16(ctx.r1.u32 + 146, ctx.r10.u16);
	// sth r11,144(r1)
	PPC_STORE_U16(ctx.r1.u32 + 144, r11.u16);
	// lwz r4,144(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// clrlwi r11,r4,16
	r11.u64 = ctx.r4.u32 & 0xFFFF;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x82734998
	if (cr6.eq) goto loc_82734998;
	// rlwinm r11,r4,0,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x10000;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8273497c
	if (cr6.eq) goto loc_8273497C;
	// lwz r11,1620(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1620);
	// stw r4,408(r1)
	PPC_STORE_U32(ctx.r1.u32 + 408, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// li r25,1
	r25.s64 = 1;
	// stw r3,280(r1)
	PPC_STORE_U32(ctx.r1.u32 + 280, ctx.r3.u32);
	// stw r25,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r25.u32);
	// b 0x82734994
	goto loc_82734994;
loc_8273497C:
	// lwz r11,1624(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1624);
	// stw r4,280(r1)
	PPC_STORE_U32(ctx.r1.u32 + 280, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// stw r3,408(r1)
	PPC_STORE_U32(ctx.r1.u32 + 408, ctx.r3.u32);
	// li r18,1
	r18.s64 = 1;
loc_82734994:
	// li r30,1
	r30.s64 = 1;
loc_82734998:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// bne cr6,0x82734abc
	if (!cr6.eq) goto loc_82734ABC;
	// subf r28,r15,r16
	r28.s64 = r16.s64 - r15.s64;
	// rlwinm r11,r28,1,0,30
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r11,r26
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + r26.u32);
	// lhzx r11,r11,r27
	r11.u64 = PPC_LOAD_U16(r11.u32 + r27.u32);
	// sth r10,146(r1)
	PPC_STORE_U16(ctx.r1.u32 + 146, ctx.r10.u16);
	// sth r11,144(r1)
	PPC_STORE_U16(ctx.r1.u32 + 144, r11.u16);
	// lwz r4,144(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// clrlwi r11,r4,16
	r11.u64 = ctx.r4.u32 & 0xFFFF;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x82734a24
	if (cr6.eq) goto loc_82734A24;
	// rlwinm r11,r4,0,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x10000;
	// rlwinm r29,r30,2,0,29
	r29.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq cr6,0x82734a00
	if (cr6.eq) goto loc_82734A00;
	// addi r11,r1,408
	r11.s64 = ctx.r1.s64 + 408;
	// lwz r10,1620(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1620);
	// stwx r4,r29,r11
	PPC_STORE_U32(r29.u32 + r11.u32, ctx.r4.u32);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r25,r25,1
	r25.s64 = r25.s64 + 1;
	// addi r11,r1,280
	r11.s64 = ctx.r1.s64 + 280;
	// stw r25,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r25.u32);
	// b 0x82734a1c
	goto loc_82734A1C;
loc_82734A00:
	// addi r10,r1,280
	ctx.r10.s64 = ctx.r1.s64 + 280;
	// lwz r11,1624(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1624);
	// stwx r4,r29,r10
	PPC_STORE_U32(r29.u32 + ctx.r10.u32, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r11,r1,408
	r11.s64 = ctx.r1.s64 + 408;
	// addi r18,r18,1
	r18.s64 = r18.s64 + 1;
loc_82734A1C:
	// stwx r3,r29,r11
	PPC_STORE_U32(r29.u32 + r11.u32, ctx.r3.u32);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
loc_82734A24:
	// cmpwi cr6,r20,1
	cr6.compare<int32_t>(r20.s32, 1, xer);
	// ble cr6,0x82734abc
	if (!cr6.gt) goto loc_82734ABC;
	// addi r11,r15,-2
	r11.s64 = r15.s64 + -2;
	// cmpw cr6,r17,r11
	cr6.compare<int32_t>(r17.s32, r11.s32, xer);
	// addi r11,r28,2
	r11.s64 = r28.s64 + 2;
	// bne cr6,0x82734a40
	if (!cr6.eq) goto loc_82734A40;
	// addi r11,r28,-2
	r11.s64 = r28.s64 + -2;
loc_82734A40:
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r11,r26
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + r26.u32);
	// lhzx r11,r11,r27
	r11.u64 = PPC_LOAD_U16(r11.u32 + r27.u32);
	// sth r10,146(r1)
	PPC_STORE_U16(ctx.r1.u32 + 146, ctx.r10.u16);
	// sth r11,144(r1)
	PPC_STORE_U16(ctx.r1.u32 + 144, r11.u16);
	// lwz r4,144(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// clrlwi r11,r4,16
	r11.u64 = ctx.r4.u32 & 0xFFFF;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x82734abc
	if (cr6.eq) goto loc_82734ABC;
	// rlwinm r11,r4,0,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x10000;
	// rlwinm r30,r30,2,0,29
	r30.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq cr6,0x82734a9c
	if (cr6.eq) goto loc_82734A9C;
	// addi r11,r1,408
	r11.s64 = ctx.r1.s64 + 408;
	// lwz r10,1620(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1620);
	// stwx r4,r30,r11
	PPC_STORE_U32(r30.u32 + r11.u32, ctx.r4.u32);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r25,r25,1
	r25.s64 = r25.s64 + 1;
	// addi r11,r1,280
	r11.s64 = ctx.r1.s64 + 280;
	// stw r25,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r25.u32);
	// b 0x82734ab8
	goto loc_82734AB8;
loc_82734A9C:
	// addi r10,r1,280
	ctx.r10.s64 = ctx.r1.s64 + 280;
	// lwz r11,1624(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1624);
	// stwx r4,r30,r10
	PPC_STORE_U32(r30.u32 + ctx.r10.u32, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r11,r1,408
	r11.s64 = ctx.r1.s64 + 408;
	// addi r18,r18,1
	r18.s64 = r18.s64 + 1;
loc_82734AB8:
	// stwx r3,r30,r11
	PPC_STORE_U32(r30.u32 + r11.u32, ctx.r3.u32);
loc_82734ABC:
	// li r9,0
	ctx.r9.s64 = 0;
	// add r11,r25,r18
	r11.u64 = r25.u64 + r18.u64;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// stw r9,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r9.u32);
	// ble cr6,0x82734c34
	if (!cr6.gt) goto loc_82734C34;
	// lhz r11,286(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 286);
	// lhz r10,282(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 282);
	// lhz r3,290(r1)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r1.u32 + 290);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lhz r9,284(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 284);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// lhz r8,280(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 280);
	// extsh r3,r3
	ctx.r3.s64 = ctx.r3.s16;
	// lhz r30,288(r1)
	r30.u64 = PPC_LOAD_U16(ctx.r1.u32 + 288);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// lhz r7,414(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 414);
	// extsh r30,r30
	r30.s64 = r30.s16;
	// lhz r6,410(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 410);
	// subf r27,r10,r11
	r27.s64 = r11.s64 - ctx.r10.s64;
	// lhz r29,418(r1)
	r29.u64 = PPC_LOAD_U16(ctx.r1.u32 + 418);
	// subf r23,r3,r11
	r23.s64 = r11.s64 - ctx.r3.s64;
	// lhz r5,412(r1)
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r1.u32 + 412);
	// subf r22,r10,r3
	r22.s64 = ctx.r3.s64 - ctx.r10.s64;
	// lhz r4,408(r1)
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r1.u32 + 408);
	// subf r26,r8,r9
	r26.s64 = ctx.r9.s64 - ctx.r8.s64;
	// lhz r28,416(r1)
	r28.u64 = PPC_LOAD_U16(ctx.r1.u32 + 416);
	// subf r21,r30,r9
	r21.s64 = ctx.r9.s64 - r30.s64;
	// subf r20,r8,r30
	r20.s64 = r30.s64 - ctx.r8.s64;
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// extsh r29,r29
	r29.s64 = r29.s16;
	// xor r23,r23,r27
	r23.u64 = r23.u64 ^ r27.u64;
	// xor r22,r22,r27
	r22.u64 = r22.u64 ^ r27.u64;
	// xor r21,r21,r26
	r21.u64 = r21.u64 ^ r26.u64;
	// extsh r4,r4
	ctx.r4.s64 = ctx.r4.s16;
	// extsh r5,r5
	ctx.r5.s64 = ctx.r5.s16;
	// extsh r28,r28
	r28.s64 = r28.s16;
	// subf r25,r6,r7
	r25.s64 = ctx.r7.s64 - ctx.r6.s64;
	// xor r20,r20,r26
	r20.u64 = r20.u64 ^ r26.u64;
	// srawi r27,r23,31
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x7FFFFFFF) != 0);
	r27.s64 = r23.s32 >> 31;
	// subf r17,r29,r7
	r17.s64 = ctx.r7.s64 - r29.s64;
	// subf r16,r6,r29
	r16.s64 = r29.s64 - ctx.r6.s64;
	// srawi r26,r22,31
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x7FFFFFFF) != 0);
	r26.s64 = r22.s32 >> 31;
	// subf r24,r4,r5
	r24.s64 = ctx.r5.s64 - ctx.r4.s64;
	// srawi r23,r21,31
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x7FFFFFFF) != 0);
	r23.s64 = r21.s32 >> 31;
	// subf r15,r28,r5
	r15.s64 = ctx.r5.s64 - r28.s64;
	// xor r22,r17,r25
	r22.u64 = r17.u64 ^ r25.u64;
	// subf r14,r4,r28
	r14.s64 = r28.s64 - ctx.r4.s64;
	// xor r21,r16,r25
	r21.u64 = r16.u64 ^ r25.u64;
	// srawi r25,r20,31
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x7FFFFFFF) != 0);
	r25.s64 = r20.s32 >> 31;
	// xor r20,r15,r24
	r20.u64 = r15.u64 ^ r24.u64;
	// srawi r22,r22,31
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x7FFFFFFF) != 0);
	r22.s64 = r22.s32 >> 31;
	// xor r17,r14,r24
	r17.u64 = r14.u64 ^ r24.u64;
	// srawi r24,r21,31
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x7FFFFFFF) != 0);
	r24.s64 = r21.s32 >> 31;
	// srawi r21,r20,31
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x7FFFFFFF) != 0);
	r21.s64 = r20.s32 >> 31;
	// srawi r20,r17,31
	xer.ca = (r17.s32 < 0) & ((r17.u32 & 0x7FFFFFFF) != 0);
	r20.s64 = r17.s32 >> 31;
	// and r10,r26,r10
	ctx.r10.u64 = r26.u64 & ctx.r10.u64;
	// or r17,r27,r26
	r17.u64 = r27.u64 | r26.u64;
	// or r26,r23,r25
	r26.u64 = r23.u64 | r25.u64;
	// and r8,r25,r8
	ctx.r8.u64 = r25.u64 & ctx.r8.u64;
	// andc r30,r30,r26
	r30.u64 = r30.u64 & ~r26.u64;
	// or r26,r22,r24
	r26.u64 = r22.u64 | r24.u64;
	// or r25,r21,r20
	r25.u64 = r21.u64 | r20.u64;
	// andc r3,r3,r17
	ctx.r3.u64 = ctx.r3.u64 & ~r17.u64;
	// andc r29,r29,r26
	r29.u64 = r29.u64 & ~r26.u64;
	// and r6,r24,r6
	ctx.r6.u64 = r24.u64 & ctx.r6.u64;
	// andc r28,r28,r25
	r28.u64 = r28.u64 & ~r25.u64;
	// and r4,r20,r4
	ctx.r4.u64 = r20.u64 & ctx.r4.u64;
	// or r10,r3,r10
	ctx.r10.u64 = ctx.r3.u64 | ctx.r10.u64;
	// and r11,r27,r11
	r11.u64 = r27.u64 & r11.u64;
	// and r9,r23,r9
	ctx.r9.u64 = r23.u64 & ctx.r9.u64;
	// lwz r23,104(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// or r8,r30,r8
	ctx.r8.u64 = r30.u64 | ctx.r8.u64;
	// or r6,r29,r6
	ctx.r6.u64 = r29.u64 | ctx.r6.u64;
	// and r7,r22,r7
	ctx.r7.u64 = r22.u64 & ctx.r7.u64;
	// or r4,r28,r4
	ctx.r4.u64 = r28.u64 | ctx.r4.u64;
	// and r5,r21,r5
	ctx.r5.u64 = r21.u64 & ctx.r5.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// or r10,r8,r9
	ctx.r10.u64 = ctx.r8.u64 | ctx.r9.u64;
	// or r9,r6,r7
	ctx.r9.u64 = ctx.r6.u64 | ctx.r7.u64;
	// or r8,r4,r5
	ctx.r8.u64 = ctx.r4.u64 | ctx.r5.u64;
	// sth r11,538(r1)
	PPC_STORE_U16(ctx.r1.u32 + 538, r11.u16);
	// sth r10,536(r1)
	PPC_STORE_U16(ctx.r1.u32 + 536, ctx.r10.u16);
	// sth r9,530(r1)
	PPC_STORE_U16(ctx.r1.u32 + 530, ctx.r9.u16);
	// sth r8,528(r1)
	PPC_STORE_U16(ctx.r1.u32 + 528, ctx.r8.u16);
	// lwz r21,112(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lwz r14,168(r1)
	r14.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// lwz r16,164(r1)
	r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// lwz r15,124(r1)
	r15.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// lwz r9,128(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// lwz r25,96(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r24,108(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// b 0x82734c60
	goto loc_82734C60;
loc_82734C34:
	// bne cr6,0x82734c48
	if (!cr6.eq) goto loc_82734C48;
	// lwz r11,280(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 280);
	// stw r11,536(r1)
	PPC_STORE_U32(ctx.r1.u32 + 536, r11.u32);
	// lwz r11,408(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 408);
	// b 0x82734c5c
	goto loc_82734C5C;
loc_82734C48:
	// lwz r11,0(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// lis r10,1
	ctx.r10.s64 = 65536;
	// stw r9,536(r1)
	PPC_STORE_U32(ctx.r1.u32 + 536, ctx.r9.u32);
	// rlwinm r11,r11,17,0,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 17) & 0xFFFE0000;
	// subf r11,r11,r10
	r11.s64 = ctx.r10.s64 - r11.s64;
loc_82734C5C:
	// stw r11,528(r1)
	PPC_STORE_U32(ctx.r1.u32 + 528, r11.u32);
loc_82734C60:
	// lwz r11,1508(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1508);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82734c7c
	if (cr6.eq) goto loc_82734C7C;
	// cmpw cr6,r18,r25
	cr6.compare<int32_t>(r18.s32, r25.s32, xer);
	// ble cr6,0x82734c88
	if (!cr6.gt) goto loc_82734C88;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82734c8c
	if (!cr6.eq) goto loc_82734C8C;
loc_82734C7C:
	// lwz r11,1512(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1512);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82734c8c
	if (cr6.eq) goto loc_82734C8C;
loc_82734C88:
	// li r9,1
	ctx.r9.s64 = 1;
loc_82734C8C:
	// clrlwi r10,r23,31
	ctx.r10.u64 = r23.u32 & 0x1;
	// xor r11,r9,r10
	r11.u64 = ctx.r9.u64 ^ ctx.r10.u64;
	// lwz r9,528(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 528);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82734ca4
	if (!cr6.eq) goto loc_82734CA4;
	// lwz r9,536(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 536);
loc_82734CA4:
	// rlwinm r10,r10,16,0,15
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 16) & 0xFFFF0000;
	// add r11,r15,r16
	r11.u64 = r15.u64 + r16.u64;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lhz r9,66(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 66);
	// rlwinm r29,r11,1,0,30
	r29.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// extsh r6,r9
	ctx.r6.s64 = ctx.r9.s16;
	// add r9,r11,r14
	ctx.r9.u64 = r11.u64 + r14.u64;
	// stw r10,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r10.u32);
	// rlwinm r30,r16,1,0,30
	r30.u64 = __builtin_rotateleft64(r16.u32 | (r16.u64 << 32), 1) & 0xFFFFFFFE;
	// lhz r10,146(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 146);
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// extsh r7,r10
	ctx.r7.s64 = ctx.r10.s16;
	// lhz r10,144(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 144);
	// extsh r8,r10
	ctx.r8.s64 = ctx.r10.s16;
	// lhz r10,62(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 62);
	// extsh r11,r10
	r11.s64 = ctx.r10.s16;
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// and r11,r11,r6
	r11.u64 = r11.u64 & ctx.r6.u64;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// sth r11,2(r19)
	PPC_STORE_U16(r19.u32 + 2, r11.u16);
	// lwz r10,1492(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// add r10,r29,r10
	ctx.r10.u64 = r29.u64 + ctx.r10.u64;
	// sth r11,2(r10)
	PPC_STORE_U16(ctx.r10.u32 + 2, r11.u16);
	// lwz r11,1492(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// lhz r10,2(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r10,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r10.u16);
	// lwz r11,1492(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// lhzx r10,r29,r11
	ctx.r10.u64 = PPC_LOAD_U16(r29.u32 + r11.u32);
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// sth r10,2(r11)
	PPC_STORE_U16(r11.u32 + 2, ctx.r10.u16);
	// lwz r11,1492(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// lhz r10,2(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r10,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r10.u16);
	// lwz r7,1492(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// lhz r10,68(r31)
	ctx.r10.u64 = PPC_LOAD_U16(r31.u32 + 68);
	// lhz r11,64(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 64);
	// extsh r6,r10
	ctx.r6.s64 = ctx.r10.s16;
	// lhzx r10,r30,r7
	ctx.r10.u64 = PPC_LOAD_U16(r30.u32 + ctx.r7.u32);
	// mr r7,r11
	ctx.r7.u64 = r11.u64;
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// stw r10,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r10.u32);
	// extsh r10,r11
	ctx.r10.s64 = r11.s16;
	// add r11,r10,r8
	r11.u64 = ctx.r10.u64 + ctx.r8.u64;
	// add r11,r11,r23
	r11.u64 = r11.u64 + r23.u64;
	// and r11,r11,r6
	r11.u64 = r11.u64 & ctx.r6.u64;
	// subf r11,r7,r11
	r11.s64 = r11.s64 - ctx.r7.s64;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// sth r11,0(r19)
	PPC_STORE_U16(r19.u32 + 0, r11.u16);
	// lwz r10,1496(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// add r10,r29,r10
	ctx.r10.u64 = r29.u64 + ctx.r10.u64;
	// sth r11,2(r10)
	PPC_STORE_U16(ctx.r10.u32 + 2, r11.u16);
	// lwz r11,1496(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// lhz r10,2(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r10,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r10.u16);
	// lwz r11,1496(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lhzx r10,r29,r11
	ctx.r10.u64 = PPC_LOAD_U16(r29.u32 + r11.u32);
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// sth r10,2(r11)
	PPC_STORE_U16(r11.u32 + 2, ctx.r10.u16);
	// lwz r11,1496(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// lhz r10,2(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r10,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r10.u16);
	// lwz r10,1496(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lwz r11,0(r19)
	r11.u64 = PPC_LOAD_U32(r19.u32 + 0);
	// lhzx r10,r30,r10
	ctx.r10.u64 = PPC_LOAD_U16(r30.u32 + ctx.r10.u32);
	// stw r11,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, r11.u32);
	// stw r11,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r11.u32);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// stw r11,4(r19)
	PPC_STORE_U32(r19.u32 + 4, r11.u32);
	// addi r11,r31,50
	r11.s64 = r31.s64 + 50;
	// lwz r24,1504(r31)
	r24.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lwz r23,1500(r31)
	r23.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// stw r10,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r10.u32);
	// lhz r27,0(r11)
	r27.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// srawi r20,r27,1
	xer.ca = (r27.s32 < 0) & ((r27.u32 & 0x1) != 0);
	r20.s64 = r27.s32 >> 1;
	// bne cr6,0x82734e20
	if (!cr6.eq) goto loc_82734E20;
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82734e14
	if (cr6.eq) goto loc_82734E14;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// lwz r10,1240(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1240);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r10
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82734e20
	if (cr6.eq) goto loc_82734E20;
loc_82734E14:
	// li r26,1
	r26.s64 = 1;
	// li r28,0
	r28.s64 = 0;
	// b 0x82734e28
	goto loc_82734E28;
loc_82734E20:
	// li r28,0
	r28.s64 = 0;
	// mr r26,r28
	r26.u64 = r28.u64;
loc_82734E28:
	// addi r18,r31,1516
	r18.s64 = r31.s64 + 1516;
	// lwz r11,180(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lis r9,1
	ctx.r9.s64 = 65536;
	// lwz r10,1520(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1520);
	// srawi r17,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	r17.s64 = r11.s32 >> 16;
	// stw r28,320(r1)
	PPC_STORE_U32(ctx.r1.u32 + 320, r28.u32);
	// mr r22,r28
	r22.u64 = r28.u64;
	// stw r28,316(r1)
	PPC_STORE_U32(ctx.r1.u32 + 316, r28.u32);
	// mr r21,r28
	r21.u64 = r28.u64;
	// stw r28,312(r1)
	PPC_STORE_U32(ctx.r1.u32 + 312, r28.u32);
	// lwz r11,0(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r28,204(r1)
	PPC_STORE_U32(ctx.r1.u32 + 204, r28.u32);
	// rlwinm r11,r11,17,0,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 17) & 0xFFFE0000;
	// stw r17,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r17.u32);
	// stw r22,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r22.u32);
	// subf r11,r11,r9
	r11.s64 = ctx.r9.s64 - r11.s64;
	// stw r21,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r21.u32);
	// stw r28,200(r1)
	PPC_STORE_U32(ctx.r1.u32 + 200, r28.u32);
	// stw r11,208(r1)
	PPC_STORE_U32(ctx.r1.u32 + 208, r11.u32);
	// bne cr6,0x82734e90
	if (!cr6.eq) goto loc_82734E90;
	// lis r10,-32145
	ctx.r10.s64 = -2106654720;
	// lis r11,-32145
	r11.s64 = -2106654720;
	// addi r10,r10,-23384
	ctx.r10.s64 = ctx.r10.s64 + -23384;
	// addi r11,r11,-22936
	r11.s64 = r11.s64 + -22936;
	// b 0x82734ea0
	goto loc_82734EA0;
loc_82734E90:
	// lis r10,-32145
	ctx.r10.s64 = -2106654720;
	// lis r11,-32145
	r11.s64 = -2106654720;
	// addi r10,r10,-23256
	ctx.r10.s64 = ctx.r10.s64 + -23256;
	// addi r11,r11,-23320
	r11.s64 = r11.s64 + -23320;
loc_82734EA0:
	// stw r11,1624(r31)
	PPC_STORE_U32(r31.u32 + 1624, r11.u32);
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// stw r10,1620(r31)
	PPC_STORE_U32(r31.u32 + 1620, ctx.r10.u32);
	// rlwinm r19,r11,1,0,30
	r19.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// cmpwi cr6,r19,0
	cr6.compare<int32_t>(r19.s32, 0, xer);
	// beq cr6,0x82734f30
	if (cr6.eq) goto loc_82734F30;
	// addi r11,r16,-1
	r11.s64 = r16.s64 + -1;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r11,r23
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + r23.u32);
	// lhzx r11,r11,r24
	r11.u64 = PPC_LOAD_U16(r11.u32 + r24.u32);
	// sth r10,134(r1)
	PPC_STORE_U16(ctx.r1.u32 + 134, ctx.r10.u16);
	// sth r11,132(r1)
	PPC_STORE_U16(ctx.r1.u32 + 132, r11.u16);
	// lwz r4,132(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// clrlwi r11,r4,16
	r11.u64 = ctx.r4.u32 & 0xFFFF;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x82734f30
	if (cr6.eq) goto loc_82734F30;
	// rlwinm r11,r4,0,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x10000;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82734f10
	if (cr6.eq) goto loc_82734F10;
	// lwz r11,1620(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1620);
	// stw r4,200(r1)
	PPC_STORE_U32(ctx.r1.u32 + 200, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// li r21,1
	r21.s64 = 1;
	// stw r3,312(r1)
	PPC_STORE_U32(ctx.r1.u32 + 312, ctx.r3.u32);
	// stw r21,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r21.u32);
	// b 0x82734f2c
	goto loc_82734F2C;
loc_82734F10:
	// lwz r11,1624(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1624);
	// stw r4,312(r1)
	PPC_STORE_U32(ctx.r1.u32 + 312, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// li r22,1
	r22.s64 = 1;
	// stw r3,200(r1)
	PPC_STORE_U32(ctx.r1.u32 + 200, ctx.r3.u32);
	// stw r22,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r22.u32);
loc_82734F2C:
	// li r28,1
	r28.s64 = 1;
loc_82734F30:
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// bne cr6,0x8273505c
	if (!cr6.eq) goto loc_8273505C;
	// subf r25,r27,r16
	r25.s64 = r16.s64 - r27.s64;
	// rlwinm r11,r25,1,0,30
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r11,r23
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + r23.u32);
	// lhzx r11,r11,r24
	r11.u64 = PPC_LOAD_U16(r11.u32 + r24.u32);
	// sth r10,134(r1)
	PPC_STORE_U16(ctx.r1.u32 + 134, ctx.r10.u16);
	// sth r11,132(r1)
	PPC_STORE_U16(ctx.r1.u32 + 132, r11.u16);
	// lwz r4,132(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// clrlwi r11,r4,16
	r11.u64 = ctx.r4.u32 & 0xFFFF;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x82734fc0
	if (cr6.eq) goto loc_82734FC0;
	// rlwinm r11,r4,0,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x10000;
	// rlwinm r26,r28,2,0,29
	r26.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq cr6,0x82734f98
	if (cr6.eq) goto loc_82734F98;
	// addi r11,r1,200
	r11.s64 = ctx.r1.s64 + 200;
	// lwz r10,1620(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1620);
	// stwx r4,r26,r11
	PPC_STORE_U32(r26.u32 + r11.u32, ctx.r4.u32);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r21,r21,1
	r21.s64 = r21.s64 + 1;
	// addi r11,r1,312
	r11.s64 = ctx.r1.s64 + 312;
	// stw r21,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r21.u32);
	// b 0x82734fb8
	goto loc_82734FB8;
loc_82734F98:
	// addi r10,r1,312
	ctx.r10.s64 = ctx.r1.s64 + 312;
	// lwz r11,1624(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1624);
	// stwx r4,r26,r10
	PPC_STORE_U32(r26.u32 + ctx.r10.u32, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r22,r22,1
	r22.s64 = r22.s64 + 1;
	// addi r11,r1,200
	r11.s64 = ctx.r1.s64 + 200;
	// stw r22,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r22.u32);
loc_82734FB8:
	// stwx r3,r26,r11
	PPC_STORE_U32(r26.u32 + r11.u32, ctx.r3.u32);
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
loc_82734FC0:
	// cmpwi cr6,r20,1
	cr6.compare<int32_t>(r20.s32, 1, xer);
	// ble cr6,0x8273505c
	if (!cr6.gt) goto loc_8273505C;
	// addi r11,r27,-2
	r11.s64 = r27.s64 + -2;
	// cmpw cr6,r19,r11
	cr6.compare<int32_t>(r19.s32, r11.s32, xer);
	// addi r11,r25,2
	r11.s64 = r25.s64 + 2;
	// bne cr6,0x82734fdc
	if (!cr6.eq) goto loc_82734FDC;
	// addi r11,r25,-2
	r11.s64 = r25.s64 + -2;
loc_82734FDC:
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r11,r23
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + r23.u32);
	// lhzx r11,r11,r24
	r11.u64 = PPC_LOAD_U16(r11.u32 + r24.u32);
	// sth r10,134(r1)
	PPC_STORE_U16(ctx.r1.u32 + 134, ctx.r10.u16);
	// sth r11,132(r1)
	PPC_STORE_U16(ctx.r1.u32 + 132, r11.u16);
	// lwz r4,132(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// clrlwi r11,r4,16
	r11.u64 = ctx.r4.u32 & 0xFFFF;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x8273505c
	if (cr6.eq) goto loc_8273505C;
	// rlwinm r11,r4,0,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x10000;
	// rlwinm r28,r28,2,0,29
	r28.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq cr6,0x82735038
	if (cr6.eq) goto loc_82735038;
	// addi r11,r1,200
	r11.s64 = ctx.r1.s64 + 200;
	// lwz r10,1620(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1620);
	// stwx r4,r28,r11
	PPC_STORE_U32(r28.u32 + r11.u32, ctx.r4.u32);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r21,r21,1
	r21.s64 = r21.s64 + 1;
	// addi r11,r1,312
	r11.s64 = ctx.r1.s64 + 312;
	// stw r21,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r21.u32);
	// b 0x82735058
	goto loc_82735058;
loc_82735038:
	// addi r10,r1,312
	ctx.r10.s64 = ctx.r1.s64 + 312;
	// lwz r11,1624(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1624);
	// stwx r4,r28,r10
	PPC_STORE_U32(r28.u32 + ctx.r10.u32, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r22,r22,1
	r22.s64 = r22.s64 + 1;
	// addi r11,r1,200
	r11.s64 = ctx.r1.s64 + 200;
	// stw r22,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r22.u32);
loc_82735058:
	// stwx r3,r28,r11
	PPC_STORE_U32(r28.u32 + r11.u32, ctx.r3.u32);
loc_8273505C:
	// li r9,0
	ctx.r9.s64 = 0;
	// add r11,r21,r22
	r11.u64 = r21.u64 + r22.u64;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// stw r9,452(r1)
	PPC_STORE_U32(ctx.r1.u32 + 452, ctx.r9.u32);
	// ble cr6,0x827351c4
	if (!cr6.gt) goto loc_827351C4;
	// lhz r11,318(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 318);
	// lhz r10,314(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 314);
	// lhz r3,322(r1)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r1.u32 + 322);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lhz r9,316(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 316);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// lhz r8,312(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 312);
	// extsh r3,r3
	ctx.r3.s64 = ctx.r3.s16;
	// lhz r28,320(r1)
	r28.u64 = PPC_LOAD_U16(ctx.r1.u32 + 320);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// lhz r7,206(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 206);
	// extsh r28,r28
	r28.s64 = r28.s16;
	// lhz r6,202(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 202);
	// subf r25,r10,r11
	r25.s64 = r11.s64 - ctx.r10.s64;
	// lhz r27,210(r1)
	r27.u64 = PPC_LOAD_U16(ctx.r1.u32 + 210);
	// subf r21,r3,r11
	r21.s64 = r11.s64 - ctx.r3.s64;
	// lhz r5,204(r1)
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r1.u32 + 204);
	// subf r20,r10,r3
	r20.s64 = ctx.r3.s64 - ctx.r10.s64;
	// lhz r4,200(r1)
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r1.u32 + 200);
	// subf r24,r8,r9
	r24.s64 = ctx.r9.s64 - ctx.r8.s64;
	// lhz r26,208(r1)
	r26.u64 = PPC_LOAD_U16(ctx.r1.u32 + 208);
	// subf r19,r28,r9
	r19.s64 = ctx.r9.s64 - r28.s64;
	// subf r18,r8,r28
	r18.s64 = r28.s64 - ctx.r8.s64;
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// extsh r27,r27
	r27.s64 = r27.s16;
	// xor r21,r21,r25
	r21.u64 = r21.u64 ^ r25.u64;
	// xor r20,r20,r25
	r20.u64 = r20.u64 ^ r25.u64;
	// xor r19,r19,r24
	r19.u64 = r19.u64 ^ r24.u64;
	// extsh r4,r4
	ctx.r4.s64 = ctx.r4.s16;
	// extsh r5,r5
	ctx.r5.s64 = ctx.r5.s16;
	// extsh r26,r26
	r26.s64 = r26.s16;
	// subf r23,r6,r7
	r23.s64 = ctx.r7.s64 - ctx.r6.s64;
	// xor r18,r18,r24
	r18.u64 = r18.u64 ^ r24.u64;
	// subf r17,r27,r7
	r17.s64 = ctx.r7.s64 - r27.s64;
	// subf r16,r6,r27
	r16.s64 = r27.s64 - ctx.r6.s64;
	// srawi r25,r21,31
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x7FFFFFFF) != 0);
	r25.s64 = r21.s32 >> 31;
	// srawi r24,r20,31
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x7FFFFFFF) != 0);
	r24.s64 = r20.s32 >> 31;
	// subf r22,r4,r5
	r22.s64 = ctx.r5.s64 - ctx.r4.s64;
	// srawi r21,r19,31
	xer.ca = (r19.s32 < 0) & ((r19.u32 & 0x7FFFFFFF) != 0);
	r21.s64 = r19.s32 >> 31;
	// subf r15,r26,r5
	r15.s64 = ctx.r5.s64 - r26.s64;
	// xor r20,r17,r23
	r20.u64 = r17.u64 ^ r23.u64;
	// subf r14,r4,r26
	r14.s64 = r26.s64 - ctx.r4.s64;
	// xor r19,r16,r23
	r19.u64 = r16.u64 ^ r23.u64;
	// srawi r23,r18,31
	xer.ca = (r18.s32 < 0) & ((r18.u32 & 0x7FFFFFFF) != 0);
	r23.s64 = r18.s32 >> 31;
	// xor r18,r15,r22
	r18.u64 = r15.u64 ^ r22.u64;
	// srawi r20,r20,31
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x7FFFFFFF) != 0);
	r20.s64 = r20.s32 >> 31;
	// xor r17,r14,r22
	r17.u64 = r14.u64 ^ r22.u64;
	// srawi r22,r19,31
	xer.ca = (r19.s32 < 0) & ((r19.u32 & 0x7FFFFFFF) != 0);
	r22.s64 = r19.s32 >> 31;
	// srawi r19,r18,31
	xer.ca = (r18.s32 < 0) & ((r18.u32 & 0x7FFFFFFF) != 0);
	r19.s64 = r18.s32 >> 31;
	// srawi r18,r17,31
	xer.ca = (r17.s32 < 0) & ((r17.u32 & 0x7FFFFFFF) != 0);
	r18.s64 = r17.s32 >> 31;
	// or r17,r25,r24
	r17.u64 = r25.u64 | r24.u64;
	// and r10,r24,r10
	ctx.r10.u64 = r24.u64 & ctx.r10.u64;
	// or r24,r21,r23
	r24.u64 = r21.u64 | r23.u64;
	// and r8,r23,r8
	ctx.r8.u64 = r23.u64 & ctx.r8.u64;
	// andc r28,r28,r24
	r28.u64 = r28.u64 & ~r24.u64;
	// or r24,r20,r22
	r24.u64 = r20.u64 | r22.u64;
	// or r23,r19,r18
	r23.u64 = r19.u64 | r18.u64;
	// andc r3,r3,r17
	ctx.r3.u64 = ctx.r3.u64 & ~r17.u64;
	// lwz r17,128(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// andc r27,r27,r24
	r27.u64 = r27.u64 & ~r24.u64;
	// and r6,r22,r6
	ctx.r6.u64 = r22.u64 & ctx.r6.u64;
	// andc r26,r26,r23
	r26.u64 = r26.u64 & ~r23.u64;
	// and r4,r18,r4
	ctx.r4.u64 = r18.u64 & ctx.r4.u64;
	// or r10,r3,r10
	ctx.r10.u64 = ctx.r3.u64 | ctx.r10.u64;
	// and r11,r25,r11
	r11.u64 = r25.u64 & r11.u64;
	// or r8,r28,r8
	ctx.r8.u64 = r28.u64 | ctx.r8.u64;
	// and r9,r21,r9
	ctx.r9.u64 = r21.u64 & ctx.r9.u64;
	// or r6,r27,r6
	ctx.r6.u64 = r27.u64 | ctx.r6.u64;
	// and r7,r20,r7
	ctx.r7.u64 = r20.u64 & ctx.r7.u64;
	// or r4,r26,r4
	ctx.r4.u64 = r26.u64 | ctx.r4.u64;
	// and r5,r19,r5
	ctx.r5.u64 = r19.u64 & ctx.r5.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// or r10,r8,r9
	ctx.r10.u64 = ctx.r8.u64 | ctx.r9.u64;
	// or r9,r6,r7
	ctx.r9.u64 = ctx.r6.u64 | ctx.r7.u64;
	// or r8,r4,r5
	ctx.r8.u64 = ctx.r4.u64 | ctx.r5.u64;
	// sth r11,502(r1)
	PPC_STORE_U16(ctx.r1.u32 + 502, r11.u16);
	// sth r10,500(r1)
	PPC_STORE_U16(ctx.r1.u32 + 500, ctx.r10.u16);
	// sth r9,446(r1)
	PPC_STORE_U16(ctx.r1.u32 + 446, ctx.r9.u16);
	// sth r8,444(r1)
	PPC_STORE_U16(ctx.r1.u32 + 444, ctx.r8.u16);
	// lwz r9,452(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 452);
	// lwz r21,96(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r22,100(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// b 0x827351f0
	goto loc_827351F0;
loc_827351C4:
	// bne cr6,0x827351d8
	if (!cr6.eq) goto loc_827351D8;
	// lwz r11,312(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 312);
	// stw r11,500(r1)
	PPC_STORE_U32(ctx.r1.u32 + 500, r11.u32);
	// lwz r11,200(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 200);
	// b 0x827351ec
	goto loc_827351EC;
loc_827351D8:
	// lwz r11,0(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// lis r10,1
	ctx.r10.s64 = 65536;
	// stw r9,500(r1)
	PPC_STORE_U32(ctx.r1.u32 + 500, ctx.r9.u32);
	// rlwinm r11,r11,17,0,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 17) & 0xFFFE0000;
	// subf r11,r11,r10
	r11.s64 = ctx.r10.s64 - r11.s64;
loc_827351EC:
	// stw r11,444(r1)
	PPC_STORE_U32(ctx.r1.u32 + 444, r11.u32);
loc_827351F0:
	// lwz r11,1508(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1508);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8273520c
	if (cr6.eq) goto loc_8273520C;
	// cmpw cr6,r22,r21
	cr6.compare<int32_t>(r22.s32, r21.s32, xer);
	// ble cr6,0x82735218
	if (!cr6.gt) goto loc_82735218;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8273521c
	if (!cr6.eq) goto loc_8273521C;
loc_8273520C:
	// lwz r11,1512(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1512);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8273521c
	if (cr6.eq) goto loc_8273521C;
loc_82735218:
	// li r9,1
	ctx.r9.s64 = 1;
loc_8273521C:
	// clrlwi r10,r17,31
	ctx.r10.u64 = r17.u32 & 0x1;
	// xor r11,r9,r10
	r11.u64 = ctx.r9.u64 ^ ctx.r10.u64;
	// lwz r9,444(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 444);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82735234
	if (!cr6.eq) goto loc_82735234;
	// lwz r9,500(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 500);
loc_82735234:
	// rlwinm r10,r10,16,0,15
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 16) & 0xFFFF0000;
	// lhz r11,62(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 62);
	// lhz r7,66(r31)
	ctx.r7.u64 = PPC_LOAD_U16(r31.u32 + 66);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// mr r5,r11
	ctx.r5.u64 = r11.u64;
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// stw r10,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r10.u32);
	// lwz r10,1500(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// lhz r9,134(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 134);
	// add r6,r10,r29
	ctx.r6.u64 = ctx.r10.u64 + r29.u64;
	// lhz r10,132(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 132);
	// extsh r8,r9
	ctx.r8.s64 = ctx.r9.s16;
	// extsh r9,r10
	ctx.r9.s64 = ctx.r10.s16;
	// extsh r10,r11
	ctx.r10.s64 = r11.s16;
	// add r11,r10,r8
	r11.u64 = ctx.r10.u64 + ctx.r8.u64;
	// lwz r10,180(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// and r11,r11,r7
	r11.u64 = r11.u64 & ctx.r7.u64;
	// subf r11,r5,r11
	r11.s64 = r11.s64 - ctx.r5.s64;
	// sth r11,2(r6)
	PPC_STORE_U16(ctx.r6.u32 + 2, r11.u16);
	// lwz r11,1500(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// lhz r10,2(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r10,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r10.u16);
	// lwz r11,1500(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// lhzx r10,r11,r29
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// sth r10,2(r11)
	PPC_STORE_U16(r11.u32 + 2, ctx.r10.u16);
	// lwz r11,1500(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// lhz r10,2(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r10,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r10.u16);
	// lwz r7,1500(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// lwz r10,1504(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lhz r11,64(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 64);
	// add r6,r29,r10
	ctx.r6.u64 = r29.u64 + ctx.r10.u64;
	// lhz r8,68(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 68);
	// lhzx r10,r7,r30
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r7.u32 + r30.u32);
	// mr r7,r11
	ctx.r7.u64 = r11.u64;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// stw r10,604(r1)
	PPC_STORE_U32(ctx.r1.u32 + 604, ctx.r10.u32);
	// extsh r10,r11
	ctx.r10.s64 = r11.s16;
	// add r11,r10,r9
	r11.u64 = ctx.r10.u64 + ctx.r9.u64;
	// add r11,r11,r17
	r11.u64 = r11.u64 + r17.u64;
	// and r11,r11,r8
	r11.u64 = r11.u64 & ctx.r8.u64;
	// subf r11,r7,r11
	r11.s64 = r11.s64 - ctx.r7.s64;
	// sth r11,2(r6)
	PPC_STORE_U16(ctx.r6.u32 + 2, r11.u16);
	// lwz r11,1504(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// lhz r10,2(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r10,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r10.u16);
	// lwz r11,1504(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lhzx r10,r11,r29
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// sth r10,2(r11)
	PPC_STORE_U16(r11.u32 + 2, ctx.r10.u16);
	// lwz r11,1504(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// lhz r10,2(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r10,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r10.u16);
	// lwz r11,1504(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lhzx r11,r30,r11
	r11.u64 = PPC_LOAD_U16(r30.u32 + r11.u32);
	// b 0x8273675c
	goto loc_8273675C;
loc_82735330:
	// rlwinm r11,r16,2,0,29
	r11.u64 = __builtin_rotateleft64(r16.u32 | (r16.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r25,1504(r31)
	r25.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// clrlwi r20,r9,31
	r20.u64 = ctx.r9.u32 & 0x1;
	// lwz r24,1500(r31)
	r24.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r19,r11,r14
	r19.u64 = r11.u64 + r14.u64;
	// srawi r18,r15,1
	xer.ca = (r15.s32 < 0) & ((r15.u32 & 0x1) != 0);
	r18.s64 = r15.s32 >> 1;
	// cmpwi cr6,r20,0
	cr6.compare<int32_t>(r20.s32, 0, xer);
	// stw r20,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r20.u32);
	// lwz r22,0(r19)
	r22.u64 = PPC_LOAD_U32(r19.u32 + 0);
	// stw r22,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r22.u32);
	// bne cr6,0x82735388
	if (!cr6.eq) goto loc_82735388;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x8273537c
	if (cr6.eq) goto loc_8273537C;
	// srawi r10,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r9.s32 >> 1;
	// lwz r11,1240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1240);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82735388
	if (cr6.eq) goto loc_82735388;
loc_8273537C:
	// li r29,1
	r29.s64 = 1;
	// li r30,0
	r30.s64 = 0;
	// b 0x82735390
	goto loc_82735390;
loc_82735388:
	// li r30,0
	r30.s64 = 0;
	// mr r29,r30
	r29.u64 = r30.u64;
loc_82735390:
	// addi r21,r31,1516
	r21.s64 = r31.s64 + 1516;
	// lwz r10,1520(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1520);
	// lis r9,1
	ctx.r9.s64 = 65536;
	// stw r30,240(r1)
	PPC_STORE_U32(ctx.r1.u32 + 240, r30.u32);
	// srawi r23,r22,16
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0xFFFF) != 0);
	r23.s64 = r22.s32 >> 16;
	// stw r30,236(r1)
	PPC_STORE_U32(ctx.r1.u32 + 236, r30.u32);
	// mr r27,r30
	r27.u64 = r30.u64;
	// stw r30,232(r1)
	PPC_STORE_U32(ctx.r1.u32 + 232, r30.u32);
	// mr r26,r30
	r26.u64 = r30.u64;
	// stw r30,268(r1)
	PPC_STORE_U32(ctx.r1.u32 + 268, r30.u32);
	// lwz r11,0(r21)
	r11.u64 = PPC_LOAD_U32(r21.u32 + 0);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r30,264(r1)
	PPC_STORE_U32(ctx.r1.u32 + 264, r30.u32);
	// rlwinm r11,r11,17,0,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 17) & 0xFFFE0000;
	// stw r23,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r23.u32);
	// stw r27,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r27.u32);
	// subf r11,r11,r9
	r11.s64 = ctx.r9.s64 - r11.s64;
	// stw r26,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r26.u32);
	// stw r11,272(r1)
	PPC_STORE_U32(ctx.r1.u32 + 272, r11.u32);
	// bne cr6,0x827353f4
	if (!cr6.eq) goto loc_827353F4;
	// lis r10,-32145
	ctx.r10.s64 = -2106654720;
	// lis r11,-32145
	r11.s64 = -2106654720;
	// addi r10,r10,-23384
	ctx.r10.s64 = ctx.r10.s64 + -23384;
	// addi r11,r11,-22936
	r11.s64 = r11.s64 + -22936;
	// b 0x82735404
	goto loc_82735404;
loc_827353F4:
	// lis r10,-32145
	ctx.r10.s64 = -2106654720;
	// lis r11,-32145
	r11.s64 = -2106654720;
	// addi r10,r10,-23256
	ctx.r10.s64 = ctx.r10.s64 + -23256;
	// addi r11,r11,-23320
	r11.s64 = r11.s64 + -23320;
loc_82735404:
	// stw r11,1624(r31)
	PPC_STORE_U32(r31.u32 + 1624, r11.u32);
	// cmpwi cr6,r17,0
	cr6.compare<int32_t>(r17.s32, 0, xer);
	// stw r10,1620(r31)
	PPC_STORE_U32(r31.u32 + 1620, ctx.r10.u32);
	// beq cr6,0x8273548c
	if (cr6.eq) goto loc_8273548C;
	// addi r11,r16,-1
	r11.s64 = r16.s64 + -1;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r11,r24
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + r24.u32);
	// lhzx r11,r25,r11
	r11.u64 = PPC_LOAD_U16(r25.u32 + r11.u32);
	// sth r10,138(r1)
	PPC_STORE_U16(ctx.r1.u32 + 138, ctx.r10.u16);
	// sth r11,136(r1)
	PPC_STORE_U16(ctx.r1.u32 + 136, r11.u16);
	// lwz r4,136(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// clrlwi r11,r4,16
	r11.u64 = ctx.r4.u32 & 0xFFFF;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x8273548c
	if (cr6.eq) goto loc_8273548C;
	// rlwinm r11,r4,0,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x10000;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8273546c
	if (cr6.eq) goto loc_8273546C;
	// lwz r11,1620(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1620);
	// stw r4,264(r1)
	PPC_STORE_U32(ctx.r1.u32 + 264, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// li r26,1
	r26.s64 = 1;
	// stw r3,232(r1)
	PPC_STORE_U32(ctx.r1.u32 + 232, ctx.r3.u32);
	// stw r26,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r26.u32);
	// b 0x82735488
	goto loc_82735488;
loc_8273546C:
	// lwz r11,1624(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1624);
	// stw r4,232(r1)
	PPC_STORE_U32(ctx.r1.u32 + 232, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// li r27,1
	r27.s64 = 1;
	// stw r3,264(r1)
	PPC_STORE_U32(ctx.r1.u32 + 264, ctx.r3.u32);
	// stw r27,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r27.u32);
loc_82735488:
	// li r30,1
	r30.s64 = 1;
loc_8273548C:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// bne cr6,0x827355b8
	if (!cr6.eq) goto loc_827355B8;
	// subf r28,r15,r16
	r28.s64 = r16.s64 - r15.s64;
	// rlwinm r11,r28,1,0,30
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r11,r24
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + r24.u32);
	// lhzx r11,r25,r11
	r11.u64 = PPC_LOAD_U16(r25.u32 + r11.u32);
	// sth r10,138(r1)
	PPC_STORE_U16(ctx.r1.u32 + 138, ctx.r10.u16);
	// sth r11,136(r1)
	PPC_STORE_U16(ctx.r1.u32 + 136, r11.u16);
	// lwz r4,136(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// clrlwi r11,r4,16
	r11.u64 = ctx.r4.u32 & 0xFFFF;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x8273551c
	if (cr6.eq) goto loc_8273551C;
	// rlwinm r11,r4,0,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x10000;
	// rlwinm r29,r30,2,0,29
	r29.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq cr6,0x827354f4
	if (cr6.eq) goto loc_827354F4;
	// addi r11,r1,264
	r11.s64 = ctx.r1.s64 + 264;
	// lwz r10,1620(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1620);
	// stwx r4,r29,r11
	PPC_STORE_U32(r29.u32 + r11.u32, ctx.r4.u32);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r26,r26,1
	r26.s64 = r26.s64 + 1;
	// addi r11,r1,232
	r11.s64 = ctx.r1.s64 + 232;
	// stw r26,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r26.u32);
	// b 0x82735514
	goto loc_82735514;
loc_827354F4:
	// addi r10,r1,232
	ctx.r10.s64 = ctx.r1.s64 + 232;
	// lwz r11,1624(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1624);
	// stwx r4,r29,r10
	PPC_STORE_U32(r29.u32 + ctx.r10.u32, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r27,r27,1
	r27.s64 = r27.s64 + 1;
	// addi r11,r1,264
	r11.s64 = ctx.r1.s64 + 264;
	// stw r27,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r27.u32);
loc_82735514:
	// stwx r3,r29,r11
	PPC_STORE_U32(r29.u32 + r11.u32, ctx.r3.u32);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
loc_8273551C:
	// cmpwi cr6,r18,1
	cr6.compare<int32_t>(r18.s32, 1, xer);
	// ble cr6,0x827355b8
	if (!cr6.gt) goto loc_827355B8;
	// addi r11,r15,-2
	r11.s64 = r15.s64 + -2;
	// cmpw cr6,r17,r11
	cr6.compare<int32_t>(r17.s32, r11.s32, xer);
	// addi r11,r28,2
	r11.s64 = r28.s64 + 2;
	// bne cr6,0x82735538
	if (!cr6.eq) goto loc_82735538;
	// addi r11,r28,-2
	r11.s64 = r28.s64 + -2;
loc_82735538:
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r11,r24
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + r24.u32);
	// lhzx r11,r25,r11
	r11.u64 = PPC_LOAD_U16(r25.u32 + r11.u32);
	// sth r10,138(r1)
	PPC_STORE_U16(ctx.r1.u32 + 138, ctx.r10.u16);
	// sth r11,136(r1)
	PPC_STORE_U16(ctx.r1.u32 + 136, r11.u16);
	// lwz r4,136(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// clrlwi r11,r4,16
	r11.u64 = ctx.r4.u32 & 0xFFFF;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x827355b8
	if (cr6.eq) goto loc_827355B8;
	// rlwinm r11,r4,0,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x10000;
	// rlwinm r30,r30,2,0,29
	r30.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq cr6,0x82735594
	if (cr6.eq) goto loc_82735594;
	// addi r11,r1,264
	r11.s64 = ctx.r1.s64 + 264;
	// lwz r10,1620(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1620);
	// stwx r4,r30,r11
	PPC_STORE_U32(r30.u32 + r11.u32, ctx.r4.u32);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r26,r26,1
	r26.s64 = r26.s64 + 1;
	// addi r11,r1,232
	r11.s64 = ctx.r1.s64 + 232;
	// stw r26,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r26.u32);
	// b 0x827355b4
	goto loc_827355B4;
loc_82735594:
	// addi r10,r1,232
	ctx.r10.s64 = ctx.r1.s64 + 232;
	// lwz r11,1624(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1624);
	// stwx r4,r30,r10
	PPC_STORE_U32(r30.u32 + ctx.r10.u32, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r27,r27,1
	r27.s64 = r27.s64 + 1;
	// addi r11,r1,264
	r11.s64 = ctx.r1.s64 + 264;
	// stw r27,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r27.u32);
loc_827355B4:
	// stwx r3,r30,r11
	PPC_STORE_U32(r30.u32 + r11.u32, ctx.r3.u32);
loc_827355B8:
	// add r11,r26,r27
	r11.u64 = r26.u64 + r27.u64;
	// li r18,0
	r18.s64 = 0;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// ble cr6,0x8273572c
	if (!cr6.gt) goto loc_8273572C;
	// lhz r11,238(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 238);
	// lhz r10,234(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 234);
	// lhz r3,242(r1)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r1.u32 + 242);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lhz r9,236(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 236);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// lhz r8,232(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 232);
	// extsh r3,r3
	ctx.r3.s64 = ctx.r3.s16;
	// lhz r30,240(r1)
	r30.u64 = PPC_LOAD_U16(ctx.r1.u32 + 240);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// lhz r7,270(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 270);
	// extsh r30,r30
	r30.s64 = r30.s16;
	// lhz r6,266(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 266);
	// subf r27,r10,r11
	r27.s64 = r11.s64 - ctx.r10.s64;
	// lhz r29,274(r1)
	r29.u64 = PPC_LOAD_U16(ctx.r1.u32 + 274);
	// subf r23,r3,r11
	r23.s64 = r11.s64 - ctx.r3.s64;
	// lhz r5,268(r1)
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r1.u32 + 268);
	// subf r22,r10,r3
	r22.s64 = ctx.r3.s64 - ctx.r10.s64;
	// lhz r4,264(r1)
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r1.u32 + 264);
	// subf r26,r8,r9
	r26.s64 = ctx.r9.s64 - ctx.r8.s64;
	// lhz r28,272(r1)
	r28.u64 = PPC_LOAD_U16(ctx.r1.u32 + 272);
	// subf r21,r30,r9
	r21.s64 = ctx.r9.s64 - r30.s64;
	// subf r20,r8,r30
	r20.s64 = r30.s64 - ctx.r8.s64;
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// extsh r29,r29
	r29.s64 = r29.s16;
	// xor r23,r23,r27
	r23.u64 = r23.u64 ^ r27.u64;
	// xor r22,r22,r27
	r22.u64 = r22.u64 ^ r27.u64;
	// xor r21,r21,r26
	r21.u64 = r21.u64 ^ r26.u64;
	// extsh r4,r4
	ctx.r4.s64 = ctx.r4.s16;
	// extsh r5,r5
	ctx.r5.s64 = ctx.r5.s16;
	// extsh r28,r28
	r28.s64 = r28.s16;
	// subf r25,r6,r7
	r25.s64 = ctx.r7.s64 - ctx.r6.s64;
	// xor r20,r20,r26
	r20.u64 = r20.u64 ^ r26.u64;
	// subf r17,r29,r7
	r17.s64 = ctx.r7.s64 - r29.s64;
	// srawi r27,r23,31
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x7FFFFFFF) != 0);
	r27.s64 = r23.s32 >> 31;
	// subf r16,r6,r29
	r16.s64 = r29.s64 - ctx.r6.s64;
	// srawi r26,r22,31
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x7FFFFFFF) != 0);
	r26.s64 = r22.s32 >> 31;
	// subf r24,r4,r5
	r24.s64 = ctx.r5.s64 - ctx.r4.s64;
	// srawi r23,r21,31
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x7FFFFFFF) != 0);
	r23.s64 = r21.s32 >> 31;
	// subf r15,r28,r5
	r15.s64 = ctx.r5.s64 - r28.s64;
	// xor r22,r17,r25
	r22.u64 = r17.u64 ^ r25.u64;
	// subf r14,r4,r28
	r14.s64 = r28.s64 - ctx.r4.s64;
	// xor r21,r16,r25
	r21.u64 = r16.u64 ^ r25.u64;
	// srawi r25,r20,31
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x7FFFFFFF) != 0);
	r25.s64 = r20.s32 >> 31;
	// xor r20,r15,r24
	r20.u64 = r15.u64 ^ r24.u64;
	// srawi r22,r22,31
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x7FFFFFFF) != 0);
	r22.s64 = r22.s32 >> 31;
	// xor r17,r14,r24
	r17.u64 = r14.u64 ^ r24.u64;
	// srawi r24,r21,31
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x7FFFFFFF) != 0);
	r24.s64 = r21.s32 >> 31;
	// srawi r21,r20,31
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x7FFFFFFF) != 0);
	r21.s64 = r20.s32 >> 31;
	// srawi r20,r17,31
	xer.ca = (r17.s32 < 0) & ((r17.u32 & 0x7FFFFFFF) != 0);
	r20.s64 = r17.s32 >> 31;
	// and r10,r26,r10
	ctx.r10.u64 = r26.u64 & ctx.r10.u64;
	// or r17,r27,r26
	r17.u64 = r27.u64 | r26.u64;
	// or r26,r23,r25
	r26.u64 = r23.u64 | r25.u64;
	// and r8,r25,r8
	ctx.r8.u64 = r25.u64 & ctx.r8.u64;
	// andc r30,r30,r26
	r30.u64 = r30.u64 & ~r26.u64;
	// or r26,r22,r24
	r26.u64 = r22.u64 | r24.u64;
	// or r25,r21,r20
	r25.u64 = r21.u64 | r20.u64;
	// andc r3,r3,r17
	ctx.r3.u64 = ctx.r3.u64 & ~r17.u64;
	// andc r29,r29,r26
	r29.u64 = r29.u64 & ~r26.u64;
	// and r7,r22,r7
	ctx.r7.u64 = r22.u64 & ctx.r7.u64;
	// andc r28,r28,r25
	r28.u64 = r28.u64 & ~r25.u64;
	// and r4,r20,r4
	ctx.r4.u64 = r20.u64 & ctx.r4.u64;
	// or r10,r3,r10
	ctx.r10.u64 = ctx.r3.u64 | ctx.r10.u64;
	// and r11,r27,r11
	r11.u64 = r27.u64 & r11.u64;
	// and r9,r23,r9
	ctx.r9.u64 = r23.u64 & ctx.r9.u64;
	// lwz r23,104(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// or r8,r30,r8
	ctx.r8.u64 = r30.u64 | ctx.r8.u64;
	// or r7,r29,r7
	ctx.r7.u64 = r29.u64 | ctx.r7.u64;
	// and r6,r24,r6
	ctx.r6.u64 = r24.u64 & ctx.r6.u64;
	// or r4,r28,r4
	ctx.r4.u64 = r28.u64 | ctx.r4.u64;
	// and r5,r21,r5
	ctx.r5.u64 = r21.u64 & ctx.r5.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// or r10,r8,r9
	ctx.r10.u64 = ctx.r8.u64 | ctx.r9.u64;
	// or r9,r7,r6
	ctx.r9.u64 = ctx.r7.u64 | ctx.r6.u64;
	// or r8,r4,r5
	ctx.r8.u64 = ctx.r4.u64 | ctx.r5.u64;
	// sth r11,498(r1)
	PPC_STORE_U16(ctx.r1.u32 + 498, r11.u16);
	// sth r10,496(r1)
	PPC_STORE_U16(ctx.r1.u32 + 496, ctx.r10.u16);
	// sth r9,462(r1)
	PPC_STORE_U16(ctx.r1.u32 + 462, ctx.r9.u16);
	// sth r8,460(r1)
	PPC_STORE_U16(ctx.r1.u32 + 460, ctx.r8.u16);
	// lwz r20,112(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lwz r14,168(r1)
	r14.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// lwz r16,164(r1)
	r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// lwz r26,96(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r15,124(r1)
	r15.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// lwz r27,100(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r22,108(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// b 0x82735758
	goto loc_82735758;
loc_8273572C:
	// bne cr6,0x82735740
	if (!cr6.eq) goto loc_82735740;
	// lwz r11,232(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 232);
	// stw r11,496(r1)
	PPC_STORE_U32(ctx.r1.u32 + 496, r11.u32);
	// lwz r11,264(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 264);
	// b 0x82735754
	goto loc_82735754;
loc_82735740:
	// lwz r11,0(r21)
	r11.u64 = PPC_LOAD_U32(r21.u32 + 0);
	// lis r10,1
	ctx.r10.s64 = 65536;
	// stw r18,496(r1)
	PPC_STORE_U32(ctx.r1.u32 + 496, r18.u32);
	// rlwinm r11,r11,17,0,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 17) & 0xFFFE0000;
	// subf r11,r11,r10
	r11.s64 = ctx.r10.s64 - r11.s64;
loc_82735754:
	// stw r11,460(r1)
	PPC_STORE_U32(ctx.r1.u32 + 460, r11.u32);
loc_82735758:
	// lwz r11,1508(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1508);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82735774
	if (cr6.eq) goto loc_82735774;
	// cmpw cr6,r27,r26
	cr6.compare<int32_t>(r27.s32, r26.s32, xer);
	// ble cr6,0x82735780
	if (!cr6.gt) goto loc_82735780;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82735784
	if (!cr6.eq) goto loc_82735784;
loc_82735774:
	// lwz r11,1512(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1512);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82735784
	if (cr6.eq) goto loc_82735784;
loc_82735780:
	// li r18,1
	r18.s64 = 1;
loc_82735784:
	// clrlwi r9,r23,31
	ctx.r9.u64 = r23.u32 & 0x1;
	// lwz r8,460(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 460);
	// xor r11,r18,r9
	r11.u64 = r18.u64 ^ ctx.r9.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x8273579c
	if (!cr6.eq) goto loc_8273579C;
	// lwz r8,496(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 496);
loc_8273579C:
	// rlwinm r9,r9,16,0,15
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 16) & 0xFFFF0000;
	// lhz r11,62(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 62);
	// lhz r6,66(r31)
	ctx.r6.u64 = PPC_LOAD_U16(r31.u32 + 66);
	// add r10,r15,r16
	ctx.r10.u64 = r15.u64 + r16.u64;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// mr r5,r11
	ctx.r5.u64 = r11.u64;
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// rlwinm r29,r10,1,0,30
	r29.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r30,r16,1,0,30
	r30.u64 = __builtin_rotateleft64(r16.u32 | (r16.u64 << 32), 1) & 0xFFFFFFFE;
	// stw r9,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r9.u32);
	// cmpwi cr6,r20,0
	cr6.compare<int32_t>(r20.s32, 0, xer);
	// lhz r9,138(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 138);
	// extsh r7,r9
	ctx.r7.s64 = ctx.r9.s16;
	// lhz r9,136(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 136);
	// extsh r8,r9
	ctx.r8.s64 = ctx.r9.s16;
	// extsh r9,r11
	ctx.r9.s64 = r11.s16;
	// add r11,r9,r7
	r11.u64 = ctx.r9.u64 + ctx.r7.u64;
	// add r9,r11,r22
	ctx.r9.u64 = r11.u64 + r22.u64;
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// and r9,r9,r6
	ctx.r9.u64 = ctx.r9.u64 & ctx.r6.u64;
	// add r10,r11,r14
	ctx.r10.u64 = r11.u64 + r14.u64;
	// subf r11,r5,r9
	r11.s64 = ctx.r9.s64 - ctx.r5.s64;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// sth r11,2(r19)
	PPC_STORE_U16(r19.u32 + 2, r11.u16);
	// lwz r9,1500(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r9,r9,r29
	ctx.r9.u64 = ctx.r9.u64 + r29.u64;
	// sth r11,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, r11.u16);
	// lwz r11,1500(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// lhz r9,2(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r9,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r9.u16);
	// lwz r11,1500(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// lhzx r9,r11,r29
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// sth r9,2(r11)
	PPC_STORE_U16(r11.u32 + 2, ctx.r9.u16);
	// lwz r11,1500(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// lhz r9,2(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r9,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r9.u16);
	// lwz r7,1500(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// lhz r9,68(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 68);
	// lhz r11,64(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 64);
	// extsh r6,r9
	ctx.r6.s64 = ctx.r9.s16;
	// lhzx r9,r7,r30
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r7.u32 + r30.u32);
	// mr r7,r11
	ctx.r7.u64 = r11.u64;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// stw r9,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r9.u32);
	// extsh r9,r11
	ctx.r9.s64 = r11.s16;
	// add r11,r9,r8
	r11.u64 = ctx.r9.u64 + ctx.r8.u64;
	// add r11,r11,r23
	r11.u64 = r11.u64 + r23.u64;
	// and r11,r11,r6
	r11.u64 = r11.u64 & ctx.r6.u64;
	// subf r11,r7,r11
	r11.s64 = r11.s64 - ctx.r7.s64;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// sth r11,0(r19)
	PPC_STORE_U16(r19.u32 + 0, r11.u16);
	// lwz r9,1504(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// add r9,r29,r9
	ctx.r9.u64 = r29.u64 + ctx.r9.u64;
	// sth r11,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, r11.u16);
	// lwz r11,1504(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// lhz r9,2(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r9,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r9.u16);
	// lwz r11,1504(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lhzx r9,r11,r29
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + r29.u32);
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// sth r9,2(r11)
	PPC_STORE_U16(r11.u32 + 2, ctx.r9.u16);
	// lwz r11,1504(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// lhz r9,2(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 2);
	// sth r9,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r9.u16);
	// lwz r9,1504(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lwz r11,0(r19)
	r11.u64 = PPC_LOAD_U32(r19.u32 + 0);
	// lhzx r9,r30,r9
	ctx.r9.u64 = PPC_LOAD_U16(r30.u32 + ctx.r9.u32);
	// stw r11,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r11.u32);
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// stw r11,4(r19)
	PPC_STORE_U32(r19.u32 + 4, r11.u32);
	// addi r11,r31,50
	r11.s64 = r31.s64 + 50;
	// lwz r25,1496(r31)
	r25.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lwz r24,1492(r31)
	r24.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// stw r9,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r9.u32);
	// lhz r27,0(r11)
	r27.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// srawi r20,r27,1
	xer.ca = (r27.s32 < 0) & ((r27.u32 & 0x1) != 0);
	r20.s64 = r27.s32 >> 1;
	// bne cr6,0x8273591c
	if (!cr6.eq) goto loc_8273591C;
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82735910
	if (cr6.eq) goto loc_82735910;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// lwz r10,1240(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1240);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r10
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8273591c
	if (cr6.eq) goto loc_8273591C;
loc_82735910:
	// li r26,1
	r26.s64 = 1;
	// li r17,0
	r17.s64 = 0;
	// b 0x82735924
	goto loc_82735924;
loc_8273591C:
	// li r17,0
	r17.s64 = 0;
	// mr r26,r17
	r26.u64 = r17.u64;
loc_82735924:
	// addi r18,r31,1516
	r18.s64 = r31.s64 + 1516;
	// stw r17,304(r1)
	PPC_STORE_U32(ctx.r1.u32 + 304, r17.u32);
	// lis r11,-32145
	r11.s64 = -2106654720;
	// stw r17,300(r1)
	PPC_STORE_U32(ctx.r1.u32 + 300, r17.u32);
	// lis r15,1
	r15.s64 = 65536;
	// stw r17,296(r1)
	PPC_STORE_U32(ctx.r1.u32 + 296, r17.u32);
	// addi r11,r11,-22296
	r11.s64 = r11.s64 + -22296;
	// stw r17,332(r1)
	PPC_STORE_U32(ctx.r1.u32 + 332, r17.u32);
	// lis r10,-32145
	ctx.r10.s64 = -2106654720;
	// stw r17,328(r1)
	PPC_STORE_U32(ctx.r1.u32 + 328, r17.u32);
	// lwz r9,0(r18)
	ctx.r9.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// mr r22,r17
	r22.u64 = r17.u64;
	// addi r10,r10,-22616
	ctx.r10.s64 = ctx.r10.s64 + -22616;
	// rlwinm r9,r9,17,0,14
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 17) & 0xFFFE0000;
	// stw r11,1624(r31)
	PPC_STORE_U32(r31.u32 + 1624, r11.u32);
	// mr r21,r17
	r21.u64 = r17.u64;
	// subf r11,r9,r15
	r11.s64 = r15.s64 - ctx.r9.s64;
	// stw r22,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r22.u32);
	// mr r28,r17
	r28.u64 = r17.u64;
	// stw r10,1620(r31)
	PPC_STORE_U32(r31.u32 + 1620, ctx.r10.u32);
	// stw r21,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r21.u32);
	// stw r11,336(r1)
	PPC_STORE_U32(ctx.r1.u32 + 336, r11.u32);
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// rlwinm r19,r11,1,0,30
	r19.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// cmpwi cr6,r19,0
	cr6.compare<int32_t>(r19.s32, 0, xer);
	// beq cr6,0x82735a04
	if (cr6.eq) goto loc_82735A04;
	// addi r11,r16,-1
	r11.s64 = r16.s64 + -1;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r24,r11
	ctx.r10.u64 = PPC_LOAD_U16(r24.u32 + r11.u32);
	// lhzx r11,r11,r25
	r11.u64 = PPC_LOAD_U16(r11.u32 + r25.u32);
	// sth r10,154(r1)
	PPC_STORE_U16(ctx.r1.u32 + 154, ctx.r10.u16);
	// sth r11,152(r1)
	PPC_STORE_U16(ctx.r1.u32 + 152, r11.u16);
	// lwz r4,152(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// clrlwi r11,r4,16
	r11.u64 = ctx.r4.u32 & 0xFFFF;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x82735a04
	if (cr6.eq) goto loc_82735A04;
	// rlwinm r11,r4,0,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x10000;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x827359e4
	if (cr6.eq) goto loc_827359E4;
	// lwz r11,1620(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1620);
	// stw r4,328(r1)
	PPC_STORE_U32(ctx.r1.u32 + 328, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// li r21,1
	r21.s64 = 1;
	// stw r3,296(r1)
	PPC_STORE_U32(ctx.r1.u32 + 296, ctx.r3.u32);
	// stw r21,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r21.u32);
	// b 0x82735a00
	goto loc_82735A00;
loc_827359E4:
	// lwz r11,1624(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1624);
	// stw r4,296(r1)
	PPC_STORE_U32(ctx.r1.u32 + 296, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// li r22,1
	r22.s64 = 1;
	// stw r3,328(r1)
	PPC_STORE_U32(ctx.r1.u32 + 328, ctx.r3.u32);
	// stw r22,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r22.u32);
loc_82735A00:
	// li r28,1
	r28.s64 = 1;
loc_82735A04:
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// bne cr6,0x82735b30
	if (!cr6.eq) goto loc_82735B30;
	// subf r23,r27,r16
	r23.s64 = r16.s64 - r27.s64;
	// rlwinm r11,r23,1,0,30
	r11.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r24,r11
	ctx.r10.u64 = PPC_LOAD_U16(r24.u32 + r11.u32);
	// lhzx r11,r11,r25
	r11.u64 = PPC_LOAD_U16(r11.u32 + r25.u32);
	// sth r10,154(r1)
	PPC_STORE_U16(ctx.r1.u32 + 154, ctx.r10.u16);
	// sth r11,152(r1)
	PPC_STORE_U16(ctx.r1.u32 + 152, r11.u16);
	// lwz r4,152(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// clrlwi r11,r4,16
	r11.u64 = ctx.r4.u32 & 0xFFFF;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x82735a94
	if (cr6.eq) goto loc_82735A94;
	// rlwinm r11,r4,0,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x10000;
	// rlwinm r26,r28,2,0,29
	r26.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq cr6,0x82735a6c
	if (cr6.eq) goto loc_82735A6C;
	// addi r11,r1,328
	r11.s64 = ctx.r1.s64 + 328;
	// lwz r10,1620(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1620);
	// stwx r4,r26,r11
	PPC_STORE_U32(r26.u32 + r11.u32, ctx.r4.u32);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r21,r21,1
	r21.s64 = r21.s64 + 1;
	// addi r11,r1,296
	r11.s64 = ctx.r1.s64 + 296;
	// stw r21,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r21.u32);
	// b 0x82735a8c
	goto loc_82735A8C;
loc_82735A6C:
	// addi r10,r1,296
	ctx.r10.s64 = ctx.r1.s64 + 296;
	// lwz r11,1624(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1624);
	// stwx r4,r26,r10
	PPC_STORE_U32(r26.u32 + ctx.r10.u32, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r22,r22,1
	r22.s64 = r22.s64 + 1;
	// addi r11,r1,328
	r11.s64 = ctx.r1.s64 + 328;
	// stw r22,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r22.u32);
loc_82735A8C:
	// stwx r3,r26,r11
	PPC_STORE_U32(r26.u32 + r11.u32, ctx.r3.u32);
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
loc_82735A94:
	// cmpwi cr6,r20,1
	cr6.compare<int32_t>(r20.s32, 1, xer);
	// ble cr6,0x82735b30
	if (!cr6.gt) goto loc_82735B30;
	// addi r11,r27,-2
	r11.s64 = r27.s64 + -2;
	// cmpw cr6,r19,r11
	cr6.compare<int32_t>(r19.s32, r11.s32, xer);
	// addi r11,r23,2
	r11.s64 = r23.s64 + 2;
	// bne cr6,0x82735ab0
	if (!cr6.eq) goto loc_82735AB0;
	// addi r11,r23,-2
	r11.s64 = r23.s64 + -2;
loc_82735AB0:
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r24,r11
	ctx.r10.u64 = PPC_LOAD_U16(r24.u32 + r11.u32);
	// lhzx r11,r11,r25
	r11.u64 = PPC_LOAD_U16(r11.u32 + r25.u32);
	// sth r10,154(r1)
	PPC_STORE_U16(ctx.r1.u32 + 154, ctx.r10.u16);
	// sth r11,152(r1)
	PPC_STORE_U16(ctx.r1.u32 + 152, r11.u16);
	// lwz r4,152(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// clrlwi r11,r4,16
	r11.u64 = ctx.r4.u32 & 0xFFFF;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x82735b30
	if (cr6.eq) goto loc_82735B30;
	// rlwinm r11,r4,0,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x10000;
	// rlwinm r28,r28,2,0,29
	r28.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq cr6,0x82735b0c
	if (cr6.eq) goto loc_82735B0C;
	// addi r11,r1,328
	r11.s64 = ctx.r1.s64 + 328;
	// lwz r10,1620(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1620);
	// stwx r4,r28,r11
	PPC_STORE_U32(r28.u32 + r11.u32, ctx.r4.u32);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r21,r21,1
	r21.s64 = r21.s64 + 1;
	// addi r11,r1,296
	r11.s64 = ctx.r1.s64 + 296;
	// stw r21,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r21.u32);
	// b 0x82735b2c
	goto loc_82735B2C;
loc_82735B0C:
	// addi r10,r1,296
	ctx.r10.s64 = ctx.r1.s64 + 296;
	// lwz r11,1624(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1624);
	// stwx r4,r28,r10
	PPC_STORE_U32(r28.u32 + ctx.r10.u32, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r22,r22,1
	r22.s64 = r22.s64 + 1;
	// addi r11,r1,328
	r11.s64 = ctx.r1.s64 + 328;
	// stw r22,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r22.u32);
loc_82735B2C:
	// stwx r3,r28,r11
	PPC_STORE_U32(r28.u32 + r11.u32, ctx.r3.u32);
loc_82735B30:
	// mr r10,r17
	ctx.r10.u64 = r17.u64;
	// add r11,r21,r22
	r11.u64 = r21.u64 + r22.u64;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// stw r10,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r10.u32);
	// ble cr6,0x82735c94
	if (!cr6.gt) goto loc_82735C94;
	// lhz r11,302(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 302);
	// lhz r10,298(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 298);
	// lhz r3,306(r1)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r1.u32 + 306);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lhz r9,300(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 300);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// lhz r8,296(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 296);
	// extsh r3,r3
	ctx.r3.s64 = ctx.r3.s16;
	// lhz r28,304(r1)
	r28.u64 = PPC_LOAD_U16(ctx.r1.u32 + 304);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// lhz r7,334(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 334);
	// extsh r28,r28
	r28.s64 = r28.s16;
	// lhz r6,330(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 330);
	// subf r25,r10,r11
	r25.s64 = r11.s64 - ctx.r10.s64;
	// lhz r27,338(r1)
	r27.u64 = PPC_LOAD_U16(ctx.r1.u32 + 338);
	// subf r21,r3,r11
	r21.s64 = r11.s64 - ctx.r3.s64;
	// lhz r5,332(r1)
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r1.u32 + 332);
	// subf r20,r10,r3
	r20.s64 = ctx.r3.s64 - ctx.r10.s64;
	// lhz r4,328(r1)
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r1.u32 + 328);
	// subf r24,r8,r9
	r24.s64 = ctx.r9.s64 - ctx.r8.s64;
	// lhz r26,336(r1)
	r26.u64 = PPC_LOAD_U16(ctx.r1.u32 + 336);
	// subf r19,r28,r9
	r19.s64 = ctx.r9.s64 - r28.s64;
	// subf r18,r8,r28
	r18.s64 = r28.s64 - ctx.r8.s64;
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// extsh r27,r27
	r27.s64 = r27.s16;
	// xor r21,r21,r25
	r21.u64 = r21.u64 ^ r25.u64;
	// xor r20,r20,r25
	r20.u64 = r20.u64 ^ r25.u64;
	// xor r19,r19,r24
	r19.u64 = r19.u64 ^ r24.u64;
	// extsh r4,r4
	ctx.r4.s64 = ctx.r4.s16;
	// extsh r5,r5
	ctx.r5.s64 = ctx.r5.s16;
	// extsh r26,r26
	r26.s64 = r26.s16;
	// subf r23,r6,r7
	r23.s64 = ctx.r7.s64 - ctx.r6.s64;
	// xor r18,r18,r24
	r18.u64 = r18.u64 ^ r24.u64;
	// subf r17,r27,r7
	r17.s64 = ctx.r7.s64 - r27.s64;
	// subf r16,r6,r27
	r16.s64 = r27.s64 - ctx.r6.s64;
	// srawi r25,r21,31
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x7FFFFFFF) != 0);
	r25.s64 = r21.s32 >> 31;
	// srawi r24,r20,31
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x7FFFFFFF) != 0);
	r24.s64 = r20.s32 >> 31;
	// subf r22,r4,r5
	r22.s64 = ctx.r5.s64 - ctx.r4.s64;
	// srawi r21,r19,31
	xer.ca = (r19.s32 < 0) & ((r19.u32 & 0x7FFFFFFF) != 0);
	r21.s64 = r19.s32 >> 31;
	// subf r15,r26,r5
	r15.s64 = ctx.r5.s64 - r26.s64;
	// xor r20,r17,r23
	r20.u64 = r17.u64 ^ r23.u64;
	// subf r14,r4,r26
	r14.s64 = r26.s64 - ctx.r4.s64;
	// xor r19,r16,r23
	r19.u64 = r16.u64 ^ r23.u64;
	// srawi r23,r18,31
	xer.ca = (r18.s32 < 0) & ((r18.u32 & 0x7FFFFFFF) != 0);
	r23.s64 = r18.s32 >> 31;
	// xor r18,r15,r22
	r18.u64 = r15.u64 ^ r22.u64;
	// srawi r20,r20,31
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x7FFFFFFF) != 0);
	r20.s64 = r20.s32 >> 31;
	// xor r17,r14,r22
	r17.u64 = r14.u64 ^ r22.u64;
	// srawi r22,r19,31
	xer.ca = (r19.s32 < 0) & ((r19.u32 & 0x7FFFFFFF) != 0);
	r22.s64 = r19.s32 >> 31;
	// srawi r19,r18,31
	xer.ca = (r18.s32 < 0) & ((r18.u32 & 0x7FFFFFFF) != 0);
	r19.s64 = r18.s32 >> 31;
	// srawi r18,r17,31
	xer.ca = (r17.s32 < 0) & ((r17.u32 & 0x7FFFFFFF) != 0);
	r18.s64 = r17.s32 >> 31;
	// and r10,r24,r10
	ctx.r10.u64 = r24.u64 & ctx.r10.u64;
	// or r17,r25,r24
	r17.u64 = r25.u64 | r24.u64;
	// or r24,r21,r23
	r24.u64 = r21.u64 | r23.u64;
	// and r8,r23,r8
	ctx.r8.u64 = r23.u64 & ctx.r8.u64;
	// andc r28,r28,r24
	r28.u64 = r28.u64 & ~r24.u64;
	// or r24,r20,r22
	r24.u64 = r20.u64 | r22.u64;
	// or r23,r19,r18
	r23.u64 = r19.u64 | r18.u64;
	// andc r3,r3,r17
	ctx.r3.u64 = ctx.r3.u64 & ~r17.u64;
	// andc r27,r27,r24
	r27.u64 = r27.u64 & ~r24.u64;
	// and r6,r22,r6
	ctx.r6.u64 = r22.u64 & ctx.r6.u64;
	// andc r26,r26,r23
	r26.u64 = r26.u64 & ~r23.u64;
	// and r4,r18,r4
	ctx.r4.u64 = r18.u64 & ctx.r4.u64;
	// or r10,r3,r10
	ctx.r10.u64 = ctx.r3.u64 | ctx.r10.u64;
	// and r11,r25,r11
	r11.u64 = r25.u64 & r11.u64;
	// or r8,r28,r8
	ctx.r8.u64 = r28.u64 | ctx.r8.u64;
	// and r9,r21,r9
	ctx.r9.u64 = r21.u64 & ctx.r9.u64;
	// or r6,r27,r6
	ctx.r6.u64 = r27.u64 | ctx.r6.u64;
	// and r7,r20,r7
	ctx.r7.u64 = r20.u64 & ctx.r7.u64;
	// or r4,r26,r4
	ctx.r4.u64 = r26.u64 | ctx.r4.u64;
	// and r5,r19,r5
	ctx.r5.u64 = r19.u64 & ctx.r5.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// or r10,r8,r9
	ctx.r10.u64 = ctx.r8.u64 | ctx.r9.u64;
	// or r9,r6,r7
	ctx.r9.u64 = ctx.r6.u64 | ctx.r7.u64;
	// or r8,r4,r5
	ctx.r8.u64 = ctx.r4.u64 | ctx.r5.u64;
	// sth r11,534(r1)
	PPC_STORE_U16(ctx.r1.u32 + 534, r11.u16);
	// sth r10,532(r1)
	PPC_STORE_U16(ctx.r1.u32 + 532, ctx.r10.u16);
	// lwz r10,128(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// sth r9,470(r1)
	PPC_STORE_U16(ctx.r1.u32 + 470, ctx.r9.u16);
	// sth r8,468(r1)
	PPC_STORE_U16(ctx.r1.u32 + 468, ctx.r8.u16);
	// lwz r21,96(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r22,100(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// b 0x82735cbc
	goto loc_82735CBC;
loc_82735C94:
	// bne cr6,0x82735ca8
	if (!cr6.eq) goto loc_82735CA8;
	// lwz r11,296(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 296);
	// stw r11,532(r1)
	PPC_STORE_U32(ctx.r1.u32 + 532, r11.u32);
	// lwz r11,328(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 328);
	// b 0x82735cb8
	goto loc_82735CB8;
loc_82735CA8:
	// lwz r11,0(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// stw r17,532(r1)
	PPC_STORE_U32(ctx.r1.u32 + 532, r17.u32);
	// rlwinm r11,r11,17,0,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 17) & 0xFFFE0000;
	// subf r11,r11,r15
	r11.s64 = r15.s64 - r11.s64;
loc_82735CB8:
	// stw r11,468(r1)
	PPC_STORE_U32(ctx.r1.u32 + 468, r11.u32);
loc_82735CBC:
	// lwz r11,1508(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1508);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82735cd8
	if (cr6.eq) goto loc_82735CD8;
	// cmpw cr6,r22,r21
	cr6.compare<int32_t>(r22.s32, r21.s32, xer);
	// ble cr6,0x82735ce4
	if (!cr6.gt) goto loc_82735CE4;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82735ce8
	if (!cr6.eq) goto loc_82735CE8;
loc_82735CD8:
	// lwz r11,1512(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1512);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82735ce8
	if (cr6.eq) goto loc_82735CE8;
loc_82735CE4:
	// li r10,1
	ctx.r10.s64 = 1;
loc_82735CE8:
	// lwz r9,468(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 468);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x82735cf8
	if (!cr6.eq) goto loc_82735CF8;
	// lwz r9,532(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 532);
loc_82735CF8:
	// lwz r10,1492(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// stw r9,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r9.u32);
	// lhz r11,114(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 114);
	// add r8,r29,r10
	ctx.r8.u64 = r29.u64 + ctx.r10.u64;
	// stw r9,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, ctx.r9.u32);
	// lhz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 112);
	// sth r11,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, r11.u16);
	// lwz r8,1492(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// sthx r11,r29,r8
	PPC_STORE_U16(r29.u32 + ctx.r8.u32, r11.u16);
	// lwz r9,1492(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// add r9,r30,r9
	ctx.r9.u64 = r30.u64 + ctx.r9.u64;
	// sth r11,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, r11.u16);
	// lwz r9,1492(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// sthx r11,r30,r9
	PPC_STORE_U16(r30.u32 + ctx.r9.u32, r11.u16);
	// lwz r11,1496(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// sth r10,2(r11)
	PPC_STORE_U16(r11.u32 + 2, ctx.r10.u16);
	// lwz r11,1496(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// sthx r10,r29,r11
	PPC_STORE_U16(r29.u32 + r11.u32, ctx.r10.u16);
	// lwz r11,1496(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// sth r10,2(r11)
	PPC_STORE_U16(r11.u32 + 2, ctx.r10.u16);
	// lwz r11,1496(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// sthx r10,r30,r11
	PPC_STORE_U16(r30.u32 + r11.u32, ctx.r10.u16);
	// b 0x82736764
	goto loc_82736764;
loc_82735D5C:
	// addi r11,r31,1516
	r11.s64 = r31.s64 + 1516;
	// lwz r27,0(r11)
	r27.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// bne cr6,0x82735d74
	if (!cr6.eq) goto loc_82735D74;
	// li r11,0
	r11.s64 = 0;
	// b 0x82735d80
	goto loc_82735D80;
loc_82735D74:
	// addi r11,r31,52
	r11.s64 = r31.s64 + 52;
	// lhz r11,0(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// mullw r11,r11,r15
	r11.s64 = int64_t(r11.s32) * int64_t(r15.s32);
loc_82735D80:
	// addi r10,r31,1320
	ctx.r10.s64 = r31.s64 + 1320;
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// beq cr6,0x82735d9c
	if (cr6.eq) goto loc_82735D9C;
	// cmpwi cr6,r10,3
	cr6.compare<int32_t>(ctx.r10.s32, 3, xer);
	// li r26,0
	r26.s64 = 0;
	// bne cr6,0x82735da0
	if (!cr6.eq) goto loc_82735DA0;
loc_82735D9C:
	// li r26,1
	r26.s64 = 1;
loc_82735DA0:
	// add r9,r11,r16
	ctx.r9.u64 = r11.u64 + r16.u64;
	// lwz r8,216(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 216);
	// li r11,0
	r11.s64 = 0;
	// rlwinm r7,r9,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// li r10,0
	ctx.r10.s64 = 0;
	// add r7,r7,r8
	ctx.r7.u64 = ctx.r7.u64 + ctx.r8.u64;
	// lwz r6,0(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// extsh r4,r6
	ctx.r4.s64 = ctx.r6.s16;
	// srawi r6,r6,16
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0xFFFF) != 0);
	ctx.r6.s64 = ctx.r6.s32 >> 16;
	// cmpwi cr6,r4,16384
	cr6.compare<int32_t>(ctx.r4.s32, 16384, xer);
	// beq cr6,0x827364c8
	if (cr6.eq) goto loc_827364C8;
	// add r5,r15,r9
	ctx.r5.u64 = r15.u64 + ctx.r9.u64;
	// lwz r9,4(r7)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + 4);
	// clrlwi r3,r6,31
	ctx.r3.u64 = ctx.r6.u32 & 0x1;
	// rlwinm r5,r5,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// add r8,r5,r8
	ctx.r8.u64 = ctx.r5.u64 + ctx.r8.u64;
	// rlwinm r7,r27,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 1) & 0xFFFFFFFE;
	// mr r3,r9
	ctx.r3.u64 = ctx.r9.u64;
	// extsh r5,r9
	ctx.r5.s64 = ctx.r9.s16;
	// addi r28,r7,-1
	r28.s64 = ctx.r7.s64 + -1;
	// lwz r9,0(r8)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// srawi r7,r3,16
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0xFFFF) != 0);
	ctx.r7.s64 = ctx.r3.s32 >> 16;
	// mr r30,r9
	r30.u64 = ctx.r9.u64;
	// mr r3,r9
	ctx.r3.u64 = ctx.r9.u64;
	// lwz r9,4(r8)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r8.u32 + 4);
	// srawi r8,r30,16
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0xFFFF) != 0);
	ctx.r8.s64 = r30.s32 >> 16;
	// extsh r3,r3
	ctx.r3.s64 = ctx.r3.s16;
	// extsh r29,r9
	r29.s64 = ctx.r9.s16;
	// srawi r30,r9,16
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0xFFFF) != 0);
	r30.s64 = ctx.r9.s32 >> 16;
	// beq cr6,0x82735e3c
	if (cr6.eq) goto loc_82735E3C;
	// add r11,r28,r6
	r11.u64 = r28.u64 + ctx.r6.u64;
	// lwz r20,560(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 560);
	// mr r21,r4
	r21.u64 = ctx.r4.u64;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// stw r21,576(r1)
	PPC_STORE_U32(ctx.r1.u32 + 576, r21.u32);
	// stw r11,544(r1)
	PPC_STORE_U32(ctx.r1.u32 + 544, r11.u32);
	// li r11,1
	r11.s64 = 1;
	// b 0x82735e54
	goto loc_82735E54;
loc_82735E3C:
	// srawi r10,r6,1
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r6.s32 >> 1;
	// lwz r21,576(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 576);
	// mr r20,r4
	r20.u64 = ctx.r4.u64;
	// stw r10,512(r1)
	PPC_STORE_U32(ctx.r1.u32 + 512, ctx.r10.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r20,560(r1)
	PPC_STORE_U32(ctx.r1.u32 + 560, r20.u32);
loc_82735E54:
	// clrlwi r9,r7,31
	ctx.r9.u64 = ctx.r7.u32 & 0x1;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x82735e80
	if (cr6.eq) goto loc_82735E80;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r6,r1,576
	ctx.r6.s64 = ctx.r1.s64 + 576;
	// add r7,r28,r7
	ctx.r7.u64 = r28.u64 + ctx.r7.u64;
	// addi r4,r1,544
	ctx.r4.s64 = ctx.r1.s64 + 544;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stwx r5,r9,r6
	PPC_STORE_U32(ctx.r9.u32 + ctx.r6.u32, ctx.r5.u32);
	// lwz r21,576(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 576);
	// b 0x82735e98
	goto loc_82735E98;
loc_82735E80:
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r6,r1,560
	ctx.r6.s64 = ctx.r1.s64 + 560;
	// addi r4,r1,512
	ctx.r4.s64 = ctx.r1.s64 + 512;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stwx r5,r9,r6
	PPC_STORE_U32(ctx.r9.u32 + ctx.r6.u32, ctx.r5.u32);
	// lwz r20,560(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 560);
loc_82735E98:
	// srawi r7,r7,1
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x1) != 0);
	ctx.r7.s64 = ctx.r7.s32 >> 1;
	// lwz r23,580(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 580);
	// lwz r24,584(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 584);
	// lwz r25,564(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 564);
	// lwz r22,568(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 568);
	// stwx r7,r9,r4
	PPC_STORE_U32(ctx.r9.u32 + ctx.r4.u32, ctx.r7.u32);
	// clrlwi r9,r8,31
	ctx.r9.u64 = ctx.r8.u32 & 0x1;
	// lwz r18,548(r1)
	r18.u64 = PPC_LOAD_U32(ctx.r1.u32 + 548);
	// lwz r19,552(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 552);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// lwz r7,516(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 516);
	// lwz r17,520(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 520);
	// beq cr6,0x82735f04
	if (cr6.eq) goto loc_82735F04;
	// add r8,r28,r8
	ctx.r8.u64 = r28.u64 + ctx.r8.u64;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r6,r1,576
	ctx.r6.s64 = ctx.r1.s64 + 576;
	// srawi r8,r8,1
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x1) != 0);
	ctx.r8.s64 = ctx.r8.s32 >> 1;
	// addi r5,r1,544
	ctx.r5.s64 = ctx.r1.s64 + 544;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stwx r3,r9,r6
	PPC_STORE_U32(ctx.r9.u32 + ctx.r6.u32, ctx.r3.u32);
	// lwz r24,584(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 584);
	// stwx r8,r9,r5
	PPC_STORE_U32(ctx.r9.u32 + ctx.r5.u32, ctx.r8.u32);
	// lwz r23,580(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 580);
	// lwz r21,576(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 576);
	// lwz r19,552(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 552);
	// lwz r18,548(r1)
	r18.u64 = PPC_LOAD_U32(ctx.r1.u32 + 548);
	// b 0x82735f34
	goto loc_82735F34;
loc_82735F04:
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r7,r1,560
	ctx.r7.s64 = ctx.r1.s64 + 560;
	// srawi r8,r8,1
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x1) != 0);
	ctx.r8.s64 = ctx.r8.s32 >> 1;
	// addi r6,r1,512
	ctx.r6.s64 = ctx.r1.s64 + 512;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stwx r3,r9,r7
	PPC_STORE_U32(ctx.r9.u32 + ctx.r7.u32, ctx.r3.u32);
	// lwz r22,568(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 568);
	// stwx r8,r9,r6
	PPC_STORE_U32(ctx.r9.u32 + ctx.r6.u32, ctx.r8.u32);
	// lwz r25,564(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 564);
	// lwz r20,560(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 560);
	// lwz r17,520(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 520);
	// lwz r7,516(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 516);
loc_82735F34:
	// clrlwi r9,r30,31
	ctx.r9.u64 = r30.u32 & 0x1;
	// lwz r6,512(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 512);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x82735f7c
	if (cr6.eq) goto loc_82735F7C;
	// add r8,r28,r30
	ctx.r8.u64 = r28.u64 + r30.u64;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r5,r1,576
	ctx.r5.s64 = ctx.r1.s64 + 576;
	// srawi r8,r8,1
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x1) != 0);
	ctx.r8.s64 = ctx.r8.s32 >> 1;
	// addi r4,r1,544
	ctx.r4.s64 = ctx.r1.s64 + 544;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stwx r29,r9,r5
	PPC_STORE_U32(ctx.r9.u32 + ctx.r5.u32, r29.u32);
	// lwz r24,584(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 584);
	// stwx r8,r9,r4
	PPC_STORE_U32(ctx.r9.u32 + ctx.r4.u32, ctx.r8.u32);
	// lwz r23,580(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 580);
	// lwz r21,576(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 576);
	// lwz r19,552(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 552);
	// lwz r18,548(r1)
	r18.u64 = PPC_LOAD_U32(ctx.r1.u32 + 548);
	// b 0x82735fb0
	goto loc_82735FB0;
loc_82735F7C:
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// srawi r7,r30,1
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x1) != 0);
	ctx.r7.s64 = r30.s32 >> 1;
	// addi r6,r1,512
	ctx.r6.s64 = ctx.r1.s64 + 512;
	// addi r8,r1,560
	ctx.r8.s64 = ctx.r1.s64 + 560;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stwx r7,r9,r6
	PPC_STORE_U32(ctx.r9.u32 + ctx.r6.u32, ctx.r7.u32);
	// stwx r29,r9,r8
	PPC_STORE_U32(ctx.r9.u32 + ctx.r8.u32, r29.u32);
	// lwz r22,568(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 568);
	// lwz r25,564(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 564);
	// lwz r20,560(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 560);
	// lwz r17,520(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 520);
	// lwz r7,516(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 516);
	// lwz r6,512(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 512);
loc_82735FB0:
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// ble cr6,0x82736220
	if (!cr6.gt) goto loc_82736220;
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// subf r11,r21,r23
	r11.s64 = r23.s64 - r21.s64;
	// bne cr6,0x82736038
	if (!cr6.eq) goto loc_82736038;
	// lwz r7,544(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 544);
	// subf r9,r24,r23
	ctx.r9.s64 = r23.s64 - r24.s64;
	// subf r8,r21,r24
	ctx.r8.s64 = r24.s64 - r21.s64;
	// subf r10,r7,r18
	ctx.r10.s64 = r18.s64 - ctx.r7.s64;
	// subf r6,r19,r18
	ctx.r6.s64 = r18.s64 - r19.s64;
	// xor r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 ^ r11.u64;
	// subf r5,r7,r19
	ctx.r5.s64 = r19.s64 - ctx.r7.s64;
	// xor r8,r8,r11
	ctx.r8.u64 = ctx.r8.u64 ^ r11.u64;
	// xor r6,r6,r10
	ctx.r6.u64 = ctx.r6.u64 ^ ctx.r10.u64;
	// xor r5,r5,r10
	ctx.r5.u64 = ctx.r5.u64 ^ ctx.r10.u64;
	// srawi r11,r9,31
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x7FFFFFFF) != 0);
	r11.s64 = ctx.r9.s32 >> 31;
	// srawi r10,r8,31
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7FFFFFFF) != 0);
	ctx.r10.s64 = ctx.r8.s32 >> 31;
	// srawi r9,r6,31
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x7FFFFFFF) != 0);
	ctx.r9.s64 = ctx.r6.s32 >> 31;
	// srawi r8,r5,31
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x7FFFFFFF) != 0);
	ctx.r8.s64 = ctx.r5.s32 >> 31;
	// or r6,r11,r10
	ctx.r6.u64 = r11.u64 | ctx.r10.u64;
	// or r5,r9,r8
	ctx.r5.u64 = ctx.r9.u64 | ctx.r8.u64;
	// and r10,r10,r21
	ctx.r10.u64 = ctx.r10.u64 & r21.u64;
	// andc r6,r24,r6
	ctx.r6.u64 = r24.u64 & ~ctx.r6.u64;
	// and r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 & ctx.r7.u64;
	// andc r5,r19,r5
	ctx.r5.u64 = r19.u64 & ~ctx.r5.u64;
	// and r11,r11,r23
	r11.u64 = r11.u64 & r23.u64;
	// or r10,r6,r10
	ctx.r10.u64 = ctx.r6.u64 | ctx.r10.u64;
	// or r8,r5,r8
	ctx.r8.u64 = ctx.r5.u64 | ctx.r8.u64;
	// and r9,r9,r18
	ctx.r9.u64 = ctx.r9.u64 & r18.u64;
	// or r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 | r11.u64;
	// or r11,r8,r9
	r11.u64 = ctx.r8.u64 | ctx.r9.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r8,r28,r11
	ctx.r8.s64 = r11.s64 - r28.s64;
	// b 0x827364d0
	goto loc_827364D0;
loc_82736038:
	// subf r9,r23,r24
	ctx.r9.s64 = r24.s64 - r23.s64;
	// srawi r10,r11,31
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7FFFFFFF) != 0);
	ctx.r10.s64 = r11.s32 >> 31;
	// subf r7,r24,r21
	ctx.r7.s64 = r21.s64 - r24.s64;
	// srawi r8,r9,31
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x7FFFFFFF) != 0);
	ctx.r8.s64 = ctx.r9.s32 >> 31;
	// subf r6,r23,r21
	ctx.r6.s64 = r21.s64 - r23.s64;
	// subf r9,r24,r23
	ctx.r9.s64 = r23.s64 - r24.s64;
	// srawi r11,r7,31
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x7FFFFFFF) != 0);
	r11.s64 = ctx.r7.s32 >> 31;
	// srawi r6,r6,31
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x7FFFFFFF) != 0);
	ctx.r6.s64 = ctx.r6.s32 >> 31;
	// srawi r5,r9,31
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = ctx.r9.s32 >> 31;
	// lwz r9,544(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 544);
	// subf r7,r21,r24
	ctx.r7.s64 = r24.s64 - r21.s64;
	// subf r29,r19,r9
	r29.s64 = ctx.r9.s64 - r19.s64;
	// subf r25,r18,r9
	r25.s64 = ctx.r9.s64 - r18.s64;
	// subf r20,r9,r19
	r20.s64 = r19.s64 - ctx.r9.s64;
	// subf r3,r9,r18
	ctx.r3.s64 = r18.s64 - ctx.r9.s64;
	// srawi r4,r7,31
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x7FFFFFFF) != 0);
	ctx.r4.s64 = ctx.r7.s32 >> 31;
	// not r11,r11
	r11.u64 = ~r11.u64;
	// not r9,r8
	ctx.r9.u64 = ~ctx.r8.u64;
	// not r7,r10
	ctx.r7.u64 = ~ctx.r10.u64;
	// not r6,r6
	ctx.r6.u64 = ~ctx.r6.u64;
	// subf r30,r18,r19
	r30.s64 = r19.s64 - r18.s64;
	// subf r22,r19,r18
	r22.s64 = r18.s64 - r19.s64;
	// xor r18,r10,r9
	r18.u64 = ctx.r10.u64 ^ ctx.r9.u64;
	// xor r17,r10,r11
	r17.u64 = ctx.r10.u64 ^ r11.u64;
	// and r19,r21,r7
	r19.u64 = r21.u64 & ctx.r7.u64;
	// not r4,r4
	ctx.r4.u64 = ~ctx.r4.u64;
	// not r5,r5
	ctx.r5.u64 = ~ctx.r5.u64;
	// and r10,r23,r6
	ctx.r10.u64 = r23.u64 & ctx.r6.u64;
	// and r6,r21,r6
	ctx.r6.u64 = r21.u64 & ctx.r6.u64;
	// and r21,r19,r4
	r21.u64 = r19.u64 & ctx.r4.u64;
	// and r19,r24,r5
	r19.u64 = r24.u64 & ctx.r5.u64;
	// and r5,r23,r5
	ctx.r5.u64 = r23.u64 & ctx.r5.u64;
	// and r4,r24,r4
	ctx.r4.u64 = r24.u64 & ctx.r4.u64;
	// and r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 & ctx.r9.u64;
	// and r9,r4,r9
	ctx.r9.u64 = ctx.r4.u64 & ctx.r9.u64;
	// and r7,r5,r7
	ctx.r7.u64 = ctx.r5.u64 & ctx.r7.u64;
	// or r10,r21,r10
	ctx.r10.u64 = r21.u64 | ctx.r10.u64;
	// xor r8,r8,r11
	ctx.r8.u64 = ctx.r8.u64 ^ r11.u64;
	// and r21,r19,r11
	r21.u64 = r19.u64 & r11.u64;
	// or r9,r7,r9
	ctx.r9.u64 = ctx.r7.u64 | ctx.r9.u64;
	// and r11,r6,r11
	r11.u64 = ctx.r6.u64 & r11.u64;
	// lwz r6,588(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 588);
	// and r7,r18,r23
	ctx.r7.u64 = r18.u64 & r23.u64;
	// or r11,r9,r11
	r11.u64 = ctx.r9.u64 | r11.u64;
	// lwz r9,576(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 576);
	// and r8,r8,r24
	ctx.r8.u64 = ctx.r8.u64 & r24.u64;
	// and r9,r17,r9
	ctx.r9.u64 = r17.u64 & ctx.r9.u64;
	// or r10,r10,r21
	ctx.r10.u64 = ctx.r10.u64 | r21.u64;
	// or r9,r7,r9
	ctx.r9.u64 = ctx.r7.u64 | ctx.r9.u64;
	// subf r5,r11,r10
	ctx.r5.s64 = ctx.r10.s64 - r11.s64;
	// or r7,r9,r8
	ctx.r7.u64 = ctx.r9.u64 | ctx.r8.u64;
	// subf r9,r10,r6
	ctx.r9.s64 = ctx.r6.s64 - ctx.r10.s64;
	// subf r8,r6,r11
	ctx.r8.s64 = r11.s64 - ctx.r6.s64;
	// srawi r9,r9,31
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x7FFFFFFF) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 31;
	// srawi r8,r8,31
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7FFFFFFF) != 0);
	ctx.r8.s64 = ctx.r8.s32 >> 31;
	// srawi r5,r5,31
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = ctx.r5.s32 >> 31;
	// eqv r8,r8,r9
	// eqv r9,r5,r9
	// or r5,r8,r9
	ctx.r5.u64 = ctx.r8.u64 | ctx.r9.u64;
	// and r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 & ctx.r9.u64;
	// andc r11,r11,r5
	r11.u64 = r11.u64 & ~ctx.r5.u64;
	// and r9,r8,r6
	ctx.r9.u64 = ctx.r8.u64 & ctx.r6.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addze r10,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	ctx.r10.s64 = temp.s64;
	// srawi r9,r3,31
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x7FFFFFFF) != 0);
	ctx.r9.s64 = ctx.r3.s32 >> 31;
	// srawi r7,r30,31
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x7FFFFFFF) != 0);
	ctx.r7.s64 = r30.s32 >> 31;
	// srawi r11,r29,31
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x7FFFFFFF) != 0);
	r11.s64 = r29.s32 >> 31;
	// srawi r5,r25,31
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = r25.s32 >> 31;
	// srawi r3,r22,31
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r22.s32 >> 31;
	// srawi r6,r20,31
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x7FFFFFFF) != 0);
	ctx.r6.s64 = r20.s32 >> 31;
	// not r8,r7
	ctx.r8.u64 = ~ctx.r7.u64;
	// not r11,r11
	r11.u64 = ~r11.u64;
	// not r6,r6
	ctx.r6.u64 = ~ctx.r6.u64;
	// not r5,r5
	ctx.r5.u64 = ~ctx.r5.u64;
	// not r4,r9
	ctx.r4.u64 = ~ctx.r9.u64;
	// not r3,r3
	ctx.r3.u64 = ~ctx.r3.u64;
	// xor r30,r9,r8
	r30.u64 = ctx.r9.u64 ^ ctx.r8.u64;
	// xor r25,r9,r11
	r25.u64 = ctx.r9.u64 ^ r11.u64;
	// lwz r9,548(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 548);
	// xor r24,r7,r11
	r24.u64 = ctx.r7.u64 ^ r11.u64;
	// lwz r29,544(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 544);
	// lwz r7,552(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 552);
	// and r30,r30,r9
	r30.u64 = r30.u64 & ctx.r9.u64;
	// and r25,r25,r29
	r25.u64 = r25.u64 & r29.u64;
	// and r24,r24,r7
	r24.u64 = r24.u64 & ctx.r7.u64;
	// or r30,r30,r25
	r30.u64 = r30.u64 | r25.u64;
	// and r23,r7,r3
	r23.u64 = ctx.r7.u64 & ctx.r3.u64;
	// or r30,r30,r24
	r30.u64 = r30.u64 | r24.u64;
	// and r24,r9,r5
	r24.u64 = ctx.r9.u64 & ctx.r5.u64;
	// and r25,r29,r6
	r25.u64 = r29.u64 & ctx.r6.u64;
	// and r7,r7,r6
	ctx.r7.u64 = ctx.r7.u64 & ctx.r6.u64;
	// and r3,r9,r3
	ctx.r3.u64 = ctx.r9.u64 & ctx.r3.u64;
	// and r24,r24,r8
	r24.u64 = r24.u64 & ctx.r8.u64;
	// and r25,r25,r4
	r25.u64 = r25.u64 & ctx.r4.u64;
	// and r8,r7,r8
	ctx.r8.u64 = ctx.r7.u64 & ctx.r8.u64;
	// and r7,r29,r5
	ctx.r7.u64 = r29.u64 & ctx.r5.u64;
	// and r6,r3,r4
	ctx.r6.u64 = ctx.r3.u64 & ctx.r4.u64;
	// or r25,r25,r24
	r25.u64 = r25.u64 | r24.u64;
	// and r24,r23,r11
	r24.u64 = r23.u64 & r11.u64;
	// and r11,r7,r11
	r11.u64 = ctx.r7.u64 & r11.u64;
	// or r8,r6,r8
	ctx.r8.u64 = ctx.r6.u64 | ctx.r8.u64;
	// lwz r6,556(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 556);
	// or r9,r25,r24
	ctx.r9.u64 = r25.u64 | r24.u64;
	// or r11,r8,r11
	r11.u64 = ctx.r8.u64 | r11.u64;
	// subf r8,r9,r6
	ctx.r8.s64 = ctx.r6.s64 - ctx.r9.s64;
	// subf r7,r6,r11
	ctx.r7.s64 = r11.s64 - ctx.r6.s64;
	// subf r5,r11,r9
	ctx.r5.s64 = ctx.r9.s64 - r11.s64;
	// srawi r8,r8,31
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7FFFFFFF) != 0);
	ctx.r8.s64 = ctx.r8.s32 >> 31;
	// srawi r7,r7,31
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x7FFFFFFF) != 0);
	ctx.r7.s64 = ctx.r7.s32 >> 31;
	// srawi r5,r5,31
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = ctx.r5.s32 >> 31;
	// eqv r7,r7,r8
	// eqv r8,r5,r8
	// or r5,r7,r8
	ctx.r5.u64 = ctx.r7.u64 | ctx.r8.u64;
	// and r9,r8,r9
	ctx.r9.u64 = ctx.r8.u64 & ctx.r9.u64;
	// andc r11,r11,r5
	r11.u64 = r11.u64 & ~ctx.r5.u64;
	// and r8,r7,r6
	ctx.r8.u64 = ctx.r7.u64 & ctx.r6.u64;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// or r11,r11,r8
	r11.u64 = r11.u64 | ctx.r8.u64;
	// b 0x827364b0
	goto loc_827364B0;
loc_82736220:
	// li r28,0
	r28.s64 = 0;
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// bne cr6,0x82736250
	if (!cr6.eq) goto loc_82736250;
	// add r11,r25,r20
	r11.u64 = r25.u64 + r20.u64;
	// add r9,r7,r6
	ctx.r9.u64 = ctx.r7.u64 + ctx.r6.u64;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addze r10,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	ctx.r10.s64 = temp.s64;
	// srawi r11,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	r11.s64 = ctx.r9.s32 >> 1;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r8,r28,r11
	ctx.r8.s64 = r11.s64 - r28.s64;
	// b 0x827364d0
	goto loc_827364D0;
loc_82736250:
	// cmpwi cr6,r10,3
	cr6.compare<int32_t>(ctx.r10.s32, 3, xer);
	// subf r11,r20,r25
	r11.s64 = r25.s64 - r20.s64;
	// bne cr6,0x827362cc
	if (!cr6.eq) goto loc_827362CC;
	// subf r9,r22,r25
	ctx.r9.s64 = r25.s64 - r22.s64;
	// subf r8,r20,r22
	ctx.r8.s64 = r22.s64 - r20.s64;
	// subf r10,r6,r7
	ctx.r10.s64 = ctx.r7.s64 - ctx.r6.s64;
	// subf r5,r17,r7
	ctx.r5.s64 = ctx.r7.s64 - r17.s64;
	// xor r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 ^ r11.u64;
	// subf r4,r6,r17
	ctx.r4.s64 = r17.s64 - ctx.r6.s64;
	// xor r8,r8,r11
	ctx.r8.u64 = ctx.r8.u64 ^ r11.u64;
	// xor r5,r5,r10
	ctx.r5.u64 = ctx.r5.u64 ^ ctx.r10.u64;
	// srawi r11,r9,31
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x7FFFFFFF) != 0);
	r11.s64 = ctx.r9.s32 >> 31;
	// xor r4,r4,r10
	ctx.r4.u64 = ctx.r4.u64 ^ ctx.r10.u64;
	// srawi r10,r8,31
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7FFFFFFF) != 0);
	ctx.r10.s64 = ctx.r8.s32 >> 31;
	// srawi r9,r5,31
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x7FFFFFFF) != 0);
	ctx.r9.s64 = ctx.r5.s32 >> 31;
	// srawi r8,r4,31
	xer.ca = (ctx.r4.s32 < 0) & ((ctx.r4.u32 & 0x7FFFFFFF) != 0);
	ctx.r8.s64 = ctx.r4.s32 >> 31;
	// and r5,r25,r11
	ctx.r5.u64 = r25.u64 & r11.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// or r4,r9,r8
	ctx.r4.u64 = ctx.r9.u64 | ctx.r8.u64;
	// andc r11,r22,r11
	r11.u64 = r22.u64 & ~r11.u64;
	// andc r4,r17,r4
	ctx.r4.u64 = r17.u64 & ~ctx.r4.u64;
	// and r9,r7,r9
	ctx.r9.u64 = ctx.r7.u64 & ctx.r9.u64;
	// or r11,r11,r5
	r11.u64 = r11.u64 | ctx.r5.u64;
	// and r10,r10,r20
	ctx.r10.u64 = ctx.r10.u64 & r20.u64;
	// and r8,r6,r8
	ctx.r8.u64 = ctx.r6.u64 & ctx.r8.u64;
	// or r9,r4,r9
	ctx.r9.u64 = ctx.r4.u64 | ctx.r9.u64;
	// or r10,r11,r10
	ctx.r10.u64 = r11.u64 | ctx.r10.u64;
	// or r11,r9,r8
	r11.u64 = ctx.r9.u64 | ctx.r8.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r8,r28,r11
	ctx.r8.s64 = r11.s64 - r28.s64;
	// b 0x827364d0
	goto loc_827364D0;
loc_827362CC:
	// subf r9,r25,r22
	ctx.r9.s64 = r22.s64 - r25.s64;
	// srawi r10,r11,31
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7FFFFFFF) != 0);
	ctx.r10.s64 = r11.s32 >> 31;
	// subf r6,r22,r20
	ctx.r6.s64 = r20.s64 - r22.s64;
	// srawi r8,r9,31
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x7FFFFFFF) != 0);
	ctx.r8.s64 = ctx.r9.s32 >> 31;
	// subf r5,r25,r20
	ctx.r5.s64 = r20.s64 - r25.s64;
	// subf r9,r22,r25
	ctx.r9.s64 = r25.s64 - r22.s64;
	// srawi r11,r6,31
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x7FFFFFFF) != 0);
	r11.s64 = ctx.r6.s32 >> 31;
	// srawi r6,r5,31
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x7FFFFFFF) != 0);
	ctx.r6.s64 = ctx.r5.s32 >> 31;
	// srawi r5,r9,31
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = ctx.r9.s32 >> 31;
	// subf r9,r20,r22
	ctx.r9.s64 = r22.s64 - r20.s64;
	// subf r30,r7,r17
	r30.s64 = r17.s64 - ctx.r7.s64;
	// srawi r4,r9,31
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x7FFFFFFF) != 0);
	ctx.r4.s64 = ctx.r9.s32 >> 31;
	// lwz r9,512(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 512);
	// subf r23,r17,r7
	r23.s64 = ctx.r7.s64 - r17.s64;
	// subf r3,r9,r7
	ctx.r3.s64 = ctx.r7.s64 - ctx.r9.s64;
	// subf r24,r7,r9
	r24.s64 = ctx.r9.s64 - ctx.r7.s64;
	// not r7,r10
	ctx.r7.u64 = ~ctx.r10.u64;
	// subf r29,r17,r9
	r29.s64 = ctx.r9.s64 - r17.s64;
	// subf r21,r9,r17
	r21.s64 = r17.s64 - ctx.r9.s64;
	// not r9,r8
	ctx.r9.u64 = ~ctx.r8.u64;
	// not r11,r11
	r11.u64 = ~r11.u64;
	// and r20,r20,r7
	r20.u64 = r20.u64 & ctx.r7.u64;
	// not r4,r4
	ctx.r4.u64 = ~ctx.r4.u64;
	// not r6,r6
	ctx.r6.u64 = ~ctx.r6.u64;
	// xor r18,r11,r10
	r18.u64 = r11.u64 ^ ctx.r10.u64;
	// xor r19,r9,r10
	r19.u64 = ctx.r9.u64 ^ ctx.r10.u64;
	// and r20,r20,r4
	r20.u64 = r20.u64 & ctx.r4.u64;
	// and r10,r25,r6
	ctx.r10.u64 = r25.u64 & ctx.r6.u64;
	// and r4,r22,r4
	ctx.r4.u64 = r22.u64 & ctx.r4.u64;
	// and r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 & ctx.r9.u64;
	// and r4,r4,r9
	ctx.r4.u64 = ctx.r4.u64 & ctx.r9.u64;
	// lwz r9,560(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 560);
	// not r5,r5
	ctx.r5.u64 = ~ctx.r5.u64;
	// and r7,r25,r7
	ctx.r7.u64 = r25.u64 & ctx.r7.u64;
	// and r6,r9,r6
	ctx.r6.u64 = ctx.r9.u64 & ctx.r6.u64;
	// and r7,r7,r5
	ctx.r7.u64 = ctx.r7.u64 & ctx.r5.u64;
	// and r17,r22,r5
	r17.u64 = r22.u64 & ctx.r5.u64;
	// and r6,r6,r11
	ctx.r6.u64 = ctx.r6.u64 & r11.u64;
	// or r7,r4,r7
	ctx.r7.u64 = ctx.r4.u64 | ctx.r7.u64;
	// xor r8,r11,r8
	ctx.r8.u64 = r11.u64 ^ ctx.r8.u64;
	// and r17,r17,r11
	r17.u64 = r17.u64 & r11.u64;
	// or r11,r7,r6
	r11.u64 = ctx.r7.u64 | ctx.r6.u64;
	// lwz r6,572(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 572);
	// and r8,r8,r22
	ctx.r8.u64 = ctx.r8.u64 & r22.u64;
	// and r7,r19,r25
	ctx.r7.u64 = r19.u64 & r25.u64;
	// or r20,r20,r17
	r20.u64 = r20.u64 | r17.u64;
	// or r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 | ctx.r7.u64;
	// and r9,r18,r9
	ctx.r9.u64 = r18.u64 & ctx.r9.u64;
	// or r10,r20,r10
	ctx.r10.u64 = r20.u64 | ctx.r10.u64;
	// or r7,r8,r9
	ctx.r7.u64 = ctx.r8.u64 | ctx.r9.u64;
	// subf r9,r10,r6
	ctx.r9.s64 = ctx.r6.s64 - ctx.r10.s64;
	// subf r8,r6,r11
	ctx.r8.s64 = r11.s64 - ctx.r6.s64;
	// subf r5,r11,r10
	ctx.r5.s64 = ctx.r10.s64 - r11.s64;
	// srawi r9,r9,31
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x7FFFFFFF) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 31;
	// srawi r8,r8,31
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7FFFFFFF) != 0);
	ctx.r8.s64 = ctx.r8.s32 >> 31;
	// srawi r5,r5,31
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = ctx.r5.s32 >> 31;
	// eqv r8,r8,r9
	// eqv r9,r5,r9
	// and r6,r6,r8
	ctx.r6.u64 = ctx.r6.u64 & ctx.r8.u64;
	// or r8,r8,r9
	ctx.r8.u64 = ctx.r8.u64 | ctx.r9.u64;
	// and r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 & ctx.r9.u64;
	// andc r11,r11,r8
	r11.u64 = r11.u64 & ~ctx.r8.u64;
	// or r11,r11,r6
	r11.u64 = r11.u64 | ctx.r6.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addze r10,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	ctx.r10.s64 = temp.s64;
	// srawi r9,r3,31
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x7FFFFFFF) != 0);
	ctx.r9.s64 = ctx.r3.s32 >> 31;
	// srawi r7,r30,31
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x7FFFFFFF) != 0);
	ctx.r7.s64 = r30.s32 >> 31;
	// srawi r11,r29,31
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x7FFFFFFF) != 0);
	r11.s64 = r29.s32 >> 31;
	// srawi r5,r24,31
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = r24.s32 >> 31;
	// srawi r4,r23,31
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x7FFFFFFF) != 0);
	ctx.r4.s64 = r23.s32 >> 31;
	// srawi r3,r21,31
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r21.s32 >> 31;
	// not r8,r7
	ctx.r8.u64 = ~ctx.r7.u64;
	// not r11,r11
	r11.u64 = ~r11.u64;
	// not r6,r9
	ctx.r6.u64 = ~ctx.r9.u64;
	// not r5,r5
	ctx.r5.u64 = ~ctx.r5.u64;
	// not r4,r4
	ctx.r4.u64 = ~ctx.r4.u64;
	// not r3,r3
	ctx.r3.u64 = ~ctx.r3.u64;
	// xor r30,r8,r9
	r30.u64 = ctx.r8.u64 ^ ctx.r9.u64;
	// xor r25,r11,r9
	r25.u64 = r11.u64 ^ ctx.r9.u64;
	// xor r29,r11,r7
	r29.u64 = r11.u64 ^ ctx.r7.u64;
	// lwz r7,520(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 520);
	// lwz r9,516(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 516);
	// and r24,r29,r7
	r24.u64 = r29.u64 & ctx.r7.u64;
	// lwz r29,512(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 512);
	// and r30,r30,r9
	r30.u64 = r30.u64 & ctx.r9.u64;
	// and r25,r25,r29
	r25.u64 = r25.u64 & r29.u64;
	// or r30,r24,r30
	r30.u64 = r24.u64 | r30.u64;
	// and r23,r7,r4
	r23.u64 = ctx.r7.u64 & ctx.r4.u64;
	// and r24,r9,r5
	r24.u64 = ctx.r9.u64 & ctx.r5.u64;
	// or r30,r30,r25
	r30.u64 = r30.u64 | r25.u64;
	// and r7,r7,r3
	ctx.r7.u64 = ctx.r7.u64 & ctx.r3.u64;
	// and r25,r29,r6
	r25.u64 = r29.u64 & ctx.r6.u64;
	// and r6,r9,r6
	ctx.r6.u64 = ctx.r9.u64 & ctx.r6.u64;
	// and r24,r24,r8
	r24.u64 = r24.u64 & ctx.r8.u64;
	// and r8,r7,r8
	ctx.r8.u64 = ctx.r7.u64 & ctx.r8.u64;
	// and r25,r25,r3
	r25.u64 = r25.u64 & ctx.r3.u64;
	// and r7,r29,r5
	ctx.r7.u64 = r29.u64 & ctx.r5.u64;
	// and r6,r6,r4
	ctx.r6.u64 = ctx.r6.u64 & ctx.r4.u64;
	// and r23,r23,r11
	r23.u64 = r23.u64 & r11.u64;
	// or r25,r25,r24
	r25.u64 = r25.u64 | r24.u64;
	// and r11,r7,r11
	r11.u64 = ctx.r7.u64 & r11.u64;
	// or r8,r6,r8
	ctx.r8.u64 = ctx.r6.u64 | ctx.r8.u64;
	// lwz r6,524(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 524);
	// or r9,r25,r23
	ctx.r9.u64 = r25.u64 | r23.u64;
	// or r11,r8,r11
	r11.u64 = ctx.r8.u64 | r11.u64;
	// subf r8,r9,r6
	ctx.r8.s64 = ctx.r6.s64 - ctx.r9.s64;
	// subf r7,r6,r11
	ctx.r7.s64 = r11.s64 - ctx.r6.s64;
	// subf r5,r11,r9
	ctx.r5.s64 = ctx.r9.s64 - r11.s64;
	// srawi r8,r8,31
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7FFFFFFF) != 0);
	ctx.r8.s64 = ctx.r8.s32 >> 31;
	// srawi r7,r7,31
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x7FFFFFFF) != 0);
	ctx.r7.s64 = ctx.r7.s32 >> 31;
	// srawi r5,r5,31
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = ctx.r5.s32 >> 31;
	// eqv r7,r7,r8
	// eqv r8,r5,r8
	// and r6,r6,r7
	ctx.r6.u64 = ctx.r6.u64 & ctx.r7.u64;
	// or r7,r7,r8
	ctx.r7.u64 = ctx.r7.u64 | ctx.r8.u64;
	// and r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 & ctx.r8.u64;
	// andc r11,r11,r7
	r11.u64 = r11.u64 & ~ctx.r7.u64;
	// or r11,r11,r6
	r11.u64 = r11.u64 | ctx.r6.u64;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
loc_827364B0:
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r8,r28,r11
	ctx.r8.s64 = r11.s64 - r28.s64;
	// b 0x827364d0
	goto loc_827364D0;
loc_827364C8:
	// li r8,0
	ctx.r8.s64 = 0;
	// li r10,0
	ctx.r10.s64 = 0;
loc_827364D0:
	// clrlwi r9,r8,31
	ctx.r9.u64 = ctx.r8.u32 & 0x1;
	// lwz r11,1472(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1472);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x827364f0
	if (cr6.eq) goto loc_827364F0;
	// rlwinm r9,r27,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 1) & 0xFFFFFFFE;
	// subfic r9,r9,1
	xer.ca = ctx.r9.u32 <= 1;
	ctx.r9.s64 = 1 - ctx.r9.s64;
	// subf r8,r9,r8
	ctx.r8.s64 = ctx.r8.s64 - ctx.r9.s64;
	// b 0x827364f4
	goto loc_827364F4;
loc_827364F0:
	// li r9,0
	ctx.r9.s64 = 0;
loc_827364F4:
	// lwz r7,1588(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1588);
	// srawi r8,r8,1
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x1) != 0);
	ctx.r8.s64 = ctx.r8.s32 >> 1;
	// mullw r6,r10,r11
	ctx.r6.s64 = int64_t(ctx.r10.s32) * int64_t(r11.s32);
	// cmpw cr6,r26,r7
	cr6.compare<int32_t>(r26.s32, ctx.r7.s32, xer);
	// addi r7,r11,-256
	ctx.r7.s64 = r11.s64 + -256;
	// mullw r11,r8,r11
	r11.s64 = int64_t(ctx.r8.s32) * int64_t(r11.s32);
	// beq cr6,0x82736578
	if (cr6.eq) goto loc_82736578;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// beq cr6,0x82736544
	if (cr6.eq) goto loc_82736544;
	// addi r6,r6,255
	ctx.r6.s64 = ctx.r6.s64 + 255;
	// addi r5,r11,255
	ctx.r5.s64 = r11.s64 + 255;
	// srawi r11,r6,9
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x1FF) != 0);
	r11.s64 = ctx.r6.s32 >> 9;
	// srawi r6,r5,9
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x1FF) != 0);
	ctx.r6.s64 = ctx.r5.s32 >> 9;
	// mullw r5,r7,r10
	ctx.r5.s64 = int64_t(ctx.r7.s32) * int64_t(ctx.r10.s32);
	// mullw r10,r8,r7
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r7.s32);
	// addi r8,r5,255
	ctx.r8.s64 = ctx.r5.s64 + 255;
	// addi r7,r10,255
	ctx.r7.s64 = ctx.r10.s64 + 255;
	// srawi r10,r8,9
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x1FF) != 0);
	ctx.r10.s64 = ctx.r8.s32 >> 9;
	// srawi r8,r7,9
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x1FF) != 0);
	ctx.r8.s64 = ctx.r7.s32 >> 9;
	// b 0x827365e4
	goto loc_827365E4;
loc_82736544:
	// addi r6,r6,64
	ctx.r6.s64 = ctx.r6.s64 + 64;
	// addi r11,r11,64
	r11.s64 = r11.s64 + 64;
	// rlwinm r6,r6,1,0,30
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r5,r11,1,0,30
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// srawi r11,r6,8
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0xFF) != 0);
	r11.s64 = ctx.r6.s32 >> 8;
	// srawi r6,r5,8
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0xFF) != 0);
	ctx.r6.s64 = ctx.r5.s32 >> 8;
	// mullw r5,r7,r10
	ctx.r5.s64 = int64_t(ctx.r7.s32) * int64_t(ctx.r10.s32);
	// mullw r10,r8,r7
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r7.s32);
	// addi r8,r5,64
	ctx.r8.s64 = ctx.r5.s64 + 64;
	// addi r10,r10,64
	ctx.r10.s64 = ctx.r10.s64 + 64;
	// rlwinm r8,r8,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r7,r10,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// b 0x827365dc
	goto loc_827365DC;
loc_82736578:
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// beq cr6,0x827365bc
	if (cr6.eq) goto loc_827365BC;
	// mullw r10,r7,r10
	ctx.r10.s64 = int64_t(ctx.r7.s32) * int64_t(ctx.r10.s32);
	// mullw r7,r8,r7
	ctx.r7.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r7.s32);
	// rlwinm r6,r6,1,0,30
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r8,r10,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r6,r6,255
	ctx.r6.s64 = ctx.r6.s64 + 255;
	// rlwinm r10,r7,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r5,r11,255
	ctx.r5.s64 = r11.s64 + 255;
	// addi r8,r8,255
	ctx.r8.s64 = ctx.r8.s64 + 255;
	// addi r7,r10,255
	ctx.r7.s64 = ctx.r10.s64 + 255;
	// srawi r11,r6,9
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x1FF) != 0);
	r11.s64 = ctx.r6.s32 >> 9;
	// srawi r6,r5,9
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x1FF) != 0);
	ctx.r6.s64 = ctx.r5.s32 >> 9;
	// srawi r10,r8,9
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x1FF) != 0);
	ctx.r10.s64 = ctx.r8.s32 >> 9;
	// srawi r8,r7,9
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x1FF) != 0);
	ctx.r8.s64 = ctx.r7.s32 >> 9;
	// b 0x827365e4
	goto loc_827365E4;
loc_827365BC:
	// addi r6,r6,128
	ctx.r6.s64 = ctx.r6.s64 + 128;
	// addi r5,r11,128
	ctx.r5.s64 = r11.s64 + 128;
	// srawi r11,r6,8
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0xFF) != 0);
	r11.s64 = ctx.r6.s32 >> 8;
	// srawi r6,r5,8
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0xFF) != 0);
	ctx.r6.s64 = ctx.r5.s32 >> 8;
	// mullw r5,r7,r10
	ctx.r5.s64 = int64_t(ctx.r7.s32) * int64_t(ctx.r10.s32);
	// mullw r10,r8,r7
	ctx.r10.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r7.s32);
	// addi r8,r5,128
	ctx.r8.s64 = ctx.r5.s64 + 128;
	// addi r7,r10,128
	ctx.r7.s64 = ctx.r10.s64 + 128;
loc_827365DC:
	// srawi r10,r8,8
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0xFF) != 0);
	ctx.r10.s64 = ctx.r8.s32 >> 8;
	// srawi r8,r7,8
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0xFF) != 0);
	ctx.r8.s64 = ctx.r7.s32 >> 8;
loc_827365E4:
	// rlwinm r8,r8,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// extsh r7,r11
	ctx.r7.s64 = r11.s16;
	// rlwinm r6,r6,1,0,30
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// add r4,r8,r9
	ctx.r4.u64 = ctx.r8.u64 + ctx.r9.u64;
	// rlwinm r11,r16,2,0,29
	r11.u64 = __builtin_rotateleft64(r16.u32 | (r16.u64 << 32), 2) & 0xFFFFFFFC;
	// add r6,r6,r9
	ctx.r6.u64 = ctx.r6.u64 + ctx.r9.u64;
	// add r8,r15,r16
	ctx.r8.u64 = r15.u64 + r16.u64;
	// add r9,r11,r14
	ctx.r9.u64 = r11.u64 + r14.u64;
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// rlwinm r10,r8,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r11,r16,1,0,30
	r11.u64 = __builtin_rotateleft64(r16.u32 | (r16.u64 << 32), 1) & 0xFFFFFFFE;
	// sth r7,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, ctx.r7.u16);
	// add r5,r8,r14
	ctx.r5.u64 = ctx.r8.u64 + r14.u64;
	// lwz r8,1492(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// add r8,r10,r8
	ctx.r8.u64 = ctx.r10.u64 + ctx.r8.u64;
	// sth r7,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, ctx.r7.u16);
	// lwz r8,1492(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// add r8,r10,r8
	ctx.r8.u64 = ctx.r10.u64 + ctx.r8.u64;
	// lhz r7,2(r8)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r8.u32 + 2);
	// sth r7,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r7.u16);
	// lwz r8,1492(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// lhzx r7,r10,r8
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r8.u32);
	// add r8,r11,r8
	ctx.r8.u64 = r11.u64 + ctx.r8.u64;
	// sth r7,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, ctx.r7.u16);
	// lwz r8,1492(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// add r8,r11,r8
	ctx.r8.u64 = r11.u64 + ctx.r8.u64;
	// lhz r7,2(r8)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r8.u32 + 2);
	// sth r7,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r7.u16);
	// lwz r8,1492(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// lhzx r7,r11,r8
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + ctx.r8.u32);
	// sth r6,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r6.u16);
	// lwz r8,1496(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// add r8,r10,r8
	ctx.r8.u64 = ctx.r10.u64 + ctx.r8.u64;
	// stw r7,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r7.u32);
	// sth r6,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, ctx.r6.u16);
	// lwz r8,1496(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// add r8,r10,r8
	ctx.r8.u64 = ctx.r10.u64 + ctx.r8.u64;
	// lhz r7,2(r8)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r8.u32 + 2);
	// sth r7,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r7.u16);
	// lwz r8,1496(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lhzx r7,r10,r8
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r8.u32);
	// add r8,r11,r8
	ctx.r8.u64 = r11.u64 + ctx.r8.u64;
	// sth r7,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, ctx.r7.u16);
	// lwz r8,1496(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// add r8,r11,r8
	ctx.r8.u64 = r11.u64 + ctx.r8.u64;
	// lhz r7,2(r8)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r8.u32 + 2);
	// sth r7,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r7.u16);
	// lwz r7,1496(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lwz r8,0(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// lhzx r7,r11,r7
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + ctx.r7.u32);
	// stw r8,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r8.u32);
	// stw r8,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, ctx.r8.u32);
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// stw r8,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r8.u32);
	// lwz r9,1500(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r9,r9,r10
	ctx.r9.u64 = ctx.r9.u64 + ctx.r10.u64;
	// stw r7,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r7.u32);
	// sth r3,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, ctx.r3.u16);
	// lwz r9,1500(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r9,r9,r10
	ctx.r9.u64 = ctx.r9.u64 + ctx.r10.u64;
	// lhz r8,2(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 2);
	// sth r8,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r8.u16);
	// lwz r9,1500(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// lhzx r8,r9,r10
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + ctx.r10.u32);
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// sth r8,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, ctx.r8.u16);
	// lwz r9,1500(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// lhz r8,2(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 2);
	// sth r8,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r8.u16);
	// lwz r9,1500(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// lhzx r9,r9,r11
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r9.u32 + r11.u32);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// stw r9,604(r1)
	PPC_STORE_U32(ctx.r1.u32 + 604, ctx.r9.u32);
	// lwz r9,1504(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// sth r4,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, ctx.r4.u16);
	// lwz r9,1504(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lhz r8,2(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 2);
	// sth r8,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r8.u16);
	// lwz r9,1504(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lhzx r10,r9,r10
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r9.u32 + ctx.r10.u32);
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// sth r10,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, ctx.r10.u16);
	// lwz r10,1504(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// lhz r9,2(r10)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r10.u32 + 2);
	// sth r9,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r9.u16);
	// lwz r10,1504(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// lhzx r11,r11,r10
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r10.u32);
loc_8273675C:
	// extsh r11,r11
	r11.s64 = r11.s16;
	// stw r11,592(r1)
	PPC_STORE_U32(ctx.r1.u32 + 592, r11.u32);
loc_82736764:
	// lwz r10,108(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r9,620(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 620);
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// clrlwi r8,r10,31
	ctx.r8.u64 = ctx.r10.u32 & 0x1;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// slw r10,r10,r9
	ctx.r10.u64 = ctx.r9.u8 & 0x20 ? 0 : (ctx.r10.u32 << (ctx.r9.u8 & 0x3F));
	// slw r11,r11,r9
	r11.u64 = ctx.r9.u8 & 0x20 ? 0 : (r11.u32 << (ctx.r9.u8 & 0x3F));
	// beq cr6,0x827367a8
	if (cr6.eq) goto loc_827367A8;
	// lwz r9,440(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 440);
	// li r29,1
	r29.s64 = 1;
	// subf r10,r9,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r9.s64;
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
	// rlwinm r10,r10,0,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFC;
	// rlwimi r9,r29,3,31,28
	ctx.r9.u64 = (__builtin_rotateleft32(r29.u32, 3) & 0xFFFFFFFFFFFFFFF9) | (ctx.r9.u64 & 0x6);
	// srawi r9,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 1;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// b 0x827367bc
	goto loc_827367BC;
loc_827367A8:
	// rlwinm r9,r10,0,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFF8;
	// srawi r10,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 1;
	// li r29,0
	r29.s64 = 0;
	// clrlwi r10,r10,30
	ctx.r10.u64 = ctx.r10.u32 & 0x3;
	// or r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 | ctx.r9.u64;
loc_827367BC:
	// lwz r28,120(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// rlwimi r11,r10,16,0,15
	r11.u64 = (__builtin_rotateleft32(ctx.r10.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// lwz r27,116(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// rlwinm r9,r28,17,0,14
	ctx.r9.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 17) & 0xFFFE0000;
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// or r9,r9,r27
	ctx.r9.u64 = ctx.r9.u64 | r27.u64;
	// rlwinm r19,r9,6,0,25
	r19.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 6) & 0xFFFFFFC0;
	// lwz r9,1412(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1412);
	// subf r10,r10,r19
	ctx.r10.s64 = r19.s64 - ctx.r10.s64;
	// subf r9,r19,r9
	ctx.r9.s64 = ctx.r9.s64 - r19.s64;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// subf r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	// addis r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 8388608;
	// addi r10,r10,56
	ctx.r10.s64 = ctx.r10.s64 + 56;
	// or r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 | ctx.r9.u64;
	// rlwinm r10,r10,0,0,16
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r10,r10,0,16,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82736904
	if (cr6.eq) goto loc_82736904;
	// addi r10,r31,1516
	ctx.r10.s64 = r31.s64 + 1516;
	// srawi r6,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	ctx.r6.s64 = r11.s32 >> 16;
	// extsh r8,r11
	ctx.r8.s64 = r11.s16;
	// rlwinm r4,r27,4,0,27
	ctx.r4.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 4) & 0xFFFFFFF0;
	// rlwinm r3,r28,5,0,26
	ctx.r3.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 5) & 0xFFFFFFE0;
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// li r30,0
	r30.s64 = 0;
	// rlwinm r11,r6,0,29,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x82736850
	if (!cr6.eq) goto loc_82736850;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// addi r11,r31,52
	r11.s64 = r31.s64 + 52;
	// lhz r11,0(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rotlwi r11,r11,4
	r11.u64 = __builtin_rotateleft32(r11.u32, 4);
	// beq cr6,0x82736870
	if (cr6.eq) goto loc_82736870;
	// li r7,-35
	ctx.r7.s64 = -35;
	// addi r5,r11,3
	ctx.r5.s64 = r11.s64 + 3;
	// b 0x82736878
	goto loc_82736878;
loc_82736850:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// addi r11,r31,52
	r11.s64 = r31.s64 + 52;
	// lhz r11,0(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rotlwi r11,r11,4
	r11.u64 = __builtin_rotateleft32(r11.u32, 4);
	// beq cr6,0x82736870
	if (cr6.eq) goto loc_82736870;
	// li r7,-37
	ctx.r7.s64 = -37;
	// addi r5,r11,1
	ctx.r5.s64 = r11.s64 + 1;
	// b 0x82736878
	goto loc_82736878;
loc_82736870:
	// addi r5,r11,2
	ctx.r5.s64 = r11.s64 + 2;
	// li r7,-36
	ctx.r7.s64 = -36;
loc_82736878:
	// srawi r11,r8,2
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x3) != 0);
	r11.s64 = ctx.r8.s32 >> 2;
	// srawi r10,r6,2
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r6.s32 >> 2;
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// add r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 + ctx.r3.u64;
	// cmpwi cr6,r11,-17
	cr6.compare<int32_t>(r11.s32, -17, xer);
	// bge cr6,0x82736898
	if (!cr6.lt) goto loc_82736898;
	// li r11,-17
	r11.s64 = -17;
	// b 0x827368b0
	goto loc_827368B0;
loc_82736898:
	// addi r9,r31,50
	ctx.r9.s64 = r31.s64 + 50;
	// lhz r9,0(r9)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// rotlwi r9,r9,3
	ctx.r9.u64 = __builtin_rotateleft32(ctx.r9.u32, 3);
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// ble cr6,0x827368b4
	if (!cr6.gt) goto loc_827368B4;
	// mr r11,r9
	r11.u64 = ctx.r9.u64;
loc_827368B0:
	// li r30,1
	r30.s64 = 1;
loc_827368B4:
	// cmpw cr6,r10,r7
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r7.s32, xer);
	// bge cr6,0x827368c4
	if (!cr6.lt) goto loc_827368C4;
	// mr r10,r7
	ctx.r10.u64 = ctx.r7.u64;
	// b 0x827368dc
	goto loc_827368DC;
loc_827368C4:
	// cmpw cr6,r10,r5
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r5.s32, xer);
	// ble cr6,0x827368d4
	if (!cr6.gt) goto loc_827368D4;
	// mr r10,r5
	ctx.r10.u64 = ctx.r5.u64;
	// b 0x827368dc
	goto loc_827368DC;
loc_827368D4:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// beq cr6,0x827368fc
	if (cr6.eq) goto loc_827368FC;
loc_827368DC:
	// subf r11,r4,r11
	r11.s64 = r11.s64 - ctx.r4.s64;
	// subf r10,r3,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r3.s64;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// clrlwi r8,r8,30
	ctx.r8.u64 = ctx.r8.u32 & 0x3;
	// clrlwi r10,r6,30
	ctx.r10.u64 = ctx.r6.u32 & 0x3;
	// add r8,r9,r8
	ctx.r8.u64 = ctx.r9.u64 + ctx.r8.u64;
	// add r6,r11,r10
	ctx.r6.u64 = r11.u64 + ctx.r10.u64;
loc_827368FC:
	// rlwimi r8,r6,16,0,15
	ctx.r8.u64 = (__builtin_rotateleft32(ctx.r6.u32, 16) & 0xFFFF0000) | (ctx.r8.u64 & 0xFFFFFFFF0000FFFF);
	// mr r11,r8
	r11.u64 = ctx.r8.u64;
loc_82736904:
	// srawi r9,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	ctx.r9.s64 = r11.s32 >> 16;
	// extsh r8,r11
	ctx.r8.s64 = r11.s16;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// clrlwi r20,r9,30
	r20.u64 = ctx.r9.u32 & 0x3;
	// stw r9,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r9.u32);
	// stw r8,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r8.u32);
	// beq cr6,0x82736950
	if (cr6.eq) goto loc_82736950;
	// addi r11,r31,1516
	r11.s64 = r31.s64 + 1516;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rlwinm r10,r11,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// rlwinm r7,r11,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r10,r9
	r11.u64 = ctx.r10.u64 + ctx.r9.u64;
	// addi r11,r11,-4
	r11.s64 = r11.s64 + -4;
	// srawi r11,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	r11.s64 = r11.s32 >> 3;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// or r11,r11,r20
	r11.u64 = r11.u64 | r20.u64;
	// subf r11,r7,r11
	r11.s64 = r11.s64 - ctx.r7.s64;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// b 0x8273695c
	goto loc_8273695C;
loc_82736950:
	// srawi r11,r9,3
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x7) != 0);
	r11.s64 = ctx.r9.s32 >> 3;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// or r11,r11,r20
	r11.u64 = r11.u64 | r20.u64;
loc_8273695C:
	// clrlwi r10,r11,30
	ctx.r10.u64 = r11.u32 & 0x3;
	// lbz r7,31(r31)
	ctx.r7.u64 = PPC_LOAD_U8(r31.u32 + 31);
	// clrlwi r21,r8,30
	r21.u64 = ctx.r8.u32 & 0x3;
	// addi r9,r10,1
	ctx.r9.s64 = ctx.r10.s64 + 1;
	// addi r10,r21,1
	ctx.r10.s64 = r21.s64 + 1;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// srawi r10,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 2;
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// srawi r10,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 1;
	// srawi r9,r9,2
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 2;
	// add r11,r9,r11
	r11.u64 = ctx.r9.u64 + r11.u64;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// beq cr6,0x827369d0
	if (cr6.eq) goto loc_827369D0;
	// clrlwi r9,r10,31
	ctx.r9.u64 = ctx.r10.u32 & 0x1;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x827369b0
	if (cr6.eq) goto loc_827369B0;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x827369ac
	if (!cr6.gt) goto loc_827369AC;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// b 0x827369b0
	goto loc_827369B0;
loc_827369AC:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
loc_827369B0:
	// clrlwi r9,r11,31
	ctx.r9.u64 = r11.u32 & 0x1;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x827369d0
	if (cr6.eq) goto loc_827369D0;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x827369cc
	if (!cr6.gt) goto loc_827369CC;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// b 0x827369d0
	goto loc_827369D0;
loc_827369CC:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_827369D0:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// beq cr6,0x827369ec
	if (cr6.eq) goto loc_827369EC;
	// addi r9,r31,1516
	ctx.r9.s64 = r31.s64 + 1516;
	// lwz r9,0(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r9,r11
	r11.u64 = ctx.r9.u64 + r11.u64;
	// addi r11,r11,-2
	r11.s64 = r11.s64 + -2;
loc_827369EC:
	// rlwinm r8,r28,16,0,15
	ctx.r8.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 16) & 0xFFFF0000;
	// lwz r7,492(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 492);
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r9,192(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 192);
	// or r8,r8,r27
	ctx.r8.u64 = ctx.r8.u64 | r27.u64;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// rlwinm r15,r8,5,0,26
	r15.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 5) & 0xFFFFFFE0;
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// rlwinm r8,r11,15,0,15
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 15) & 0xFFFF0000;
	// rlwinm r6,r11,16,0,15
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 16) & 0xFFFF0000;
	// or r11,r8,r10
	r11.u64 = ctx.r8.u64 | ctx.r10.u64;
	// or r10,r6,r10
	ctx.r10.u64 = ctx.r6.u64 | ctx.r10.u64;
	// rlwinm r7,r7,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r10,r7,r9
	PPC_STORE_U32(ctx.r7.u32 + ctx.r9.u32, ctx.r10.u32);
	// rlwinm r9,r11,1,15,15
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// lwz r10,1428(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1428);
	// subf r8,r11,r10
	ctx.r8.s64 = ctx.r10.s64 - r11.s64;
	// subf r10,r9,r11
	ctx.r10.s64 = r11.s64 - ctx.r9.s64;
	// subf r9,r15,r8
	ctx.r9.s64 = ctx.r8.s64 - r15.s64;
	// add r10,r10,r15
	ctx.r10.u64 = ctx.r10.u64 + r15.u64;
	// addis r10,r10,24
	ctx.r10.s64 = ctx.r10.s64 + 1572864;
	// addi r10,r10,20
	ctx.r10.s64 = ctx.r10.s64 + 20;
	// or r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 | ctx.r9.u64;
	// rlwinm r10,r10,0,0,16
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r10,r10,0,16,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82736af4
	if (cr6.eq) goto loc_82736AF4;
	// addi r10,r31,52
	ctx.r10.s64 = r31.s64 + 52;
	// addi r9,r31,50
	ctx.r9.s64 = r31.s64 + 50;
	// rlwinm r6,r27,3,0,28
	ctx.r6.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 3) & 0xFFFFFFF8;
	// rlwinm r7,r28,3,0,28
	ctx.r7.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 3) & 0xFFFFFFF8;
	// lhz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// extsh r10,r11
	ctx.r10.s64 = r11.s16;
	// lhz r5,0(r9)
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// srawi r9,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	ctx.r9.s64 = r11.s32 >> 16;
	// rotlwi r11,r8,2
	r11.u64 = __builtin_rotateleft32(ctx.r8.u32, 2);
	// rotlwi r5,r5,2
	ctx.r5.u64 = __builtin_rotateleft32(ctx.r5.u32, 2);
	// addi r4,r11,1
	ctx.r4.s64 = r11.s64 + 1;
	// srawi r11,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	r11.s64 = ctx.r10.s32 >> 2;
	// srawi r8,r9,2
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3) != 0);
	ctx.r8.s64 = ctx.r9.s32 >> 2;
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// cmpwi cr6,r11,-8
	cr6.compare<int32_t>(r11.s32, -8, xer);
	// bge cr6,0x82736aac
	if (!cr6.lt) goto loc_82736AAC;
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r10,r11,r10
	ctx.r10.s64 = ctx.r10.s64 - r11.s64;
	// b 0x82736ac0
	goto loc_82736AC0;
loc_82736AAC:
	// cmpw cr6,r11,r5
	cr6.compare<int32_t>(r11.s32, ctx.r5.s32, xer);
	// ble cr6,0x82736ac0
	if (!cr6.gt) goto loc_82736AC0;
	// subf r11,r11,r5
	r11.s64 = ctx.r5.s64 - r11.s64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
loc_82736AC0:
	// cmpwi cr6,r8,-9
	cr6.compare<int32_t>(ctx.r8.s32, -9, xer);
	// bge cr6,0x82736ad8
	if (!cr6.lt) goto loc_82736AD8;
	// addi r11,r8,9
	r11.s64 = ctx.r8.s64 + 9;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	// b 0x82736aec
	goto loc_82736AEC;
loc_82736AD8:
	// cmpw cr6,r8,r4
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r4.s32, xer);
	// ble cr6,0x82736aec
	if (!cr6.gt) goto loc_82736AEC;
	// subf r11,r8,r4
	r11.s64 = ctx.r4.s64 - ctx.r8.s64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r11,r9
	ctx.r9.u64 = r11.u64 + ctx.r9.u64;
loc_82736AEC:
	// rlwimi r10,r9,16,0,15
	ctx.r10.u64 = (__builtin_rotateleft32(ctx.r9.u32, 16) & 0xFFFF0000) | (ctx.r10.u64 & 0xFFFFFFFF0000FFFF);
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_82736AF4:
	// extsh r25,r11
	r25.s64 = r11.s16;
	// srawi r24,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	r24.s64 = r11.s32 >> 16;
	// lwz r11,176(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bgt cr6,0x82739730
	if (cr6.gt) goto loc_82739730;
	// rotlwi r11,r11,0
	r11.u64 = __builtin_rotateleft32(r11.u32, 0);
	// lis r12,-32141
	r12.s64 = -2106392576;
	// addi r12,r12,27428
	r12.s64 = r12.s64 + 27428;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_82736FB0;
	case 1:
		goto loc_82736FB0;
	case 2:
		goto loc_82736E0C;
	case 3:
		goto loc_82736B34;
	default:
		__builtin_unreachable();
	}
	// lwz r19,28592(r19)
	r19.u64 = PPC_LOAD_U32(r19.u32 + 28592);
	// lwz r19,28592(r19)
	r19.u64 = PPC_LOAD_U32(r19.u32 + 28592);
	// lwz r19,28172(r19)
	r19.u64 = PPC_LOAD_U32(r19.u32 + 28172);
	// lwz r19,27444(r19)
	r19.u64 = PPC_LOAD_U32(r19.u32 + 27444);
loc_82736B34:
	// lwz r9,2756(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2756);
	// addi r10,r31,76
	ctx.r10.s64 = r31.s64 + 76;
	// cmpwi cr6,r29,1
	cr6.compare<int32_t>(r29.s32, 1, xer);
	// addi r11,r9,12
	r11.s64 = ctx.r9.s64 + 12;
	// lhz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// bne cr6,0x82736b84
	if (!cr6.eq) goto loc_82736B84;
	// lwz r10,108(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r7,336(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 336);
	// srawi r5,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r5.s64 = ctx.r10.s32 >> 2;
	// lwz r6,340(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 340);
	// addi r10,r9,8
	ctx.r10.s64 = ctx.r9.s64 + 8;
	// lwz r9,104(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// srawi r3,r9,2
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3) != 0);
	ctx.r3.s64 = ctx.r9.s32 >> 2;
	// addi r9,r31,74
	ctx.r9.s64 = r31.s64 + 74;
	// srawi r4,r24,2
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x3) != 0);
	ctx.r4.s64 = r24.s32 >> 2;
	// mullw r8,r4,r8
	ctx.r8.s64 = int64_t(ctx.r4.s32) * int64_t(ctx.r8.s32);
	// lwz r4,320(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 320);
	// lhz r30,0(r9)
	r30.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// b 0x82736bb4
	goto loc_82736BB4;
loc_82736B84:
	// addi r10,r9,8
	ctx.r10.s64 = ctx.r9.s64 + 8;
	// lwz r9,108(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r7,312(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 312);
	// srawi r5,r9,2
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3) != 0);
	ctx.r5.s64 = ctx.r9.s32 >> 2;
	// lwz r6,316(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 316);
	// addi r9,r31,74
	ctx.r9.s64 = r31.s64 + 74;
	// lwz r4,296(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 296);
	// lhz r30,0(r9)
	r30.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// lwz r9,104(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// srawi r3,r9,2
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3) != 0);
	ctx.r3.s64 = ctx.r9.s32 >> 2;
	// srawi r29,r24,2
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x3) != 0);
	r29.s64 = r24.s32 >> 2;
	// mullw r8,r29,r8
	ctx.r8.s64 = int64_t(r29.s32) * int64_t(ctx.r8.s32);
loc_82736BB4:
	// srawi r9,r25,2
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x3) != 0);
	ctx.r9.s64 = r25.s32 >> 2;
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// rlwinm r30,r30,31,1,31
	r30.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 31) & 0x7FFFFFFF;
	// lhz r28,90(r31)
	r28.u64 = PPC_LOAD_U16(r31.u32 + 90);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// add r9,r6,r9
	ctx.r9.u64 = ctx.r6.u64 + ctx.r9.u64;
	// mullw r5,r30,r5
	ctx.r5.s64 = int64_t(r30.s32) * int64_t(ctx.r5.s32);
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// add r7,r7,r11
	ctx.r7.u64 = ctx.r7.u64 + r11.u64;
	// add r5,r5,r3
	ctx.r5.u64 = ctx.r5.u64 + ctx.r3.u64;
	// add r29,r9,r8
	r29.u64 = ctx.r9.u64 + ctx.r8.u64;
	// add r30,r7,r8
	r30.u64 = ctx.r7.u64 + ctx.r8.u64;
	// lwz r9,412(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 412);
	// lwz r7,392(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 392);
	// add r5,r5,r4
	ctx.r5.u64 = ctx.r5.u64 + ctx.r4.u64;
	// lwz r8,408(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 408);
	// li r6,128
	ctx.r6.s64 = 128;
	// add r26,r7,r10
	r26.u64 = ctx.r7.u64 + ctx.r10.u64;
	// add r27,r5,r10
	r27.u64 = ctx.r5.u64 + ctx.r10.u64;
	// add r23,r8,r11
	r23.u64 = ctx.r8.u64 + r11.u64;
	// add r22,r9,r11
	r22.u64 = ctx.r9.u64 + r11.u64;
	// dcbt r6,r27
	// addi r11,r28,128
	r11.s64 = r28.s64 + 128;
	// dcbt r11,r27
	// addi r11,r28,64
	r11.s64 = r28.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r27
	// rotlwi r11,r28,1
	r11.u64 = __builtin_rotateleft32(r28.u32, 1);
	// add r11,r28,r11
	r11.u64 = r28.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r27
	// addi r11,r28,32
	r11.s64 = r28.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r27
	// rotlwi r11,r28,2
	r11.u64 = __builtin_rotateleft32(r28.u32, 2);
	// add r11,r28,r11
	r11.u64 = r28.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r27
	// rotlwi r11,r28,1
	r11.u64 = __builtin_rotateleft32(r28.u32, 1);
	// add r11,r28,r11
	r11.u64 = r28.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r27
	// rotlwi r11,r28,3
	r11.u64 = __builtin_rotateleft32(r28.u32, 3);
	// subf r11,r28,r11
	r11.s64 = r11.s64 - r28.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r27
	// lbz r11,48(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 48);
	// li r7,1
	ctx.r7.s64 = 1;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// rlwinm r11,r21,2,0,29
	r11.u64 = __builtin_rotateleft64(r21.u32 | (r21.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// add r11,r11,r20
	r11.u64 = r11.u64 + r20.u64;
	// bne cr6,0x82736cd8
	if (!cr6.eq) goto loc_82736CD8;
	// addi r11,r11,166
	r11.s64 = r11.s64 + 166;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82736cec
	if (cr6.eq) goto loc_82736CEC;
	// li r9,1
	ctx.r9.s64 = 1;
	// lbz r8,35(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r7,r20
	ctx.r7.u64 = r20.u64;
	// mr r6,r21
	ctx.r6.u64 = r21.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8266cc68
	sub_8266CC68(ctx, base);
	// b 0x82736cec
	goto loc_82736CEC;
loc_82736CD8:
	// addi r11,r11,182
	r11.s64 = r11.s64 + 182;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82736CEC:
	// lhz r4,92(r31)
	ctx.r4.u64 = PPC_LOAD_U16(r31.u32 + 92);
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r30
	// addi r11,r4,128
	r11.s64 = ctx.r4.s64 + 128;
	// dcbt r11,r30
	// addi r11,r4,64
	r11.s64 = ctx.r4.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r30
	// rotlwi r11,r4,1
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 1);
	// add r11,r4,r11
	r11.u64 = ctx.r4.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r30
	// addi r11,r4,32
	r11.s64 = ctx.r4.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r30
	// rotlwi r11,r4,2
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 2);
	// add r11,r4,r11
	r11.u64 = ctx.r4.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r30
	// rotlwi r11,r4,1
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 1);
	// add r11,r4,r11
	r11.u64 = ctx.r4.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r30
	// rotlwi r11,r4,3
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 3);
	// subf r11,r4,r11
	r11.s64 = r11.s64 - ctx.r4.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r30
	// rlwinm r11,r25,2,28,29
	r11.u64 = __builtin_rotateleft64(r25.u32 | (r25.u64 << 32), 2) & 0xC;
	// clrlwi r10,r24,30
	ctx.r10.u64 = r24.u32 & 0x3;
	// li r7,0
	ctx.r7.s64 = 0;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// addi r11,r11,182
	r11.s64 = r11.s64 + 182;
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// rlwinm r28,r11,2,0,29
	r28.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwzx r11,r28,r31
	r11.u64 = PPC_LOAD_U32(r28.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lhz r4,92(r31)
	ctx.r4.u64 = PPC_LOAD_U16(r31.u32 + 92);
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r4,128
	r11.s64 = ctx.r4.s64 + 128;
	// dcbt r11,r29
	// addi r11,r4,64
	r11.s64 = ctx.r4.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rotlwi r11,r4,1
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 1);
	// add r11,r4,r11
	r11.u64 = ctx.r4.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r4,32
	r11.s64 = ctx.r4.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rotlwi r11,r4,2
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 2);
	// add r11,r4,r11
	r11.u64 = ctx.r4.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rotlwi r11,r4,1
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 1);
	// add r11,r4,r11
	r11.u64 = ctx.r4.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rotlwi r11,r4,3
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 3);
	// subf r11,r4,r11
	r11.s64 = r11.s64 - ctx.r4.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// lwzx r11,r28,r31
	r11.u64 = PPC_LOAD_U32(r28.u32 + r31.u32);
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// b 0x82739720
	goto loc_82739720;
loc_82736E0C:
	// lwz r9,2756(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2756);
	// addi r10,r31,76
	ctx.r10.s64 = r31.s64 + 76;
	// cmpwi cr6,r29,1
	cr6.compare<int32_t>(r29.s32, 1, xer);
	// addi r11,r9,12
	r11.s64 = ctx.r9.s64 + 12;
	// lhz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// bne cr6,0x82736e5c
	if (!cr6.eq) goto loc_82736E5C;
	// lwz r10,108(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r7,384(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 384);
	// srawi r5,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r5.s64 = ctx.r10.s32 >> 2;
	// lwz r6,388(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 388);
	// addi r10,r9,8
	ctx.r10.s64 = ctx.r9.s64 + 8;
	// lwz r9,104(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// srawi r3,r9,2
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3) != 0);
	ctx.r3.s64 = ctx.r9.s32 >> 2;
	// addi r9,r31,74
	ctx.r9.s64 = r31.s64 + 74;
	// srawi r4,r24,2
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x3) != 0);
	ctx.r4.s64 = r24.s32 >> 2;
	// mullw r8,r4,r8
	ctx.r8.s64 = int64_t(ctx.r4.s32) * int64_t(ctx.r8.s32);
	// lwz r4,368(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 368);
	// lhz r30,0(r9)
	r30.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// b 0x82736e8c
	goto loc_82736E8C;
loc_82736E5C:
	// addi r10,r9,8
	ctx.r10.s64 = ctx.r9.s64 + 8;
	// lwz r9,108(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r7,360(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 360);
	// srawi r5,r9,2
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3) != 0);
	ctx.r5.s64 = ctx.r9.s32 >> 2;
	// lwz r6,364(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 364);
	// addi r9,r31,74
	ctx.r9.s64 = r31.s64 + 74;
	// lwz r4,344(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 344);
	// lhz r30,0(r9)
	r30.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// lwz r9,104(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// srawi r3,r9,2
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3) != 0);
	ctx.r3.s64 = ctx.r9.s32 >> 2;
	// srawi r29,r24,2
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x3) != 0);
	r29.s64 = r24.s32 >> 2;
	// mullw r8,r29,r8
	ctx.r8.s64 = int64_t(r29.s32) * int64_t(ctx.r8.s32);
loc_82736E8C:
	// srawi r9,r25,2
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x3) != 0);
	ctx.r9.s64 = r25.s32 >> 2;
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// rlwinm r30,r30,31,1,31
	r30.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 31) & 0x7FFFFFFF;
	// lhz r28,90(r31)
	r28.u64 = PPC_LOAD_U16(r31.u32 + 90);
	// add r7,r7,r9
	ctx.r7.u64 = ctx.r7.u64 + ctx.r9.u64;
	// add r9,r6,r9
	ctx.r9.u64 = ctx.r6.u64 + ctx.r9.u64;
	// mullw r5,r30,r5
	ctx.r5.s64 = int64_t(r30.s32) * int64_t(ctx.r5.s32);
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// add r7,r7,r11
	ctx.r7.u64 = ctx.r7.u64 + r11.u64;
	// add r5,r5,r3
	ctx.r5.u64 = ctx.r5.u64 + ctx.r3.u64;
	// add r29,r9,r8
	r29.u64 = ctx.r9.u64 + ctx.r8.u64;
	// add r30,r7,r8
	r30.u64 = ctx.r7.u64 + ctx.r8.u64;
	// lwz r9,412(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 412);
	// lwz r7,392(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 392);
	// add r5,r5,r4
	ctx.r5.u64 = ctx.r5.u64 + ctx.r4.u64;
	// lwz r8,408(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 408);
	// li r6,128
	ctx.r6.s64 = 128;
	// add r26,r7,r10
	r26.u64 = ctx.r7.u64 + ctx.r10.u64;
	// add r27,r5,r10
	r27.u64 = ctx.r5.u64 + ctx.r10.u64;
	// add r23,r8,r11
	r23.u64 = ctx.r8.u64 + r11.u64;
	// add r22,r9,r11
	r22.u64 = ctx.r9.u64 + r11.u64;
	// dcbt r6,r27
	// addi r11,r28,128
	r11.s64 = r28.s64 + 128;
	// dcbt r11,r27
	// addi r11,r28,64
	r11.s64 = r28.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r27
	// rotlwi r11,r28,1
	r11.u64 = __builtin_rotateleft32(r28.u32, 1);
	// add r11,r28,r11
	r11.u64 = r28.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r27
	// addi r11,r28,32
	r11.s64 = r28.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r27
	// rotlwi r11,r28,2
	r11.u64 = __builtin_rotateleft32(r28.u32, 2);
	// add r11,r28,r11
	r11.u64 = r28.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r27
	// rotlwi r11,r28,1
	r11.u64 = __builtin_rotateleft32(r28.u32, 1);
	// add r11,r28,r11
	r11.u64 = r28.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r27
	// rotlwi r11,r28,3
	r11.u64 = __builtin_rotateleft32(r28.u32, 3);
	// subf r11,r28,r11
	r11.s64 = r11.s64 - r28.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r27
	// lbz r11,48(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 48);
	// li r7,1
	ctx.r7.s64 = 1;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// rlwinm r11,r21,2,0,29
	r11.u64 = __builtin_rotateleft64(r21.u32 | (r21.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// add r11,r11,r20
	r11.u64 = r11.u64 + r20.u64;
	// bne cr6,0x82736cd8
	if (!cr6.eq) goto loc_82736CD8;
	// addi r11,r11,166
	r11.s64 = r11.s64 + 166;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82736cec
	if (cr6.eq) goto loc_82736CEC;
	// li r9,1
	ctx.r9.s64 = 1;
	// lbz r8,35(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r7,r20
	ctx.r7.u64 = r20.u64;
	// mr r6,r21
	ctx.r6.u64 = r21.u64;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8266cc68
	sub_8266CC68(ctx, base);
	// b 0x82736cec
	goto loc_82736CEC;
loc_82736FB0:
	// addi r16,r31,74
	r16.s64 = r31.s64 + 74;
	// cmpwi cr6,r29,1
	cr6.compare<int32_t>(r29.s32, 1, xer);
	// addi r22,r31,76
	r22.s64 = r31.s64 + 76;
	// lhz r28,0(r16)
	r28.u64 = PPC_LOAD_U16(r16.u32 + 0);
	// bne cr6,0x82737004
	if (!cr6.eq) goto loc_82737004;
	// lwz r8,108(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r7,104(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// srawi r8,r8,2
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x3) != 0);
	ctx.r8.s64 = ctx.r8.s32 >> 2;
	// lhz r9,0(r22)
	ctx.r9.u64 = PPC_LOAD_U16(r22.u32 + 0);
	// srawi r3,r7,2
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x3) != 0);
	ctx.r3.s64 = ctx.r7.s32 >> 2;
	// lwz r10,2756(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2756);
	// srawi r30,r24,2
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x3) != 0);
	r30.s64 = r24.s32 >> 2;
	// lwz r5,336(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 336);
	// lwz r6,340(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 340);
	// addi r17,r10,12
	r17.s64 = ctx.r10.s64 + 12;
	// mullw r9,r30,r9
	ctx.r9.s64 = int64_t(r30.s32) * int64_t(ctx.r9.s32);
	// lwz r4,320(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 320);
	// rlwinm r30,r28,31,1,31
	r30.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 31) & 0x7FFFFFFF;
	// addi r18,r10,8
	r18.s64 = ctx.r10.s64 + 8;
	// mullw r8,r30,r8
	ctx.r8.s64 = int64_t(r30.s32) * int64_t(ctx.r8.s32);
	// b 0x82737040
	goto loc_82737040;
loc_82737004:
	// lwz r10,108(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r9,2756(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2756);
	// srawi r30,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	r30.s64 = ctx.r10.s32 >> 2;
	// lwz r10,104(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lhz r8,0(r22)
	ctx.r8.u64 = PPC_LOAD_U16(r22.u32 + 0);
	// addi r17,r9,12
	r17.s64 = ctx.r9.s64 + 12;
	// srawi r3,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r3.s64 = ctx.r10.s32 >> 2;
	// lwz r5,312(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 312);
	// srawi r29,r24,2
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x3) != 0);
	r29.s64 = r24.s32 >> 2;
	// lwz r6,316(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 316);
	// addi r18,r9,8
	r18.s64 = ctx.r9.s64 + 8;
	// lwz r4,296(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 296);
	// mullw r9,r29,r8
	ctx.r9.s64 = int64_t(r29.s32) * int64_t(ctx.r8.s32);
	// rlwinm r8,r28,31,1,31
	ctx.r8.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 31) & 0x7FFFFFFF;
	// mullw r8,r8,r30
	ctx.r8.s64 = int64_t(ctx.r8.s32) * int64_t(r30.s32);
loc_82737040:
	// srawi r10,r25,2
	xer.ca = (r25.s32 < 0) & ((r25.u32 & 0x3) != 0);
	ctx.r10.s64 = r25.s32 >> 2;
	// lwz r11,0(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 0);
	// add r8,r8,r3
	ctx.r8.u64 = ctx.r8.u64 + ctx.r3.u64;
	// lwz r7,0(r18)
	ctx.r7.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// add r5,r5,r10
	ctx.r5.u64 = ctx.r5.u64 + ctx.r10.u64;
	// lwz r27,448(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + 448);
	// add r6,r6,r10
	ctx.r6.u64 = ctx.r6.u64 + ctx.r10.u64;
	// add r10,r5,r11
	ctx.r10.u64 = ctx.r5.u64 + r11.u64;
	// add r11,r6,r11
	r11.u64 = ctx.r6.u64 + r11.u64;
	// add r8,r8,r4
	ctx.r8.u64 = ctx.r8.u64 + ctx.r4.u64;
	// add r29,r11,r9
	r29.u64 = r11.u64 + ctx.r9.u64;
	// add r30,r10,r9
	r30.u64 = ctx.r10.u64 + ctx.r9.u64;
	// add r26,r8,r7
	r26.u64 = ctx.r8.u64 + ctx.r7.u64;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r26
	// addi r11,r28,128
	r11.s64 = r28.s64 + 128;
	// dcbt r11,r26
	// addi r11,r28,64
	r11.s64 = r28.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r26
	// rlwinm r11,r28,1,0,30
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r28,r11
	r11.u64 = r28.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r26
	// addi r11,r28,32
	r11.s64 = r28.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r26
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r28,r11
	r11.u64 = r28.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r26
	// rlwinm r11,r28,1,0,30
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r28,r11
	r11.u64 = r28.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r26
	// rlwinm r11,r28,3,0,28
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r28,r11
	r11.s64 = r11.s64 - r28.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r26
	// lbz r11,48(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 48);
	// li r10,1
	ctx.r10.s64 = 1;
	// li r14,0
	r14.s64 = 0;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// rlwinm r11,r21,2,0,29
	r11.u64 = __builtin_rotateleft64(r21.u32 | (r21.u64 << 32), 2) & 0xFFFFFFFC;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// add r11,r11,r20
	r11.u64 = r11.u64 + r20.u64;
	// bne cr6,0x82737164
	if (!cr6.eq) goto loc_82737164;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// stw r14,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r14.u32);
	// mr r9,r20
	ctx.r9.u64 = r20.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r8,r21
	ctx.r8.u64 = r21.u64;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82737220
	if (cr6.eq) goto loc_82737220;
	// li r10,1
	ctx.r10.s64 = 1;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r20
	ctx.r8.u64 = r20.u64;
	// stw r14,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r14.u32);
	// mr r7,r21
	ctx.r7.u64 = r21.u64;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
	// b 0x82737220
	goto loc_82737220;
loc_82737164:
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r20
	ctx.r8.u64 = r20.u64;
	// stw r14,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r14.u32);
	// rlwinm r23,r11,2,0,29
	r23.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r7,r21
	ctx.r7.u64 = r21.u64;
	// lwzx r11,r23,r31
	r11.u64 = PPC_LOAD_U32(r23.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// lwzx r11,r23,r31
	r11.u64 = PPC_LOAD_U32(r23.u32 + r31.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r8,r20
	ctx.r8.u64 = r20.u64;
	// stw r14,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r14.u32);
	// mr r7,r21
	ctx.r7.u64 = r21.u64;
	// li r6,16
	ctx.r6.s64 = 16;
	// addi r5,r27,8
	ctx.r5.s64 = r27.s64 + 8;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// addi r3,r26,8
	ctx.r3.s64 = r26.s64 + 8;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// rlwinm r11,r28,3,0,28
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 3) & 0xFFFFFFF8;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// li r10,1
	ctx.r10.s64 = 1;
	// add r26,r11,r26
	r26.u64 = r11.u64 + r26.u64;
	// lwzx r11,r23,r31
	r11.u64 = PPC_LOAD_U32(r23.u32 + r31.u32);
	// mr r8,r20
	ctx.r8.u64 = r20.u64;
	// stw r14,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r14.u32);
	// mr r7,r21
	ctx.r7.u64 = r21.u64;
	// li r6,16
	ctx.r6.s64 = 16;
	// addi r5,r27,128
	ctx.r5.s64 = r27.s64 + 128;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// lwzx r11,r23,r31
	r11.u64 = PPC_LOAD_U32(r23.u32 + r31.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r8,r20
	ctx.r8.u64 = r20.u64;
	// stw r14,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r14.u32);
	// mr r7,r21
	ctx.r7.u64 = r21.u64;
	// li r6,16
	ctx.r6.s64 = 16;
	// addi r5,r27,136
	ctx.r5.s64 = r27.s64 + 136;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// addi r3,r26,8
	ctx.r3.s64 = r26.s64 + 8;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82737220:
	// lhz r4,0(r22)
	ctx.r4.u64 = PPC_LOAD_U16(r22.u32 + 0);
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r30
	// addi r11,r4,128
	r11.s64 = ctx.r4.s64 + 128;
	// dcbt r11,r30
	// addi r11,r4,64
	r11.s64 = ctx.r4.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r30
	// rotlwi r11,r4,1
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 1);
	// add r11,r4,r11
	r11.u64 = ctx.r4.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r30
	// addi r11,r4,32
	r11.s64 = ctx.r4.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r30
	// rotlwi r11,r4,2
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 2);
	// add r11,r4,r11
	r11.u64 = ctx.r4.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r30
	// rotlwi r11,r4,1
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 1);
	// add r11,r4,r11
	r11.u64 = ctx.r4.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r30
	// rotlwi r11,r4,3
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 3);
	// subf r11,r4,r11
	r11.s64 = r11.s64 - ctx.r4.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r30
	// clrlwi r28,r25,30
	r28.u64 = r25.u32 & 0x3;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// clrlwi r26,r24,30
	r26.u64 = r24.u32 & 0x3;
	// stw r14,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r14.u32);
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// li r10,1
	ctx.r10.s64 = 1;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// li r6,8
	ctx.r6.s64 = 8;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// addi r5,r27,256
	ctx.r5.s64 = r27.s64 + 256;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lhz r4,0(r22)
	ctx.r4.u64 = PPC_LOAD_U16(r22.u32 + 0);
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r4,128
	r11.s64 = ctx.r4.s64 + 128;
	// dcbt r11,r29
	// addi r11,r4,64
	r11.s64 = ctx.r4.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rotlwi r11,r4,1
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 1);
	// add r11,r4,r11
	r11.u64 = ctx.r4.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r4,32
	r11.s64 = ctx.r4.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rotlwi r11,r4,2
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 2);
	// add r11,r4,r11
	r11.u64 = ctx.r4.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rotlwi r11,r4,1
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 1);
	// add r11,r4,r11
	r11.u64 = ctx.r4.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rotlwi r11,r4,3
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 3);
	// subf r11,r4,r11
	r11.s64 = r11.s64 - ctx.r4.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// li r10,1
	ctx.r10.s64 = 1;
	// li r6,8
	ctx.r6.s64 = 8;
	// stw r14,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r14.u32);
	// addi r5,r27,320
	ctx.r5.s64 = r27.s64 + 320;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// rlwinm r11,r28,2,0,29
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r10,592(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 592);
	// lwz r9,620(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 620);
	// lwz r11,604(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 604);
	// clrlwi r8,r10,31
	ctx.r8.u64 = ctx.r10.u32 & 0x1;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// slw r10,r10,r9
	ctx.r10.u64 = ctx.r9.u8 & 0x20 ? 0 : (ctx.r10.u32 << (ctx.r9.u8 & 0x3F));
	// slw r11,r11,r9
	r11.u64 = ctx.r9.u8 & 0x20 ? 0 : (r11.u32 << (ctx.r9.u8 & 0x3F));
	// beq cr6,0x827373c4
	if (cr6.eq) goto loc_827373C4;
	// lwz r9,440(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 440);
	// li r29,1
	r29.s64 = 1;
	// subf r10,r9,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r9.s64;
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
	// rlwinm r10,r10,0,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFC;
	// rlwimi r9,r29,3,31,28
	ctx.r9.u64 = (__builtin_rotateleft32(r29.u32, 3) & 0xFFFFFFFFFFFFFFF9) | (ctx.r9.u64 & 0x6);
	// srawi r9,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 1;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// b 0x827373d8
	goto loc_827373D8;
loc_827373C4:
	// rlwinm r9,r10,0,0,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFF8;
	// srawi r10,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 1;
	// mr r29,r14
	r29.u64 = r14.u64;
	// clrlwi r10,r10,30
	ctx.r10.u64 = ctx.r10.u32 & 0x3;
	// or r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 | ctx.r9.u64;
loc_827373D8:
	// rlwimi r11,r10,16,0,15
	r11.u64 = (__builtin_rotateleft32(ctx.r10.u32, 16) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// lwz r9,1412(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1412);
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	// subf r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	// subf r9,r19,r9
	ctx.r9.s64 = ctx.r9.s64 - r19.s64;
	// add r10,r10,r19
	ctx.r10.u64 = ctx.r10.u64 + r19.u64;
	// addis r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 8388608;
	// addi r10,r10,56
	ctx.r10.s64 = ctx.r10.s64 + 56;
	// or r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 | ctx.r9.u64;
	// rlwinm r10,r10,0,0,16
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r10,r10,0,16,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82737514
	if (cr6.eq) goto loc_82737514;
	// extsh r8,r11
	ctx.r8.s64 = r11.s16;
	// srawi r6,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	ctx.r6.s64 = r11.s32 >> 16;
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// addi r10,r31,1516
	ctx.r10.s64 = r31.s64 + 1516;
	// rlwinm r4,r11,4,0,27
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// mr r30,r14
	r30.u64 = r14.u64;
	// rlwinm r3,r11,5,0,26
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 5) & 0xFFFFFFE0;
	// rlwinm r11,r6,0,29,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 0) & 0x4;
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x82737460
	if (!cr6.eq) goto loc_82737460;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// addi r11,r31,52
	r11.s64 = r31.s64 + 52;
	// lhz r11,0(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rotlwi r11,r11,4
	r11.u64 = __builtin_rotateleft32(r11.u32, 4);
	// beq cr6,0x82737480
	if (cr6.eq) goto loc_82737480;
	// li r7,-35
	ctx.r7.s64 = -35;
	// addi r5,r11,3
	ctx.r5.s64 = r11.s64 + 3;
	// b 0x82737488
	goto loc_82737488;
loc_82737460:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// addi r11,r31,52
	r11.s64 = r31.s64 + 52;
	// lhz r11,0(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rotlwi r11,r11,4
	r11.u64 = __builtin_rotateleft32(r11.u32, 4);
	// beq cr6,0x82737480
	if (cr6.eq) goto loc_82737480;
	// li r7,-37
	ctx.r7.s64 = -37;
	// addi r5,r11,1
	ctx.r5.s64 = r11.s64 + 1;
	// b 0x82737488
	goto loc_82737488;
loc_82737480:
	// addi r5,r11,2
	ctx.r5.s64 = r11.s64 + 2;
	// li r7,-36
	ctx.r7.s64 = -36;
loc_82737488:
	// srawi r11,r8,2
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x3) != 0);
	r11.s64 = ctx.r8.s32 >> 2;
	// srawi r10,r6,2
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r6.s32 >> 2;
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// add r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 + ctx.r3.u64;
	// cmpwi cr6,r11,-17
	cr6.compare<int32_t>(r11.s32, -17, xer);
	// bge cr6,0x827374a8
	if (!cr6.lt) goto loc_827374A8;
	// li r11,-17
	r11.s64 = -17;
	// b 0x827374c0
	goto loc_827374C0;
loc_827374A8:
	// addi r9,r31,50
	ctx.r9.s64 = r31.s64 + 50;
	// lhz r9,0(r9)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// rotlwi r9,r9,3
	ctx.r9.u64 = __builtin_rotateleft32(ctx.r9.u32, 3);
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// ble cr6,0x827374c4
	if (!cr6.gt) goto loc_827374C4;
	// mr r11,r9
	r11.u64 = ctx.r9.u64;
loc_827374C0:
	// li r30,1
	r30.s64 = 1;
loc_827374C4:
	// cmpw cr6,r10,r7
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r7.s32, xer);
	// bge cr6,0x827374d4
	if (!cr6.lt) goto loc_827374D4;
	// mr r10,r7
	ctx.r10.u64 = ctx.r7.u64;
	// b 0x827374ec
	goto loc_827374EC;
loc_827374D4:
	// cmpw cr6,r10,r5
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r5.s32, xer);
	// ble cr6,0x827374e4
	if (!cr6.gt) goto loc_827374E4;
	// mr r10,r5
	ctx.r10.u64 = ctx.r5.u64;
	// b 0x827374ec
	goto loc_827374EC;
loc_827374E4:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// beq cr6,0x8273750c
	if (cr6.eq) goto loc_8273750C;
loc_827374EC:
	// subf r11,r4,r11
	r11.s64 = r11.s64 - ctx.r4.s64;
	// subf r10,r3,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r3.s64;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// clrlwi r8,r8,30
	ctx.r8.u64 = ctx.r8.u32 & 0x3;
	// clrlwi r10,r6,30
	ctx.r10.u64 = ctx.r6.u32 & 0x3;
	// add r8,r9,r8
	ctx.r8.u64 = ctx.r9.u64 + ctx.r8.u64;
	// add r6,r11,r10
	ctx.r6.u64 = r11.u64 + ctx.r10.u64;
loc_8273750C:
	// rlwimi r8,r6,16,0,15
	ctx.r8.u64 = (__builtin_rotateleft32(ctx.r6.u32, 16) & 0xFFFF0000) | (ctx.r8.u64 & 0xFFFFFFFF0000FFFF);
	// mr r11,r8
	r11.u64 = ctx.r8.u64;
loc_82737514:
	// srawi r3,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	ctx.r3.s64 = r11.s32 >> 16;
	// extsh r30,r11
	r30.s64 = r11.s16;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// clrlwi r19,r3,30
	r19.u64 = ctx.r3.u32 & 0x3;
	// stw r3,592(r1)
	PPC_STORE_U32(ctx.r1.u32 + 592, ctx.r3.u32);
	// stw r30,604(r1)
	PPC_STORE_U32(ctx.r1.u32 + 604, r30.u32);
	// beq cr6,0x82737560
	if (cr6.eq) goto loc_82737560;
	// addi r11,r31,1516
	r11.s64 = r31.s64 + 1516;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// rlwinm r10,r11,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r10,r3
	r11.u64 = ctx.r10.u64 + ctx.r3.u64;
	// addi r11,r11,-4
	r11.s64 = r11.s64 + -4;
	// srawi r11,r11,3
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7) != 0);
	r11.s64 = r11.s32 >> 3;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// or r11,r11,r19
	r11.u64 = r11.u64 | r19.u64;
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// addi r10,r11,2
	ctx.r10.s64 = r11.s64 + 2;
	// b 0x8273756c
	goto loc_8273756C;
loc_82737560:
	// srawi r11,r3,3
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x7) != 0);
	r11.s64 = ctx.r3.s32 >> 3;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// or r10,r11,r19
	ctx.r10.u64 = r11.u64 | r19.u64;
loc_8273756C:
	// lbz r9,31(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 31);
	// clrlwi r11,r10,30
	r11.u64 = ctx.r10.u32 & 0x3;
	// clrlwi r20,r30,30
	r20.u64 = r30.u32 & 0x3;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// addi r9,r11,1
	ctx.r9.s64 = r11.s64 + 1;
	// addi r11,r20,1
	r11.s64 = r20.s64 + 1;
	// srawi r11,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	r11.s64 = r11.s32 >> 2;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// srawi r9,r9,2
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 2;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// srawi r10,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 1;
	// beq cr6,0x827375e0
	if (cr6.eq) goto loc_827375E0;
	// clrlwi r9,r11,31
	ctx.r9.u64 = r11.u32 & 0x1;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x827375c0
	if (cr6.eq) goto loc_827375C0;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x827375bc
	if (!cr6.gt) goto loc_827375BC;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// b 0x827375c0
	goto loc_827375C0;
loc_827375BC:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_827375C0:
	// clrlwi r9,r10,31
	ctx.r9.u64 = ctx.r10.u32 & 0x1;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x827375e0
	if (cr6.eq) goto loc_827375E0;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x827375dc
	if (!cr6.gt) goto loc_827375DC;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// b 0x827375e0
	goto loc_827375E0;
loc_827375DC:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
loc_827375E0:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// beq cr6,0x827375fc
	if (cr6.eq) goto loc_827375FC;
	// addi r9,r31,1516
	ctx.r9.s64 = r31.s64 + 1516;
	// lwz r9,0(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r10,r10,-2
	ctx.r10.s64 = ctx.r10.s64 + -2;
loc_827375FC:
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r9,1428(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 1428);
	// add r10,r10,r29
	ctx.r10.u64 = ctx.r10.u64 + r29.u64;
	// rlwimi r11,r10,15,0,15
	r11.u64 = (__builtin_rotateleft32(ctx.r10.u32, 15) & 0xFFFF0000) | (r11.u64 & 0xFFFFFFFF0000FFFF);
	// subf r10,r15,r9
	ctx.r10.s64 = ctx.r9.s64 - r15.s64;
	// rlwinm r9,r11,1,15,15
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r8,r11,r10
	ctx.r8.s64 = ctx.r10.s64 - r11.s64;
	// subf r10,r9,r15
	ctx.r10.s64 = r15.s64 - ctx.r9.s64;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// addis r10,r10,24
	ctx.r10.s64 = ctx.r10.s64 + 1572864;
	// addi r10,r10,20
	ctx.r10.s64 = ctx.r10.s64 + 20;
	// or r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 | ctx.r8.u64;
	// rlwinm r10,r10,0,0,16
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r10,r10,0,16,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x827376e0
	if (cr6.eq) goto loc_827376E0;
	// addi r10,r31,52
	ctx.r10.s64 = r31.s64 + 52;
	// addi r9,r31,50
	ctx.r9.s64 = r31.s64 + 50;
	// lhz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// extsh r10,r11
	ctx.r10.s64 = r11.s16;
	// lhz r5,0(r9)
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// srawi r9,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	ctx.r9.s64 = r11.s32 >> 16;
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// rotlwi r5,r5,2
	ctx.r5.u64 = __builtin_rotateleft32(ctx.r5.u32, 2);
	// rlwinm r6,r11,3,0,28
	ctx.r6.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// rotlwi r11,r8,2
	r11.u64 = __builtin_rotateleft32(ctx.r8.u32, 2);
	// lwz r8,120(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// addi r4,r11,1
	ctx.r4.s64 = r11.s64 + 1;
	// srawi r11,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	r11.s64 = ctx.r10.s32 >> 2;
	// rlwinm r7,r8,3,0,28
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// srawi r8,r9,2
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3) != 0);
	ctx.r8.s64 = ctx.r9.s32 >> 2;
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// cmpwi cr6,r11,-8
	cr6.compare<int32_t>(r11.s32, -8, xer);
	// bge cr6,0x82737698
	if (!cr6.lt) goto loc_82737698;
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r10,r11,r10
	ctx.r10.s64 = ctx.r10.s64 - r11.s64;
	// b 0x827376ac
	goto loc_827376AC;
loc_82737698:
	// cmpw cr6,r11,r5
	cr6.compare<int32_t>(r11.s32, ctx.r5.s32, xer);
	// ble cr6,0x827376ac
	if (!cr6.gt) goto loc_827376AC;
	// subf r11,r11,r5
	r11.s64 = ctx.r5.s64 - r11.s64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
loc_827376AC:
	// cmpwi cr6,r8,-9
	cr6.compare<int32_t>(ctx.r8.s32, -9, xer);
	// bge cr6,0x827376c4
	if (!cr6.lt) goto loc_827376C4;
	// addi r11,r8,9
	r11.s64 = ctx.r8.s64 + 9;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	// b 0x827376d8
	goto loc_827376D8;
loc_827376C4:
	// cmpw cr6,r8,r4
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r4.s32, xer);
	// ble cr6,0x827376d8
	if (!cr6.gt) goto loc_827376D8;
	// subf r11,r8,r4
	r11.s64 = ctx.r4.s64 - ctx.r8.s64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r11,r9
	ctx.r9.u64 = r11.u64 + ctx.r9.u64;
loc_827376D8:
	// rlwimi r10,r9,16,0,15
	ctx.r10.u64 = (__builtin_rotateleft32(ctx.r9.u32, 16) & 0xFFFF0000) | (ctx.r10.u64 & 0xFFFFFFFF0000FFFF);
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_827376E0:
	// srawi r23,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	r23.s64 = r11.s32 >> 16;
	// lhz r26,0(r16)
	r26.u64 = PPC_LOAD_U16(r16.u32 + 0);
	// cmpwi cr6,r29,1
	cr6.compare<int32_t>(r29.s32, 1, xer);
	// lhz r9,0(r22)
	ctx.r9.u64 = PPC_LOAD_U16(r22.u32 + 0);
	// srawi r29,r3,2
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x3) != 0);
	r29.s64 = ctx.r3.s32 >> 2;
	// lwz r7,0(r18)
	ctx.r7.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// srawi r3,r30,2
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x3) != 0);
	ctx.r3.s64 = r30.s32 >> 2;
	// extsh r24,r11
	r24.s64 = r11.s16;
	// lwz r11,0(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 0);
	// srawi r6,r23,2
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x3) != 0);
	ctx.r6.s64 = r23.s32 >> 2;
	// rlwinm r30,r26,31,1,31
	r30.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 31) & 0x7FFFFFFF;
	// srawi r10,r24,2
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x3) != 0);
	ctx.r10.s64 = r24.s32 >> 2;
	// mullw r9,r6,r9
	ctx.r9.s64 = int64_t(ctx.r6.s32) * int64_t(ctx.r9.s32);
	// bne cr6,0x82737728
	if (!cr6.eq) goto loc_82737728;
	// lwz r8,384(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 384);
	// lwz r4,388(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 388);
	// lwz r5,368(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 368);
	// b 0x82737734
	goto loc_82737734;
loc_82737728:
	// lwz r8,360(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 360);
	// lwz r4,364(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + 364);
	// lwz r5,344(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + 344);
loc_82737734:
	// add r6,r8,r11
	ctx.r6.u64 = ctx.r8.u64 + r11.u64;
	// mullw r8,r30,r29
	ctx.r8.s64 = int64_t(r30.s32) * int64_t(r29.s32);
	// lwz r30,260(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 260);
	// add r11,r4,r11
	r11.u64 = ctx.r4.u64 + r11.u64;
	// add r8,r8,r3
	ctx.r8.u64 = ctx.r8.u64 + ctx.r3.u64;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// add r6,r6,r10
	ctx.r6.u64 = ctx.r6.u64 + ctx.r10.u64;
	// add r8,r8,r5
	ctx.r8.u64 = ctx.r8.u64 + ctx.r5.u64;
	// add r28,r11,r9
	r28.u64 = r11.u64 + ctx.r9.u64;
	// add r29,r6,r9
	r29.u64 = ctx.r6.u64 + ctx.r9.u64;
	// add r25,r8,r7
	r25.u64 = ctx.r8.u64 + ctx.r7.u64;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r25
	// addi r11,r26,128
	r11.s64 = r26.s64 + 128;
	// dcbt r11,r25
	// addi r11,r26,64
	r11.s64 = r26.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r25
	// rlwinm r11,r26,1,0,30
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r26,r11
	r11.u64 = r26.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r25
	// addi r11,r26,32
	r11.s64 = r26.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r25
	// rlwinm r11,r26,2,0,29
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r26,r11
	r11.u64 = r26.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r25
	// rlwinm r11,r26,1,0,30
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r26,r11
	r11.u64 = r26.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r25
	// rlwinm r11,r26,3,0,28
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r26,r11
	r11.s64 = r11.s64 - r26.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r25
	// lbz r11,48(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 48);
	// li r10,1
	ctx.r10.s64 = 1;
	// li r6,16
	ctx.r6.s64 = 16;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// rlwinm r11,r20,2,0,29
	r11.u64 = __builtin_rotateleft64(r20.u32 | (r20.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// add r11,r11,r19
	r11.u64 = r11.u64 + r19.u64;
	// bne cr6,0x8273784c
	if (!cr6.eq) goto loc_8273784C;
	// addi r11,r11,199
	r11.s64 = r11.s64 + 199;
	// stw r14,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r14.u32);
	// mr r9,r19
	ctx.r9.u64 = r19.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r8,r20
	ctx.r8.u64 = r20.u64;
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82737908
	if (cr6.eq) goto loc_82737908;
	// li r10,1
	ctx.r10.s64 = 1;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r19
	ctx.r8.u64 = r19.u64;
	// stw r14,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r14.u32);
	// mr r7,r20
	ctx.r7.u64 = r20.u64;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// bl 0x8266c9f8
	sub_8266C9F8(ctx, base);
	// b 0x82737908
	goto loc_82737908;
loc_8273784C:
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r8,r19
	ctx.r8.u64 = r19.u64;
	// stw r14,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r14.u32);
	// rlwinm r21,r11,2,0,29
	r21.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r7,r20
	ctx.r7.u64 = r20.u64;
	// lwzx r11,r21,r31
	r11.u64 = PPC_LOAD_U32(r21.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// lwzx r11,r21,r31
	r11.u64 = PPC_LOAD_U32(r21.u32 + r31.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r8,r19
	ctx.r8.u64 = r19.u64;
	// stw r14,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r14.u32);
	// mr r7,r20
	ctx.r7.u64 = r20.u64;
	// li r6,16
	ctx.r6.s64 = 16;
	// addi r5,r30,8
	ctx.r5.s64 = r30.s64 + 8;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// addi r3,r25,8
	ctx.r3.s64 = r25.s64 + 8;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// rlwinm r11,r26,3,0,28
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 3) & 0xFFFFFFF8;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// li r10,1
	ctx.r10.s64 = 1;
	// add r25,r11,r25
	r25.u64 = r11.u64 + r25.u64;
	// lwzx r11,r21,r31
	r11.u64 = PPC_LOAD_U32(r21.u32 + r31.u32);
	// mr r8,r19
	ctx.r8.u64 = r19.u64;
	// stw r14,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r14.u32);
	// mr r7,r20
	ctx.r7.u64 = r20.u64;
	// li r6,16
	ctx.r6.s64 = 16;
	// addi r5,r30,128
	ctx.r5.s64 = r30.s64 + 128;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// lwzx r11,r21,r31
	r11.u64 = PPC_LOAD_U32(r21.u32 + r31.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r8,r19
	ctx.r8.u64 = r19.u64;
	// stw r14,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r14.u32);
	// mr r7,r20
	ctx.r7.u64 = r20.u64;
	// li r6,16
	ctx.r6.s64 = 16;
	// addi r5,r30,136
	ctx.r5.s64 = r30.s64 + 136;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// addi r3,r25,8
	ctx.r3.s64 = r25.s64 + 8;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82737908:
	// lhz r4,0(r22)
	ctx.r4.u64 = PPC_LOAD_U16(r22.u32 + 0);
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r29
	// addi r11,r4,128
	r11.s64 = ctx.r4.s64 + 128;
	// dcbt r11,r29
	// addi r11,r4,64
	r11.s64 = ctx.r4.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r29
	// rotlwi r11,r4,1
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 1);
	// add r11,r4,r11
	r11.u64 = ctx.r4.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// addi r11,r4,32
	r11.s64 = ctx.r4.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r29
	// rotlwi r11,r4,2
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 2);
	// add r11,r4,r11
	r11.u64 = ctx.r4.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rotlwi r11,r4,1
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 1);
	// add r11,r4,r11
	r11.u64 = ctx.r4.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// rotlwi r11,r4,3
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 3);
	// subf r11,r4,r11
	r11.s64 = r11.s64 - ctx.r4.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r29
	// clrlwi r26,r24,30
	r26.u64 = r24.u32 & 0x3;
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// clrlwi r25,r23,30
	r25.u64 = r23.u32 & 0x3;
	// stw r14,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r14.u32);
	// rlwinm r11,r26,2,0,29
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 2) & 0xFFFFFFFC;
	// li r10,1
	ctx.r10.s64 = 1;
	// add r11,r11,r25
	r11.u64 = r11.u64 + r25.u64;
	// li r6,8
	ctx.r6.s64 = 8;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// addi r5,r30,256
	ctx.r5.s64 = r30.s64 + 256;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// mr r7,r26
	ctx.r7.u64 = r26.u64;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lhz r4,0(r22)
	ctx.r4.u64 = PPC_LOAD_U16(r22.u32 + 0);
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r28
	// addi r11,r4,128
	r11.s64 = ctx.r4.s64 + 128;
	// dcbt r11,r28
	// addi r11,r4,64
	r11.s64 = ctx.r4.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r28
	// rotlwi r11,r4,1
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 1);
	// add r11,r4,r11
	r11.u64 = ctx.r4.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// addi r11,r4,32
	r11.s64 = ctx.r4.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r28
	// rotlwi r11,r4,2
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 2);
	// add r11,r4,r11
	r11.u64 = ctx.r4.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rotlwi r11,r4,1
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 1);
	// add r11,r4,r11
	r11.u64 = ctx.r4.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// rotlwi r11,r4,3
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 3);
	// subf r11,r4,r11
	r11.s64 = r11.s64 - ctx.r4.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r28
	// lbz r9,35(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// li r10,1
	ctx.r10.s64 = 1;
	// li r6,8
	ctx.r6.s64 = 8;
	// stw r14,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r14.u32);
	// addi r5,r30,320
	ctx.r5.s64 = r30.s64 + 320;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// rlwinm r11,r26,2,0,29
	r11.u64 = __builtin_rotateleft64(r26.u32 | (r26.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r8,r25
	ctx.r8.u64 = r25.u64;
	// add r11,r11,r25
	r11.u64 = r11.u64 + r25.u64;
	// mr r7,r26
	ctx.r7.u64 = r26.u64;
	// addi r11,r11,215
	r11.s64 = r11.s64 + 215;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r10,0(r17)
	ctx.r10.u64 = PPC_LOAD_U32(r17.u32 + 0);
	// lwz r7,412(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 412);
	// addi r11,r27,16
	r11.s64 = r27.s64 + 16;
	// lwz r9,408(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 408);
	// addi r6,r27,32
	ctx.r6.s64 = r27.s64 + 32;
	// add r4,r7,r10
	ctx.r4.u64 = ctx.r7.u64 + ctx.r10.u64;
	// lhz r8,0(r16)
	ctx.r8.u64 = PPC_LOAD_U16(r16.u32 + 0);
	// add r3,r9,r10
	ctx.r3.u64 = ctx.r9.u64 + ctx.r10.u64;
	// lvx128 v0,r0,r27
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r5,r27,48
	ctx.r5.s64 = r27.s64 + 48;
	// vor v2,v0,v0
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_load_si128((__m128i*)ctx.v0.u8));
	// addi r10,r1,896
	ctx.r10.s64 = ctx.r1.s64 + 896;
	// lvx128 v13,r0,r11
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v12,r0,r6
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r6,0(r18)
	ctx.r6.u64 = PPC_LOAD_U32(r18.u32 + 0);
	// lwz r11,392(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 392);
	// addi r9,r30,16
	ctx.r9.s64 = r30.s64 + 16;
	// addi r7,r30,32
	ctx.r7.s64 = r30.s64 + 32;
	// vor v1,v13,v13
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_load_si128((__m128i*)ctx.v13.u8));
	// lvx128 v11,r0,r5
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r5.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r24,r30,48
	r24.s64 = r30.s64 + 48;
	// stvx v0,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,976
	ctx.r10.s64 = ctx.r1.s64 + 976;
	// addi r23,r30,64
	r23.s64 = r30.s64 + 64;
	// vor v31,v12,v12
	_mm_store_si128((__m128i*)v31.u8, _mm_load_si128((__m128i*)ctx.v12.u8));
	// vor v30,v11,v11
	_mm_store_si128((__m128i*)v30.u8, _mm_load_si128((__m128i*)ctx.v11.u8));
	// rotlwi r5,r8,1
	ctx.r5.u64 = __builtin_rotateleft32(ctx.r8.u32, 1);
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// rotlwi r6,r8,2
	ctx.r6.u64 = __builtin_rotateleft32(ctx.r8.u32, 2);
	// stvx v13,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,944
	ctx.r10.s64 = ctx.r1.s64 + 944;
	// add r29,r5,r8
	r29.u64 = ctx.r5.u64 + ctx.r8.u64;
	// add r28,r6,r8
	r28.u64 = ctx.r6.u64 + ctx.r8.u64;
	// add r26,r6,r5
	r26.u64 = ctx.r6.u64 + ctx.r5.u64;
	// add r25,r29,r6
	r25.u64 = r29.u64 + ctx.r6.u64;
	// stvx v12,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,1008
	ctx.r10.s64 = ctx.r1.s64 + 1008;
	// stvx v11,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r27,64
	ctx.r10.s64 = r27.s64 + 64;
	// lvx128 v8,r0,r9
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r30,80
	ctx.r9.s64 = r30.s64 + 80;
	// lvx128 v7,r0,r7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r27,112
	ctx.r7.s64 = r27.s64 + 112;
	// lvx128 v5,r0,r23
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r23.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r23,r30,112
	r23.s64 = r30.s64 + 112;
	// lvx128 v6,r0,r24
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r24.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r24,r30,96
	r24.s64 = r30.s64 + 96;
	// lvx128 v9,r0,r10
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r27,80
	ctx.r10.s64 = r27.s64 + 80;
	// lvx128 v3,r0,r9
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v9,v9,v5
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// lvx128 v10,r0,r30
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v8,v1,v8
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v1.u8), _mm_load_si128((__m128i*)ctx.v8.u8)));
	// lvx128 v13,r0,r7
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v10,v2,v10
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v2.u8), _mm_load_si128((__m128i*)ctx.v10.u8)));
	// lvx128 v12,r0,r24
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r24.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v7,v31,v7
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)ctx.v7.u8)));
	// lvx128 v4,r0,r10
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r27,96
	ctx.r10.s64 = r27.s64 + 96;
	// lvx128 v11,r0,r23
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r23.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v6,v30,v6
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// addi r9,r30,128
	ctx.r9.s64 = r30.s64 + 128;
	// vavgub v5,v4,v3
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v4.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// rotlwi r7,r8,3
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r8.u32, 3);
	// lvx128 v0,r0,r10
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,912
	ctx.r10.s64 = ctx.r1.s64 + 912;
	// stvx v0,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,928
	ctx.r10.s64 = ctx.r1.s64 + 928;
	// stvx v13,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,960
	ctx.r10.s64 = ctx.r1.s64 + 960;
	// stvx v12,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,992
	ctx.r10.s64 = ctx.r1.s64 + 992;
	// stvx v11,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r27,128
	ctx.r10.s64 = r27.s64 + 128;
	// stvx v10,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v0,v0,v12
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v12.u8)));
	// stvx128 v8,r11,r8
	_mm_store_si128((__m128i*)(base + ((r11.u32 + ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v13,v13,v11
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v11.u8)));
	// stvx128 v7,r5,r11
	_mm_store_si128((__m128i*)(base + ((ctx.r5.u32 + r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// add r7,r7,r11
	ctx.r7.u64 = ctx.r7.u64 + r11.u64;
	// stvx128 v6,r29,r11
	_mm_store_si128((__m128i*)(base + ((r29.u32 + r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v6.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r30,r10,16
	r30.s64 = ctx.r10.s64 + 16;
	// stvx128 v9,r6,r11
	_mm_store_si128((__m128i*)(base + ((ctx.r6.u32 + r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r27,r10,32
	r27.s64 = ctx.r10.s64 + 32;
	// stvx128 v5,r28,r11
	_mm_store_si128((__m128i*)(base + ((r28.u32 + r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r24,r10,48
	r24.s64 = ctx.r10.s64 + 48;
	// stvx128 v0,r26,r11
	_mm_store_si128((__m128i*)(base + ((r26.u32 + r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r23,r10,64
	r23.s64 = ctx.r10.s64 + 64;
	// stvx128 v13,r25,r11
	_mm_store_si128((__m128i*)(base + ((r25.u32 + r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,896
	r11.s64 = ctx.r1.s64 + 896;
	// lvx128 v0,r0,r10
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r22,r10,80
	r22.s64 = ctx.r10.s64 + 80;
	// addi r21,r10,96
	r21.s64 = ctx.r10.s64 + 96;
	// addi r20,r10,112
	r20.s64 = ctx.r10.s64 + 112;
	// addi r19,r9,16
	r19.s64 = ctx.r9.s64 + 16;
	// stvx v0,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,976
	r11.s64 = ctx.r1.s64 + 976;
	// lvx128 v13,r0,r30
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r18,r9,32
	r18.s64 = ctx.r9.s64 + 32;
	// addi r17,r9,48
	r17.s64 = ctx.r9.s64 + 48;
	// addi r16,r9,64
	r16.s64 = ctx.r9.s64 + 64;
	// addi r15,r9,80
	r15.s64 = ctx.r9.s64 + 80;
	// stvx v13,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,944
	r11.s64 = ctx.r1.s64 + 944;
	// lvx128 v12,r0,r27
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r30,r9,112
	r30.s64 = ctx.r9.s64 + 112;
	// addi r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 128;
	// addi r27,r10,32
	r27.s64 = ctx.r10.s64 + 32;
	// stvx v12,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,1008
	r11.s64 = ctx.r1.s64 + 1008;
	// lvx128 v11,r0,r24
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r24.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r24,r10,48
	r24.s64 = ctx.r10.s64 + 48;
	// stvx v11,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,912
	r11.s64 = ctx.r1.s64 + 912;
	// lvx128 v10,r0,r23
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r23.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r23,r10,64
	r23.s64 = ctx.r10.s64 + 64;
	// lvx128 v9,r0,r22
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r22.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r22,r10,80
	r22.s64 = ctx.r10.s64 + 80;
	// lvx128 v8,r0,r21
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r21.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r21,r10,96
	r21.s64 = ctx.r10.s64 + 96;
	// stvx v8,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,928
	r11.s64 = ctx.r1.s64 + 928;
	// lvx128 v7,r0,r20
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r20.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v7,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r9,96
	r11.s64 = ctx.r9.s64 + 96;
	// lvx128 v6,r0,r9
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r9,128
	ctx.r9.s64 = ctx.r9.s64 + 128;
	// lvx128 v5,r0,r19
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r19.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v0,v0,v6
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// lvx128 v4,r0,r18
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r18.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v13,v13,v5
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v5.u8)));
	// lvx128 v3,r0,r17
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r17.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v12,v12,v4
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v4.u8)));
	// lvx128 v31,r0,r11
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,960
	r11.s64 = ctx.r1.s64 + 960;
	// lvx128 v2,r0,r16
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r16.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v11,v11,v3
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// lvx128 v1,r0,r15
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r15.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v10,v10,v2
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v2.u8)));
	// vavgub v9,v9,v1
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// vavgub v8,v8,v31
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)v31.u8)));
	// stvx v31,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v31.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r11,r1,992
	r11.s64 = ctx.r1.s64 + 992;
	// lvx128 v30,r0,r30
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r30,r10,16
	r30.s64 = ctx.r10.s64 + 16;
	// vavgub v7,v7,v30
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)v30.u8)));
	// stvx v30,r0,r11
	_mm_store_si128((__m128i*)(base + ((r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)v30.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// srawi r11,r8,1
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x1) != 0);
	r11.s64 = ctx.r8.s32 >> 1;
	// stvx v0,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v13,r7,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32 + ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v12,r5,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r5.u32 + ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v11,r29,r7
	_mm_store_si128((__m128i*)(base + ((r29.u32 + ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v10,r6,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r6.u32 + ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v9,r28,r7
	_mm_store_si128((__m128i*)(base + ((r28.u32 + ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v8,r26,r7
	_mm_store_si128((__m128i*)(base + ((r26.u32 + ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v8.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r1,752
	ctx.r8.s64 = ctx.r1.s64 + 752;
	// stvx128 v7,r25,r7
	_mm_store_si128((__m128i*)(base + ((r25.u32 + ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v0,r0,r10
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r10,112
	ctx.r10.s64 = ctx.r10.s64 + 112;
	// lvx128 v13,r0,r30
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r1,832
	ctx.r7.s64 = ctx.r1.s64 + 832;
	// lvx128 v12,r0,r27
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r27.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r6,r9,48
	ctx.r6.s64 = ctx.r9.s64 + 48;
	// lvx128 v11,r0,r24
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r24.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r5,r9,64
	ctx.r5.s64 = ctx.r9.s64 + 64;
	// stvx v0,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r1,720
	ctx.r8.s64 = ctx.r1.s64 + 720;
	// lvx128 v10,r0,r23
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r23.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r30,r9,96
	r30.s64 = ctx.r9.s64 + 96;
	// lvx128 v9,r0,r22
	_mm_store_si128((__m128i*)ctx.v9.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r22.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v7,r0,r21
	_mm_store_si128((__m128i*)ctx.v7.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r21.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v5,r0,r10
	_mm_store_si128((__m128i*)ctx.v5.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,816
	ctx.r10.s64 = ctx.r1.s64 + 816;
	// stvx v13,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r1,784
	ctx.r8.s64 = ctx.r1.s64 + 784;
	// stvx v7,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r7,r9,32
	ctx.r7.s64 = ctx.r9.s64 + 32;
	// lvx128 v8,r0,r9
	_mm_store_si128((__m128i*)ctx.v8.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vavgub v0,v0,v8
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)ctx.v8.u8)));
	// lvx128 v3,r0,r6
	_mm_store_si128((__m128i*)ctx.v3.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v5,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v12,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r1,736
	ctx.r8.s64 = ctx.r1.s64 + 736;
	// lvx128 v4,r0,r7
	_mm_store_si128((__m128i*)ctx.v4.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v2,r0,r5
	_mm_store_si128((__m128i*)ctx.v2.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r5.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v31,r0,r30
	_mm_store_si128((__m128i*)v31.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((r30.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx v11,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r1,768
	ctx.r8.s64 = ctx.r1.s64 + 768;
	// stvx v10,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r1,800
	ctx.r8.s64 = ctx.r1.s64 + 800;
	// stvx v9,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r9,16
	ctx.r8.s64 = ctx.r9.s64 + 16;
	// lvx128 v6,r0,r8
	_mm_store_si128((__m128i*)ctx.v6.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r8,r9,80
	ctx.r8.s64 = ctx.r9.s64 + 80;
	// addi r9,r9,112
	ctx.r9.s64 = ctx.r9.s64 + 112;
	// lvx128 v1,r0,r8
	_mm_store_si128((__m128i*)ctx.v1.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v30,r0,r9
	_mm_store_si128((__m128i*)v30.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,752
	ctx.r10.s64 = ctx.r1.s64 + 752;
	// stvx v0,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,720
	ctx.r10.s64 = ctx.r1.s64 + 720;
	// vavgub v0,v13,v6
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)ctx.v6.u8)));
	// vavgub v13,v12,v4
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)ctx.v4.u8)));
	// vavgub v12,v9,v1
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v9.u8), _mm_load_si128((__m128i*)ctx.v1.u8)));
	// stvx v0,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,784
	ctx.r10.s64 = ctx.r1.s64 + 784;
	// vavgub v0,v11,v3
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)ctx.v3.u8)));
	// vavgub v11,v7,v31
	_mm_store_si128((__m128i*)ctx.v11.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v7.u8), _mm_load_si128((__m128i*)v31.u8)));
	// stvx v13,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,736
	ctx.r10.s64 = ctx.r1.s64 + 736;
	// vavgub v13,v10,v2
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)ctx.v2.u8)));
	// vavgub v10,v5,v30
	_mm_store_si128((__m128i*)ctx.v10.u8, _mm_avg_epu8(_mm_load_si128((__m128i*)ctx.v5.u8), _mm_load_si128((__m128i*)v30.u8)));
	// stvx v0,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,768
	ctx.r10.s64 = ctx.r1.s64 + 768;
	// stvx v13,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v13.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,800
	ctx.r10.s64 = ctx.r1.s64 + 800;
	// stvx v12,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v12.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,832
	ctx.r10.s64 = ctx.r1.s64 + 832;
	// stvx v11,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v11.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,816
	ctx.r10.s64 = ctx.r1.s64 + 816;
	// stvx v10,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v10.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r10,752(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 752);
	// lwz r9,756(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 756);
	// lwz r8,760(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 760);
	// lwz r7,764(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 764);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// add r10,r3,r11
	ctx.r10.u64 = ctx.r3.u64 + r11.u64;
	// stw r9,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r9.u32);
	// lwz r9,720(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 720);
	// lwz r6,724(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 724);
	// lwz r5,728(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 728);
	// stw r8,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r8.u32);
	// stw r7,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r7.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lwz r3,732(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 732);
	// lwz r30,784(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 784);
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// stw r6,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r6.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lwz r9,788(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 788);
	// lwz r8,792(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 792);
	// lwz r7,796(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 796);
	// lwz r6,736(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 736);
	// stw r5,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r5.u32);
	// stw r3,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r3.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lwz r5,740(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 740);
	// lwz r3,748(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 748);
	// lwz r29,772(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 772);
	// lwz r28,776(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 776);
	// stw r30,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r30.u32);
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lwz r9,744(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 744);
	// lwz r30,768(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 768);
	// lwz r27,780(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 780);
	// lwz r26,800(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 800);
	// stw r8,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r8.u32);
	// stw r7,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r7.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lwz r25,804(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 804);
	// lwz r24,808(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 808);
	// lwz r23,812(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 812);
	// lwz r22,832(r1)
	r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 832);
	// stw r6,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r6.u32);
	// stw r5,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r5.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lwz r21,836(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 836);
	// lwz r20,840(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 840);
	// lwz r19,844(r1)
	r19.u64 = PPC_LOAD_U32(ctx.r1.u32 + 844);
	// lwz r18,816(r1)
	r18.u64 = PPC_LOAD_U32(ctx.r1.u32 + 816);
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// stw r3,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r3.u32);
	// add r10,r4,r11
	ctx.r10.u64 = ctx.r4.u64 + r11.u64;
	// stw r30,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r30.u32);
	// stw r29,4(r4)
	PPC_STORE_U32(ctx.r4.u32 + 4, r29.u32);
	// lwz r17,820(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 820);
	// lwz r16,824(r1)
	r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 824);
	// stw r28,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r28.u32);
	// stw r27,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r27.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// lwz r15,828(r1)
	r15.u64 = PPC_LOAD_U32(ctx.r1.u32 + 828);
	// stw r26,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r26.u32);
	// stw r25,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r25.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// stw r24,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r24.u32);
	// stw r23,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r23.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// stw r22,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r22.u32);
	// stw r21,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r21.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// stw r20,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r20.u32);
	// stw r19,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r19.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stw r18,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r18.u32);
	// stw r17,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r17.u32);
	// stw r16,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r16.u32);
	// stw r15,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r15.u32);
	// b 0x82739730
	goto loc_82739730;
loc_82737F14:
	// lhz r11,0(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// li r15,0
	r15.s64 = 0;
	// stw r11,876(r1)
	PPC_STORE_U32(ctx.r1.u32 + 876, r11.u32);
	// rlwinm r11,r10,27,29,31
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x7;
	// stw r15,612(r1)
	PPC_STORE_U32(ctx.r1.u32 + 612, r15.u32);
	// stw r15,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, r15.u32);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// bne cr6,0x82737f5c
	if (!cr6.eq) goto loc_82737F5C;
	// lwz r11,1496(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1496);
	// lwz r14,1492(r31)
	r14.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// li r11,3
	r11.s64 = 3;
	// stw r11,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r11.u32);
	// lwz r11,1500(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// stw r11,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, r11.u32);
	// lwz r11,1504(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// b 0x82737f7c
	goto loc_82737F7C;
loc_82737F5C:
	// li r11,4
	r11.s64 = 4;
	// lwz r14,1500(r31)
	r14.u64 = PPC_LOAD_U32(r31.u32 + 1500);
	// stw r11,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r11.u32);
	// lwz r11,1504(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1504);
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// lwz r11,1492(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1492);
	// stw r11,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, r11.u32);
	// lwz r11,1496(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1496);
loc_82737F7C:
	// stw r11,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, r11.u32);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// lwz r10,116(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// rlwinm r11,r11,17,0,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 17) & 0xFFFE0000;
	// stw r14,624(r1)
	PPC_STORE_U32(ctx.r1.u32 + 624, r14.u32);
	// stw r15,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, r15.u32);
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// stw r15,492(r1)
	PPC_STORE_U32(ctx.r1.u32 + 492, r15.u32);
	// stw r15,628(r1)
	PPC_STORE_U32(ctx.r1.u32 + 628, r15.u32);
	// rlwinm r11,r11,6,0,25
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 6) & 0xFFFFFFC0;
	// stw r15,640(r1)
	PPC_STORE_U32(ctx.r1.u32 + 640, r15.u32);
	// stw r11,616(r1)
	PPC_STORE_U32(ctx.r1.u32 + 616, r11.u32);
	// addi r11,r31,392
	r11.s64 = r31.s64 + 392;
	// stw r11,452(r1)
	PPC_STORE_U32(ctx.r1.u32 + 452, r11.u32);
	// addi r11,r31,36
	r11.s64 = r31.s64 + 36;
	// stw r11,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, r11.u32);
loc_82737FBC:
	// lwz r11,172(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// addi r7,r31,50
	ctx.r7.s64 = r31.s64 + 50;
	// lwz r10,176(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// lhz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// lwz r11,2756(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2756);
	// lhz r27,0(r7)
	r27.u64 = PPC_LOAD_U16(ctx.r7.u32 + 0);
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// clrlwi r11,r10,31
	r11.u64 = ctx.r10.u32 & 0x1;
	// srawi r10,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 1;
	// add r23,r9,r8
	r23.u64 = ctx.r9.u64 + ctx.r8.u64;
	// lwz r9,120(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// lwz r8,0(r25)
	ctx.r8.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// srawi r21,r27,1
	xer.ca = (r27.s32 < 0) & ((r27.u32 & 0x1) != 0);
	r21.s64 = r27.s32 >> 1;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r19,r23,2,0,29
	r19.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 2) & 0xFFFFFFFC;
	// add r24,r10,r9
	r24.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lwz r10,116(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// stw r23,856(r1)
	PPC_STORE_U32(ctx.r1.u32 + 856, r23.u32);
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// lwzx r20,r19,r8
	r20.u64 = PPC_LOAD_U32(r19.u32 + ctx.r8.u32);
	// add r22,r11,r10
	r22.u64 = r11.u64 + ctx.r10.u64;
	// clrlwi r11,r24,31
	r11.u64 = r24.u32 & 0x1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// stw r20,860(r1)
	PPC_STORE_U32(ctx.r1.u32 + 860, r20.u32);
	// bne cr6,0x82738048
	if (!cr6.eq) goto loc_82738048;
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// beq cr6,0x82738040
	if (cr6.eq) goto loc_82738040;
	// srawi r10,r24,1
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x1) != 0);
	ctx.r10.s64 = r24.s32 >> 1;
	// lwz r11,1240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1240);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r10,r11
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82738048
	if (cr6.eq) goto loc_82738048;
loc_82738040:
	// li r29,1
	r29.s64 = 1;
	// b 0x8273804c
	goto loc_8273804C;
loc_82738048:
	// li r29,0
	r29.s64 = 0;
loc_8273804C:
	// addi r17,r31,1516
	r17.s64 = r31.s64 + 1516;
	// lis r10,1
	ctx.r10.s64 = 65536;
	// li r30,0
	r30.s64 = 0;
	// srawi r16,r20,16
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0xFFFF) != 0);
	r16.s64 = r20.s32 >> 16;
	// mr r26,r30
	r26.u64 = r30.u64;
	// lwz r11,0(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 0);
	// mr r25,r30
	r25.u64 = r30.u64;
	// rlwinm r11,r11,17,0,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 17) & 0xFFFE0000;
	// stw r30,368(r1)
	PPC_STORE_U32(ctx.r1.u32 + 368, r30.u32);
	// stw r16,868(r1)
	PPC_STORE_U32(ctx.r1.u32 + 868, r16.u32);
	// subf r11,r11,r10
	r11.s64 = ctx.r10.s64 - r11.s64;
	// stw r26,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r26.u32);
	// stw r25,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r25.u32);
	// stw r30,364(r1)
	PPC_STORE_U32(ctx.r1.u32 + 364, r30.u32);
	// stw r30,360(r1)
	PPC_STORE_U32(ctx.r1.u32 + 360, r30.u32);
	// stw r30,396(r1)
	PPC_STORE_U32(ctx.r1.u32 + 396, r30.u32);
	// stw r11,400(r1)
	PPC_STORE_U32(ctx.r1.u32 + 400, r11.u32);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// stw r30,392(r1)
	PPC_STORE_U32(ctx.r1.u32 + 392, r30.u32);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// bne cr6,0x827380b4
	if (!cr6.eq) goto loc_827380B4;
	// lis r10,-32145
	ctx.r10.s64 = -2106654720;
	// lis r11,-32145
	r11.s64 = -2106654720;
	// addi r10,r10,-22616
	ctx.r10.s64 = ctx.r10.s64 + -22616;
	// addi r11,r11,-22296
	r11.s64 = r11.s64 + -22296;
	// b 0x827380e4
	goto loc_827380E4;
loc_827380B4:
	// lwz r11,1520(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1520);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x827380d4
	if (!cr6.eq) goto loc_827380D4;
	// lis r10,-32145
	ctx.r10.s64 = -2106654720;
	// lis r11,-32145
	r11.s64 = -2106654720;
	// addi r10,r10,-23384
	ctx.r10.s64 = ctx.r10.s64 + -23384;
	// addi r11,r11,-22936
	r11.s64 = r11.s64 + -22936;
	// b 0x827380e4
	goto loc_827380E4;
loc_827380D4:
	// lis r10,-32145
	ctx.r10.s64 = -2106654720;
	// lis r11,-32145
	r11.s64 = -2106654720;
	// addi r10,r10,-23256
	ctx.r10.s64 = ctx.r10.s64 + -23256;
	// addi r11,r11,-23320
	r11.s64 = r11.s64 + -23320;
loc_827380E4:
	// lwz r18,124(r1)
	r18.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// stw r10,1620(r31)
	PPC_STORE_U32(r31.u32 + 1620, ctx.r10.u32);
	// stw r11,1624(r31)
	PPC_STORE_U32(r31.u32 + 1624, r11.u32);
	// beq cr6,0x82738170
	if (cr6.eq) goto loc_82738170;
	// addi r11,r23,-1
	r11.s64 = r23.s64 + -1;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r14,r11
	ctx.r10.u64 = PPC_LOAD_U16(r14.u32 + r11.u32);
	// lhzx r11,r18,r11
	r11.u64 = PPC_LOAD_U16(r18.u32 + r11.u32);
	// sth r10,142(r1)
	PPC_STORE_U16(ctx.r1.u32 + 142, ctx.r10.u16);
	// sth r11,140(r1)
	PPC_STORE_U16(ctx.r1.u32 + 140, r11.u16);
	// lwz r4,140(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// clrlwi r11,r4,16
	r11.u64 = ctx.r4.u32 & 0xFFFF;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x82738170
	if (cr6.eq) goto loc_82738170;
	// rlwinm r11,r4,0,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x10000;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82738150
	if (cr6.eq) goto loc_82738150;
	// lwz r11,1620(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1620);
	// stw r4,392(r1)
	PPC_STORE_U32(ctx.r1.u32 + 392, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// li r25,1
	r25.s64 = 1;
	// stw r3,360(r1)
	PPC_STORE_U32(ctx.r1.u32 + 360, ctx.r3.u32);
	// stw r25,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r25.u32);
	// b 0x8273816c
	goto loc_8273816C;
loc_82738150:
	// lwz r11,1624(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1624);
	// stw r4,360(r1)
	PPC_STORE_U32(ctx.r1.u32 + 360, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// li r26,1
	r26.s64 = 1;
	// stw r3,392(r1)
	PPC_STORE_U32(ctx.r1.u32 + 392, ctx.r3.u32);
	// stw r26,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r26.u32);
loc_8273816C:
	// li r30,1
	r30.s64 = 1;
loc_82738170:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// bne cr6,0x827382cc
	if (!cr6.eq) goto loc_827382CC;
	// subf r28,r27,r23
	r28.s64 = r23.s64 - r27.s64;
	// rlwinm r11,r28,1,0,30
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r14,r11
	ctx.r10.u64 = PPC_LOAD_U16(r14.u32 + r11.u32);
	// lhzx r11,r18,r11
	r11.u64 = PPC_LOAD_U16(r18.u32 + r11.u32);
	// sth r10,142(r1)
	PPC_STORE_U16(ctx.r1.u32 + 142, ctx.r10.u16);
	// sth r11,140(r1)
	PPC_STORE_U16(ctx.r1.u32 + 140, r11.u16);
	// lwz r4,140(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// clrlwi r11,r4,16
	r11.u64 = ctx.r4.u32 & 0xFFFF;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x82738200
	if (cr6.eq) goto loc_82738200;
	// rlwinm r11,r4,0,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x10000;
	// rlwinm r29,r30,2,0,29
	r29.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq cr6,0x827381d8
	if (cr6.eq) goto loc_827381D8;
	// addi r11,r1,392
	r11.s64 = ctx.r1.s64 + 392;
	// lwz r10,1620(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1620);
	// stwx r4,r29,r11
	PPC_STORE_U32(r29.u32 + r11.u32, ctx.r4.u32);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r25,r25,1
	r25.s64 = r25.s64 + 1;
	// addi r11,r1,360
	r11.s64 = ctx.r1.s64 + 360;
	// stw r25,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r25.u32);
	// b 0x827381f8
	goto loc_827381F8;
loc_827381D8:
	// addi r10,r1,360
	ctx.r10.s64 = ctx.r1.s64 + 360;
	// lwz r11,1624(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1624);
	// stwx r4,r29,r10
	PPC_STORE_U32(r29.u32 + ctx.r10.u32, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r26,r26,1
	r26.s64 = r26.s64 + 1;
	// addi r11,r1,392
	r11.s64 = ctx.r1.s64 + 392;
	// stw r26,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r26.u32);
loc_827381F8:
	// stwx r3,r29,r11
	PPC_STORE_U32(r29.u32 + r11.u32, ctx.r3.u32);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
loc_82738200:
	// cmpwi cr6,r21,1
	cr6.compare<int32_t>(r21.s32, 1, xer);
	// ble cr6,0x827382cc
	if (!cr6.gt) goto loc_827382CC;
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// beq cr6,0x82738248
	if (cr6.eq) goto loc_82738248;
	// xor r11,r24,r22
	r11.u64 = r24.u64 ^ r22.u64;
	// clrlwi r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82738230
	if (cr6.eq) goto loc_82738230;
	// addi r11,r27,-1
	r11.s64 = r27.s64 + -1;
	// cmpw cr6,r22,r11
	cr6.compare<int32_t>(r22.s32, r11.s32, xer);
	// li r11,0
	r11.s64 = 0;
	// blt cr6,0x82738234
	if (cr6.lt) goto loc_82738234;
loc_82738230:
	// li r11,1
	r11.s64 = 1;
loc_82738234:
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// subf r11,r11,r23
	r11.s64 = r23.s64 - r11.s64;
	// subf r11,r27,r11
	r11.s64 = r11.s64 - r27.s64;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// b 0x8273824c
	goto loc_8273824C;
loc_82738248:
	// addi r11,r28,1
	r11.s64 = r28.s64 + 1;
loc_8273824C:
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r14,r11
	ctx.r10.u64 = PPC_LOAD_U16(r14.u32 + r11.u32);
	// lhzx r11,r18,r11
	r11.u64 = PPC_LOAD_U16(r18.u32 + r11.u32);
	// sth r10,142(r1)
	PPC_STORE_U16(ctx.r1.u32 + 142, ctx.r10.u16);
	// sth r11,140(r1)
	PPC_STORE_U16(ctx.r1.u32 + 140, r11.u16);
	// lwz r4,140(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// clrlwi r11,r4,16
	r11.u64 = ctx.r4.u32 & 0xFFFF;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x827382cc
	if (cr6.eq) goto loc_827382CC;
	// rlwinm r11,r4,0,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x10000;
	// rlwinm r30,r30,2,0,29
	r30.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq cr6,0x827382a8
	if (cr6.eq) goto loc_827382A8;
	// addi r11,r1,392
	r11.s64 = ctx.r1.s64 + 392;
	// lwz r10,1620(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1620);
	// stwx r4,r30,r11
	PPC_STORE_U32(r30.u32 + r11.u32, ctx.r4.u32);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r25,r25,1
	r25.s64 = r25.s64 + 1;
	// addi r11,r1,360
	r11.s64 = ctx.r1.s64 + 360;
	// stw r25,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r25.u32);
	// b 0x827382c8
	goto loc_827382C8;
loc_827382A8:
	// addi r10,r1,360
	ctx.r10.s64 = ctx.r1.s64 + 360;
	// lwz r11,1624(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1624);
	// stwx r4,r30,r10
	PPC_STORE_U32(r30.u32 + ctx.r10.u32, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r26,r26,1
	r26.s64 = r26.s64 + 1;
	// addi r11,r1,392
	r11.s64 = ctx.r1.s64 + 392;
	// stw r26,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r26.u32);
loc_827382C8:
	// stwx r3,r30,r11
	PPC_STORE_U32(r30.u32 + r11.u32, ctx.r3.u32);
loc_827382CC:
	// add r11,r25,r26
	r11.u64 = r25.u64 + r26.u64;
	// li r18,0
	r18.s64 = 0;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// ble cr6,0x8273843c
	if (!cr6.gt) goto loc_8273843C;
	// lhz r11,366(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 366);
	// lhz r10,362(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 362);
	// lhz r3,370(r1)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r1.u32 + 370);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lhz r9,364(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 364);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// lhz r8,360(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 360);
	// extsh r3,r3
	ctx.r3.s64 = ctx.r3.s16;
	// lhz r30,368(r1)
	r30.u64 = PPC_LOAD_U16(ctx.r1.u32 + 368);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// lhz r7,398(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 398);
	// extsh r30,r30
	r30.s64 = r30.s16;
	// lhz r6,394(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 394);
	// subf r27,r10,r11
	r27.s64 = r11.s64 - ctx.r10.s64;
	// lhz r29,402(r1)
	r29.u64 = PPC_LOAD_U16(ctx.r1.u32 + 402);
	// subf r23,r3,r11
	r23.s64 = r11.s64 - ctx.r3.s64;
	// lhz r5,396(r1)
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r1.u32 + 396);
	// subf r22,r10,r3
	r22.s64 = ctx.r3.s64 - ctx.r10.s64;
	// lhz r4,392(r1)
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r1.u32 + 392);
	// subf r26,r8,r9
	r26.s64 = ctx.r9.s64 - ctx.r8.s64;
	// lhz r28,400(r1)
	r28.u64 = PPC_LOAD_U16(ctx.r1.u32 + 400);
	// subf r21,r30,r9
	r21.s64 = ctx.r9.s64 - r30.s64;
	// subf r20,r8,r30
	r20.s64 = r30.s64 - ctx.r8.s64;
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// extsh r29,r29
	r29.s64 = r29.s16;
	// xor r23,r23,r27
	r23.u64 = r23.u64 ^ r27.u64;
	// xor r22,r22,r27
	r22.u64 = r22.u64 ^ r27.u64;
	// xor r21,r21,r26
	r21.u64 = r21.u64 ^ r26.u64;
	// extsh r5,r5
	ctx.r5.s64 = ctx.r5.s16;
	// extsh r4,r4
	ctx.r4.s64 = ctx.r4.s16;
	// extsh r28,r28
	r28.s64 = r28.s16;
	// subf r25,r6,r7
	r25.s64 = ctx.r7.s64 - ctx.r6.s64;
	// xor r20,r20,r26
	r20.u64 = r20.u64 ^ r26.u64;
	// subf r17,r29,r7
	r17.s64 = ctx.r7.s64 - r29.s64;
	// subf r16,r6,r29
	r16.s64 = r29.s64 - ctx.r6.s64;
	// srawi r27,r23,31
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x7FFFFFFF) != 0);
	r27.s64 = r23.s32 >> 31;
	// srawi r26,r22,31
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x7FFFFFFF) != 0);
	r26.s64 = r22.s32 >> 31;
	// subf r24,r4,r5
	r24.s64 = ctx.r5.s64 - ctx.r4.s64;
	// srawi r23,r21,31
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x7FFFFFFF) != 0);
	r23.s64 = r21.s32 >> 31;
	// subf r15,r28,r5
	r15.s64 = ctx.r5.s64 - r28.s64;
	// xor r22,r17,r25
	r22.u64 = r17.u64 ^ r25.u64;
	// xor r21,r16,r25
	r21.u64 = r16.u64 ^ r25.u64;
	// subf r14,r4,r28
	r14.s64 = r28.s64 - ctx.r4.s64;
	// srawi r25,r20,31
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x7FFFFFFF) != 0);
	r25.s64 = r20.s32 >> 31;
	// xor r20,r15,r24
	r20.u64 = r15.u64 ^ r24.u64;
	// srawi r22,r22,31
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x7FFFFFFF) != 0);
	r22.s64 = r22.s32 >> 31;
	// xor r17,r14,r24
	r17.u64 = r14.u64 ^ r24.u64;
	// srawi r24,r21,31
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x7FFFFFFF) != 0);
	r24.s64 = r21.s32 >> 31;
	// srawi r21,r20,31
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x7FFFFFFF) != 0);
	r21.s64 = r20.s32 >> 31;
	// srawi r20,r17,31
	xer.ca = (r17.s32 < 0) & ((r17.u32 & 0x7FFFFFFF) != 0);
	r20.s64 = r17.s32 >> 31;
	// and r10,r26,r10
	ctx.r10.u64 = r26.u64 & ctx.r10.u64;
	// or r17,r27,r26
	r17.u64 = r27.u64 | r26.u64;
	// or r26,r23,r25
	r26.u64 = r23.u64 | r25.u64;
	// and r8,r25,r8
	ctx.r8.u64 = r25.u64 & ctx.r8.u64;
	// andc r30,r30,r26
	r30.u64 = r30.u64 & ~r26.u64;
	// or r25,r21,r20
	r25.u64 = r21.u64 | r20.u64;
	// or r26,r22,r24
	r26.u64 = r22.u64 | r24.u64;
	// andc r3,r3,r17
	ctx.r3.u64 = ctx.r3.u64 & ~r17.u64;
	// andc r28,r28,r25
	r28.u64 = r28.u64 & ~r25.u64;
	// lwz r25,96(r1)
	r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// andc r29,r29,r26
	r29.u64 = r29.u64 & ~r26.u64;
	// and r6,r24,r6
	ctx.r6.u64 = r24.u64 & ctx.r6.u64;
	// and r5,r21,r5
	ctx.r5.u64 = r21.u64 & ctx.r5.u64;
	// or r10,r3,r10
	ctx.r10.u64 = ctx.r3.u64 | ctx.r10.u64;
	// and r11,r27,r11
	r11.u64 = r27.u64 & r11.u64;
	// or r8,r30,r8
	ctx.r8.u64 = r30.u64 | ctx.r8.u64;
	// and r9,r23,r9
	ctx.r9.u64 = r23.u64 & ctx.r9.u64;
	// or r6,r29,r6
	ctx.r6.u64 = r29.u64 | ctx.r6.u64;
	// and r7,r22,r7
	ctx.r7.u64 = r22.u64 & ctx.r7.u64;
	// or r5,r28,r5
	ctx.r5.u64 = r28.u64 | ctx.r5.u64;
	// and r4,r20,r4
	ctx.r4.u64 = r20.u64 & ctx.r4.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// or r10,r8,r9
	ctx.r10.u64 = ctx.r8.u64 | ctx.r9.u64;
	// or r9,r6,r7
	ctx.r9.u64 = ctx.r6.u64 | ctx.r7.u64;
	// or r8,r5,r4
	ctx.r8.u64 = ctx.r5.u64 | ctx.r4.u64;
	// sth r11,490(r1)
	PPC_STORE_U16(ctx.r1.u32 + 490, r11.u16);
	// sth r10,488(r1)
	PPC_STORE_U16(ctx.r1.u32 + 488, ctx.r10.u16);
	// sth r9,478(r1)
	PPC_STORE_U16(ctx.r1.u32 + 478, ctx.r9.u16);
	// sth r8,476(r1)
	PPC_STORE_U16(ctx.r1.u32 + 476, ctx.r8.u16);
	// lwz r26,100(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r20,860(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 860);
	// lwz r16,868(r1)
	r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 868);
	// lwz r15,628(r1)
	r15.u64 = PPC_LOAD_U32(ctx.r1.u32 + 628);
	// lwz r23,856(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 856);
	// lwz r14,624(r1)
	r14.u64 = PPC_LOAD_U32(ctx.r1.u32 + 624);
	// b 0x82738468
	goto loc_82738468;
loc_8273843C:
	// bne cr6,0x82738450
	if (!cr6.eq) goto loc_82738450;
	// lwz r11,360(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 360);
	// stw r11,488(r1)
	PPC_STORE_U32(ctx.r1.u32 + 488, r11.u32);
	// lwz r11,392(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 392);
	// b 0x82738464
	goto loc_82738464;
loc_82738450:
	// lwz r11,0(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + 0);
	// lis r10,1
	ctx.r10.s64 = 65536;
	// stw r18,488(r1)
	PPC_STORE_U32(ctx.r1.u32 + 488, r18.u32);
	// rlwinm r11,r11,17,0,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 17) & 0xFFFE0000;
	// subf r11,r11,r10
	r11.s64 = ctx.r10.s64 - r11.s64;
loc_82738464:
	// stw r11,476(r1)
	PPC_STORE_U32(ctx.r1.u32 + 476, r11.u32);
loc_82738468:
	// lwz r11,1508(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1508);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82738480
	if (cr6.eq) goto loc_82738480;
	// cmpw cr6,r26,r25
	cr6.compare<int32_t>(r26.s32, r25.s32, xer);
	// ble cr6,0x8273848c
	if (!cr6.gt) goto loc_8273848C;
	// b 0x82738490
	goto loc_82738490;
loc_82738480:
	// lwz r11,1512(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1512);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82738490
	if (cr6.eq) goto loc_82738490;
loc_8273848C:
	// li r18,1
	r18.s64 = 1;
loc_82738490:
	// clrlwi r10,r16,31
	ctx.r10.u64 = r16.u32 & 0x1;
	// lwz r8,476(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 476);
	// xor r11,r18,r10
	r11.u64 = r18.u64 ^ ctx.r10.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x827384a8
	if (!cr6.eq) goto loc_827384A8;
	// lwz r8,488(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 488);
loc_827384A8:
	// rlwinm r9,r10,16,0,15
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 16) & 0xFFFF0000;
	// lhz r7,66(r31)
	ctx.r7.u64 = PPC_LOAD_U16(r31.u32 + 66);
	// lhz r11,62(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 62);
	// rlwinm r10,r23,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r23.u32 | (r23.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// extsh r6,r7
	ctx.r6.s64 = ctx.r7.s16;
	// mr r5,r11
	ctx.r5.u64 = r11.u64;
	// addi r25,r31,188
	r25.s64 = r31.s64 + 188;
	// stw r9,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r9.u32);
	// lhz r9,142(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 142);
	// extsh r8,r9
	ctx.r8.s64 = ctx.r9.s16;
	// lhz r9,140(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 140);
	// extsh r7,r9
	ctx.r7.s64 = ctx.r9.s16;
	// extsh r9,r11
	ctx.r9.s64 = r11.s16;
	// add r11,r9,r8
	r11.u64 = ctx.r9.u64 + ctx.r8.u64;
	// add r11,r11,r20
	r11.u64 = r11.u64 + r20.u64;
	// and r11,r11,r6
	r11.u64 = r11.u64 & ctx.r6.u64;
	// subf r11,r5,r11
	r11.s64 = r11.s64 - ctx.r5.s64;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// sthx r11,r10,r14
	PPC_STORE_U16(ctx.r10.u32 + r14.u32, r11.u16);
	// lwz r9,0(r25)
	ctx.r9.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// add r9,r19,r9
	ctx.r9.u64 = r19.u64 + ctx.r9.u64;
	// sth r11,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, r11.u16);
	// lhz r8,68(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 68);
	// lhz r11,64(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 64);
	// extsh r6,r8
	ctx.r6.s64 = ctx.r8.s16;
	// lwz r9,0(r25)
	ctx.r9.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// extsh r8,r11
	ctx.r8.s64 = r11.s16;
	// mr r5,r11
	ctx.r5.u64 = r11.u64;
	// add r11,r8,r7
	r11.u64 = ctx.r8.u64 + ctx.r7.u64;
	// lwz r8,124(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// add r9,r19,r9
	ctx.r9.u64 = r19.u64 + ctx.r9.u64;
	// add r11,r11,r16
	r11.u64 = r11.u64 + r16.u64;
	// and r11,r11,r6
	r11.u64 = r11.u64 & ctx.r6.u64;
	// subf r11,r5,r11
	r11.s64 = r11.s64 - ctx.r5.s64;
	// lhz r9,2(r9)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r9.u32 + 2);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// sthx r11,r10,r8
	PPC_STORE_U16(ctx.r10.u32 + ctx.r8.u32, r11.u16);
	// lwz r10,0(r25)
	ctx.r10.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// sthx r11,r19,r10
	PPC_STORE_U16(r19.u32 + ctx.r10.u32, r11.u16);
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + 0);
	// lhzx r11,r19,r11
	r11.u64 = PPC_LOAD_U16(r19.u32 + r11.u32);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// clrlwi r10,r11,31
	ctx.r10.u64 = r11.u32 & 0x1;
	// mr r8,r11
	ctx.r8.u64 = r11.u64;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x82738610
	if (cr6.eq) goto loc_82738610;
	// lwz r5,612(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 612);
	// addi r6,r1,672
	ctx.r6.s64 = ctx.r1.s64 + 672;
	// lwz r7,848(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 848);
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// lwz r10,440(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 440);
	// subf r8,r7,r8
	ctx.r8.s64 = ctx.r8.s64 - ctx.r7.s64;
	// addi r7,r1,688
	ctx.r7.s64 = ctx.r1.s64 + 688;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r10,r31,1516
	ctx.r10.s64 = r31.s64 + 1516;
	// stw r5,612(r1)
	PPC_STORE_U32(ctx.r1.u32 + 612, ctx.r5.u32);
	// mr r4,r8
	ctx.r4.u64 = ctx.r8.u64;
	// lwz r5,112(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// rlwinm r8,r8,0,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0xFFFFFFFC;
	// stwx r9,r15,r7
	PPC_STORE_U32(r15.u32 + ctx.r7.u32, ctx.r9.u32);
	// mr r7,r11
	ctx.r7.u64 = r11.u64;
	// cmpwi cr6,r5,4
	cr6.compare<int32_t>(ctx.r5.s32, 4, xer);
	// rlwinm r5,r11,0,0,29
	ctx.r5.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFC;
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// li r11,1
	r11.s64 = 1;
	// rlwimi r7,r11,3,31,28
	ctx.r7.u64 = (__builtin_rotateleft32(r11.u32, 3) & 0xFFFFFFFFFFFFFFF9) | (ctx.r7.u64 & 0x6);
	// rlwimi r4,r11,3,31,28
	ctx.r4.u64 = (__builtin_rotateleft32(r11.u32, 3) & 0xFFFFFFFFFFFFFFF9) | (ctx.r4.u64 & 0x6);
	// mr r3,r7
	ctx.r3.u64 = ctx.r7.u64;
	// rlwinm r7,r10,3,0,28
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// srawi r3,r3,1
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x1) != 0);
	ctx.r3.s64 = ctx.r3.s32 >> 1;
	// or r11,r3,r5
	r11.u64 = ctx.r3.u64 | ctx.r5.u64;
	// rlwinm r5,r10,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// srawi r10,r4,1
	xer.ca = (ctx.r4.s32 < 0) & ((ctx.r4.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r4.s32 >> 1;
	// or r8,r10,r8
	ctx.r8.u64 = ctx.r10.u64 | ctx.r8.u64;
	// add r10,r7,r11
	ctx.r10.u64 = ctx.r7.u64 + r11.u64;
	// addi r10,r10,-4
	ctx.r10.s64 = ctx.r10.s64 + -4;
	// srawi r10,r10,3
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 3;
	// rlwimi r11,r10,2,0,29
	r11.u64 = (__builtin_rotateleft32(ctx.r10.u32, 2) & 0xFFFFFFFC) | (r11.u64 & 0xFFFFFFFF00000003);
	// subf r11,r5,r11
	r11.s64 = r11.s64 - ctx.r5.s64;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// stwx r11,r15,r6
	PPC_STORE_U32(r15.u32 + ctx.r6.u32, r11.u32);
	// addi r15,r15,4
	r15.s64 = r15.s64 + 4;
	// stw r15,628(r1)
	PPC_STORE_U32(ctx.r1.u32 + 628, r15.u32);
	// bne cr6,0x82738608
	if (!cr6.eq) goto loc_82738608;
	// addi r29,r31,320
	r29.s64 = r31.s64 + 320;
	// b 0x82738668
	goto loc_82738668;
loc_82738608:
	// addi r29,r31,368
	r29.s64 = r31.s64 + 368;
	// b 0x82738668
	goto loc_82738668;
loc_82738610:
	// rlwinm r10,r11,0,0,28
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF8;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addi r8,r1,656
	ctx.r8.s64 = ctx.r1.s64 + 656;
	// clrlwi r11,r11,30
	r11.u64 = r11.u32 & 0x3;
	// addi r7,r1,704
	ctx.r7.s64 = ctx.r1.s64 + 704;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// lwz r10,180(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// addi r29,r31,296
	r29.s64 = r31.s64 + 296;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// srawi r6,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r6.s64 = r11.s32 >> 1;
	// rlwimi r6,r11,0,30,31
	ctx.r6.u64 = (__builtin_rotateleft32(r11.u32, 0) & 0x3) | (ctx.r6.u64 & 0xFFFFFFFFFFFFFFFC);
	// stw r10,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, ctx.r10.u32);
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmpwi cr6,r10,4
	cr6.compare<int32_t>(ctx.r10.s32, 4, xer);
	// lwz r10,640(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 640);
	// stwx r9,r10,r8
	PPC_STORE_U32(ctx.r10.u32 + ctx.r8.u32, ctx.r9.u32);
	// mr r8,r11
	ctx.r8.u64 = r11.u64;
	// addi r11,r10,4
	r11.s64 = ctx.r10.s64 + 4;
	// stwx r6,r10,r7
	PPC_STORE_U32(ctx.r10.u32 + ctx.r7.u32, ctx.r6.u32);
	// stw r11,640(r1)
	PPC_STORE_U32(ctx.r1.u32 + 640, r11.u32);
	// beq cr6,0x82738668
	if (cr6.eq) goto loc_82738668;
	// addi r29,r31,344
	r29.s64 = r31.s64 + 344;
loc_82738668:
	// lwz r11,1412(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1412);
	// rlwimi r9,r8,16,0,15
	ctx.r9.u64 = (__builtin_rotateleft32(ctx.r8.u32, 16) & 0xFFFF0000) | (ctx.r9.u64 & 0xFFFFFFFF0000FFFF);
	// lwz r10,616(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 616);
	// subf r8,r10,r11
	ctx.r8.s64 = r11.s64 - ctx.r10.s64;
	// mr r11,r9
	r11.u64 = ctx.r9.u64;
	// rlwinm r9,r11,1,15,15
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// subf r8,r11,r8
	ctx.r8.s64 = ctx.r8.s64 - r11.s64;
	// subf r10,r9,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r9.s64;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// addis r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 8388608;
	// addi r10,r10,56
	ctx.r10.s64 = ctx.r10.s64 + 56;
	// or r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 | ctx.r8.u64;
	// rlwinm r10,r10,0,0,16
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r10,r10,0,16,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x827387ac
	if (cr6.eq) goto loc_827387AC;
	// extsh r8,r11
	ctx.r8.s64 = r11.s16;
	// srawi r6,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	ctx.r6.s64 = r11.s32 >> 16;
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// addi r10,r31,1516
	ctx.r10.s64 = r31.s64 + 1516;
	// rlwinm r4,r11,4,0,27
	ctx.r4.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 4) & 0xFFFFFFF0;
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// li r30,0
	r30.s64 = 0;
	// rlwinm r3,r11,5,0,26
	ctx.r3.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 5) & 0xFFFFFFE0;
	// rlwinm r11,r6,0,29,29
	r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 0) & 0x4;
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x827386f8
	if (!cr6.eq) goto loc_827386F8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// addi r11,r31,52
	r11.s64 = r31.s64 + 52;
	// lhz r11,0(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rotlwi r11,r11,4
	r11.u64 = __builtin_rotateleft32(r11.u32, 4);
	// beq cr6,0x82738718
	if (cr6.eq) goto loc_82738718;
	// li r7,-35
	ctx.r7.s64 = -35;
	// addi r5,r11,3
	ctx.r5.s64 = r11.s64 + 3;
	// b 0x82738720
	goto loc_82738720;
loc_827386F8:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// addi r11,r31,52
	r11.s64 = r31.s64 + 52;
	// lhz r11,0(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// rotlwi r11,r11,4
	r11.u64 = __builtin_rotateleft32(r11.u32, 4);
	// beq cr6,0x82738718
	if (cr6.eq) goto loc_82738718;
	// li r7,-37
	ctx.r7.s64 = -37;
	// addi r5,r11,1
	ctx.r5.s64 = r11.s64 + 1;
	// b 0x82738720
	goto loc_82738720;
loc_82738718:
	// addi r5,r11,2
	ctx.r5.s64 = r11.s64 + 2;
	// li r7,-36
	ctx.r7.s64 = -36;
loc_82738720:
	// srawi r11,r8,2
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x3) != 0);
	r11.s64 = ctx.r8.s32 >> 2;
	// srawi r10,r6,2
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x3) != 0);
	ctx.r10.s64 = ctx.r6.s32 >> 2;
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// add r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 + ctx.r3.u64;
	// cmpwi cr6,r11,-17
	cr6.compare<int32_t>(r11.s32, -17, xer);
	// bge cr6,0x82738740
	if (!cr6.lt) goto loc_82738740;
	// li r11,-17
	r11.s64 = -17;
	// b 0x82738758
	goto loc_82738758;
loc_82738740:
	// addi r9,r31,50
	ctx.r9.s64 = r31.s64 + 50;
	// lhz r9,0(r9)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// rotlwi r9,r9,3
	ctx.r9.u64 = __builtin_rotateleft32(ctx.r9.u32, 3);
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// ble cr6,0x8273875c
	if (!cr6.gt) goto loc_8273875C;
	// mr r11,r9
	r11.u64 = ctx.r9.u64;
loc_82738758:
	// li r30,1
	r30.s64 = 1;
loc_8273875C:
	// cmpw cr6,r10,r7
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r7.s32, xer);
	// bge cr6,0x8273876c
	if (!cr6.lt) goto loc_8273876C;
	// mr r10,r7
	ctx.r10.u64 = ctx.r7.u64;
	// b 0x82738784
	goto loc_82738784;
loc_8273876C:
	// cmpw cr6,r10,r5
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r5.s32, xer);
	// ble cr6,0x8273877c
	if (!cr6.gt) goto loc_8273877C;
	// mr r10,r5
	ctx.r10.u64 = ctx.r5.u64;
	// b 0x82738784
	goto loc_82738784;
loc_8273877C:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// beq cr6,0x827387a4
	if (cr6.eq) goto loc_827387A4;
loc_82738784:
	// subf r11,r4,r11
	r11.s64 = r11.s64 - ctx.r4.s64;
	// subf r10,r3,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r3.s64;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r11,r10,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// clrlwi r8,r8,30
	ctx.r8.u64 = ctx.r8.u32 & 0x3;
	// clrlwi r10,r6,30
	ctx.r10.u64 = ctx.r6.u32 & 0x3;
	// add r8,r9,r8
	ctx.r8.u64 = ctx.r9.u64 + ctx.r8.u64;
	// add r6,r11,r10
	ctx.r6.u64 = r11.u64 + ctx.r10.u64;
loc_827387A4:
	// rlwimi r8,r6,16,0,15
	ctx.r8.u64 = (__builtin_rotateleft32(ctx.r6.u32, 16) & 0xFFFF0000) | (ctx.r8.u64 & 0xFFFFFFFF0000FFFF);
	// mr r11,r8
	r11.u64 = ctx.r8.u64;
loc_827387AC:
	// lwz r10,2756(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2756);
	// mr r9,r11
	ctx.r9.u64 = r11.u64;
	// lwz r23,452(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 452);
	// srawi r11,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	r11.s64 = r11.s32 >> 16;
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// lhz r30,90(r31)
	r30.u64 = PPC_LOAD_U16(r31.u32 + 90);
	// lwz r24,492(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 492);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// rlwinm r4,r30,31,1,31
	ctx.r4.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 31) & 0x7FFFFFFF;
	// li r5,128
	ctx.r5.s64 = 128;
	// lwz r8,0(r23)
	ctx.r8.u64 = PPC_LOAD_U32(r23.u32 + 0);
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// lwzx r6,r29,r24
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + r24.u32);
	// add r28,r10,r8
	r28.u64 = ctx.r10.u64 + ctx.r8.u64;
	// srawi r8,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	ctx.r8.s64 = r11.s32 >> 2;
	// srawi r7,r9,2
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3) != 0);
	ctx.r7.s64 = ctx.r9.s32 >> 2;
	// mullw r8,r4,r8
	ctx.r8.s64 = int64_t(ctx.r4.s32) * int64_t(ctx.r8.s32);
	// add r8,r8,r6
	ctx.r8.u64 = ctx.r8.u64 + ctx.r6.u64;
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// add r29,r8,r10
	r29.u64 = ctx.r8.u64 + ctx.r10.u64;
	// dcbt r5,r29
	// addi r10,r30,128
	ctx.r10.s64 = r30.s64 + 128;
	// dcbt r10,r29
	// addi r10,r30,64
	ctx.r10.s64 = r30.s64 + 64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r10,r29
	// rotlwi r10,r30,1
	ctx.r10.u64 = __builtin_rotateleft32(r30.u32, 1);
	// add r10,r30,r10
	ctx.r10.u64 = r30.u64 + ctx.r10.u64;
	// addi r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 128;
	// dcbt r10,r29
	// addi r10,r30,32
	ctx.r10.s64 = r30.s64 + 32;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r10,r29
	// rotlwi r10,r30,2
	ctx.r10.u64 = __builtin_rotateleft32(r30.u32, 2);
	// add r10,r30,r10
	ctx.r10.u64 = r30.u64 + ctx.r10.u64;
	// addi r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 128;
	// dcbt r10,r29
	// rotlwi r10,r30,1
	ctx.r10.u64 = __builtin_rotateleft32(r30.u32, 1);
	// add r10,r30,r10
	ctx.r10.u64 = r30.u64 + ctx.r10.u64;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 128;
	// dcbt r10,r29
	// rotlwi r10,r30,3
	ctx.r10.u64 = __builtin_rotateleft32(r30.u32, 3);
	// subf r10,r30,r10
	ctx.r10.s64 = ctx.r10.s64 - r30.s64;
	// addi r10,r10,128
	ctx.r10.s64 = ctx.r10.s64 + 128;
	// dcbt r10,r29
	// clrlwi r27,r9,30
	r27.u64 = ctx.r9.u32 & 0x3;
	// lbz r10,48(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 48);
	// clrlwi r26,r11,30
	r26.u64 = r11.u32 & 0x3;
	// rlwinm r11,r27,2,0,29
	r11.u64 = __builtin_rotateleft64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// cmplwi cr6,r10,1
	cr6.compare<uint32_t>(ctx.r10.u32, 1, xer);
	// li r7,0
	ctx.r7.s64 = 0;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// bne cr6,0x827388d4
	if (!cr6.eq) goto loc_827388D4;
	// addi r11,r11,166
	r11.s64 = r11.s64 + 166;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x827388e8
	if (cr6.eq) goto loc_827388E8;
	// li r9,0
	ctx.r9.s64 = 0;
	// lbz r8,35(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 35);
	// mr r7,r26
	ctx.r7.u64 = r26.u64;
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x8266cc68
	sub_8266CC68(ctx, base);
	// b 0x827388e8
	goto loc_827388E8;
loc_827388D4:
	// addi r11,r11,182
	r11.s64 = r11.s64 + 182;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_827388E8:
	// lwz r10,176(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// addi r11,r24,4
	r11.s64 = r24.s64 + 4;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r11,16
	cr6.compare<int32_t>(r11.s32, 16, xer);
	// stw r11,492(r1)
	PPC_STORE_U32(ctx.r1.u32 + 492, r11.u32);
	// stw r10,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, ctx.r10.u32);
	// lwz r10,172(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// addi r10,r10,2
	ctx.r10.s64 = ctx.r10.s64 + 2;
	// stw r10,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, ctx.r10.u32);
	// addi r10,r23,4
	ctx.r10.s64 = r23.s64 + 4;
	// stw r10,452(r1)
	PPC_STORE_U32(ctx.r1.u32 + 452, ctx.r10.u32);
	// blt cr6,0x82737fbc
	if (cr6.lt) goto loc_82737FBC;
	// addi r11,r31,50
	r11.s64 = r31.s64 + 50;
	// lwz r10,2756(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2756);
	// lhz r27,0(r11)
	r27.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// lwz r24,0(r10)
	r24.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// srawi r23,r27,1
	xer.ca = (r27.s32 < 0) & ((r27.u32 & 0x1) != 0);
	r23.s64 = r27.s32 >> 1;
	// lwz r10,116(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r25,r10,1,0,30
	r25.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// clrlwi r10,r11,31
	ctx.r10.u64 = r11.u32 & 0x1;
	// stw r24,616(r1)
	PPC_STORE_U32(ctx.r1.u32 + 616, r24.u32);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x82738978
	if (!cr6.eq) goto loc_82738978;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8273896c
	if (cr6.eq) goto loc_8273896C;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// lwz r10,1240(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1240);
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r10
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82738978
	if (cr6.eq) goto loc_82738978;
loc_8273896C:
	// li r29,1
	r29.s64 = 1;
	// li r16,0
	r16.s64 = 0;
	// b 0x82738980
	goto loc_82738980;
loc_82738978:
	// li r16,0
	r16.s64 = 0;
	// mr r29,r16
	r29.u64 = r16.u64;
loc_82738980:
	// addi r22,r31,1516
	r22.s64 = r31.s64 + 1516;
	// stw r16,432(r1)
	PPC_STORE_U32(ctx.r1.u32 + 432, r16.u32);
	// lis r17,1
	r17.s64 = 65536;
	// stw r16,428(r1)
	PPC_STORE_U32(ctx.r1.u32 + 428, r16.u32);
	// mr r26,r16
	r26.u64 = r16.u64;
	// stw r16,424(r1)
	PPC_STORE_U32(ctx.r1.u32 + 424, r16.u32);
	// mr r18,r16
	r18.u64 = r16.u64;
	// stw r16,220(r1)
	PPC_STORE_U32(ctx.r1.u32 + 220, r16.u32);
	// mr r30,r16
	r30.u64 = r16.u64;
	// stw r16,216(r1)
	PPC_STORE_U32(ctx.r1.u32 + 216, r16.u32);
	// lwz r11,0(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// rlwinm r11,r11,17,0,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 17) & 0xFFFE0000;
	// stw r26,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r26.u32);
	// subf r11,r11,r17
	r11.s64 = r17.s64 - r11.s64;
	// stw r11,224(r1)
	PPC_STORE_U32(ctx.r1.u32 + 224, r11.u32);
	// lwz r11,128(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// bne cr6,0x827389dc
	if (!cr6.eq) goto loc_827389DC;
	// lis r10,-32145
	ctx.r10.s64 = -2106654720;
	// lis r11,-32145
	r11.s64 = -2106654720;
	// addi r10,r10,-22616
	ctx.r10.s64 = ctx.r10.s64 + -22616;
	// addi r11,r11,-22296
	r11.s64 = r11.s64 + -22296;
	// b 0x82738a0c
	goto loc_82738A0C;
loc_827389DC:
	// lwz r11,1520(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1520);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x827389fc
	if (!cr6.eq) goto loc_827389FC;
	// lis r10,-32145
	ctx.r10.s64 = -2106654720;
	// lis r11,-32145
	r11.s64 = -2106654720;
	// addi r10,r10,-23384
	ctx.r10.s64 = ctx.r10.s64 + -23384;
	// addi r11,r11,-22936
	r11.s64 = r11.s64 + -22936;
	// b 0x82738a0c
	goto loc_82738A0C;
loc_827389FC:
	// lis r10,-32145
	ctx.r10.s64 = -2106654720;
	// lis r11,-32145
	r11.s64 = -2106654720;
	// addi r10,r10,-23256
	ctx.r10.s64 = ctx.r10.s64 + -23256;
	// addi r11,r11,-23320
	r11.s64 = r11.s64 + -23320;
loc_82738A0C:
	// lwz r21,168(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// lwz r20,164(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// stw r10,1620(r31)
	PPC_STORE_U32(r31.u32 + 1620, ctx.r10.u32);
	// stw r11,1624(r31)
	PPC_STORE_U32(r31.u32 + 1624, r11.u32);
	// beq cr6,0x82738a98
	if (cr6.eq) goto loc_82738A98;
	// addi r11,r24,-1
	r11.s64 = r24.s64 + -1;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r11,r21
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + r21.u32);
	// lhzx r11,r11,r20
	r11.u64 = PPC_LOAD_U16(r11.u32 + r20.u32);
	// sth r10,162(r1)
	PPC_STORE_U16(ctx.r1.u32 + 162, ctx.r10.u16);
	// sth r11,160(r1)
	PPC_STORE_U16(ctx.r1.u32 + 160, r11.u16);
	// lwz r4,160(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// clrlwi r11,r4,16
	r11.u64 = ctx.r4.u32 & 0xFFFF;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x82738a98
	if (cr6.eq) goto loc_82738A98;
	// rlwinm r11,r4,0,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x10000;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82738a7c
	if (cr6.eq) goto loc_82738A7C;
	// lwz r11,1620(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1620);
	// stw r4,216(r1)
	PPC_STORE_U32(ctx.r1.u32 + 216, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// li r26,1
	r26.s64 = 1;
	// stw r3,424(r1)
	PPC_STORE_U32(ctx.r1.u32 + 424, ctx.r3.u32);
	// stw r26,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r26.u32);
	// b 0x82738a94
	goto loc_82738A94;
loc_82738A7C:
	// lwz r11,1624(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1624);
	// stw r4,424(r1)
	PPC_STORE_U32(ctx.r1.u32 + 424, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// stw r3,216(r1)
	PPC_STORE_U32(ctx.r1.u32 + 216, ctx.r3.u32);
	// li r18,1
	r18.s64 = 1;
loc_82738A94:
	// li r30,1
	r30.s64 = 1;
loc_82738A98:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// bne cr6,0x82738bbc
	if (!cr6.eq) goto loc_82738BBC;
	// subf r28,r27,r24
	r28.s64 = r24.s64 - r27.s64;
	// rlwinm r11,r28,1,0,30
	r11.u64 = __builtin_rotateleft64(r28.u32 | (r28.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r11,r21
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + r21.u32);
	// lhzx r11,r11,r20
	r11.u64 = PPC_LOAD_U16(r11.u32 + r20.u32);
	// sth r10,162(r1)
	PPC_STORE_U16(ctx.r1.u32 + 162, ctx.r10.u16);
	// sth r11,160(r1)
	PPC_STORE_U16(ctx.r1.u32 + 160, r11.u16);
	// lwz r4,160(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// clrlwi r11,r4,16
	r11.u64 = ctx.r4.u32 & 0xFFFF;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x82738b24
	if (cr6.eq) goto loc_82738B24;
	// rlwinm r11,r4,0,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x10000;
	// rlwinm r29,r30,2,0,29
	r29.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq cr6,0x82738b00
	if (cr6.eq) goto loc_82738B00;
	// addi r11,r1,216
	r11.s64 = ctx.r1.s64 + 216;
	// lwz r10,1620(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1620);
	// stwx r4,r29,r11
	PPC_STORE_U32(r29.u32 + r11.u32, ctx.r4.u32);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r26,r26,1
	r26.s64 = r26.s64 + 1;
	// addi r11,r1,424
	r11.s64 = ctx.r1.s64 + 424;
	// stw r26,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r26.u32);
	// b 0x82738b1c
	goto loc_82738B1C;
loc_82738B00:
	// addi r10,r1,424
	ctx.r10.s64 = ctx.r1.s64 + 424;
	// lwz r11,1624(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1624);
	// stwx r4,r29,r10
	PPC_STORE_U32(r29.u32 + ctx.r10.u32, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r11,r1,216
	r11.s64 = ctx.r1.s64 + 216;
	// addi r18,r18,1
	r18.s64 = r18.s64 + 1;
loc_82738B1C:
	// stwx r3,r29,r11
	PPC_STORE_U32(r29.u32 + r11.u32, ctx.r3.u32);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
loc_82738B24:
	// cmpwi cr6,r23,1
	cr6.compare<int32_t>(r23.s32, 1, xer);
	// ble cr6,0x82738bbc
	if (!cr6.gt) goto loc_82738BBC;
	// addi r11,r27,-2
	r11.s64 = r27.s64 + -2;
	// cmpw cr6,r25,r11
	cr6.compare<int32_t>(r25.s32, r11.s32, xer);
	// addi r11,r28,2
	r11.s64 = r28.s64 + 2;
	// bne cr6,0x82738b40
	if (!cr6.eq) goto loc_82738B40;
	// addi r11,r28,-2
	r11.s64 = r28.s64 + -2;
loc_82738B40:
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r11,r21
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + r21.u32);
	// lhzx r11,r11,r20
	r11.u64 = PPC_LOAD_U16(r11.u32 + r20.u32);
	// sth r10,162(r1)
	PPC_STORE_U16(ctx.r1.u32 + 162, ctx.r10.u16);
	// sth r11,160(r1)
	PPC_STORE_U16(ctx.r1.u32 + 160, r11.u16);
	// lwz r4,160(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// clrlwi r11,r4,16
	r11.u64 = ctx.r4.u32 & 0xFFFF;
	// cmpwi cr6,r11,16384
	cr6.compare<int32_t>(r11.s32, 16384, xer);
	// beq cr6,0x82738bbc
	if (cr6.eq) goto loc_82738BBC;
	// rlwinm r11,r4,0,15,15
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x10000;
	// rlwinm r30,r30,2,0,29
	r30.u64 = __builtin_rotateleft64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq cr6,0x82738b9c
	if (cr6.eq) goto loc_82738B9C;
	// addi r11,r1,216
	r11.s64 = ctx.r1.s64 + 216;
	// lwz r10,1620(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 1620);
	// stwx r4,r30,r11
	PPC_STORE_U32(r30.u32 + r11.u32, ctx.r4.u32);
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r26,r26,1
	r26.s64 = r26.s64 + 1;
	// addi r11,r1,424
	r11.s64 = ctx.r1.s64 + 424;
	// stw r26,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r26.u32);
	// b 0x82738bb8
	goto loc_82738BB8;
loc_82738B9C:
	// addi r10,r1,424
	ctx.r10.s64 = ctx.r1.s64 + 424;
	// lwz r11,1624(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1624);
	// stwx r4,r30,r10
	PPC_STORE_U32(r30.u32 + ctx.r10.u32, ctx.r4.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r11,r1,216
	r11.s64 = ctx.r1.s64 + 216;
	// addi r18,r18,1
	r18.s64 = r18.s64 + 1;
loc_82738BB8:
	// stwx r3,r30,r11
	PPC_STORE_U32(r30.u32 + r11.u32, ctx.r3.u32);
loc_82738BBC:
	// add r11,r26,r18
	r11.u64 = r26.u64 + r18.u64;
	// mr r19,r16
	r19.u64 = r16.u64;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// ble cr6,0x82738d24
	if (!cr6.gt) goto loc_82738D24;
	// lhz r11,430(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 430);
	// lhz r10,426(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 426);
	// lhz r3,434(r1)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r1.u32 + 434);
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lhz r9,428(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 428);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// lhz r8,424(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 424);
	// extsh r3,r3
	ctx.r3.s64 = ctx.r3.s16;
	// lhz r30,432(r1)
	r30.u64 = PPC_LOAD_U16(ctx.r1.u32 + 432);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// lhz r7,222(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 222);
	// extsh r30,r30
	r30.s64 = r30.s16;
	// lhz r6,218(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 218);
	// subf r27,r10,r11
	r27.s64 = r11.s64 - ctx.r10.s64;
	// lhz r29,226(r1)
	r29.u64 = PPC_LOAD_U16(ctx.r1.u32 + 226);
	// subf r23,r3,r11
	r23.s64 = r11.s64 - ctx.r3.s64;
	// lhz r5,220(r1)
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r1.u32 + 220);
	// subf r22,r10,r3
	r22.s64 = ctx.r3.s64 - ctx.r10.s64;
	// lhz r4,216(r1)
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r1.u32 + 216);
	// subf r26,r8,r9
	r26.s64 = ctx.r9.s64 - ctx.r8.s64;
	// lhz r28,224(r1)
	r28.u64 = PPC_LOAD_U16(ctx.r1.u32 + 224);
	// subf r21,r30,r9
	r21.s64 = ctx.r9.s64 - r30.s64;
	// subf r20,r8,r30
	r20.s64 = r30.s64 - ctx.r8.s64;
	// extsh r6,r6
	ctx.r6.s64 = ctx.r6.s16;
	// extsh r7,r7
	ctx.r7.s64 = ctx.r7.s16;
	// extsh r29,r29
	r29.s64 = r29.s16;
	// xor r23,r23,r27
	r23.u64 = r23.u64 ^ r27.u64;
	// xor r22,r22,r27
	r22.u64 = r22.u64 ^ r27.u64;
	// xor r21,r21,r26
	r21.u64 = r21.u64 ^ r26.u64;
	// extsh r4,r4
	ctx.r4.s64 = ctx.r4.s16;
	// extsh r5,r5
	ctx.r5.s64 = ctx.r5.s16;
	// extsh r28,r28
	r28.s64 = r28.s16;
	// xor r20,r20,r26
	r20.u64 = r20.u64 ^ r26.u64;
	// subf r25,r6,r7
	r25.s64 = ctx.r7.s64 - ctx.r6.s64;
	// subf r17,r29,r7
	r17.s64 = ctx.r7.s64 - r29.s64;
	// subf r16,r6,r29
	r16.s64 = r29.s64 - ctx.r6.s64;
	// srawi r27,r23,31
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x7FFFFFFF) != 0);
	r27.s64 = r23.s32 >> 31;
	// srawi r26,r22,31
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x7FFFFFFF) != 0);
	r26.s64 = r22.s32 >> 31;
	// subf r24,r4,r5
	r24.s64 = ctx.r5.s64 - ctx.r4.s64;
	// srawi r23,r21,31
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x7FFFFFFF) != 0);
	r23.s64 = r21.s32 >> 31;
	// subf r15,r28,r5
	r15.s64 = ctx.r5.s64 - r28.s64;
	// xor r22,r17,r25
	r22.u64 = r17.u64 ^ r25.u64;
	// subf r14,r4,r28
	r14.s64 = r28.s64 - ctx.r4.s64;
	// xor r21,r16,r25
	r21.u64 = r16.u64 ^ r25.u64;
	// srawi r25,r20,31
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x7FFFFFFF) != 0);
	r25.s64 = r20.s32 >> 31;
	// xor r20,r15,r24
	r20.u64 = r15.u64 ^ r24.u64;
	// srawi r22,r22,31
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x7FFFFFFF) != 0);
	r22.s64 = r22.s32 >> 31;
	// xor r17,r14,r24
	r17.u64 = r14.u64 ^ r24.u64;
	// srawi r24,r21,31
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x7FFFFFFF) != 0);
	r24.s64 = r21.s32 >> 31;
	// srawi r21,r20,31
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x7FFFFFFF) != 0);
	r21.s64 = r20.s32 >> 31;
	// srawi r20,r17,31
	xer.ca = (r17.s32 < 0) & ((r17.u32 & 0x7FFFFFFF) != 0);
	r20.s64 = r17.s32 >> 31;
	// and r10,r26,r10
	ctx.r10.u64 = r26.u64 & ctx.r10.u64;
	// or r17,r27,r26
	r17.u64 = r27.u64 | r26.u64;
	// or r26,r23,r25
	r26.u64 = r23.u64 | r25.u64;
	// and r8,r25,r8
	ctx.r8.u64 = r25.u64 & ctx.r8.u64;
	// andc r30,r30,r26
	r30.u64 = r30.u64 & ~r26.u64;
	// or r26,r22,r24
	r26.u64 = r22.u64 | r24.u64;
	// or r25,r21,r20
	r25.u64 = r21.u64 | r20.u64;
	// andc r3,r3,r17
	ctx.r3.u64 = ctx.r3.u64 & ~r17.u64;
	// andc r29,r29,r26
	r29.u64 = r29.u64 & ~r26.u64;
	// lwz r26,124(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// and r6,r24,r6
	ctx.r6.u64 = r24.u64 & ctx.r6.u64;
	// andc r28,r28,r25
	r28.u64 = r28.u64 & ~r25.u64;
	// and r4,r20,r4
	ctx.r4.u64 = r20.u64 & ctx.r4.u64;
	// or r10,r3,r10
	ctx.r10.u64 = ctx.r3.u64 | ctx.r10.u64;
	// and r11,r27,r11
	r11.u64 = r27.u64 & r11.u64;
	// or r8,r30,r8
	ctx.r8.u64 = r30.u64 | ctx.r8.u64;
	// and r9,r23,r9
	ctx.r9.u64 = r23.u64 & ctx.r9.u64;
	// or r6,r29,r6
	ctx.r6.u64 = r29.u64 | ctx.r6.u64;
	// and r7,r22,r7
	ctx.r7.u64 = r22.u64 & ctx.r7.u64;
	// or r4,r28,r4
	ctx.r4.u64 = r28.u64 | ctx.r4.u64;
	// and r5,r21,r5
	ctx.r5.u64 = r21.u64 & ctx.r5.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// or r10,r8,r9
	ctx.r10.u64 = ctx.r8.u64 | ctx.r9.u64;
	// or r9,r6,r7
	ctx.r9.u64 = ctx.r6.u64 | ctx.r7.u64;
	// or r8,r4,r5
	ctx.r8.u64 = ctx.r4.u64 | ctx.r5.u64;
	// sth r11,474(r1)
	PPC_STORE_U16(ctx.r1.u32 + 474, r11.u16);
	// sth r10,472(r1)
	PPC_STORE_U16(ctx.r1.u32 + 472, ctx.r10.u16);
	// sth r9,466(r1)
	PPC_STORE_U16(ctx.r1.u32 + 466, ctx.r9.u16);
	// sth r8,464(r1)
	PPC_STORE_U16(ctx.r1.u32 + 464, ctx.r8.u16);
	// lwz r24,616(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 616);
	// li r16,0
	r16.s64 = 0;
	// lwz r20,164(r1)
	r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// lwz r21,168(r1)
	r21.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// b 0x82738d4c
	goto loc_82738D4C;
loc_82738D24:
	// bne cr6,0x82738d38
	if (!cr6.eq) goto loc_82738D38;
	// lwz r11,424(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 424);
	// stw r11,472(r1)
	PPC_STORE_U32(ctx.r1.u32 + 472, r11.u32);
	// lwz r11,216(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 216);
	// b 0x82738d48
	goto loc_82738D48;
loc_82738D38:
	// lwz r11,0(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + 0);
	// stw r16,472(r1)
	PPC_STORE_U32(ctx.r1.u32 + 472, r16.u32);
	// rlwinm r11,r11,17,0,14
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 17) & 0xFFFE0000;
	// subf r11,r11,r17
	r11.s64 = r17.s64 - r11.s64;
loc_82738D48:
	// stw r11,464(r1)
	PPC_STORE_U32(ctx.r1.u32 + 464, r11.u32);
loc_82738D4C:
	// lwz r11,1508(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1508);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82738d68
	if (cr6.eq) goto loc_82738D68;
	// cmpw cr6,r18,r26
	cr6.compare<int32_t>(r18.s32, r26.s32, xer);
	// ble cr6,0x82738d74
	if (!cr6.gt) goto loc_82738D74;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82738d78
	if (!cr6.eq) goto loc_82738D78;
loc_82738D68:
	// lwz r11,1512(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 1512);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82738d78
	if (cr6.eq) goto loc_82738D78;
loc_82738D74:
	// li r19,1
	r19.s64 = 1;
loc_82738D78:
	// lwz r7,464(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 464);
	// cmpwi cr6,r19,0
	cr6.compare<int32_t>(r19.s32, 0, xer);
	// bne cr6,0x82738d88
	if (!cr6.eq) goto loc_82738D88;
	// lwz r7,472(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 472);
loc_82738D88:
	// lwz r11,876(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 876);
	// rlwinm r9,r24,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(r24.u32 | (r24.u64 << 32), 1) & 0xFFFFFFFE;
	// stw r7,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, ctx.r7.u32);
	// add r11,r24,r11
	r11.u64 = r24.u64 + r11.u64;
	// stw r7,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r7.u32);
	// add r7,r21,r9
	ctx.r7.u64 = r21.u64 + ctx.r9.u64;
	// lhz r10,172(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 172);
	// rlwinm r8,r11,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lhz r11,174(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 174);
	// add r9,r20,r9
	ctx.r9.u64 = r20.u64 + ctx.r9.u64;
	// lwz r4,612(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 612);
	// add r6,r21,r8
	ctx.r6.u64 = r21.u64 + ctx.r8.u64;
	// lwz r5,180(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// add r8,r20,r8
	ctx.r8.u64 = r20.u64 + ctx.r8.u64;
	// cmpw cr6,r4,r5
	cr6.compare<int32_t>(ctx.r4.s32, ctx.r5.s32, xer);
	// sth r11,2(r6)
	PPC_STORE_U16(ctx.r6.u32 + 2, r11.u16);
	// sth r11,0(r6)
	PPC_STORE_U16(ctx.r6.u32 + 0, r11.u16);
	// sth r11,2(r7)
	PPC_STORE_U16(ctx.r7.u32 + 2, r11.u16);
	// sth r11,0(r7)
	PPC_STORE_U16(ctx.r7.u32 + 0, r11.u16);
	// sth r10,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, ctx.r10.u16);
	// sth r10,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r10.u16);
	// sth r10,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, ctx.r10.u16);
	// sth r10,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r10.u16);
	// ble cr6,0x827390d8
	if (!cr6.gt) goto loc_827390D8;
	// addi r11,r4,-1
	r11.s64 = ctx.r4.s64 + -1;
	// li r24,1
	r24.s64 = 1;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bgt cr6,0x827393c8
	if (cr6.gt) goto loc_827393C8;
	// lis r12,-32140
	r12.s64 = -2106327040;
	// addi r12,r12,-29168
	r12.s64 = r12.s64 + -29168;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_82738E20;
	case 1:
		goto loc_82738E2C;
	case 2:
		goto loc_82738E58;
	case 3:
		goto loc_82738EDC;
	default:
		__builtin_unreachable();
	}
	// lwz r19,-29152(r19)
	r19.u64 = PPC_LOAD_U32(r19.u32 + -29152);
	// lwz r19,-29140(r19)
	r19.u64 = PPC_LOAD_U32(r19.u32 + -29140);
	// lwz r19,-29096(r19)
	r19.u64 = PPC_LOAD_U32(r19.u32 + -29096);
	// lwz r19,-28964(r19)
	r19.u64 = PPC_LOAD_U32(r19.u32 + -28964);
loc_82738E20:
	// lwz r27,688(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 688);
	// lwz r8,672(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 672);
	// b 0x827393d0
	goto loc_827393D0;
loc_82738E2C:
	// lwz r11,692(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 692);
	// lwz r10,688(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 688);
	// add r9,r11,r10
	ctx.r9.u64 = r11.u64 + ctx.r10.u64;
	// lwz r10,672(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 672);
	// lwz r11,676(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 676);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// srawi r10,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r9.s32 >> 1;
	// addze r27,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	r27.s64 = temp.s64;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addze r8,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	ctx.r8.s64 = temp.s64;
	// b 0x827393d0
	goto loc_827393D0;
loc_82738E58:
	// lwz r5,696(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 696);
	// lwz r11,688(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 688);
	// lwz r10,692(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 692);
	// lwz r8,672(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 672);
	// subf r30,r11,r5
	r30.s64 = ctx.r5.s64 - r11.s64;
	// lwz r7,676(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 676);
	// subf r9,r11,r10
	ctx.r9.s64 = ctx.r10.s64 - r11.s64;
	// lwz r4,680(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 680);
	// subf r3,r5,r10
	ctx.r3.s64 = ctx.r10.s64 - ctx.r5.s64;
	// subf r6,r8,r7
	ctx.r6.s64 = ctx.r7.s64 - ctx.r8.s64;
	// subf r29,r4,r7
	r29.s64 = ctx.r7.s64 - ctx.r4.s64;
	// xor r3,r3,r9
	ctx.r3.u64 = ctx.r3.u64 ^ ctx.r9.u64;
	// subf r28,r8,r4
	r28.s64 = ctx.r4.s64 - ctx.r8.s64;
	// xor r30,r30,r9
	r30.u64 = r30.u64 ^ ctx.r9.u64;
	// xor r29,r29,r6
	r29.u64 = r29.u64 ^ ctx.r6.u64;
	// srawi r9,r3,31
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x7FFFFFFF) != 0);
	ctx.r9.s64 = ctx.r3.s32 >> 31;
	// xor r28,r28,r6
	r28.u64 = r28.u64 ^ ctx.r6.u64;
	// srawi r6,r30,31
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x7FFFFFFF) != 0);
	ctx.r6.s64 = r30.s32 >> 31;
	// srawi r3,r29,31
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r29.s32 >> 31;
	// srawi r30,r28,31
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x7FFFFFFF) != 0);
	r30.s64 = r28.s32 >> 31;
	// and r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 & ctx.r9.u64;
	// or r9,r9,r6
	ctx.r9.u64 = ctx.r9.u64 | ctx.r6.u64;
	// and r7,r7,r3
	ctx.r7.u64 = ctx.r7.u64 & ctx.r3.u64;
	// or r3,r3,r30
	ctx.r3.u64 = ctx.r3.u64 | r30.u64;
	// andc r9,r5,r9
	ctx.r9.u64 = ctx.r5.u64 & ~ctx.r9.u64;
	// andc r5,r4,r3
	ctx.r5.u64 = ctx.r4.u64 & ~ctx.r3.u64;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// and r11,r11,r6
	r11.u64 = r11.u64 & ctx.r6.u64;
	// or r9,r5,r7
	ctx.r9.u64 = ctx.r5.u64 | ctx.r7.u64;
	// and r8,r8,r30
	ctx.r8.u64 = ctx.r8.u64 & r30.u64;
	// or r27,r10,r11
	r27.u64 = ctx.r10.u64 | r11.u64;
	// or r8,r9,r8
	ctx.r8.u64 = ctx.r9.u64 | ctx.r8.u64;
	// b 0x827393d0
	goto loc_827393D0;
loc_82738EDC:
	// lwz r11,688(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 688);
	// lwz r10,692(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 692);
	// lwz r9,696(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 696);
	// subf r8,r11,r10
	ctx.r8.s64 = ctx.r10.s64 - r11.s64;
	// lwz r29,700(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 700);
	// subf r7,r10,r9
	ctx.r7.s64 = ctx.r9.s64 - ctx.r10.s64;
	// subf r6,r9,r11
	ctx.r6.s64 = r11.s64 - ctx.r9.s64;
	// srawi r4,r8,31
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7FFFFFFF) != 0);
	ctx.r4.s64 = ctx.r8.s32 >> 31;
	// subf r8,r10,r11
	ctx.r8.s64 = r11.s64 - ctx.r10.s64;
	// srawi r30,r7,31
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x7FFFFFFF) != 0);
	r30.s64 = ctx.r7.s32 >> 31;
	// srawi r5,r6,31
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = ctx.r6.s32 >> 31;
	// lwz r6,680(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 680);
	// subf r7,r9,r10
	ctx.r7.s64 = ctx.r10.s64 - ctx.r9.s64;
	// srawi r27,r8,31
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7FFFFFFF) != 0);
	r27.s64 = ctx.r8.s32 >> 31;
	// subf r8,r11,r9
	ctx.r8.s64 = ctx.r9.s64 - r11.s64;
	// srawi r26,r7,31
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x7FFFFFFF) != 0);
	r26.s64 = ctx.r7.s32 >> 31;
	// lwz r7,676(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 676);
	// not r28,r4
	r28.u64 = ~ctx.r4.u64;
	// srawi r25,r8,31
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7FFFFFFF) != 0);
	r25.s64 = ctx.r8.s32 >> 31;
	// lwz r8,672(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 672);
	// not r3,r30
	ctx.r3.u64 = ~r30.u64;
	// not r5,r5
	ctx.r5.u64 = ~ctx.r5.u64;
	// not r27,r27
	r27.u64 = ~r27.u64;
	// and r17,r11,r28
	r17.u64 = r11.u64 & r28.u64;
	// not r25,r25
	r25.u64 = ~r25.u64;
	// xor r16,r4,r3
	r16.u64 = ctx.r4.u64 ^ ctx.r3.u64;
	// xor r15,r4,r5
	r15.u64 = ctx.r4.u64 ^ ctx.r5.u64;
	// and r4,r10,r27
	ctx.r4.u64 = ctx.r10.u64 & r27.u64;
	// and r17,r17,r25
	r17.u64 = r17.u64 & r25.u64;
	// not r26,r26
	r26.u64 = ~r26.u64;
	// and r28,r10,r28
	r28.u64 = ctx.r10.u64 & r28.u64;
	// and r25,r9,r25
	r25.u64 = ctx.r9.u64 & r25.u64;
	// and r4,r4,r3
	ctx.r4.u64 = ctx.r4.u64 & ctx.r3.u64;
	// xor r30,r30,r5
	r30.u64 = r30.u64 ^ ctx.r5.u64;
	// and r14,r9,r26
	r14.u64 = ctx.r9.u64 & r26.u64;
	// and r27,r11,r27
	r27.u64 = r11.u64 & r27.u64;
	// and r3,r25,r3
	ctx.r3.u64 = r25.u64 & ctx.r3.u64;
	// and r28,r28,r26
	r28.u64 = r28.u64 & r26.u64;
	// and r10,r16,r10
	ctx.r10.u64 = r16.u64 & ctx.r10.u64;
	// and r30,r30,r9
	r30.u64 = r30.u64 & ctx.r9.u64;
	// or r4,r17,r4
	ctx.r4.u64 = r17.u64 | ctx.r4.u64;
	// and r17,r14,r5
	r17.u64 = r14.u64 & ctx.r5.u64;
	// or r3,r28,r3
	ctx.r3.u64 = r28.u64 | ctx.r3.u64;
	// and r5,r27,r5
	ctx.r5.u64 = r27.u64 & ctx.r5.u64;
	// and r11,r15,r11
	r11.u64 = r15.u64 & r11.u64;
	// or r10,r30,r10
	ctx.r10.u64 = r30.u64 | ctx.r10.u64;
	// or r4,r4,r17
	ctx.r4.u64 = ctx.r4.u64 | r17.u64;
	// or r9,r3,r5
	ctx.r9.u64 = ctx.r3.u64 | ctx.r5.u64;
	// or r5,r10,r11
	ctx.r5.u64 = ctx.r10.u64 | r11.u64;
	// subf r11,r4,r29
	r11.s64 = r29.s64 - ctx.r4.s64;
	// subf r10,r29,r9
	ctx.r10.s64 = ctx.r9.s64 - r29.s64;
	// subf r3,r9,r4
	ctx.r3.s64 = ctx.r4.s64 - ctx.r9.s64;
	// srawi r11,r11,31
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7FFFFFFF) != 0);
	r11.s64 = r11.s32 >> 31;
	// srawi r10,r10,31
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x7FFFFFFF) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 31;
	// srawi r3,r3,31
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = ctx.r3.s32 >> 31;
	// eqv r10,r10,r11
	// eqv r11,r3,r11
	// and r3,r29,r10
	ctx.r3.u64 = r29.u64 & ctx.r10.u64;
	// or r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 | r11.u64;
	// and r11,r4,r11
	r11.u64 = ctx.r4.u64 & r11.u64;
	// andc r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 & ~ctx.r10.u64;
	// subf r23,r8,r7
	r23.s64 = ctx.r7.s64 - ctx.r8.s64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// subf r22,r7,r6
	r22.s64 = ctx.r6.s64 - ctx.r7.s64;
	// or r11,r11,r3
	r11.u64 = r11.u64 | ctx.r3.u64;
	// subf r21,r6,r8
	r21.s64 = ctx.r8.s64 - ctx.r6.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// subf r20,r7,r8
	r20.s64 = ctx.r8.s64 - ctx.r7.s64;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// subf r19,r6,r7
	r19.s64 = ctx.r7.s64 - ctx.r6.s64;
	// addze r27,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r27.s64 = temp.s64;
	// srawi r10,r23,31
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x7FFFFFFF) != 0);
	ctx.r10.s64 = r23.s32 >> 31;
	// srawi r5,r22,31
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = r22.s32 >> 31;
	// srawi r11,r21,31
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x7FFFFFFF) != 0);
	r11.s64 = r21.s32 >> 31;
	// subf r18,r8,r6
	r18.s64 = ctx.r6.s64 - ctx.r8.s64;
	// srawi r3,r20,31
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r20.s32 >> 31;
	// srawi r29,r19,31
	xer.ca = (r19.s32 < 0) & ((r19.u32 & 0x7FFFFFFF) != 0);
	r29.s64 = r19.s32 >> 31;
	// srawi r30,r18,31
	xer.ca = (r18.s32 < 0) & ((r18.u32 & 0x7FFFFFFF) != 0);
	r30.s64 = r18.s32 >> 31;
	// not r9,r5
	ctx.r9.u64 = ~ctx.r5.u64;
	// not r11,r11
	r11.u64 = ~r11.u64;
	// not r4,r10
	ctx.r4.u64 = ~ctx.r10.u64;
	// xor r28,r10,r9
	r28.u64 = ctx.r10.u64 ^ ctx.r9.u64;
	// xor r5,r5,r11
	ctx.r5.u64 = ctx.r5.u64 ^ r11.u64;
	// xor r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 ^ r11.u64;
	// and r28,r28,r7
	r28.u64 = r28.u64 & ctx.r7.u64;
	// and r5,r5,r6
	ctx.r5.u64 = ctx.r5.u64 & ctx.r6.u64;
	// and r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 & ctx.r8.u64;
	// or r28,r28,r5
	r28.u64 = r28.u64 | ctx.r5.u64;
	// lwz r5,684(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 684);
	// not r3,r3
	ctx.r3.u64 = ~ctx.r3.u64;
	// or r28,r28,r10
	r28.u64 = r28.u64 | ctx.r10.u64;
	// and r10,r8,r4
	ctx.r10.u64 = ctx.r8.u64 & ctx.r4.u64;
	// and r26,r7,r3
	r26.u64 = ctx.r7.u64 & ctx.r3.u64;
	// not r30,r30
	r30.u64 = ~r30.u64;
	// not r29,r29
	r29.u64 = ~r29.u64;
	// and r26,r26,r9
	r26.u64 = r26.u64 & ctx.r9.u64;
	// and r10,r10,r30
	ctx.r10.u64 = ctx.r10.u64 & r30.u64;
	// and r25,r6,r29
	r25.u64 = ctx.r6.u64 & r29.u64;
	// and r8,r8,r3
	ctx.r8.u64 = ctx.r8.u64 & ctx.r3.u64;
	// and r7,r7,r29
	ctx.r7.u64 = ctx.r7.u64 & r29.u64;
	// or r10,r10,r26
	ctx.r10.u64 = ctx.r10.u64 | r26.u64;
	// and r26,r25,r11
	r26.u64 = r25.u64 & r11.u64;
	// and r11,r8,r11
	r11.u64 = ctx.r8.u64 & r11.u64;
	// and r7,r7,r4
	ctx.r7.u64 = ctx.r7.u64 & ctx.r4.u64;
	// and r8,r6,r30
	ctx.r8.u64 = ctx.r6.u64 & r30.u64;
	// or r11,r7,r11
	r11.u64 = ctx.r7.u64 | r11.u64;
	// and r9,r8,r9
	ctx.r9.u64 = ctx.r8.u64 & ctx.r9.u64;
	// or r10,r10,r26
	ctx.r10.u64 = ctx.r10.u64 | r26.u64;
	// or r11,r11,r9
	r11.u64 = r11.u64 | ctx.r9.u64;
	// subf r9,r10,r5
	ctx.r9.s64 = ctx.r5.s64 - ctx.r10.s64;
	// subf r8,r5,r11
	ctx.r8.s64 = r11.s64 - ctx.r5.s64;
	// subf r7,r11,r10
	ctx.r7.s64 = ctx.r10.s64 - r11.s64;
	// srawi r9,r9,31
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x7FFFFFFF) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 31;
	// srawi r8,r8,31
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7FFFFFFF) != 0);
	ctx.r8.s64 = ctx.r8.s32 >> 31;
	// srawi r7,r7,31
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x7FFFFFFF) != 0);
	ctx.r7.s64 = ctx.r7.s32 >> 31;
	// eqv r8,r8,r9
	// eqv r9,r7,r9
	// and r7,r5,r8
	ctx.r7.u64 = ctx.r5.u64 & ctx.r8.u64;
	// or r8,r8,r9
	ctx.r8.u64 = ctx.r8.u64 | ctx.r9.u64;
	// and r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 & ctx.r9.u64;
	// andc r11,r11,r8
	r11.u64 = r11.u64 & ~ctx.r8.u64;
	// or r11,r11,r7
	r11.u64 = r11.u64 | ctx.r7.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addze r8,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	ctx.r8.s64 = temp.s64;
	// b 0x827393d0
	goto loc_827393D0;
loc_827390D8:
	// addi r11,r5,-1
	r11.s64 = ctx.r5.s64 + -1;
	// mr r24,r16
	r24.u64 = r16.u64;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bgt cr6,0x827393c8
	if (cr6.gt) goto loc_827393C8;
	// lis r12,-32140
	r12.s64 = -2106327040;
	// addi r12,r12,-28416
	r12.s64 = r12.s64 + -28416;
	// rlwinm r0,r11,2,0,29
	r0.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_82739110;
	case 1:
		goto loc_8273911C;
	case 2:
		goto loc_82739148;
	case 3:
		goto loc_827391CC;
	default:
		__builtin_unreachable();
	}
	// lwz r19,-28400(r19)
	r19.u64 = PPC_LOAD_U32(r19.u32 + -28400);
	// lwz r19,-28388(r19)
	r19.u64 = PPC_LOAD_U32(r19.u32 + -28388);
	// lwz r19,-28344(r19)
	r19.u64 = PPC_LOAD_U32(r19.u32 + -28344);
	// lwz r19,-28212(r19)
	r19.u64 = PPC_LOAD_U32(r19.u32 + -28212);
loc_82739110:
	// lwz r27,656(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 656);
	// lwz r8,704(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 704);
	// b 0x827393d0
	goto loc_827393D0;
loc_8273911C:
	// lwz r11,660(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 660);
	// lwz r10,656(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 656);
	// add r9,r11,r10
	ctx.r9.u64 = r11.u64 + ctx.r10.u64;
	// lwz r10,704(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 704);
	// lwz r11,708(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 708);
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// srawi r10,r9,1
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r9.s32 >> 1;
	// addze r27,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	r27.s64 = temp.s64;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addze r8,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	ctx.r8.s64 = temp.s64;
	// b 0x827393d0
	goto loc_827393D0;
loc_82739148:
	// lwz r5,664(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 664);
	// lwz r11,656(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 656);
	// lwz r10,660(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 660);
	// lwz r8,704(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 704);
	// subf r30,r11,r5
	r30.s64 = ctx.r5.s64 - r11.s64;
	// lwz r7,708(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 708);
	// subf r9,r11,r10
	ctx.r9.s64 = ctx.r10.s64 - r11.s64;
	// lwz r4,712(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 712);
	// subf r3,r5,r10
	ctx.r3.s64 = ctx.r10.s64 - ctx.r5.s64;
	// subf r6,r8,r7
	ctx.r6.s64 = ctx.r7.s64 - ctx.r8.s64;
	// subf r29,r4,r7
	r29.s64 = ctx.r7.s64 - ctx.r4.s64;
	// xor r3,r3,r9
	ctx.r3.u64 = ctx.r3.u64 ^ ctx.r9.u64;
	// subf r28,r8,r4
	r28.s64 = ctx.r4.s64 - ctx.r8.s64;
	// xor r30,r30,r9
	r30.u64 = r30.u64 ^ ctx.r9.u64;
	// xor r29,r29,r6
	r29.u64 = r29.u64 ^ ctx.r6.u64;
	// srawi r9,r3,31
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x7FFFFFFF) != 0);
	ctx.r9.s64 = ctx.r3.s32 >> 31;
	// xor r28,r28,r6
	r28.u64 = r28.u64 ^ ctx.r6.u64;
	// srawi r6,r30,31
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x7FFFFFFF) != 0);
	ctx.r6.s64 = r30.s32 >> 31;
	// srawi r3,r29,31
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r29.s32 >> 31;
	// srawi r30,r28,31
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x7FFFFFFF) != 0);
	r30.s64 = r28.s32 >> 31;
	// and r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 & ctx.r9.u64;
	// or r9,r9,r6
	ctx.r9.u64 = ctx.r9.u64 | ctx.r6.u64;
	// and r7,r7,r3
	ctx.r7.u64 = ctx.r7.u64 & ctx.r3.u64;
	// or r3,r3,r30
	ctx.r3.u64 = ctx.r3.u64 | r30.u64;
	// andc r9,r5,r9
	ctx.r9.u64 = ctx.r5.u64 & ~ctx.r9.u64;
	// andc r5,r4,r3
	ctx.r5.u64 = ctx.r4.u64 & ~ctx.r3.u64;
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// and r11,r11,r6
	r11.u64 = r11.u64 & ctx.r6.u64;
	// or r9,r5,r7
	ctx.r9.u64 = ctx.r5.u64 | ctx.r7.u64;
	// and r8,r8,r30
	ctx.r8.u64 = ctx.r8.u64 & r30.u64;
	// or r27,r10,r11
	r27.u64 = ctx.r10.u64 | r11.u64;
	// or r8,r9,r8
	ctx.r8.u64 = ctx.r9.u64 | ctx.r8.u64;
	// b 0x827393d0
	goto loc_827393D0;
loc_827391CC:
	// lwz r10,660(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 660);
	// lwz r11,656(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 656);
	// lwz r9,664(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 664);
	// subf r8,r11,r10
	ctx.r8.s64 = ctx.r10.s64 - r11.s64;
	// lwz r29,668(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 668);
	// subf r7,r10,r9
	ctx.r7.s64 = ctx.r9.s64 - ctx.r10.s64;
	// subf r6,r9,r11
	ctx.r6.s64 = r11.s64 - ctx.r9.s64;
	// srawi r4,r8,31
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7FFFFFFF) != 0);
	ctx.r4.s64 = ctx.r8.s32 >> 31;
	// subf r8,r10,r11
	ctx.r8.s64 = r11.s64 - ctx.r10.s64;
	// srawi r30,r7,31
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x7FFFFFFF) != 0);
	r30.s64 = ctx.r7.s32 >> 31;
	// srawi r5,r6,31
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = ctx.r6.s32 >> 31;
	// lwz r6,712(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 712);
	// subf r7,r9,r10
	ctx.r7.s64 = ctx.r10.s64 - ctx.r9.s64;
	// srawi r27,r8,31
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7FFFFFFF) != 0);
	r27.s64 = ctx.r8.s32 >> 31;
	// subf r8,r11,r9
	ctx.r8.s64 = ctx.r9.s64 - r11.s64;
	// srawi r26,r7,31
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x7FFFFFFF) != 0);
	r26.s64 = ctx.r7.s32 >> 31;
	// lwz r7,708(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 708);
	// not r28,r4
	r28.u64 = ~ctx.r4.u64;
	// srawi r25,r8,31
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7FFFFFFF) != 0);
	r25.s64 = ctx.r8.s32 >> 31;
	// lwz r8,704(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 704);
	// not r5,r5
	ctx.r5.u64 = ~ctx.r5.u64;
	// not r3,r30
	ctx.r3.u64 = ~r30.u64;
	// and r17,r11,r28
	r17.u64 = r11.u64 & r28.u64;
	// not r27,r27
	r27.u64 = ~r27.u64;
	// not r25,r25
	r25.u64 = ~r25.u64;
	// xor r16,r4,r3
	r16.u64 = ctx.r4.u64 ^ ctx.r3.u64;
	// xor r15,r4,r5
	r15.u64 = ctx.r4.u64 ^ ctx.r5.u64;
	// and r4,r10,r27
	ctx.r4.u64 = ctx.r10.u64 & r27.u64;
	// and r17,r17,r25
	r17.u64 = r17.u64 & r25.u64;
	// and r25,r9,r25
	r25.u64 = ctx.r9.u64 & r25.u64;
	// and r28,r10,r28
	r28.u64 = ctx.r10.u64 & r28.u64;
	// not r26,r26
	r26.u64 = ~r26.u64;
	// and r4,r4,r3
	ctx.r4.u64 = ctx.r4.u64 & ctx.r3.u64;
	// and r3,r25,r3
	ctx.r3.u64 = r25.u64 & ctx.r3.u64;
	// and r28,r28,r26
	r28.u64 = r28.u64 & r26.u64;
	// xor r30,r30,r5
	r30.u64 = r30.u64 ^ ctx.r5.u64;
	// and r14,r9,r26
	r14.u64 = ctx.r9.u64 & r26.u64;
	// and r27,r11,r27
	r27.u64 = r11.u64 & r27.u64;
	// or r3,r28,r3
	ctx.r3.u64 = r28.u64 | ctx.r3.u64;
	// and r9,r30,r9
	ctx.r9.u64 = r30.u64 & ctx.r9.u64;
	// and r28,r16,r10
	r28.u64 = r16.u64 & ctx.r10.u64;
	// or r4,r17,r4
	ctx.r4.u64 = r17.u64 | ctx.r4.u64;
	// and r17,r14,r5
	r17.u64 = r14.u64 & ctx.r5.u64;
	// and r5,r27,r5
	ctx.r5.u64 = r27.u64 & ctx.r5.u64;
	// and r11,r15,r11
	r11.u64 = r15.u64 & r11.u64;
	// or r9,r28,r9
	ctx.r9.u64 = r28.u64 | ctx.r9.u64;
	// or r4,r4,r17
	ctx.r4.u64 = ctx.r4.u64 | r17.u64;
	// or r10,r3,r5
	ctx.r10.u64 = ctx.r3.u64 | ctx.r5.u64;
	// or r5,r9,r11
	ctx.r5.u64 = ctx.r9.u64 | r11.u64;
	// subf r11,r4,r29
	r11.s64 = r29.s64 - ctx.r4.s64;
	// subf r9,r29,r10
	ctx.r9.s64 = ctx.r10.s64 - r29.s64;
	// subf r3,r10,r4
	ctx.r3.s64 = ctx.r4.s64 - ctx.r10.s64;
	// srawi r11,r11,31
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7FFFFFFF) != 0);
	r11.s64 = r11.s32 >> 31;
	// srawi r9,r9,31
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x7FFFFFFF) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 31;
	// srawi r3,r3,31
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = ctx.r3.s32 >> 31;
	// eqv r9,r9,r11
	// eqv r11,r3,r11
	// and r3,r29,r9
	ctx.r3.u64 = r29.u64 & ctx.r9.u64;
	// or r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 | r11.u64;
	// and r11,r4,r11
	r11.u64 = ctx.r4.u64 & r11.u64;
	// andc r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 & ~ctx.r9.u64;
	// subf r23,r8,r7
	r23.s64 = ctx.r7.s64 - ctx.r8.s64;
	// or r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 | ctx.r3.u64;
	// subf r22,r7,r6
	r22.s64 = ctx.r6.s64 - ctx.r7.s64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// subf r21,r6,r8
	r21.s64 = ctx.r8.s64 - ctx.r6.s64;
	// add r11,r11,r5
	r11.u64 = r11.u64 + ctx.r5.u64;
	// subf r20,r7,r8
	r20.s64 = ctx.r8.s64 - ctx.r7.s64;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// subf r19,r6,r7
	r19.s64 = ctx.r7.s64 - ctx.r6.s64;
	// addze r27,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r27.s64 = temp.s64;
	// srawi r10,r23,31
	xer.ca = (r23.s32 < 0) & ((r23.u32 & 0x7FFFFFFF) != 0);
	ctx.r10.s64 = r23.s32 >> 31;
	// srawi r5,r22,31
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x7FFFFFFF) != 0);
	ctx.r5.s64 = r22.s32 >> 31;
	// srawi r11,r21,31
	xer.ca = (r21.s32 < 0) & ((r21.u32 & 0x7FFFFFFF) != 0);
	r11.s64 = r21.s32 >> 31;
	// subf r18,r8,r6
	r18.s64 = ctx.r6.s64 - ctx.r8.s64;
	// srawi r3,r20,31
	xer.ca = (r20.s32 < 0) & ((r20.u32 & 0x7FFFFFFF) != 0);
	ctx.r3.s64 = r20.s32 >> 31;
	// srawi r30,r19,31
	xer.ca = (r19.s32 < 0) & ((r19.u32 & 0x7FFFFFFF) != 0);
	r30.s64 = r19.s32 >> 31;
	// srawi r29,r18,31
	xer.ca = (r18.s32 < 0) & ((r18.u32 & 0x7FFFFFFF) != 0);
	r29.s64 = r18.s32 >> 31;
	// not r9,r5
	ctx.r9.u64 = ~ctx.r5.u64;
	// not r11,r11
	r11.u64 = ~r11.u64;
	// not r4,r10
	ctx.r4.u64 = ~ctx.r10.u64;
	// xor r28,r10,r9
	r28.u64 = ctx.r10.u64 ^ ctx.r9.u64;
	// xor r5,r5,r11
	ctx.r5.u64 = ctx.r5.u64 ^ r11.u64;
	// xor r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 ^ r11.u64;
	// and r28,r28,r7
	r28.u64 = r28.u64 & ctx.r7.u64;
	// and r5,r5,r6
	ctx.r5.u64 = ctx.r5.u64 & ctx.r6.u64;
	// and r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 & ctx.r8.u64;
	// or r28,r28,r5
	r28.u64 = r28.u64 | ctx.r5.u64;
	// lwz r5,716(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 716);
	// not r3,r3
	ctx.r3.u64 = ~ctx.r3.u64;
	// not r30,r30
	r30.u64 = ~r30.u64;
	// not r29,r29
	r29.u64 = ~r29.u64;
	// or r28,r28,r10
	r28.u64 = r28.u64 | ctx.r10.u64;
	// and r10,r8,r4
	ctx.r10.u64 = ctx.r8.u64 & ctx.r4.u64;
	// and r26,r7,r3
	r26.u64 = ctx.r7.u64 & ctx.r3.u64;
	// and r25,r6,r30
	r25.u64 = ctx.r6.u64 & r30.u64;
	// and r7,r7,r4
	ctx.r7.u64 = ctx.r7.u64 & ctx.r4.u64;
	// and r6,r6,r29
	ctx.r6.u64 = ctx.r6.u64 & r29.u64;
	// and r26,r26,r9
	r26.u64 = r26.u64 & ctx.r9.u64;
	// and r10,r10,r29
	ctx.r10.u64 = ctx.r10.u64 & r29.u64;
	// and r8,r8,r3
	ctx.r8.u64 = ctx.r8.u64 & ctx.r3.u64;
	// and r7,r7,r30
	ctx.r7.u64 = ctx.r7.u64 & r30.u64;
	// and r9,r6,r9
	ctx.r9.u64 = ctx.r6.u64 & ctx.r9.u64;
	// and r25,r25,r11
	r25.u64 = r25.u64 & r11.u64;
	// or r10,r10,r26
	ctx.r10.u64 = ctx.r10.u64 | r26.u64;
	// and r11,r8,r11
	r11.u64 = ctx.r8.u64 & r11.u64;
	// or r9,r7,r9
	ctx.r9.u64 = ctx.r7.u64 | ctx.r9.u64;
	// or r10,r10,r25
	ctx.r10.u64 = ctx.r10.u64 | r25.u64;
	// or r11,r9,r11
	r11.u64 = ctx.r9.u64 | r11.u64;
	// subf r9,r10,r5
	ctx.r9.s64 = ctx.r5.s64 - ctx.r10.s64;
	// subf r8,r5,r11
	ctx.r8.s64 = r11.s64 - ctx.r5.s64;
	// subf r7,r11,r10
	ctx.r7.s64 = ctx.r10.s64 - r11.s64;
	// srawi r9,r9,31
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x7FFFFFFF) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 31;
	// srawi r8,r8,31
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7FFFFFFF) != 0);
	ctx.r8.s64 = ctx.r8.s32 >> 31;
	// srawi r7,r7,31
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x7FFFFFFF) != 0);
	ctx.r7.s64 = ctx.r7.s32 >> 31;
	// eqv r8,r8,r9
	// eqv r9,r7,r9
	// and r7,r5,r8
	ctx.r7.u64 = ctx.r5.u64 & ctx.r8.u64;
	// or r8,r8,r9
	ctx.r8.u64 = ctx.r8.u64 | ctx.r9.u64;
	// and r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 & ctx.r9.u64;
	// andc r11,r11,r8
	r11.u64 = r11.u64 & ~ctx.r8.u64;
	// or r11,r11,r7
	r11.u64 = r11.u64 | ctx.r7.u64;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// addze r8,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	ctx.r8.s64 = temp.s64;
	// b 0x827393d0
	goto loc_827393D0;
loc_827393C8:
	// lwz r27,600(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 600);
	// lwz r8,852(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 852);
loc_827393D0:
	// clrlwi r10,r27,30
	ctx.r10.u64 = r27.u32 & 0x3;
	// lbz r9,31(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 31);
	// clrlwi r11,r8,30
	r11.u64 = ctx.r8.u32 & 0x3;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// addi r7,r11,1
	ctx.r7.s64 = r11.s64 + 1;
	// srawi r11,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	r11.s64 = ctx.r10.s32 >> 2;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// srawi r9,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	ctx.r9.s64 = r11.s32 >> 1;
	// srawi r11,r7,2
	xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0x3) != 0);
	r11.s64 = ctx.r7.s32 >> 2;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// stw r9,600(r1)
	PPC_STORE_U32(ctx.r1.u32 + 600, ctx.r9.u32);
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// beq cr6,0x8273944c
	if (cr6.eq) goto loc_8273944C;
	// clrlwi r10,r9,31
	ctx.r10.u64 = ctx.r9.u32 & 0x1;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x8273942c
	if (cr6.eq) goto loc_8273942C;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x82739424
	if (!cr6.gt) goto loc_82739424;
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// b 0x82739428
	goto loc_82739428;
loc_82739424:
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
loc_82739428:
	// stw r9,600(r1)
	PPC_STORE_U32(ctx.r1.u32 + 600, ctx.r9.u32);
loc_8273942C:
	// clrlwi r10,r11,31
	ctx.r10.u64 = r11.u32 & 0x1;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x8273944c
	if (cr6.eq) goto loc_8273944C;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x82739448
	if (!cr6.gt) goto loc_82739448;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// b 0x8273944c
	goto loc_8273944C;
loc_82739448:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_8273944C:
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// beq cr6,0x82739468
	if (cr6.eq) goto loc_82739468;
	// addi r10,r31,1516
	ctx.r10.s64 = r31.s64 + 1516;
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// addi r11,r11,-2
	r11.s64 = r11.s64 + -2;
loc_82739468:
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r3,2756(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2756);
	// lwz r8,120(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// add r10,r10,r24
	ctx.r10.u64 = ctx.r10.u64 + r24.u64;
	// lwz r6,192(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 192);
	// addi r11,r3,4
	r11.s64 = ctx.r3.s64 + 4;
	// rlwinm r4,r10,16,0,15
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 16) & 0xFFFF0000;
	// srawi r10,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 1;
	// lwz r7,0(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// clrlwi r11,r9,16
	r11.u64 = ctx.r9.u32 & 0xFFFF;
	// rlwinm r9,r8,16,0,15
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 16) & 0xFFFF0000;
	// stw r10,852(r1)
	PPC_STORE_U32(ctx.r1.u32 + 852, ctx.r10.u32);
	// rlwinm r10,r10,16,0,15
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 16) & 0xFFFF0000;
	// rlwinm r5,r7,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r7,116(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// or r4,r4,r11
	ctx.r4.u64 = ctx.r4.u64 | r11.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// or r9,r9,r7
	ctx.r9.u64 = ctx.r9.u64 | ctx.r7.u64;
	// rlwinm r10,r11,1,15,15
	ctx.r10.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0x10000;
	// rlwinm r9,r9,5,0,26
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 5) & 0xFFFFFFE0;
	// subf r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	// stwx r4,r5,r6
	PPC_STORE_U32(ctx.r5.u32 + ctx.r6.u32, ctx.r4.u32);
	// lwz r6,1428(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 1428);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// subf r6,r11,r6
	ctx.r6.s64 = ctx.r6.s64 - r11.s64;
	// addis r10,r10,24
	ctx.r10.s64 = ctx.r10.s64 + 1572864;
	// subf r6,r9,r6
	ctx.r6.s64 = ctx.r6.s64 - ctx.r9.s64;
	// addi r10,r10,20
	ctx.r10.s64 = ctx.r10.s64 + 20;
	// or r10,r10,r6
	ctx.r10.u64 = ctx.r10.u64 | ctx.r6.u64;
	// rlwinm r10,r10,0,0,16
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFF8000;
	// rlwinm r10,r10,0,16,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFF8000FFFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82739588
	if (cr6.eq) goto loc_82739588;
	// addi r10,r31,52
	ctx.r10.s64 = r31.s64 + 52;
	// addi r9,r31,50
	ctx.r9.s64 = r31.s64 + 50;
	// rlwinm r6,r7,3,0,28
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 3) & 0xFFFFFFF8;
	// rlwinm r7,r8,3,0,28
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// lhz r5,0(r10)
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// extsh r10,r11
	ctx.r10.s64 = r11.s16;
	// lhz r4,0(r9)
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// srawi r9,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	ctx.r9.s64 = r11.s32 >> 16;
	// rotlwi r11,r5,2
	r11.u64 = __builtin_rotateleft32(ctx.r5.u32, 2);
	// rotlwi r5,r4,2
	ctx.r5.u64 = __builtin_rotateleft32(ctx.r4.u32, 2);
	// addi r4,r11,1
	ctx.r4.s64 = r11.s64 + 1;
	// srawi r11,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	r11.s64 = ctx.r10.s32 >> 2;
	// srawi r8,r9,2
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3) != 0);
	ctx.r8.s64 = ctx.r9.s32 >> 2;
	// add r11,r11,r6
	r11.u64 = r11.u64 + ctx.r6.u64;
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// cmpwi cr6,r11,-8
	cr6.compare<int32_t>(r11.s32, -8, xer);
	// bge cr6,0x82739540
	if (!cr6.lt) goto loc_82739540;
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r10,r11,r10
	ctx.r10.s64 = ctx.r10.s64 - r11.s64;
	// b 0x82739554
	goto loc_82739554;
loc_82739540:
	// cmpw cr6,r11,r5
	cr6.compare<int32_t>(r11.s32, ctx.r5.s32, xer);
	// ble cr6,0x82739554
	if (!cr6.gt) goto loc_82739554;
	// subf r11,r11,r5
	r11.s64 = ctx.r5.s64 - r11.s64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
loc_82739554:
	// cmpwi cr6,r8,-9
	cr6.compare<int32_t>(ctx.r8.s32, -9, xer);
	// bge cr6,0x8273956c
	if (!cr6.lt) goto loc_8273956C;
	// addi r11,r8,9
	r11.s64 = ctx.r8.s64 + 9;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r9,r11,r9
	ctx.r9.s64 = ctx.r9.s64 - r11.s64;
	// b 0x82739580
	goto loc_82739580;
loc_8273956C:
	// cmpw cr6,r8,r4
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r4.s32, xer);
	// ble cr6,0x82739580
	if (!cr6.gt) goto loc_82739580;
	// subf r11,r8,r4
	r11.s64 = ctx.r4.s64 - ctx.r8.s64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r11,r9
	ctx.r9.u64 = r11.u64 + ctx.r9.u64;
loc_82739580:
	// rlwimi r10,r9,16,0,15
	ctx.r10.u64 = (__builtin_rotateleft32(ctx.r9.u32, 16) & 0xFFFF0000) | (ctx.r10.u64 & 0xFFFFFFFF0000FFFF);
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_82739588:
	// addi r10,r3,12
	ctx.r10.s64 = ctx.r3.s64 + 12;
	// lhz r4,92(r31)
	ctx.r4.u64 = PPC_LOAD_U16(r31.u32 + 92);
	// srawi r9,r11,16
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0xFFFF) != 0);
	ctx.r9.s64 = r11.s32 >> 16;
	// lwz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// extsh r10,r11
	ctx.r10.s64 = r11.s16;
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// srawi r11,r9,2
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x3) != 0);
	r11.s64 = ctx.r9.s32 >> 2;
	// srawi r7,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	ctx.r7.s64 = ctx.r10.s32 >> 2;
	// mullw r11,r11,r4
	r11.s64 = int64_t(r11.s32) * int64_t(ctx.r4.s32);
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// bne cr6,0x827395dc
	if (!cr6.eq) goto loc_827395DC;
	// cmpwi cr6,r24,1
	cr6.compare<int32_t>(r24.s32, 1, xer);
	// bne cr6,0x827395d0
	if (!cr6.eq) goto loc_827395D0;
	// lwz r6,336(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 336);
	// lwz r7,340(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 340);
	// b 0x827395f8
	goto loc_827395F8;
loc_827395D0:
	// lwz r6,312(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 312);
	// lwz r7,316(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 316);
	// b 0x827395f8
	goto loc_827395F8;
loc_827395DC:
	// cmpwi cr6,r24,1
	cr6.compare<int32_t>(r24.s32, 1, xer);
	// bne cr6,0x827395f0
	if (!cr6.eq) goto loc_827395F0;
	// lwz r6,384(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 384);
	// lwz r7,388(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 388);
	// b 0x827395f8
	goto loc_827395F8;
loc_827395F0:
	// lwz r6,360(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + 360);
	// lwz r7,364(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 364);
loc_827395F8:
	// add r30,r7,r11
	r30.u64 = ctx.r7.u64 + r11.u64;
	// add r3,r6,r11
	ctx.r3.u64 = ctx.r6.u64 + r11.u64;
	// lwz r11,412(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 412);
	// add r28,r11,r8
	r28.u64 = r11.u64 + ctx.r8.u64;
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r3
	// addi r11,r4,128
	r11.s64 = ctx.r4.s64 + 128;
	// dcbt r11,r3
	// addi r11,r4,64
	r11.s64 = ctx.r4.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r3
	// rlwinm r11,r4,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r4,r11
	r11.u64 = ctx.r4.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// addi r11,r4,32
	r11.s64 = ctx.r4.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r3
	// rlwinm r11,r4,2,0,29
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r4,r11
	r11.u64 = ctx.r4.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r4,1,0,30
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r4,r11
	r11.u64 = ctx.r4.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r11,r4,3,0,28
	r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 3) & 0xFFFFFFF8;
	// subf r11,r4,r11
	r11.s64 = r11.s64 - ctx.r4.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r3
	// rlwinm r10,r10,2,28,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xC;
	// lwz r11,408(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 408);
	// clrlwi r9,r9,30
	ctx.r9.u64 = ctx.r9.u32 & 0x3;
	// add r5,r11,r8
	ctx.r5.u64 = r11.u64 + ctx.r8.u64;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r10,r10,182
	ctx.r10.s64 = ctx.r10.s64 + 182;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// rlwinm r29,r10,2,0,29
	r29.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r29,r31
	r11.u64 = PPC_LOAD_U32(r29.u32 + r31.u32);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lhz r4,92(r31)
	ctx.r4.u64 = PPC_LOAD_U16(r31.u32 + 92);
	// li r11,128
	r11.s64 = 128;
	// dcbt r11,r30
	// addi r11,r4,128
	r11.s64 = ctx.r4.s64 + 128;
	// dcbt r11,r30
	// addi r11,r4,64
	r11.s64 = ctx.r4.s64 + 64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// dcbt r11,r30
	// rotlwi r11,r4,1
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 1);
	// add r11,r4,r11
	r11.u64 = ctx.r4.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r30
	// addi r11,r4,32
	r11.s64 = ctx.r4.s64 + 32;
	// rlwinm r11,r11,2,0,29
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// dcbt r11,r30
	// rotlwi r11,r4,2
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 2);
	// add r11,r4,r11
	r11.u64 = ctx.r4.u64 + r11.u64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r30
	// rotlwi r11,r4,1
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 1);
	// add r11,r4,r11
	r11.u64 = ctx.r4.u64 + r11.u64;
	// rlwinm r11,r11,1,0,30
	r11.u64 = __builtin_rotateleft64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r30
	// rotlwi r11,r4,3
	r11.u64 = __builtin_rotateleft32(ctx.r4.u32, 3);
	// subf r11,r4,r11
	r11.s64 = r11.s64 - ctx.r4.s64;
	// addi r11,r11,128
	r11.s64 = r11.s64 + 128;
	// dcbt r11,r30
	// lwzx r11,r29,r31
	r11.u64 = PPC_LOAD_U32(r29.u32 + r31.u32);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
loc_82739720:
	// li r7,0
	ctx.r7.s64 = 0;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82739730:
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// addi r3,r11,1
	ctx.r3.s64 = r11.s64 + 1;
	// lwz r11,436(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 436);
	// addi r11,r11,20
	r11.s64 = r11.s64 + 20;
	// stw r3,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r3.u32);
	// stw r11,436(r1)
	PPC_STORE_U32(ctx.r1.u32 + 436, r11.u32);
	// lwz r4,2756(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2756);
	// addi r11,r4,4
	r11.s64 = ctx.r4.s64 + 4;
	// addi r9,r4,18
	ctx.r9.s64 = ctx.r4.s64 + 18;
	// addi r5,r4,8
	ctx.r5.s64 = ctx.r4.s64 + 8;
	// lwz r10,0(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// addi r29,r10,2
	r29.s64 = ctx.r10.s64 + 2;
	// lwz r6,0(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r10,r4,12
	ctx.r10.s64 = ctx.r4.s64 + 12;
	// lhz r8,0(r9)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r9.u32 + 0);
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// lwz r7,0(r5)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	// addi r30,r8,2
	r30.s64 = ctx.r8.s64 + 2;
	// addi r7,r7,16
	ctx.r7.s64 = ctx.r7.s64 + 16;
	// stw r29,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r29.u32);
	// lwz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// stw r6,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r6.u32);
	// addi r8,r8,8
	ctx.r8.s64 = ctx.r8.s64 + 8;
	// lwz r11,632(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 632);
	// sth r30,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, r30.u16);
	// stw r7,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, ctx.r7.u32);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// stw r8,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r8.u32);
	// blt cr6,0x82733d80
	if (cr6.lt) goto loc_82733D80;
loc_827397A4:
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// lwz r6,2756(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 2756);
	// addi r4,r11,1
	ctx.r4.s64 = r11.s64 + 1;
	// lwz r30,608(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 608);
	// addi r11,r6,16
	r11.s64 = ctx.r6.s64 + 16;
	// lwz r3,884(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 884);
	// add r3,r3,r30
	ctx.r3.u64 = ctx.r3.u64 + r30.u64;
	// lwz r30,596(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 596);
	// lwz r8,0(r6)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r6.u32 + 0);
	// stw r4,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r4.u32);
	// lhz r7,0(r11)
	ctx.r7.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// addi r7,r7,2
	ctx.r7.s64 = ctx.r7.s64 + 2;
	// stw r3,608(r1)
	PPC_STORE_U32(ctx.r1.u32 + 608, ctx.r3.u32);
	// lwz r3,872(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 872);
	// add r3,r3,r30
	ctx.r3.u64 = ctx.r3.u64 + r30.u64;
	// sth r7,0(r11)
	PPC_STORE_U16(r11.u32 + 0, ctx.r7.u16);
	// addi r11,r31,50
	r11.s64 = r31.s64 + 50;
	// stw r3,596(r1)
	PPC_STORE_U32(ctx.r1.u32 + 596, ctx.r3.u32);
	// lhz r11,0(r11)
	r11.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// stw r11,0(r6)
	PPC_STORE_U32(ctx.r6.u32 + 0, r11.u32);
	// lwz r11,864(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 864);
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// blt cr6,0x82733d58
	if (cr6.lt) goto loc_82733D58;
loc_82739804:
	// addi r4,r1,1024
	ctx.r4.s64 = ctx.r1.s64 + 1024;
	// lwz r3,880(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 880);
	// bl 0x8271d940
	sub_8271D940(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,2720
	ctx.r1.s64 = ctx.r1.s64 + 2720;
	// b 0x8239bd10
	return;
}

